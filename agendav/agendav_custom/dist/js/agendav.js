(function(global, factory) {
    typeof exports === "object" && typeof module !== "undefined" ? module.exports = factory() : typeof define === "function" && define.amd ? define(factory) : global.moment = factory();
})(this, function() {
    "use strict";
    var hookCallback;
    function utils_hooks__hooks() {
        return hookCallback.apply(null, arguments);
    }
    function setHookCallback(callback) {
        hookCallback = callback;
    }
    function isArray(input) {
        return input instanceof Array || Object.prototype.toString.call(input) === "[object Array]";
    }
    function isObject(input) {
        return input != null && Object.prototype.toString.call(input) === "[object Object]";
    }
    function isObjectEmpty(obj) {
        var k;
        for (k in obj) {
            return false;
        }
        return true;
    }
    function isDate(input) {
        return input instanceof Date || Object.prototype.toString.call(input) === "[object Date]";
    }
    function map(arr, fn) {
        var res = [], i;
        for (i = 0; i < arr.length; ++i) {
            res.push(fn(arr[i], i));
        }
        return res;
    }
    function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
    }
    function extend(a, b) {
        for (var i in b) {
            if (hasOwnProp(b, i)) {
                a[i] = b[i];
            }
        }
        if (hasOwnProp(b, "toString")) {
            a.toString = b.toString;
        }
        if (hasOwnProp(b, "valueOf")) {
            a.valueOf = b.valueOf;
        }
        return a;
    }
    function create_utc__createUTC(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, true).utc();
    }
    function defaultParsingFlags() {
        return {
            empty: false,
            unusedTokens: [],
            unusedInput: [],
            overflow: -2,
            charsLeftOver: 0,
            nullInput: false,
            invalidMonth: null,
            invalidFormat: false,
            userInvalidated: false,
            iso: false,
            parsedDateParts: [],
            meridiem: null
        };
    }
    function getParsingFlags(m) {
        if (m._pf == null) {
            m._pf = defaultParsingFlags();
        }
        return m._pf;
    }
    var some;
    if (Array.prototype.some) {
        some = Array.prototype.some;
    } else {
        some = function(fun) {
            var t = Object(this);
            var len = t.length >>> 0;
            for (var i = 0; i < len; i++) {
                if (i in t && fun.call(this, t[i], i, t)) {
                    return true;
                }
            }
            return false;
        };
    }
    function valid__isValid(m) {
        if (m._isValid == null) {
            var flags = getParsingFlags(m);
            var parsedParts = some.call(flags.parsedDateParts, function(i) {
                return i != null;
            });
            var isNowValid = !isNaN(m._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidMonth && !flags.invalidWeekday && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);
            if (m._strict) {
                isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === undefined;
            }
            if (Object.isFrozen == null || !Object.isFrozen(m)) {
                m._isValid = isNowValid;
            } else {
                return isNowValid;
            }
        }
        return m._isValid;
    }
    function valid__createInvalid(flags) {
        var m = create_utc__createUTC(NaN);
        if (flags != null) {
            extend(getParsingFlags(m), flags);
        } else {
            getParsingFlags(m).userInvalidated = true;
        }
        return m;
    }
    function isUndefined(input) {
        return input === void 0;
    }
    var momentProperties = utils_hooks__hooks.momentProperties = [];
    function copyConfig(to, from) {
        var i, prop, val;
        if (!isUndefined(from._isAMomentObject)) {
            to._isAMomentObject = from._isAMomentObject;
        }
        if (!isUndefined(from._i)) {
            to._i = from._i;
        }
        if (!isUndefined(from._f)) {
            to._f = from._f;
        }
        if (!isUndefined(from._l)) {
            to._l = from._l;
        }
        if (!isUndefined(from._strict)) {
            to._strict = from._strict;
        }
        if (!isUndefined(from._tzm)) {
            to._tzm = from._tzm;
        }
        if (!isUndefined(from._isUTC)) {
            to._isUTC = from._isUTC;
        }
        if (!isUndefined(from._offset)) {
            to._offset = from._offset;
        }
        if (!isUndefined(from._pf)) {
            to._pf = getParsingFlags(from);
        }
        if (!isUndefined(from._locale)) {
            to._locale = from._locale;
        }
        if (momentProperties.length > 0) {
            for (i in momentProperties) {
                prop = momentProperties[i];
                val = from[prop];
                if (!isUndefined(val)) {
                    to[prop] = val;
                }
            }
        }
        return to;
    }
    var updateInProgress = false;
    function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        if (updateInProgress === false) {
            updateInProgress = true;
            utils_hooks__hooks.updateOffset(this);
            updateInProgress = false;
        }
    }
    function isMoment(obj) {
        return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
    }
    function absFloor(number) {
        if (number < 0) {
            return Math.ceil(number) || 0;
        } else {
            return Math.floor(number);
        }
    }
    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion, value = 0;
        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
            value = absFloor(coercedNumber);
        }
        return value;
    }
    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length), lengthDiff = Math.abs(array1.length - array2.length), diffs = 0, i;
        for (i = 0; i < len; i++) {
            if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {
                diffs++;
            }
        }
        return diffs + lengthDiff;
    }
    function warn(msg) {
        if (utils_hooks__hooks.suppressDeprecationWarnings === false && typeof console !== "undefined" && console.warn) {
            console.warn("Deprecation warning: " + msg);
        }
    }
    function deprecate(msg, fn) {
        var firstTime = true;
        return extend(function() {
            if (utils_hooks__hooks.deprecationHandler != null) {
                utils_hooks__hooks.deprecationHandler(null, msg);
            }
            if (firstTime) {
                var args = [];
                var arg;
                for (var i = 0; i < arguments.length; i++) {
                    arg = "";
                    if (typeof arguments[i] === "object") {
                        arg += "\n[" + i + "] ";
                        for (var key in arguments[0]) {
                            arg += key + ": " + arguments[0][key] + ", ";
                        }
                        arg = arg.slice(0, -2);
                    } else {
                        arg = arguments[i];
                    }
                    args.push(arg);
                }
                warn(msg + "\nArguments: " + Array.prototype.slice.call(args).join("") + "\n" + new Error().stack);
                firstTime = false;
            }
            return fn.apply(this, arguments);
        }, fn);
    }
    var deprecations = {};
    function deprecateSimple(name, msg) {
        if (utils_hooks__hooks.deprecationHandler != null) {
            utils_hooks__hooks.deprecationHandler(name, msg);
        }
        if (!deprecations[name]) {
            warn(msg);
            deprecations[name] = true;
        }
    }
    utils_hooks__hooks.suppressDeprecationWarnings = false;
    utils_hooks__hooks.deprecationHandler = null;
    function isFunction(input) {
        return input instanceof Function || Object.prototype.toString.call(input) === "[object Function]";
    }
    function locale_set__set(config) {
        var prop, i;
        for (i in config) {
            prop = config[i];
            if (isFunction(prop)) {
                this[i] = prop;
            } else {
                this["_" + i] = prop;
            }
        }
        this._config = config;
        this._ordinalParseLenient = new RegExp(this._ordinalParse.source + "|" + /\d{1,2}/.source);
    }
    function mergeConfigs(parentConfig, childConfig) {
        var res = extend({}, parentConfig), prop;
        for (prop in childConfig) {
            if (hasOwnProp(childConfig, prop)) {
                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                    res[prop] = {};
                    extend(res[prop], parentConfig[prop]);
                    extend(res[prop], childConfig[prop]);
                } else if (childConfig[prop] != null) {
                    res[prop] = childConfig[prop];
                } else {
                    delete res[prop];
                }
            }
        }
        for (prop in parentConfig) {
            if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject(parentConfig[prop])) {
                res[prop] = extend({}, res[prop]);
            }
        }
        return res;
    }
    function Locale(config) {
        if (config != null) {
            this.set(config);
        }
    }
    var keys;
    if (Object.keys) {
        keys = Object.keys;
    } else {
        keys = function(obj) {
            var i, res = [];
            for (i in obj) {
                if (hasOwnProp(obj, i)) {
                    res.push(i);
                }
            }
            return res;
        };
    }
    var defaultCalendar = {
        sameDay: "[Today at] LT",
        nextDay: "[Tomorrow at] LT",
        nextWeek: "dddd [at] LT",
        lastDay: "[Yesterday at] LT",
        lastWeek: "[Last] dddd [at] LT",
        sameElse: "L"
    };
    function locale_calendar__calendar(key, mom, now) {
        var output = this._calendar[key] || this._calendar["sameElse"];
        return isFunction(output) ? output.call(mom, now) : output;
    }
    var defaultLongDateFormat = {
        LTS: "h:mm:ss A",
        LT: "h:mm A",
        L: "MM/DD/YYYY",
        LL: "MMMM D, YYYY",
        LLL: "MMMM D, YYYY h:mm A",
        LLLL: "dddd, MMMM D, YYYY h:mm A"
    };
    function longDateFormat(key) {
        var format = this._longDateFormat[key], formatUpper = this._longDateFormat[key.toUpperCase()];
        if (format || !formatUpper) {
            return format;
        }
        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function(val) {
            return val.slice(1);
        });
        return this._longDateFormat[key];
    }
    var defaultInvalidDate = "Invalid date";
    function invalidDate() {
        return this._invalidDate;
    }
    var defaultOrdinal = "%d";
    var defaultOrdinalParse = /\d{1,2}/;
    function ordinal(number) {
        return this._ordinal.replace("%d", number);
    }
    var defaultRelativeTime = {
        future: "in %s",
        past: "%s ago",
        s: "a few seconds",
        m: "a minute",
        mm: "%d minutes",
        h: "an hour",
        hh: "%d hours",
        d: "a day",
        dd: "%d days",
        M: "a month",
        MM: "%d months",
        y: "a year",
        yy: "%d years"
    };
    function relative__relativeTime(number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return isFunction(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
    }
    function pastFuture(diff, output) {
        var format = this._relativeTime[diff > 0 ? "future" : "past"];
        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
    }
    var aliases = {};
    function addUnitAlias(unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + "s"] = aliases[shorthand] = unit;
    }
    function normalizeUnits(units) {
        return typeof units === "string" ? aliases[units] || aliases[units.toLowerCase()] : undefined;
    }
    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {}, normalizedProp, prop;
        for (prop in inputObject) {
            if (hasOwnProp(inputObject, prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                    normalizedInput[normalizedProp] = inputObject[prop];
                }
            }
        }
        return normalizedInput;
    }
    var priorities = {};
    function addUnitPriority(unit, priority) {
        priorities[unit] = priority;
    }
    function getPrioritizedUnits(unitsObj) {
        var units = [];
        for (var u in unitsObj) {
            units.push({
                unit: u,
                priority: priorities[u]
            });
        }
        units.sort(function(a, b) {
            return a.priority - b.priority;
        });
        return units;
    }
    function makeGetSet(unit, keepTime) {
        return function(value) {
            if (value != null) {
                get_set__set(this, unit, value);
                utils_hooks__hooks.updateOffset(this, keepTime);
                return this;
            } else {
                return get_set__get(this, unit);
            }
        };
    }
    function get_set__get(mom, unit) {
        return mom.isValid() ? mom._d["get" + (mom._isUTC ? "UTC" : "") + unit]() : NaN;
    }
    function get_set__set(mom, unit, value) {
        if (mom.isValid()) {
            mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](value);
        }
    }
    function stringGet(units) {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
            return this[units]();
        }
        return this;
    }
    function stringSet(units, value) {
        if (typeof units === "object") {
            units = normalizeObjectUnits(units);
            var prioritized = getPrioritizedUnits(units);
            for (var i = 0; i < prioritized.length; i++) {
                this[prioritized[i].unit](units[prioritized[i].unit]);
            }
        } else {
            units = normalizeUnits(units);
            if (isFunction(this[units])) {
                return this[units](value);
            }
        }
        return this;
    }
    function zeroFill(number, targetLength, forceSign) {
        var absNumber = "" + Math.abs(number), zerosToFill = targetLength - absNumber.length, sign = number >= 0;
        return (sign ? forceSign ? "+" : "" : "-") + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
    }
    var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;
    var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;
    var formatFunctions = {};
    var formatTokenFunctions = {};
    function addFormatToken(token, padded, ordinal, callback) {
        var func = callback;
        if (typeof callback === "string") {
            func = function() {
                return this[callback]();
            };
        }
        if (token) {
            formatTokenFunctions[token] = func;
        }
        if (padded) {
            formatTokenFunctions[padded[0]] = function() {
                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
            };
        }
        if (ordinal) {
            formatTokenFunctions[ordinal] = function() {
                return this.localeData().ordinal(func.apply(this, arguments), token);
            };
        }
    }
    function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
            return input.replace(/^\[|\]$/g, "");
        }
        return input.replace(/\\/g, "");
    }
    function makeFormatFunction(format) {
        var array = format.match(formattingTokens), i, length;
        for (i = 0, length = array.length; i < length; i++) {
            if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
            } else {
                array[i] = removeFormattingTokens(array[i]);
            }
        }
        return function(mom) {
            var output = "", i;
            for (i = 0; i < length; i++) {
                output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];
            }
            return output;
        };
    }
    function formatMoment(m, format) {
        if (!m.isValid()) {
            return m.localeData().invalidDate();
        }
        format = expandFormat(format, m.localeData());
        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);
        return formatFunctions[format](m);
    }
    function expandFormat(format, locale) {
        var i = 5;
        function replaceLongDateFormatTokens(input) {
            return locale.longDateFormat(input) || input;
        }
        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
            localFormattingTokens.lastIndex = 0;
            i -= 1;
        }
        return format;
    }
    var match1 = /\d/;
    var match2 = /\d\d/;
    var match3 = /\d{3}/;
    var match4 = /\d{4}/;
    var match6 = /[+-]?\d{6}/;
    var match1to2 = /\d\d?/;
    var match3to4 = /\d\d\d\d?/;
    var match5to6 = /\d\d\d\d\d\d?/;
    var match1to3 = /\d{1,3}/;
    var match1to4 = /\d{1,4}/;
    var match1to6 = /[+-]?\d{1,6}/;
    var matchUnsigned = /\d+/;
    var matchSigned = /[+-]?\d+/;
    var matchOffset = /Z|[+-]\d\d:?\d\d/gi;
    var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi;
    var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/;
    var matchWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;
    var regexes = {};
    function addRegexToken(token, regex, strictRegex) {
        regexes[token] = isFunction(regex) ? regex : function(isStrict, localeData) {
            return isStrict && strictRegex ? strictRegex : regex;
        };
    }
    function getParseRegexForToken(token, config) {
        if (!hasOwnProp(regexes, token)) {
            return new RegExp(unescapeFormat(token));
        }
        return regexes[token](config._strict, config._locale);
    }
    function unescapeFormat(s) {
        return regexEscape(s.replace("\\", "").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function(matched, p1, p2, p3, p4) {
            return p1 || p2 || p3 || p4;
        }));
    }
    function regexEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
    }
    var tokens = {};
    function addParseToken(token, callback) {
        var i, func = callback;
        if (typeof token === "string") {
            token = [ token ];
        }
        if (typeof callback === "number") {
            func = function(input, array) {
                array[callback] = toInt(input);
            };
        }
        for (i = 0; i < token.length; i++) {
            tokens[token[i]] = func;
        }
    }
    function addWeekParseToken(token, callback) {
        addParseToken(token, function(input, array, config, token) {
            config._w = config._w || {};
            callback(input, config._w, config, token);
        });
    }
    function addTimeToArrayFromToken(token, input, config) {
        if (input != null && hasOwnProp(tokens, token)) {
            tokens[token](input, config._a, config, token);
        }
    }
    var YEAR = 0;
    var MONTH = 1;
    var DATE = 2;
    var HOUR = 3;
    var MINUTE = 4;
    var SECOND = 5;
    var MILLISECOND = 6;
    var WEEK = 7;
    var WEEKDAY = 8;
    var indexOf;
    if (Array.prototype.indexOf) {
        indexOf = Array.prototype.indexOf;
    } else {
        indexOf = function(o) {
            var i;
            for (i = 0; i < this.length; ++i) {
                if (this[i] === o) {
                    return i;
                }
            }
            return -1;
        };
    }
    function daysInMonth(year, month) {
        return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
    }
    addFormatToken("M", [ "MM", 2 ], "Mo", function() {
        return this.month() + 1;
    });
    addFormatToken("MMM", 0, 0, function(format) {
        return this.localeData().monthsShort(this, format);
    });
    addFormatToken("MMMM", 0, 0, function(format) {
        return this.localeData().months(this, format);
    });
    addUnitAlias("month", "M");
    addUnitPriority("month", 8);
    addRegexToken("M", match1to2);
    addRegexToken("MM", match1to2, match2);
    addRegexToken("MMM", function(isStrict, locale) {
        return locale.monthsShortRegex(isStrict);
    });
    addRegexToken("MMMM", function(isStrict, locale) {
        return locale.monthsRegex(isStrict);
    });
    addParseToken([ "M", "MM" ], function(input, array) {
        array[MONTH] = toInt(input) - 1;
    });
    addParseToken([ "MMM", "MMMM" ], function(input, array, config, token) {
        var month = config._locale.monthsParse(input, token, config._strict);
        if (month != null) {
            array[MONTH] = month;
        } else {
            getParsingFlags(config).invalidMonth = input;
        }
    });
    var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
    var defaultLocaleMonths = "January_February_March_April_May_June_July_August_September_October_November_December".split("_");
    function localeMonths(m, format) {
        if (!m) {
            return this._months;
        }
        return isArray(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? "format" : "standalone"][m.month()];
    }
    var defaultLocaleMonthsShort = "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_");
    function localeMonthsShort(m, format) {
        if (!m) {
            return this._monthsShort;
        }
        return isArray(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format) ? "format" : "standalone"][m.month()];
    }
    function units_month__handleStrictParse(monthName, format, strict) {
        var i, ii, mom, llc = monthName.toLocaleLowerCase();
        if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
            for (i = 0; i < 12; ++i) {
                mom = create_utc__createUTC([ 2e3, i ]);
                this._shortMonthsParse[i] = this.monthsShort(mom, "").toLocaleLowerCase();
                this._longMonthsParse[i] = this.months(mom, "").toLocaleLowerCase();
            }
        }
        if (strict) {
            if (format === "MMM") {
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === "MMM") {
                ii = indexOf.call(this._shortMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }
    function localeMonthsParse(monthName, format, strict) {
        var i, mom, regex;
        if (this._monthsParseExact) {
            return units_month__handleStrictParse.call(this, monthName, format, strict);
        }
        if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
        }
        for (i = 0; i < 12; i++) {
            mom = create_utc__createUTC([ 2e3, i ]);
            if (strict && !this._longMonthsParse[i]) {
                this._longMonthsParse[i] = new RegExp("^" + this.months(mom, "").replace(".", "") + "$", "i");
                this._shortMonthsParse[i] = new RegExp("^" + this.monthsShort(mom, "").replace(".", "") + "$", "i");
            }
            if (!strict && !this._monthsParse[i]) {
                regex = "^" + this.months(mom, "") + "|^" + this.monthsShort(mom, "");
                this._monthsParse[i] = new RegExp(regex.replace(".", ""), "i");
            }
            if (strict && format === "MMMM" && this._longMonthsParse[i].test(monthName)) {
                return i;
            } else if (strict && format === "MMM" && this._shortMonthsParse[i].test(monthName)) {
                return i;
            } else if (!strict && this._monthsParse[i].test(monthName)) {
                return i;
            }
        }
    }
    function setMonth(mom, value) {
        var dayOfMonth;
        if (!mom.isValid()) {
            return mom;
        }
        if (typeof value === "string") {
            if (/^\d+$/.test(value)) {
                value = toInt(value);
            } else {
                value = mom.localeData().monthsParse(value);
                if (typeof value !== "number") {
                    return mom;
                }
            }
        }
        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d["set" + (mom._isUTC ? "UTC" : "") + "Month"](value, dayOfMonth);
        return mom;
    }
    function getSetMonth(value) {
        if (value != null) {
            setMonth(this, value);
            utils_hooks__hooks.updateOffset(this, true);
            return this;
        } else {
            return get_set__get(this, "Month");
        }
    }
    function getDaysInMonth() {
        return daysInMonth(this.year(), this.month());
    }
    var defaultMonthsShortRegex = matchWord;
    function monthsShortRegex(isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, "_monthsRegex")) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsShortStrictRegex;
            } else {
                return this._monthsShortRegex;
            }
        } else {
            if (!hasOwnProp(this, "_monthsShortRegex")) {
                this._monthsShortRegex = defaultMonthsShortRegex;
            }
            return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
        }
    }
    var defaultMonthsRegex = matchWord;
    function monthsRegex(isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, "_monthsRegex")) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsStrictRegex;
            } else {
                return this._monthsRegex;
            }
        } else {
            if (!hasOwnProp(this, "_monthsRegex")) {
                this._monthsRegex = defaultMonthsRegex;
            }
            return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
        }
    }
    function computeMonthsParse() {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }
        var shortPieces = [], longPieces = [], mixedPieces = [], i, mom;
        for (i = 0; i < 12; i++) {
            mom = create_utc__createUTC([ 2e3, i ]);
            shortPieces.push(this.monthsShort(mom, ""));
            longPieces.push(this.months(mom, ""));
            mixedPieces.push(this.months(mom, ""));
            mixedPieces.push(this.monthsShort(mom, ""));
        }
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 12; i++) {
            shortPieces[i] = regexEscape(shortPieces[i]);
            longPieces[i] = regexEscape(longPieces[i]);
        }
        for (i = 0; i < 24; i++) {
            mixedPieces[i] = regexEscape(mixedPieces[i]);
        }
        this._monthsRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
        this._monthsShortRegex = this._monthsRegex;
        this._monthsStrictRegex = new RegExp("^(" + longPieces.join("|") + ")", "i");
        this._monthsShortStrictRegex = new RegExp("^(" + shortPieces.join("|") + ")", "i");
    }
    addFormatToken("Y", 0, 0, function() {
        var y = this.year();
        return y <= 9999 ? "" + y : "+" + y;
    });
    addFormatToken(0, [ "YY", 2 ], 0, function() {
        return this.year() % 100;
    });
    addFormatToken(0, [ "YYYY", 4 ], 0, "year");
    addFormatToken(0, [ "YYYYY", 5 ], 0, "year");
    addFormatToken(0, [ "YYYYYY", 6, true ], 0, "year");
    addUnitAlias("year", "y");
    addUnitPriority("year", 1);
    addRegexToken("Y", matchSigned);
    addRegexToken("YY", match1to2, match2);
    addRegexToken("YYYY", match1to4, match4);
    addRegexToken("YYYYY", match1to6, match6);
    addRegexToken("YYYYYY", match1to6, match6);
    addParseToken([ "YYYYY", "YYYYYY" ], YEAR);
    addParseToken("YYYY", function(input, array) {
        array[YEAR] = input.length === 2 ? utils_hooks__hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken("YY", function(input, array) {
        array[YEAR] = utils_hooks__hooks.parseTwoDigitYear(input);
    });
    addParseToken("Y", function(input, array) {
        array[YEAR] = parseInt(input, 10);
    });
    function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }
    function isLeapYear(year) {
        return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
    }
    utils_hooks__hooks.parseTwoDigitYear = function(input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2e3);
    };
    var getSetYear = makeGetSet("FullYear", true);
    function getIsLeapYear() {
        return isLeapYear(this.year());
    }
    function createDate(y, m, d, h, M, s, ms) {
        var date = new Date(y, m, d, h, M, s, ms);
        if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {
            date.setFullYear(y);
        }
        return date;
    }
    function createUTCDate(y) {
        var date = new Date(Date.UTC.apply(null, arguments));
        if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {
            date.setUTCFullYear(y);
        }
        return date;
    }
    function firstWeekOffset(year, dow, doy) {
        var fwd = 7 + dow - doy, fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
        return -fwdlw + fwd - 1;
    }
    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
        var localWeekday = (7 + weekday - dow) % 7, weekOffset = firstWeekOffset(year, dow, doy), dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset, resYear, resDayOfYear;
        if (dayOfYear <= 0) {
            resYear = year - 1;
            resDayOfYear = daysInYear(resYear) + dayOfYear;
        } else if (dayOfYear > daysInYear(year)) {
            resYear = year + 1;
            resDayOfYear = dayOfYear - daysInYear(year);
        } else {
            resYear = year;
            resDayOfYear = dayOfYear;
        }
        return {
            year: resYear,
            dayOfYear: resDayOfYear
        };
    }
    function weekOfYear(mom, dow, doy) {
        var weekOffset = firstWeekOffset(mom.year(), dow, doy), week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1, resWeek, resYear;
        if (week < 1) {
            resYear = mom.year() - 1;
            resWeek = week + weeksInYear(resYear, dow, doy);
        } else if (week > weeksInYear(mom.year(), dow, doy)) {
            resWeek = week - weeksInYear(mom.year(), dow, doy);
            resYear = mom.year() + 1;
        } else {
            resYear = mom.year();
            resWeek = week;
        }
        return {
            week: resWeek,
            year: resYear
        };
    }
    function weeksInYear(year, dow, doy) {
        var weekOffset = firstWeekOffset(year, dow, doy), weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
    }
    addFormatToken("w", [ "ww", 2 ], "wo", "week");
    addFormatToken("W", [ "WW", 2 ], "Wo", "isoWeek");
    addUnitAlias("week", "w");
    addUnitAlias("isoWeek", "W");
    addUnitPriority("week", 5);
    addUnitPriority("isoWeek", 5);
    addRegexToken("w", match1to2);
    addRegexToken("ww", match1to2, match2);
    addRegexToken("W", match1to2);
    addRegexToken("WW", match1to2, match2);
    addWeekParseToken([ "w", "ww", "W", "WW" ], function(input, week, config, token) {
        week[token.substr(0, 1)] = toInt(input);
    });
    function localeWeek(mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
    }
    var defaultLocaleWeek = {
        dow: 0,
        doy: 6
    };
    function localeFirstDayOfWeek() {
        return this._week.dow;
    }
    function localeFirstDayOfYear() {
        return this._week.doy;
    }
    function getSetWeek(input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, "d");
    }
    function getSetISOWeek(input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, "d");
    }
    addFormatToken("d", 0, "do", "day");
    addFormatToken("dd", 0, 0, function(format) {
        return this.localeData().weekdaysMin(this, format);
    });
    addFormatToken("ddd", 0, 0, function(format) {
        return this.localeData().weekdaysShort(this, format);
    });
    addFormatToken("dddd", 0, 0, function(format) {
        return this.localeData().weekdays(this, format);
    });
    addFormatToken("e", 0, 0, "weekday");
    addFormatToken("E", 0, 0, "isoWeekday");
    addUnitAlias("day", "d");
    addUnitAlias("weekday", "e");
    addUnitAlias("isoWeekday", "E");
    addUnitPriority("day", 11);
    addUnitPriority("weekday", 11);
    addUnitPriority("isoWeekday", 11);
    addRegexToken("d", match1to2);
    addRegexToken("e", match1to2);
    addRegexToken("E", match1to2);
    addRegexToken("dd", function(isStrict, locale) {
        return locale.weekdaysMinRegex(isStrict);
    });
    addRegexToken("ddd", function(isStrict, locale) {
        return locale.weekdaysShortRegex(isStrict);
    });
    addRegexToken("dddd", function(isStrict, locale) {
        return locale.weekdaysRegex(isStrict);
    });
    addWeekParseToken([ "dd", "ddd", "dddd" ], function(input, week, config, token) {
        var weekday = config._locale.weekdaysParse(input, token, config._strict);
        if (weekday != null) {
            week.d = weekday;
        } else {
            getParsingFlags(config).invalidWeekday = input;
        }
    });
    addWeekParseToken([ "d", "e", "E" ], function(input, week, config, token) {
        week[token] = toInt(input);
    });
    function parseWeekday(input, locale) {
        if (typeof input !== "string") {
            return input;
        }
        if (!isNaN(input)) {
            return parseInt(input, 10);
        }
        input = locale.weekdaysParse(input);
        if (typeof input === "number") {
            return input;
        }
        return null;
    }
    function parseIsoWeekday(input, locale) {
        if (typeof input === "string") {
            return locale.weekdaysParse(input) % 7 || 7;
        }
        return isNaN(input) ? null : input;
    }
    var defaultLocaleWeekdays = "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_");
    function localeWeekdays(m, format) {
        if (!m) {
            return this._weekdays;
        }
        return isArray(this._weekdays) ? this._weekdays[m.day()] : this._weekdays[this._weekdays.isFormat.test(format) ? "format" : "standalone"][m.day()];
    }
    var defaultLocaleWeekdaysShort = "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_");
    function localeWeekdaysShort(m) {
        return m ? this._weekdaysShort[m.day()] : this._weekdaysShort;
    }
    var defaultLocaleWeekdaysMin = "Su_Mo_Tu_We_Th_Fr_Sa".split("_");
    function localeWeekdaysMin(m) {
        return m ? this._weekdaysMin[m.day()] : this._weekdaysMin;
    }
    function day_of_week__handleStrictParse(weekdayName, format, strict) {
        var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._minWeekdaysParse = [];
            for (i = 0; i < 7; ++i) {
                mom = create_utc__createUTC([ 2e3, 1 ]).day(i);
                this._minWeekdaysParse[i] = this.weekdaysMin(mom, "").toLocaleLowerCase();
                this._shortWeekdaysParse[i] = this.weekdaysShort(mom, "").toLocaleLowerCase();
                this._weekdaysParse[i] = this.weekdays(mom, "").toLocaleLowerCase();
            }
        }
        if (strict) {
            if (format === "dddd") {
                ii = indexOf.call(this._weekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === "ddd") {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === "dddd") {
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === "ddd") {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }
    function localeWeekdaysParse(weekdayName, format, strict) {
        var i, mom, regex;
        if (this._weekdaysParseExact) {
            return day_of_week__handleStrictParse.call(this, weekdayName, format, strict);
        }
        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._minWeekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._fullWeekdaysParse = [];
        }
        for (i = 0; i < 7; i++) {
            mom = create_utc__createUTC([ 2e3, 1 ]).day(i);
            if (strict && !this._fullWeekdaysParse[i]) {
                this._fullWeekdaysParse[i] = new RegExp("^" + this.weekdays(mom, "").replace(".", ".?") + "$", "i");
                this._shortWeekdaysParse[i] = new RegExp("^" + this.weekdaysShort(mom, "").replace(".", ".?") + "$", "i");
                this._minWeekdaysParse[i] = new RegExp("^" + this.weekdaysMin(mom, "").replace(".", ".?") + "$", "i");
            }
            if (!this._weekdaysParse[i]) {
                regex = "^" + this.weekdays(mom, "") + "|^" + this.weekdaysShort(mom, "") + "|^" + this.weekdaysMin(mom, "");
                this._weekdaysParse[i] = new RegExp(regex.replace(".", ""), "i");
            }
            if (strict && format === "dddd" && this._fullWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (strict && format === "ddd" && this._shortWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (strict && format === "dd" && this._minWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
                return i;
            }
        }
    }
    function getSetDayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (input != null) {
            input = parseWeekday(input, this.localeData());
            return this.add(input - day, "d");
        } else {
            return day;
        }
    }
    function getSetLocaleDayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, "d");
    }
    function getSetISODayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        if (input != null) {
            var weekday = parseIsoWeekday(input, this.localeData());
            return this.day(this.day() % 7 ? weekday : weekday - 7);
        } else {
            return this.day() || 7;
        }
    }
    var defaultWeekdaysRegex = matchWord;
    function weekdaysRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, "_weekdaysRegex")) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysStrictRegex;
            } else {
                return this._weekdaysRegex;
            }
        } else {
            if (!hasOwnProp(this, "_weekdaysRegex")) {
                this._weekdaysRegex = defaultWeekdaysRegex;
            }
            return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
        }
    }
    var defaultWeekdaysShortRegex = matchWord;
    function weekdaysShortRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, "_weekdaysRegex")) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysShortStrictRegex;
            } else {
                return this._weekdaysShortRegex;
            }
        } else {
            if (!hasOwnProp(this, "_weekdaysShortRegex")) {
                this._weekdaysShortRegex = defaultWeekdaysShortRegex;
            }
            return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
        }
    }
    var defaultWeekdaysMinRegex = matchWord;
    function weekdaysMinRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, "_weekdaysRegex")) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysMinStrictRegex;
            } else {
                return this._weekdaysMinRegex;
            }
        } else {
            if (!hasOwnProp(this, "_weekdaysMinRegex")) {
                this._weekdaysMinRegex = defaultWeekdaysMinRegex;
            }
            return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
        }
    }
    function computeWeekdaysParse() {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }
        var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [], i, mom, minp, shortp, longp;
        for (i = 0; i < 7; i++) {
            mom = create_utc__createUTC([ 2e3, 1 ]).day(i);
            minp = this.weekdaysMin(mom, "");
            shortp = this.weekdaysShort(mom, "");
            longp = this.weekdays(mom, "");
            minPieces.push(minp);
            shortPieces.push(shortp);
            longPieces.push(longp);
            mixedPieces.push(minp);
            mixedPieces.push(shortp);
            mixedPieces.push(longp);
        }
        minPieces.sort(cmpLenRev);
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 7; i++) {
            shortPieces[i] = regexEscape(shortPieces[i]);
            longPieces[i] = regexEscape(longPieces[i]);
            mixedPieces[i] = regexEscape(mixedPieces[i]);
        }
        this._weekdaysRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
        this._weekdaysShortRegex = this._weekdaysRegex;
        this._weekdaysMinRegex = this._weekdaysRegex;
        this._weekdaysStrictRegex = new RegExp("^(" + longPieces.join("|") + ")", "i");
        this._weekdaysShortStrictRegex = new RegExp("^(" + shortPieces.join("|") + ")", "i");
        this._weekdaysMinStrictRegex = new RegExp("^(" + minPieces.join("|") + ")", "i");
    }
    function hFormat() {
        return this.hours() % 12 || 12;
    }
    function kFormat() {
        return this.hours() || 24;
    }
    addFormatToken("H", [ "HH", 2 ], 0, "hour");
    addFormatToken("h", [ "hh", 2 ], 0, hFormat);
    addFormatToken("k", [ "kk", 2 ], 0, kFormat);
    addFormatToken("hmm", 0, 0, function() {
        return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2);
    });
    addFormatToken("hmmss", 0, 0, function() {
        return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
    });
    addFormatToken("Hmm", 0, 0, function() {
        return "" + this.hours() + zeroFill(this.minutes(), 2);
    });
    addFormatToken("Hmmss", 0, 0, function() {
        return "" + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
    });
    function meridiem(token, lowercase) {
        addFormatToken(token, 0, 0, function() {
            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
        });
    }
    meridiem("a", true);
    meridiem("A", false);
    addUnitAlias("hour", "h");
    addUnitPriority("hour", 13);
    function matchMeridiem(isStrict, locale) {
        return locale._meridiemParse;
    }
    addRegexToken("a", matchMeridiem);
    addRegexToken("A", matchMeridiem);
    addRegexToken("H", match1to2);
    addRegexToken("h", match1to2);
    addRegexToken("HH", match1to2, match2);
    addRegexToken("hh", match1to2, match2);
    addRegexToken("hmm", match3to4);
    addRegexToken("hmmss", match5to6);
    addRegexToken("Hmm", match3to4);
    addRegexToken("Hmmss", match5to6);
    addParseToken([ "H", "HH" ], HOUR);
    addParseToken([ "a", "A" ], function(input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
    });
    addParseToken([ "h", "hh" ], function(input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
    });
    addParseToken("hmm", function(input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken("hmmss", function(input, array, config) {
        var pos1 = input.length - 4;
        var pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken("Hmm", function(input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
    });
    addParseToken("Hmmss", function(input, array, config) {
        var pos1 = input.length - 4;
        var pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
    });
    function localeIsPM(input) {
        return (input + "").toLowerCase().charAt(0) === "p";
    }
    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
    function localeMeridiem(hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? "pm" : "PM";
        } else {
            return isLower ? "am" : "AM";
        }
    }
    var getSetHour = makeGetSet("Hours", true);
    var baseConfig = {
        calendar: defaultCalendar,
        longDateFormat: defaultLongDateFormat,
        invalidDate: defaultInvalidDate,
        ordinal: defaultOrdinal,
        ordinalParse: defaultOrdinalParse,
        relativeTime: defaultRelativeTime,
        months: defaultLocaleMonths,
        monthsShort: defaultLocaleMonthsShort,
        week: defaultLocaleWeek,
        weekdays: defaultLocaleWeekdays,
        weekdaysMin: defaultLocaleWeekdaysMin,
        weekdaysShort: defaultLocaleWeekdaysShort,
        meridiemParse: defaultLocaleMeridiemParse
    };
    var locales = {};
    var globalLocale;
    function normalizeLocale(key) {
        return key ? key.toLowerCase().replace("_", "-") : key;
    }
    function chooseLocale(names) {
        var i = 0, j, next, locale, split;
        while (i < names.length) {
            split = normalizeLocale(names[i]).split("-");
            j = split.length;
            next = normalizeLocale(names[i + 1]);
            next = next ? next.split("-") : null;
            while (j > 0) {
                locale = loadLocale(split.slice(0, j).join("-"));
                if (locale) {
                    return locale;
                }
                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                    break;
                }
                j--;
            }
            i++;
        }
        return null;
    }
    function loadLocale(name) {
        var oldLocale = null;
        if (!locales[name] && typeof module !== "undefined" && module && module.exports) {
            try {
                oldLocale = globalLocale._abbr;
                require("./locale/" + name);
                locale_locales__getSetGlobalLocale(oldLocale);
            } catch (e) {}
        }
        return locales[name];
    }
    function locale_locales__getSetGlobalLocale(key, values) {
        var data;
        if (key) {
            if (isUndefined(values)) {
                data = locale_locales__getLocale(key);
            } else {
                data = defineLocale(key, values);
            }
            if (data) {
                globalLocale = data;
            }
        }
        return globalLocale._abbr;
    }
    function defineLocale(name, config) {
        if (config !== null) {
            var parentConfig = baseConfig;
            config.abbr = name;
            if (locales[name] != null) {
                deprecateSimple("defineLocaleOverride", "use moment.updateLocale(localeName, config) to change " + "an existing locale. moment.defineLocale(localeName, " + "config) should only be used for creating a new locale " + "See http://momentjs.com/guides/#/warnings/define-locale/ for more info.");
                parentConfig = locales[name]._config;
            } else if (config.parentLocale != null) {
                if (locales[config.parentLocale] != null) {
                    parentConfig = locales[config.parentLocale]._config;
                } else {
                    deprecateSimple("parentLocaleUndefined", "specified parentLocale is not defined yet. See http://momentjs.com/guides/#/warnings/parent-locale/");
                }
            }
            locales[name] = new Locale(mergeConfigs(parentConfig, config));
            locale_locales__getSetGlobalLocale(name);
            return locales[name];
        } else {
            delete locales[name];
            return null;
        }
    }
    function updateLocale(name, config) {
        if (config != null) {
            var locale, parentConfig = baseConfig;
            if (locales[name] != null) {
                parentConfig = locales[name]._config;
            }
            config = mergeConfigs(parentConfig, config);
            locale = new Locale(config);
            locale.parentLocale = locales[name];
            locales[name] = locale;
            locale_locales__getSetGlobalLocale(name);
        } else {
            if (locales[name] != null) {
                if (locales[name].parentLocale != null) {
                    locales[name] = locales[name].parentLocale;
                } else if (locales[name] != null) {
                    delete locales[name];
                }
            }
        }
        return locales[name];
    }
    function locale_locales__getLocale(key) {
        var locale;
        if (key && key._locale && key._locale._abbr) {
            key = key._locale._abbr;
        }
        if (!key) {
            return globalLocale;
        }
        if (!isArray(key)) {
            locale = loadLocale(key);
            if (locale) {
                return locale;
            }
            key = [ key ];
        }
        return chooseLocale(key);
    }
    function locale_locales__listLocales() {
        return keys(locales);
    }
    function checkOverflow(m) {
        var overflow;
        var a = m._a;
        if (a && getParsingFlags(m).overflow === -2) {
            overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;
            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                overflow = DATE;
            }
            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
                overflow = WEEK;
            }
            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
                overflow = WEEKDAY;
            }
            getParsingFlags(m).overflow = overflow;
        }
        return m;
    }
    var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/;
    var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/;
    var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;
    var isoDates = [ [ "YYYYYY-MM-DD", /[+-]\d{6}-\d\d-\d\d/ ], [ "YYYY-MM-DD", /\d{4}-\d\d-\d\d/ ], [ "GGGG-[W]WW-E", /\d{4}-W\d\d-\d/ ], [ "GGGG-[W]WW", /\d{4}-W\d\d/, false ], [ "YYYY-DDD", /\d{4}-\d{3}/ ], [ "YYYY-MM", /\d{4}-\d\d/, false ], [ "YYYYYYMMDD", /[+-]\d{10}/ ], [ "YYYYMMDD", /\d{8}/ ], [ "GGGG[W]WWE", /\d{4}W\d{3}/ ], [ "GGGG[W]WW", /\d{4}W\d{2}/, false ], [ "YYYYDDD", /\d{7}/ ] ];
    var isoTimes = [ [ "HH:mm:ss.SSSS", /\d\d:\d\d:\d\d\.\d+/ ], [ "HH:mm:ss,SSSS", /\d\d:\d\d:\d\d,\d+/ ], [ "HH:mm:ss", /\d\d:\d\d:\d\d/ ], [ "HH:mm", /\d\d:\d\d/ ], [ "HHmmss.SSSS", /\d\d\d\d\d\d\.\d+/ ], [ "HHmmss,SSSS", /\d\d\d\d\d\d,\d+/ ], [ "HHmmss", /\d\d\d\d\d\d/ ], [ "HHmm", /\d\d\d\d/ ], [ "HH", /\d\d/ ] ];
    var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;
    function configFromISO(config) {
        var i, l, string = config._i, match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string), allowTime, dateFormat, timeFormat, tzFormat;
        if (match) {
            getParsingFlags(config).iso = true;
            for (i = 0, l = isoDates.length; i < l; i++) {
                if (isoDates[i][1].exec(match[1])) {
                    dateFormat = isoDates[i][0];
                    allowTime = isoDates[i][2] !== false;
                    break;
                }
            }
            if (dateFormat == null) {
                config._isValid = false;
                return;
            }
            if (match[3]) {
                for (i = 0, l = isoTimes.length; i < l; i++) {
                    if (isoTimes[i][1].exec(match[3])) {
                        timeFormat = (match[2] || " ") + isoTimes[i][0];
                        break;
                    }
                }
                if (timeFormat == null) {
                    config._isValid = false;
                    return;
                }
            }
            if (!allowTime && timeFormat != null) {
                config._isValid = false;
                return;
            }
            if (match[4]) {
                if (tzRegex.exec(match[4])) {
                    tzFormat = "Z";
                } else {
                    config._isValid = false;
                    return;
                }
            }
            config._f = dateFormat + (timeFormat || "") + (tzFormat || "");
            configFromStringAndFormat(config);
        } else {
            config._isValid = false;
        }
    }
    function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);
        if (matched !== null) {
            config._d = new Date(+matched[1]);
            return;
        }
        configFromISO(config);
        if (config._isValid === false) {
            delete config._isValid;
            utils_hooks__hooks.createFromInputFallback(config);
        }
    }
    utils_hooks__hooks.createFromInputFallback = deprecate("value provided is not in a recognized ISO format. moment construction falls back to js Date(), " + "which is not reliable across all browsers and versions. Non ISO date formats are " + "discouraged and will be removed in an upcoming major release. Please refer to " + "http://momentjs.com/guides/#/warnings/js-date/ for more info.", function(config) {
        config._d = new Date(config._i + (config._useUTC ? " UTC" : ""));
    });
    function defaults(a, b, c) {
        if (a != null) {
            return a;
        }
        if (b != null) {
            return b;
        }
        return c;
    }
    function currentDateArray(config) {
        var nowValue = new Date(utils_hooks__hooks.now());
        if (config._useUTC) {
            return [ nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate() ];
        }
        return [ nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate() ];
    }
    function configFromArray(config) {
        var i, date, input = [], currentDate, yearToUse;
        if (config._d) {
            return;
        }
        currentDate = currentDateArray(config);
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
            dayOfYearFromWeekInfo(config);
        }
        if (config._dayOfYear) {
            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
            if (config._dayOfYear > daysInYear(yearToUse)) {
                getParsingFlags(config)._overflowDayOfYear = true;
            }
            date = createUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
            config._a[i] = input[i] = currentDate[i];
        }
        for (;i < 7; i++) {
            config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];
        }
        if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
            config._nextDay = true;
            config._a[HOUR] = 0;
        }
        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
        if (config._tzm != null) {
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }
        if (config._nextDay) {
            config._a[HOUR] = 24;
        }
    }
    function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;
        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
            dow = 1;
            doy = 4;
            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(local__createLocal(), 1, 4).year);
            week = defaults(w.W, 1);
            weekday = defaults(w.E, 1);
            if (weekday < 1 || weekday > 7) {
                weekdayOverflow = true;
            }
        } else {
            dow = config._locale._week.dow;
            doy = config._locale._week.doy;
            weekYear = defaults(w.gg, config._a[YEAR], weekOfYear(local__createLocal(), dow, doy).year);
            week = defaults(w.w, 1);
            if (w.d != null) {
                weekday = w.d;
                if (weekday < 0 || weekday > 6) {
                    weekdayOverflow = true;
                }
            } else if (w.e != null) {
                weekday = w.e + dow;
                if (w.e < 0 || w.e > 6) {
                    weekdayOverflow = true;
                }
            } else {
                weekday = dow;
            }
        }
        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
            getParsingFlags(config)._overflowWeeks = true;
        } else if (weekdayOverflow != null) {
            getParsingFlags(config)._overflowWeekday = true;
        } else {
            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
            config._a[YEAR] = temp.year;
            config._dayOfYear = temp.dayOfYear;
        }
    }
    utils_hooks__hooks.ISO_8601 = function() {};
    function configFromStringAndFormat(config) {
        if (config._f === utils_hooks__hooks.ISO_8601) {
            configFromISO(config);
            return;
        }
        config._a = [];
        getParsingFlags(config).empty = true;
        var string = "" + config._i, i, parsedInput, tokens, token, skipped, stringLength = string.length, totalParsedInputLength = 0;
        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];
        for (i = 0; i < tokens.length; i++) {
            token = tokens[i];
            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
            if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                    getParsingFlags(config).unusedInput.push(skipped);
                }
                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                totalParsedInputLength += parsedInput.length;
            }
            if (formatTokenFunctions[token]) {
                if (parsedInput) {
                    getParsingFlags(config).empty = false;
                } else {
                    getParsingFlags(config).unusedTokens.push(token);
                }
                addTimeToArrayFromToken(token, parsedInput, config);
            } else if (config._strict && !parsedInput) {
                getParsingFlags(config).unusedTokens.push(token);
            }
        }
        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) {
            getParsingFlags(config).unusedInput.push(string);
        }
        if (config._a[HOUR] <= 12 && getParsingFlags(config).bigHour === true && config._a[HOUR] > 0) {
            getParsingFlags(config).bigHour = undefined;
        }
        getParsingFlags(config).parsedDateParts = config._a.slice(0);
        getParsingFlags(config).meridiem = config._meridiem;
        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);
        configFromArray(config);
        checkOverflow(config);
    }
    function meridiemFixWrap(locale, hour, meridiem) {
        var isPm;
        if (meridiem == null) {
            return hour;
        }
        if (locale.meridiemHour != null) {
            return locale.meridiemHour(hour, meridiem);
        } else if (locale.isPM != null) {
            isPm = locale.isPM(meridiem);
            if (isPm && hour < 12) {
                hour += 12;
            }
            if (!isPm && hour === 12) {
                hour = 0;
            }
            return hour;
        } else {
            return hour;
        }
    }
    function configFromStringAndArray(config) {
        var tempConfig, bestMoment, scoreToBeat, i, currentScore;
        if (config._f.length === 0) {
            getParsingFlags(config).invalidFormat = true;
            config._d = new Date(NaN);
            return;
        }
        for (i = 0; i < config._f.length; i++) {
            currentScore = 0;
            tempConfig = copyConfig({}, config);
            if (config._useUTC != null) {
                tempConfig._useUTC = config._useUTC;
            }
            tempConfig._f = config._f[i];
            configFromStringAndFormat(tempConfig);
            if (!valid__isValid(tempConfig)) {
                continue;
            }
            currentScore += getParsingFlags(tempConfig).charsLeftOver;
            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
            getParsingFlags(tempConfig).score = currentScore;
            if (scoreToBeat == null || currentScore < scoreToBeat) {
                scoreToBeat = currentScore;
                bestMoment = tempConfig;
            }
        }
        extend(config, bestMoment || tempConfig);
    }
    function configFromObject(config) {
        if (config._d) {
            return;
        }
        var i = normalizeObjectUnits(config._i);
        config._a = map([ i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond ], function(obj) {
            return obj && parseInt(obj, 10);
        });
        configFromArray(config);
    }
    function createFromConfig(config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
            res.add(1, "d");
            res._nextDay = undefined;
        }
        return res;
    }
    function prepareConfig(config) {
        var input = config._i, format = config._f;
        config._locale = config._locale || locale_locales__getLocale(config._l);
        if (input === null || format === undefined && input === "") {
            return valid__createInvalid({
                nullInput: true
            });
        }
        if (typeof input === "string") {
            config._i = input = config._locale.preparse(input);
        }
        if (isMoment(input)) {
            return new Moment(checkOverflow(input));
        } else if (isArray(format)) {
            configFromStringAndArray(config);
        } else if (isDate(input)) {
            config._d = input;
        } else if (format) {
            configFromStringAndFormat(config);
        } else {
            configFromInput(config);
        }
        if (!valid__isValid(config)) {
            config._d = null;
        }
        return config;
    }
    function configFromInput(config) {
        var input = config._i;
        if (input === undefined) {
            config._d = new Date(utils_hooks__hooks.now());
        } else if (isDate(input)) {
            config._d = new Date(input.valueOf());
        } else if (typeof input === "string") {
            configFromString(config);
        } else if (isArray(input)) {
            config._a = map(input.slice(0), function(obj) {
                return parseInt(obj, 10);
            });
            configFromArray(config);
        } else if (typeof input === "object") {
            configFromObject(config);
        } else if (typeof input === "number") {
            config._d = new Date(input);
        } else {
            utils_hooks__hooks.createFromInputFallback(config);
        }
    }
    function createLocalOrUTC(input, format, locale, strict, isUTC) {
        var c = {};
        if (typeof locale === "boolean") {
            strict = locale;
            locale = undefined;
        }
        if (isObject(input) && isObjectEmpty(input) || isArray(input) && input.length === 0) {
            input = undefined;
        }
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;
        return createFromConfig(c);
    }
    function local__createLocal(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, false);
    }
    var prototypeMin = deprecate("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/", function() {
        var other = local__createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
            return other < this ? this : other;
        } else {
            return valid__createInvalid();
        }
    });
    var prototypeMax = deprecate("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/", function() {
        var other = local__createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
            return other > this ? this : other;
        } else {
            return valid__createInvalid();
        }
    });
    function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
            moments = moments[0];
        }
        if (!moments.length) {
            return local__createLocal();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
            if (!moments[i].isValid() || moments[i][fn](res)) {
                res = moments[i];
            }
        }
        return res;
    }
    function min() {
        var args = [].slice.call(arguments, 0);
        return pickBy("isBefore", args);
    }
    function max() {
        var args = [].slice.call(arguments, 0);
        return pickBy("isAfter", args);
    }
    var now = function() {
        return Date.now ? Date.now() : +new Date();
    };
    function Duration(duration) {
        var normalizedInput = normalizeObjectUnits(duration), years = normalizedInput.year || 0, quarters = normalizedInput.quarter || 0, months = normalizedInput.month || 0, weeks = normalizedInput.week || 0, days = normalizedInput.day || 0, hours = normalizedInput.hour || 0, minutes = normalizedInput.minute || 0, seconds = normalizedInput.second || 0, milliseconds = normalizedInput.millisecond || 0;
        this._milliseconds = +milliseconds + seconds * 1e3 + minutes * 6e4 + hours * 1e3 * 60 * 60;
        this._days = +days + weeks * 7;
        this._months = +months + quarters * 3 + years * 12;
        this._data = {};
        this._locale = locale_locales__getLocale();
        this._bubble();
    }
    function isDuration(obj) {
        return obj instanceof Duration;
    }
    function absRound(number) {
        if (number < 0) {
            return Math.round(-1 * number) * -1;
        } else {
            return Math.round(number);
        }
    }
    function offset(token, separator) {
        addFormatToken(token, 0, 0, function() {
            var offset = this.utcOffset();
            var sign = "+";
            if (offset < 0) {
                offset = -offset;
                sign = "-";
            }
            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~offset % 60, 2);
        });
    }
    offset("Z", ":");
    offset("ZZ", "");
    addRegexToken("Z", matchShortOffset);
    addRegexToken("ZZ", matchShortOffset);
    addParseToken([ "Z", "ZZ" ], function(input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(matchShortOffset, input);
    });
    var chunkOffset = /([\+\-]|\d\d)/gi;
    function offsetFromString(matcher, string) {
        var matches = (string || "").match(matcher) || [];
        var chunk = matches[matches.length - 1] || [];
        var parts = (chunk + "").match(chunkOffset) || [ "-", 0, 0 ];
        var minutes = +(parts[1] * 60) + toInt(parts[2]);
        return parts[0] === "+" ? minutes : -minutes;
    }
    function cloneWithOffset(input, model) {
        var res, diff;
        if (model._isUTC) {
            res = model.clone();
            diff = (isMoment(input) || isDate(input) ? input.valueOf() : local__createLocal(input).valueOf()) - res.valueOf();
            res._d.setTime(res._d.valueOf() + diff);
            utils_hooks__hooks.updateOffset(res, false);
            return res;
        } else {
            return local__createLocal(input).local();
        }
    }
    function getDateOffset(m) {
        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
    }
    utils_hooks__hooks.updateOffset = function() {};
    function getSetOffset(input, keepLocalTime) {
        var offset = this._offset || 0, localAdjust;
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        if (input != null) {
            if (typeof input === "string") {
                input = offsetFromString(matchShortOffset, input);
            } else if (Math.abs(input) < 16) {
                input = input * 60;
            }
            if (!this._isUTC && keepLocalTime) {
                localAdjust = getDateOffset(this);
            }
            this._offset = input;
            this._isUTC = true;
            if (localAdjust != null) {
                this.add(localAdjust, "m");
            }
            if (offset !== input) {
                if (!keepLocalTime || this._changeInProgress) {
                    add_subtract__addSubtract(this, create__createDuration(input - offset, "m"), 1, false);
                } else if (!this._changeInProgress) {
                    this._changeInProgress = true;
                    utils_hooks__hooks.updateOffset(this, true);
                    this._changeInProgress = null;
                }
            }
            return this;
        } else {
            return this._isUTC ? offset : getDateOffset(this);
        }
    }
    function getSetZone(input, keepLocalTime) {
        if (input != null) {
            if (typeof input !== "string") {
                input = -input;
            }
            this.utcOffset(input, keepLocalTime);
            return this;
        } else {
            return -this.utcOffset();
        }
    }
    function setOffsetToUTC(keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
    }
    function setOffsetToLocal(keepLocalTime) {
        if (this._isUTC) {
            this.utcOffset(0, keepLocalTime);
            this._isUTC = false;
            if (keepLocalTime) {
                this.subtract(getDateOffset(this), "m");
            }
        }
        return this;
    }
    function setOffsetToParsedOffset() {
        if (this._tzm) {
            this.utcOffset(this._tzm);
        } else if (typeof this._i === "string") {
            var tZone = offsetFromString(matchOffset, this._i);
            if (tZone === 0) {
                this.utcOffset(0, true);
            } else {
                this.utcOffset(offsetFromString(matchOffset, this._i));
            }
        }
        return this;
    }
    function hasAlignedHourOffset(input) {
        if (!this.isValid()) {
            return false;
        }
        input = input ? local__createLocal(input).utcOffset() : 0;
        return (this.utcOffset() - input) % 60 === 0;
    }
    function isDaylightSavingTime() {
        return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
    }
    function isDaylightSavingTimeShifted() {
        if (!isUndefined(this._isDSTShifted)) {
            return this._isDSTShifted;
        }
        var c = {};
        copyConfig(c, this);
        c = prepareConfig(c);
        if (c._a) {
            var other = c._isUTC ? create_utc__createUTC(c._a) : local__createLocal(c._a);
            this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;
        } else {
            this._isDSTShifted = false;
        }
        return this._isDSTShifted;
    }
    function isLocal() {
        return this.isValid() ? !this._isUTC : false;
    }
    function isUtcOffset() {
        return this.isValid() ? this._isUTC : false;
    }
    function isUtc() {
        return this.isValid() ? this._isUTC && this._offset === 0 : false;
    }
    var aspNetRegex = /^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;
    var isoRegex = /^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;
    function create__createDuration(input, key) {
        var duration = input, match = null, sign, ret, diffRes;
        if (isDuration(input)) {
            duration = {
                ms: input._milliseconds,
                d: input._days,
                M: input._months
            };
        } else if (typeof input === "number") {
            duration = {};
            if (key) {
                duration[key] = input;
            } else {
                duration.milliseconds = input;
            }
        } else if (!!(match = aspNetRegex.exec(input))) {
            sign = match[1] === "-" ? -1 : 1;
            duration = {
                y: 0,
                d: toInt(match[DATE]) * sign,
                h: toInt(match[HOUR]) * sign,
                m: toInt(match[MINUTE]) * sign,
                s: toInt(match[SECOND]) * sign,
                ms: toInt(absRound(match[MILLISECOND] * 1e3)) * sign
            };
        } else if (!!(match = isoRegex.exec(input))) {
            sign = match[1] === "-" ? -1 : 1;
            duration = {
                y: parseIso(match[2], sign),
                M: parseIso(match[3], sign),
                w: parseIso(match[4], sign),
                d: parseIso(match[5], sign),
                h: parseIso(match[6], sign),
                m: parseIso(match[7], sign),
                s: parseIso(match[8], sign)
            };
        } else if (duration == null) {
            duration = {};
        } else if (typeof duration === "object" && ("from" in duration || "to" in duration)) {
            diffRes = momentsDifference(local__createLocal(duration.from), local__createLocal(duration.to));
            duration = {};
            duration.ms = diffRes.milliseconds;
            duration.M = diffRes.months;
        }
        ret = new Duration(duration);
        if (isDuration(input) && hasOwnProp(input, "_locale")) {
            ret._locale = input._locale;
        }
        return ret;
    }
    create__createDuration.fn = Duration.prototype;
    function parseIso(inp, sign) {
        var res = inp && parseFloat(inp.replace(",", "."));
        return (isNaN(res) ? 0 : res) * sign;
    }
    function positiveMomentsDifference(base, other) {
        var res = {
            milliseconds: 0,
            months: 0
        };
        res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, "M").isAfter(other)) {
            --res.months;
        }
        res.milliseconds = +other - +base.clone().add(res.months, "M");
        return res;
    }
    function momentsDifference(base, other) {
        var res;
        if (!(base.isValid() && other.isValid())) {
            return {
                milliseconds: 0,
                months: 0
            };
        }
        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
            res = positiveMomentsDifference(base, other);
        } else {
            res = positiveMomentsDifference(other, base);
            res.milliseconds = -res.milliseconds;
            res.months = -res.months;
        }
        return res;
    }
    function createAdder(direction, name) {
        return function(val, period) {
            var dur, tmp;
            if (period !== null && !isNaN(+period)) {
                deprecateSimple(name, "moment()." + name + "(period, number) is deprecated. Please use moment()." + name + "(number, period). " + "See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.");
                tmp = val;
                val = period;
                period = tmp;
            }
            val = typeof val === "string" ? +val : val;
            dur = create__createDuration(val, period);
            add_subtract__addSubtract(this, dur, direction);
            return this;
        };
    }
    function add_subtract__addSubtract(mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds, days = absRound(duration._days), months = absRound(duration._months);
        if (!mom.isValid()) {
            return;
        }
        updateOffset = updateOffset == null ? true : updateOffset;
        if (milliseconds) {
            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
        }
        if (days) {
            get_set__set(mom, "Date", get_set__get(mom, "Date") + days * isAdding);
        }
        if (months) {
            setMonth(mom, get_set__get(mom, "Month") + months * isAdding);
        }
        if (updateOffset) {
            utils_hooks__hooks.updateOffset(mom, days || months);
        }
    }
    var add_subtract__add = createAdder(1, "add");
    var add_subtract__subtract = createAdder(-1, "subtract");
    function getCalendarFormat(myMoment, now) {
        var diff = myMoment.diff(now, "days", true);
        return diff < -6 ? "sameElse" : diff < -1 ? "lastWeek" : diff < 0 ? "lastDay" : diff < 1 ? "sameDay" : diff < 2 ? "nextDay" : diff < 7 ? "nextWeek" : "sameElse";
    }
    function moment_calendar__calendar(time, formats) {
        var now = time || local__createLocal(), sod = cloneWithOffset(now, this).startOf("day"), format = utils_hooks__hooks.calendarFormat(this, sod) || "sameElse";
        var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);
        return this.format(output || this.localeData().calendar(format, this, local__createLocal(now)));
    }
    function clone() {
        return new Moment(this);
    }
    function isAfter(input, units) {
        var localInput = isMoment(input) ? input : local__createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(!isUndefined(units) ? units : "millisecond");
        if (units === "millisecond") {
            return this.valueOf() > localInput.valueOf();
        } else {
            return localInput.valueOf() < this.clone().startOf(units).valueOf();
        }
    }
    function isBefore(input, units) {
        var localInput = isMoment(input) ? input : local__createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(!isUndefined(units) ? units : "millisecond");
        if (units === "millisecond") {
            return this.valueOf() < localInput.valueOf();
        } else {
            return this.clone().endOf(units).valueOf() < localInput.valueOf();
        }
    }
    function isBetween(from, to, units, inclusivity) {
        inclusivity = inclusivity || "()";
        return (inclusivity[0] === "(" ? this.isAfter(from, units) : !this.isBefore(from, units)) && (inclusivity[1] === ")" ? this.isBefore(to, units) : !this.isAfter(to, units));
    }
    function isSame(input, units) {
        var localInput = isMoment(input) ? input : local__createLocal(input), inputMs;
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units || "millisecond");
        if (units === "millisecond") {
            return this.valueOf() === localInput.valueOf();
        } else {
            inputMs = localInput.valueOf();
            return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
        }
    }
    function isSameOrAfter(input, units) {
        return this.isSame(input, units) || this.isAfter(input, units);
    }
    function isSameOrBefore(input, units) {
        return this.isSame(input, units) || this.isBefore(input, units);
    }
    function diff(input, units, asFloat) {
        var that, zoneDelta, delta, output;
        if (!this.isValid()) {
            return NaN;
        }
        that = cloneWithOffset(input, this);
        if (!that.isValid()) {
            return NaN;
        }
        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
        units = normalizeUnits(units);
        if (units === "year" || units === "month" || units === "quarter") {
            output = monthDiff(this, that);
            if (units === "quarter") {
                output = output / 3;
            } else if (units === "year") {
                output = output / 12;
            }
        } else {
            delta = this - that;
            output = units === "second" ? delta / 1e3 : units === "minute" ? delta / 6e4 : units === "hour" ? delta / 36e5 : units === "day" ? (delta - zoneDelta) / 864e5 : units === "week" ? (delta - zoneDelta) / 6048e5 : delta;
        }
        return asFloat ? output : absFloor(output);
    }
    function monthDiff(a, b) {
        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()), anchor = a.clone().add(wholeMonthDiff, "months"), anchor2, adjust;
        if (b - anchor < 0) {
            anchor2 = a.clone().add(wholeMonthDiff - 1, "months");
            adjust = (b - anchor) / (anchor - anchor2);
        } else {
            anchor2 = a.clone().add(wholeMonthDiff + 1, "months");
            adjust = (b - anchor) / (anchor2 - anchor);
        }
        return -(wholeMonthDiff + adjust) || 0;
    }
    utils_hooks__hooks.defaultFormat = "YYYY-MM-DDTHH:mm:ssZ";
    utils_hooks__hooks.defaultFormatUtc = "YYYY-MM-DDTHH:mm:ss[Z]";
    function toString() {
        return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ");
    }
    function moment_format__toISOString() {
        var m = this.clone().utc();
        if (0 < m.year() && m.year() <= 9999) {
            if (isFunction(Date.prototype.toISOString)) {
                return this.toDate().toISOString();
            } else {
                return formatMoment(m, "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]");
            }
        } else {
            return formatMoment(m, "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]");
        }
    }
    function format(inputString) {
        if (!inputString) {
            inputString = this.isUtc() ? utils_hooks__hooks.defaultFormatUtc : utils_hooks__hooks.defaultFormat;
        }
        var output = formatMoment(this, inputString);
        return this.localeData().postformat(output);
    }
    function from(time, withoutSuffix) {
        if (this.isValid() && (isMoment(time) && time.isValid() || local__createLocal(time).isValid())) {
            return create__createDuration({
                to: this,
                from: time
            }).locale(this.locale()).humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }
    function fromNow(withoutSuffix) {
        return this.from(local__createLocal(), withoutSuffix);
    }
    function to(time, withoutSuffix) {
        if (this.isValid() && (isMoment(time) && time.isValid() || local__createLocal(time).isValid())) {
            return create__createDuration({
                from: this,
                to: time
            }).locale(this.locale()).humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }
    function toNow(withoutSuffix) {
        return this.to(local__createLocal(), withoutSuffix);
    }
    function locale(key) {
        var newLocaleData;
        if (key === undefined) {
            return this._locale._abbr;
        } else {
            newLocaleData = locale_locales__getLocale(key);
            if (newLocaleData != null) {
                this._locale = newLocaleData;
            }
            return this;
        }
    }
    var lang = deprecate("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.", function(key) {
        if (key === undefined) {
            return this.localeData();
        } else {
            return this.locale(key);
        }
    });
    function localeData() {
        return this._locale;
    }
    function startOf(units) {
        units = normalizeUnits(units);
        switch (units) {
          case "year":
            this.month(0);

          case "quarter":
          case "month":
            this.date(1);

          case "week":
          case "isoWeek":
          case "day":
          case "date":
            this.hours(0);

          case "hour":
            this.minutes(0);

          case "minute":
            this.seconds(0);

          case "second":
            this.milliseconds(0);
        }
        if (units === "week") {
            this.weekday(0);
        }
        if (units === "isoWeek") {
            this.isoWeekday(1);
        }
        if (units === "quarter") {
            this.month(Math.floor(this.month() / 3) * 3);
        }
        return this;
    }
    function endOf(units) {
        units = normalizeUnits(units);
        if (units === undefined || units === "millisecond") {
            return this;
        }
        if (units === "date") {
            units = "day";
        }
        return this.startOf(units).add(1, units === "isoWeek" ? "week" : units).subtract(1, "ms");
    }
    function to_type__valueOf() {
        return this._d.valueOf() - (this._offset || 0) * 6e4;
    }
    function unix() {
        return Math.floor(this.valueOf() / 1e3);
    }
    function toDate() {
        return new Date(this.valueOf());
    }
    function toArray() {
        var m = this;
        return [ m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond() ];
    }
    function toObject() {
        var m = this;
        return {
            years: m.year(),
            months: m.month(),
            date: m.date(),
            hours: m.hours(),
            minutes: m.minutes(),
            seconds: m.seconds(),
            milliseconds: m.milliseconds()
        };
    }
    function toJSON() {
        return this.isValid() ? this.toISOString() : null;
    }
    function moment_valid__isValid() {
        return valid__isValid(this);
    }
    function parsingFlags() {
        return extend({}, getParsingFlags(this));
    }
    function invalidAt() {
        return getParsingFlags(this).overflow;
    }
    function creationData() {
        return {
            input: this._i,
            format: this._f,
            locale: this._locale,
            isUTC: this._isUTC,
            strict: this._strict
        };
    }
    addFormatToken(0, [ "gg", 2 ], 0, function() {
        return this.weekYear() % 100;
    });
    addFormatToken(0, [ "GG", 2 ], 0, function() {
        return this.isoWeekYear() % 100;
    });
    function addWeekYearFormatToken(token, getter) {
        addFormatToken(0, [ token, token.length ], 0, getter);
    }
    addWeekYearFormatToken("gggg", "weekYear");
    addWeekYearFormatToken("ggggg", "weekYear");
    addWeekYearFormatToken("GGGG", "isoWeekYear");
    addWeekYearFormatToken("GGGGG", "isoWeekYear");
    addUnitAlias("weekYear", "gg");
    addUnitAlias("isoWeekYear", "GG");
    addUnitPriority("weekYear", 1);
    addUnitPriority("isoWeekYear", 1);
    addRegexToken("G", matchSigned);
    addRegexToken("g", matchSigned);
    addRegexToken("GG", match1to2, match2);
    addRegexToken("gg", match1to2, match2);
    addRegexToken("GGGG", match1to4, match4);
    addRegexToken("gggg", match1to4, match4);
    addRegexToken("GGGGG", match1to6, match6);
    addRegexToken("ggggg", match1to6, match6);
    addWeekParseToken([ "gggg", "ggggg", "GGGG", "GGGGG" ], function(input, week, config, token) {
        week[token.substr(0, 2)] = toInt(input);
    });
    addWeekParseToken([ "gg", "GG" ], function(input, week, config, token) {
        week[token] = utils_hooks__hooks.parseTwoDigitYear(input);
    });
    function getSetWeekYear(input) {
        return getSetWeekYearHelper.call(this, input, this.week(), this.weekday(), this.localeData()._week.dow, this.localeData()._week.doy);
    }
    function getSetISOWeekYear(input) {
        return getSetWeekYearHelper.call(this, input, this.isoWeek(), this.isoWeekday(), 1, 4);
    }
    function getISOWeeksInYear() {
        return weeksInYear(this.year(), 1, 4);
    }
    function getWeeksInYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    }
    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
        var weeksTarget;
        if (input == null) {
            return weekOfYear(this, dow, doy).year;
        } else {
            weeksTarget = weeksInYear(input, dow, doy);
            if (week > weeksTarget) {
                week = weeksTarget;
            }
            return setWeekAll.call(this, input, week, weekday, dow, doy);
        }
    }
    function setWeekAll(weekYear, week, weekday, dow, doy) {
        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy), date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
        this.year(date.getUTCFullYear());
        this.month(date.getUTCMonth());
        this.date(date.getUTCDate());
        return this;
    }
    addFormatToken("Q", 0, "Qo", "quarter");
    addUnitAlias("quarter", "Q");
    addUnitPriority("quarter", 7);
    addRegexToken("Q", match1);
    addParseToken("Q", function(input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
    });
    function getSetQuarter(input) {
        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
    }
    addFormatToken("D", [ "DD", 2 ], "Do", "date");
    addUnitAlias("date", "D");
    addUnitPriority("date", 9);
    addRegexToken("D", match1to2);
    addRegexToken("DD", match1to2, match2);
    addRegexToken("Do", function(isStrict, locale) {
        return isStrict ? locale._ordinalParse : locale._ordinalParseLenient;
    });
    addParseToken([ "D", "DD" ], DATE);
    addParseToken("Do", function(input, array) {
        array[DATE] = toInt(input.match(match1to2)[0], 10);
    });
    var getSetDayOfMonth = makeGetSet("Date", true);
    addFormatToken("DDD", [ "DDDD", 3 ], "DDDo", "dayOfYear");
    addUnitAlias("dayOfYear", "DDD");
    addUnitPriority("dayOfYear", 4);
    addRegexToken("DDD", match1to3);
    addRegexToken("DDDD", match3);
    addParseToken([ "DDD", "DDDD" ], function(input, array, config) {
        config._dayOfYear = toInt(input);
    });
    function getSetDayOfYear(input) {
        var dayOfYear = Math.round((this.clone().startOf("day") - this.clone().startOf("year")) / 864e5) + 1;
        return input == null ? dayOfYear : this.add(input - dayOfYear, "d");
    }
    addFormatToken("m", [ "mm", 2 ], 0, "minute");
    addUnitAlias("minute", "m");
    addUnitPriority("minute", 14);
    addRegexToken("m", match1to2);
    addRegexToken("mm", match1to2, match2);
    addParseToken([ "m", "mm" ], MINUTE);
    var getSetMinute = makeGetSet("Minutes", false);
    addFormatToken("s", [ "ss", 2 ], 0, "second");
    addUnitAlias("second", "s");
    addUnitPriority("second", 15);
    addRegexToken("s", match1to2);
    addRegexToken("ss", match1to2, match2);
    addParseToken([ "s", "ss" ], SECOND);
    var getSetSecond = makeGetSet("Seconds", false);
    addFormatToken("S", 0, 0, function() {
        return ~~(this.millisecond() / 100);
    });
    addFormatToken(0, [ "SS", 2 ], 0, function() {
        return ~~(this.millisecond() / 10);
    });
    addFormatToken(0, [ "SSS", 3 ], 0, "millisecond");
    addFormatToken(0, [ "SSSS", 4 ], 0, function() {
        return this.millisecond() * 10;
    });
    addFormatToken(0, [ "SSSSS", 5 ], 0, function() {
        return this.millisecond() * 100;
    });
    addFormatToken(0, [ "SSSSSS", 6 ], 0, function() {
        return this.millisecond() * 1e3;
    });
    addFormatToken(0, [ "SSSSSSS", 7 ], 0, function() {
        return this.millisecond() * 1e4;
    });
    addFormatToken(0, [ "SSSSSSSS", 8 ], 0, function() {
        return this.millisecond() * 1e5;
    });
    addFormatToken(0, [ "SSSSSSSSS", 9 ], 0, function() {
        return this.millisecond() * 1e6;
    });
    addUnitAlias("millisecond", "ms");
    addUnitPriority("millisecond", 16);
    addRegexToken("S", match1to3, match1);
    addRegexToken("SS", match1to3, match2);
    addRegexToken("SSS", match1to3, match3);
    var token;
    for (token = "SSSS"; token.length <= 9; token += "S") {
        addRegexToken(token, matchUnsigned);
    }
    function parseMs(input, array) {
        array[MILLISECOND] = toInt(("0." + input) * 1e3);
    }
    for (token = "S"; token.length <= 9; token += "S") {
        addParseToken(token, parseMs);
    }
    var getSetMillisecond = makeGetSet("Milliseconds", false);
    addFormatToken("z", 0, 0, "zoneAbbr");
    addFormatToken("zz", 0, 0, "zoneName");
    function getZoneAbbr() {
        return this._isUTC ? "UTC" : "";
    }
    function getZoneName() {
        return this._isUTC ? "Coordinated Universal Time" : "";
    }
    var momentPrototype__proto = Moment.prototype;
    momentPrototype__proto.add = add_subtract__add;
    momentPrototype__proto.calendar = moment_calendar__calendar;
    momentPrototype__proto.clone = clone;
    momentPrototype__proto.diff = diff;
    momentPrototype__proto.endOf = endOf;
    momentPrototype__proto.format = format;
    momentPrototype__proto.from = from;
    momentPrototype__proto.fromNow = fromNow;
    momentPrototype__proto.to = to;
    momentPrototype__proto.toNow = toNow;
    momentPrototype__proto.get = stringGet;
    momentPrototype__proto.invalidAt = invalidAt;
    momentPrototype__proto.isAfter = isAfter;
    momentPrototype__proto.isBefore = isBefore;
    momentPrototype__proto.isBetween = isBetween;
    momentPrototype__proto.isSame = isSame;
    momentPrototype__proto.isSameOrAfter = isSameOrAfter;
    momentPrototype__proto.isSameOrBefore = isSameOrBefore;
    momentPrototype__proto.isValid = moment_valid__isValid;
    momentPrototype__proto.lang = lang;
    momentPrototype__proto.locale = locale;
    momentPrototype__proto.localeData = localeData;
    momentPrototype__proto.max = prototypeMax;
    momentPrototype__proto.min = prototypeMin;
    momentPrototype__proto.parsingFlags = parsingFlags;
    momentPrototype__proto.set = stringSet;
    momentPrototype__proto.startOf = startOf;
    momentPrototype__proto.subtract = add_subtract__subtract;
    momentPrototype__proto.toArray = toArray;
    momentPrototype__proto.toObject = toObject;
    momentPrototype__proto.toDate = toDate;
    momentPrototype__proto.toISOString = moment_format__toISOString;
    momentPrototype__proto.toJSON = toJSON;
    momentPrototype__proto.toString = toString;
    momentPrototype__proto.unix = unix;
    momentPrototype__proto.valueOf = to_type__valueOf;
    momentPrototype__proto.creationData = creationData;
    momentPrototype__proto.year = getSetYear;
    momentPrototype__proto.isLeapYear = getIsLeapYear;
    momentPrototype__proto.weekYear = getSetWeekYear;
    momentPrototype__proto.isoWeekYear = getSetISOWeekYear;
    momentPrototype__proto.quarter = momentPrototype__proto.quarters = getSetQuarter;
    momentPrototype__proto.month = getSetMonth;
    momentPrototype__proto.daysInMonth = getDaysInMonth;
    momentPrototype__proto.week = momentPrototype__proto.weeks = getSetWeek;
    momentPrototype__proto.isoWeek = momentPrototype__proto.isoWeeks = getSetISOWeek;
    momentPrototype__proto.weeksInYear = getWeeksInYear;
    momentPrototype__proto.isoWeeksInYear = getISOWeeksInYear;
    momentPrototype__proto.date = getSetDayOfMonth;
    momentPrototype__proto.day = momentPrototype__proto.days = getSetDayOfWeek;
    momentPrototype__proto.weekday = getSetLocaleDayOfWeek;
    momentPrototype__proto.isoWeekday = getSetISODayOfWeek;
    momentPrototype__proto.dayOfYear = getSetDayOfYear;
    momentPrototype__proto.hour = momentPrototype__proto.hours = getSetHour;
    momentPrototype__proto.minute = momentPrototype__proto.minutes = getSetMinute;
    momentPrototype__proto.second = momentPrototype__proto.seconds = getSetSecond;
    momentPrototype__proto.millisecond = momentPrototype__proto.milliseconds = getSetMillisecond;
    momentPrototype__proto.utcOffset = getSetOffset;
    momentPrototype__proto.utc = setOffsetToUTC;
    momentPrototype__proto.local = setOffsetToLocal;
    momentPrototype__proto.parseZone = setOffsetToParsedOffset;
    momentPrototype__proto.hasAlignedHourOffset = hasAlignedHourOffset;
    momentPrototype__proto.isDST = isDaylightSavingTime;
    momentPrototype__proto.isLocal = isLocal;
    momentPrototype__proto.isUtcOffset = isUtcOffset;
    momentPrototype__proto.isUtc = isUtc;
    momentPrototype__proto.isUTC = isUtc;
    momentPrototype__proto.zoneAbbr = getZoneAbbr;
    momentPrototype__proto.zoneName = getZoneName;
    momentPrototype__proto.dates = deprecate("dates accessor is deprecated. Use date instead.", getSetDayOfMonth);
    momentPrototype__proto.months = deprecate("months accessor is deprecated. Use month instead", getSetMonth);
    momentPrototype__proto.years = deprecate("years accessor is deprecated. Use year instead", getSetYear);
    momentPrototype__proto.zone = deprecate("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/", getSetZone);
    momentPrototype__proto.isDSTShifted = deprecate("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information", isDaylightSavingTimeShifted);
    var momentPrototype = momentPrototype__proto;
    function moment__createUnix(input) {
        return local__createLocal(input * 1e3);
    }
    function moment__createInZone() {
        return local__createLocal.apply(null, arguments).parseZone();
    }
    function preParsePostFormat(string) {
        return string;
    }
    var prototype__proto = Locale.prototype;
    prototype__proto.calendar = locale_calendar__calendar;
    prototype__proto.longDateFormat = longDateFormat;
    prototype__proto.invalidDate = invalidDate;
    prototype__proto.ordinal = ordinal;
    prototype__proto.preparse = preParsePostFormat;
    prototype__proto.postformat = preParsePostFormat;
    prototype__proto.relativeTime = relative__relativeTime;
    prototype__proto.pastFuture = pastFuture;
    prototype__proto.set = locale_set__set;
    prototype__proto.months = localeMonths;
    prototype__proto.monthsShort = localeMonthsShort;
    prototype__proto.monthsParse = localeMonthsParse;
    prototype__proto.monthsRegex = monthsRegex;
    prototype__proto.monthsShortRegex = monthsShortRegex;
    prototype__proto.week = localeWeek;
    prototype__proto.firstDayOfYear = localeFirstDayOfYear;
    prototype__proto.firstDayOfWeek = localeFirstDayOfWeek;
    prototype__proto.weekdays = localeWeekdays;
    prototype__proto.weekdaysMin = localeWeekdaysMin;
    prototype__proto.weekdaysShort = localeWeekdaysShort;
    prototype__proto.weekdaysParse = localeWeekdaysParse;
    prototype__proto.weekdaysRegex = weekdaysRegex;
    prototype__proto.weekdaysShortRegex = weekdaysShortRegex;
    prototype__proto.weekdaysMinRegex = weekdaysMinRegex;
    prototype__proto.isPM = localeIsPM;
    prototype__proto.meridiem = localeMeridiem;
    function lists__get(format, index, field, setter) {
        var locale = locale_locales__getLocale();
        var utc = create_utc__createUTC().set(setter, index);
        return locale[field](utc, format);
    }
    function listMonthsImpl(format, index, field) {
        if (typeof format === "number") {
            index = format;
            format = undefined;
        }
        format = format || "";
        if (index != null) {
            return lists__get(format, index, field, "month");
        }
        var i;
        var out = [];
        for (i = 0; i < 12; i++) {
            out[i] = lists__get(format, i, field, "month");
        }
        return out;
    }
    function listWeekdaysImpl(localeSorted, format, index, field) {
        if (typeof localeSorted === "boolean") {
            if (typeof format === "number") {
                index = format;
                format = undefined;
            }
            format = format || "";
        } else {
            format = localeSorted;
            index = format;
            localeSorted = false;
            if (typeof format === "number") {
                index = format;
                format = undefined;
            }
            format = format || "";
        }
        var locale = locale_locales__getLocale(), shift = localeSorted ? locale._week.dow : 0;
        if (index != null) {
            return lists__get(format, (index + shift) % 7, field, "day");
        }
        var i;
        var out = [];
        for (i = 0; i < 7; i++) {
            out[i] = lists__get(format, (i + shift) % 7, field, "day");
        }
        return out;
    }
    function lists__listMonths(format, index) {
        return listMonthsImpl(format, index, "months");
    }
    function lists__listMonthsShort(format, index) {
        return listMonthsImpl(format, index, "monthsShort");
    }
    function lists__listWeekdays(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, "weekdays");
    }
    function lists__listWeekdaysShort(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, "weekdaysShort");
    }
    function lists__listWeekdaysMin(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, "weekdaysMin");
    }
    locale_locales__getSetGlobalLocale("en", {
        ordinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal: function(number) {
            var b = number % 10, output = toInt(number % 100 / 10) === 1 ? "th" : b === 1 ? "st" : b === 2 ? "nd" : b === 3 ? "rd" : "th";
            return number + output;
        }
    });
    utils_hooks__hooks.lang = deprecate("moment.lang is deprecated. Use moment.locale instead.", locale_locales__getSetGlobalLocale);
    utils_hooks__hooks.langData = deprecate("moment.langData is deprecated. Use moment.localeData instead.", locale_locales__getLocale);
    var mathAbs = Math.abs;
    function duration_abs__abs() {
        var data = this._data;
        this._milliseconds = mathAbs(this._milliseconds);
        this._days = mathAbs(this._days);
        this._months = mathAbs(this._months);
        data.milliseconds = mathAbs(data.milliseconds);
        data.seconds = mathAbs(data.seconds);
        data.minutes = mathAbs(data.minutes);
        data.hours = mathAbs(data.hours);
        data.months = mathAbs(data.months);
        data.years = mathAbs(data.years);
        return this;
    }
    function duration_add_subtract__addSubtract(duration, input, value, direction) {
        var other = create__createDuration(input, value);
        duration._milliseconds += direction * other._milliseconds;
        duration._days += direction * other._days;
        duration._months += direction * other._months;
        return duration._bubble();
    }
    function duration_add_subtract__add(input, value) {
        return duration_add_subtract__addSubtract(this, input, value, 1);
    }
    function duration_add_subtract__subtract(input, value) {
        return duration_add_subtract__addSubtract(this, input, value, -1);
    }
    function absCeil(number) {
        if (number < 0) {
            return Math.floor(number);
        } else {
            return Math.ceil(number);
        }
    }
    function bubble() {
        var milliseconds = this._milliseconds;
        var days = this._days;
        var months = this._months;
        var data = this._data;
        var seconds, minutes, hours, years, monthsFromDays;
        if (!(milliseconds >= 0 && days >= 0 && months >= 0 || milliseconds <= 0 && days <= 0 && months <= 0)) {
            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
            days = 0;
            months = 0;
        }
        data.milliseconds = milliseconds % 1e3;
        seconds = absFloor(milliseconds / 1e3);
        data.seconds = seconds % 60;
        minutes = absFloor(seconds / 60);
        data.minutes = minutes % 60;
        hours = absFloor(minutes / 60);
        data.hours = hours % 24;
        days += absFloor(hours / 24);
        monthsFromDays = absFloor(daysToMonths(days));
        months += monthsFromDays;
        days -= absCeil(monthsToDays(monthsFromDays));
        years = absFloor(months / 12);
        months %= 12;
        data.days = days;
        data.months = months;
        data.years = years;
        return this;
    }
    function daysToMonths(days) {
        return days * 4800 / 146097;
    }
    function monthsToDays(months) {
        return months * 146097 / 4800;
    }
    function as(units) {
        var days;
        var months;
        var milliseconds = this._milliseconds;
        units = normalizeUnits(units);
        if (units === "month" || units === "year") {
            days = this._days + milliseconds / 864e5;
            months = this._months + daysToMonths(days);
            return units === "month" ? months : months / 12;
        } else {
            days = this._days + Math.round(monthsToDays(this._months));
            switch (units) {
              case "week":
                return days / 7 + milliseconds / 6048e5;

              case "day":
                return days + milliseconds / 864e5;

              case "hour":
                return days * 24 + milliseconds / 36e5;

              case "minute":
                return days * 1440 + milliseconds / 6e4;

              case "second":
                return days * 86400 + milliseconds / 1e3;

              case "millisecond":
                return Math.floor(days * 864e5) + milliseconds;

              default:
                throw new Error("Unknown unit " + units);
            }
        }
    }
    function duration_as__valueOf() {
        return this._milliseconds + this._days * 864e5 + this._months % 12 * 2592e6 + toInt(this._months / 12) * 31536e6;
    }
    function makeAs(alias) {
        return function() {
            return this.as(alias);
        };
    }
    var asMilliseconds = makeAs("ms");
    var asSeconds = makeAs("s");
    var asMinutes = makeAs("m");
    var asHours = makeAs("h");
    var asDays = makeAs("d");
    var asWeeks = makeAs("w");
    var asMonths = makeAs("M");
    var asYears = makeAs("y");
    function duration_get__get(units) {
        units = normalizeUnits(units);
        return this[units + "s"]();
    }
    function makeGetter(name) {
        return function() {
            return this._data[name];
        };
    }
    var milliseconds = makeGetter("milliseconds");
    var seconds = makeGetter("seconds");
    var minutes = makeGetter("minutes");
    var hours = makeGetter("hours");
    var days = makeGetter("days");
    var months = makeGetter("months");
    var years = makeGetter("years");
    function weeks() {
        return absFloor(this.days() / 7);
    }
    var round = Math.round;
    var thresholds = {
        s: 45,
        m: 45,
        h: 22,
        d: 26,
        M: 11
    };
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }
    function duration_humanize__relativeTime(posNegDuration, withoutSuffix, locale) {
        var duration = create__createDuration(posNegDuration).abs();
        var seconds = round(duration.as("s"));
        var minutes = round(duration.as("m"));
        var hours = round(duration.as("h"));
        var days = round(duration.as("d"));
        var months = round(duration.as("M"));
        var years = round(duration.as("y"));
        var a = seconds < thresholds.s && [ "s", seconds ] || minutes <= 1 && [ "m" ] || minutes < thresholds.m && [ "mm", minutes ] || hours <= 1 && [ "h" ] || hours < thresholds.h && [ "hh", hours ] || days <= 1 && [ "d" ] || days < thresholds.d && [ "dd", days ] || months <= 1 && [ "M" ] || months < thresholds.M && [ "MM", months ] || years <= 1 && [ "y" ] || [ "yy", years ];
        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale;
        return substituteTimeAgo.apply(null, a);
    }
    function duration_humanize__getSetRelativeTimeRounding(roundingFunction) {
        if (roundingFunction === undefined) {
            return round;
        }
        if (typeof roundingFunction === "function") {
            round = roundingFunction;
            return true;
        }
        return false;
    }
    function duration_humanize__getSetRelativeTimeThreshold(threshold, limit) {
        if (thresholds[threshold] === undefined) {
            return false;
        }
        if (limit === undefined) {
            return thresholds[threshold];
        }
        thresholds[threshold] = limit;
        return true;
    }
    function humanize(withSuffix) {
        var locale = this.localeData();
        var output = duration_humanize__relativeTime(this, !withSuffix, locale);
        if (withSuffix) {
            output = locale.pastFuture(+this, output);
        }
        return locale.postformat(output);
    }
    var iso_string__abs = Math.abs;
    function iso_string__toISOString() {
        var seconds = iso_string__abs(this._milliseconds) / 1e3;
        var days = iso_string__abs(this._days);
        var months = iso_string__abs(this._months);
        var minutes, hours, years;
        minutes = absFloor(seconds / 60);
        hours = absFloor(minutes / 60);
        seconds %= 60;
        minutes %= 60;
        years = absFloor(months / 12);
        months %= 12;
        var Y = years;
        var M = months;
        var D = days;
        var h = hours;
        var m = minutes;
        var s = seconds;
        var total = this.asSeconds();
        if (!total) {
            return "P0D";
        }
        return (total < 0 ? "-" : "") + "P" + (Y ? Y + "Y" : "") + (M ? M + "M" : "") + (D ? D + "D" : "") + (h || m || s ? "T" : "") + (h ? h + "H" : "") + (m ? m + "M" : "") + (s ? s + "S" : "");
    }
    var duration_prototype__proto = Duration.prototype;
    duration_prototype__proto.abs = duration_abs__abs;
    duration_prototype__proto.add = duration_add_subtract__add;
    duration_prototype__proto.subtract = duration_add_subtract__subtract;
    duration_prototype__proto.as = as;
    duration_prototype__proto.asMilliseconds = asMilliseconds;
    duration_prototype__proto.asSeconds = asSeconds;
    duration_prototype__proto.asMinutes = asMinutes;
    duration_prototype__proto.asHours = asHours;
    duration_prototype__proto.asDays = asDays;
    duration_prototype__proto.asWeeks = asWeeks;
    duration_prototype__proto.asMonths = asMonths;
    duration_prototype__proto.asYears = asYears;
    duration_prototype__proto.valueOf = duration_as__valueOf;
    duration_prototype__proto._bubble = bubble;
    duration_prototype__proto.get = duration_get__get;
    duration_prototype__proto.milliseconds = milliseconds;
    duration_prototype__proto.seconds = seconds;
    duration_prototype__proto.minutes = minutes;
    duration_prototype__proto.hours = hours;
    duration_prototype__proto.days = days;
    duration_prototype__proto.weeks = weeks;
    duration_prototype__proto.months = months;
    duration_prototype__proto.years = years;
    duration_prototype__proto.humanize = humanize;
    duration_prototype__proto.toISOString = iso_string__toISOString;
    duration_prototype__proto.toString = iso_string__toISOString;
    duration_prototype__proto.toJSON = iso_string__toISOString;
    duration_prototype__proto.locale = locale;
    duration_prototype__proto.localeData = localeData;
    duration_prototype__proto.toIsoString = deprecate("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)", iso_string__toISOString);
    duration_prototype__proto.lang = lang;
    addFormatToken("X", 0, 0, "unix");
    addFormatToken("x", 0, 0, "valueOf");
    addRegexToken("x", matchSigned);
    addRegexToken("X", matchTimestamp);
    addParseToken("X", function(input, array, config) {
        config._d = new Date(parseFloat(input, 10) * 1e3);
    });
    addParseToken("x", function(input, array, config) {
        config._d = new Date(toInt(input));
    });
    utils_hooks__hooks.version = "2.15.2";
    setHookCallback(local__createLocal);
    utils_hooks__hooks.fn = momentPrototype;
    utils_hooks__hooks.min = min;
    utils_hooks__hooks.max = max;
    utils_hooks__hooks.now = now;
    utils_hooks__hooks.utc = create_utc__createUTC;
    utils_hooks__hooks.unix = moment__createUnix;
    utils_hooks__hooks.months = lists__listMonths;
    utils_hooks__hooks.isDate = isDate;
    utils_hooks__hooks.locale = locale_locales__getSetGlobalLocale;
    utils_hooks__hooks.invalid = valid__createInvalid;
    utils_hooks__hooks.duration = create__createDuration;
    utils_hooks__hooks.isMoment = isMoment;
    utils_hooks__hooks.weekdays = lists__listWeekdays;
    utils_hooks__hooks.parseZone = moment__createInZone;
    utils_hooks__hooks.localeData = locale_locales__getLocale;
    utils_hooks__hooks.isDuration = isDuration;
    utils_hooks__hooks.monthsShort = lists__listMonthsShort;
    utils_hooks__hooks.weekdaysMin = lists__listWeekdaysMin;
    utils_hooks__hooks.defineLocale = defineLocale;
    utils_hooks__hooks.updateLocale = updateLocale;
    utils_hooks__hooks.locales = locale_locales__listLocales;
    utils_hooks__hooks.weekdaysShort = lists__listWeekdaysShort;
    utils_hooks__hooks.normalizeUnits = normalizeUnits;
    utils_hooks__hooks.relativeTimeRounding = duration_humanize__getSetRelativeTimeRounding;
    utils_hooks__hooks.relativeTimeThreshold = duration_humanize__getSetRelativeTimeThreshold;
    utils_hooks__hooks.calendarFormat = getCalendarFormat;
    utils_hooks__hooks.prototype = momentPrototype;
    var _moment = utils_hooks__hooks;
    return _moment;
});

!function(c, M) {
    "use strict";
    "object" == typeof module && module.exports ? module.exports = M(require("moment")) : "function" == typeof define && define.amd ? define([ "moment" ], M) : M(c.moment);
}(this, function(b) {
    "use strict";
    void 0 === b.version && b.default && (b = b.default);
    var M, a = {}, p = {}, n = {}, i = {}, e = {};
    b && "string" == typeof b.version || S("Moment Timezone requires Moment.js. See https://momentjs.com/timezone/docs/#/use-it/browser/");
    var c = b.version.split("."), A = +c[0], o = +c[1];
    function L(c) {
        return 96 < c ? c - 87 : 64 < c ? c - 29 : c - 48;
    }
    function z(c) {
        var M = 0, A = c.split("."), o = A[0], z = A[1] || "", b = 1, a = 0, p = 1;
        for (45 === c.charCodeAt(0) && (p = -(M = 1)); M < o.length; M++) a = 60 * a + L(o.charCodeAt(M));
        for (M = 0; M < z.length; M++) b /= 60, a += L(z.charCodeAt(M)) * b;
        return a * p;
    }
    function O(c) {
        for (var M = 0; M < c.length; M++) c[M] = z(c[M]);
    }
    function q(c, M) {
        for (var A = [], o = 0; o < M.length; o++) A[o] = c[M[o]];
        return A;
    }
    function r(c) {
        var M = c.split("|"), A = M[2].split(" "), o = M[3].split(""), z = M[4].split(" ");
        return O(A), O(o), O(z), function(c, M) {
            for (var A = 0; A < M; A++) c[A] = Math.round((c[A - 1] || 0) + 6e4 * c[A]);
            c[M - 1] = 1 / 0;
        }(z, o.length), {
            name: M[0],
            abbrs: q(M[1].split(" "), o),
            offsets: q(A, o),
            untils: z,
            population: 0 | M[5]
        };
    }
    function N(c) {
        c && this._set(r(c));
    }
    function d(c, M) {
        this.name = c, this.zones = M;
    }
    function W(c) {
        var M = c.toTimeString(), A = M.match(/\([a-z ]+\)/i);
        "GMT" === (A = A && A[0] ? (A = A[0].match(/[A-Z]/g)) ? A.join("") : void 0 : (A = M.match(/[A-Z]{3,5}/g)) ? A[0] : void 0) && (A = void 0), 
        this.at = +c, this.abbr = A, this.offset = c.getTimezoneOffset();
    }
    function f(c) {
        this.zone = c, this.offsetScore = 0, this.abbrScore = 0;
    }
    function X() {
        for (var c, M, A = new Date().getFullYear() - 2, o = new W(new Date(A, 0, 1)), z = [ o ], b = 1; b < 48; b++) (M = new W(new Date(A, b, 1))).offset !== o.offset && (c = function(c, M) {
            for (var A, o; o = 6e4 * ((M.at - c.at) / 12e4 | 0); ) (A = new W(new Date(c.at + o))).offset === c.offset ? c = A : M = A;
            return c;
        }(o, M), z.push(c), z.push(new W(new Date(c.at + 6e4)))), o = M;
        for (b = 0; b < 4; b++) z.push(new W(new Date(A + b, 0, 1))), z.push(new W(new Date(A + b, 6, 1)));
        return z;
    }
    function u(c, M) {
        return c.offsetScore !== M.offsetScore ? c.offsetScore - M.offsetScore : c.abbrScore !== M.abbrScore ? c.abbrScore - M.abbrScore : c.zone.population !== M.zone.population ? M.zone.population - c.zone.population : M.zone.name.localeCompare(c.zone.name);
    }
    function B() {
        try {
            var c = Intl.DateTimeFormat().resolvedOptions().timeZone;
            if (c && 3 < c.length) {
                var M = i[l(c)];
                if (M) return M;
                S("Moment Timezone found " + c + " from the Intl api, but did not have that data loaded.");
            }
        } catch (c) {}
        for (var A, o, z = X(), b = z.length, a = function(c) {
            for (var M, A, o = c.length, z = {}, b = [], a = 0; a < o; a++) for (M in A = e[c[a].offset] || {}) A.hasOwnProperty(M) && (z[M] = !0);
            for (a in z) z.hasOwnProperty(a) && b.push(i[a]);
            return b;
        }(z), p = [], n = 0; n < a.length; n++) {
            for (A = new f(t(a[n])), o = 0; o < b; o++) A.scoreOffsetAt(z[o]);
            p.push(A);
        }
        return p.sort(u), 0 < p.length ? p[0].zone.name : void 0;
    }
    function l(c) {
        return (c || "").toLowerCase().replace(/\//g, "_");
    }
    function T(c) {
        var M, A, o, z;
        for ("string" == typeof c && (c = [ c ]), M = 0; M < c.length; M++) z = l(A = (o = c[M].split("|"))[0]), 
        a[z] = c[M], i[z] = A, function(c, M) {
            var A, o;
            for (O(M), A = 0; A < M.length; A++) o = M[A], e[o] = e[o] || {}, e[o][c] = !0;
        }(z, o[2].split(" "));
    }
    function t(c, M) {
        c = l(c);
        var A, o = a[c];
        return o instanceof N ? o : "string" == typeof o ? (o = new N(o), a[c] = o) : p[c] && M !== t && (A = t(p[c], t)) ? ((o = a[c] = new N())._set(A), 
        o.name = i[c], o) : null;
    }
    function s(c) {
        var M, A, o, z;
        for ("string" == typeof c && (c = [ c ]), M = 0; M < c.length; M++) o = l((A = c[M].split("|"))[0]), 
        z = l(A[1]), p[o] = z, i[o] = A[0], p[z] = o, i[z] = A[1];
    }
    function E(c) {
        T(c.zones), s(c.links), function(c) {
            var M, A, o, z;
            if (c && c.length) for (M = 0; M < c.length; M++) A = (z = c[M].split("|"))[0].toUpperCase(), 
            o = z[1].split(" "), n[A] = new d(A, o);
        }(c.countries), R.dataVersion = c.version;
    }
    function m(c) {
        return m.didShowError || (m.didShowError = !0, S("moment.tz.zoneExists('" + c + "') has been deprecated in favor of !moment.tz.zone('" + c + "')")), 
        !!t(c);
    }
    function C(c) {
        var M = "X" === c._f || "x" === c._f;
        return !(!c._a || void 0 !== c._tzm || M);
    }
    function S(c) {
        "undefined" != typeof console && "function" == typeof console.error && console.error(c);
    }
    function R(c) {
        var M = Array.prototype.slice.call(arguments, 0, -1), A = arguments[arguments.length - 1], o = t(A), z = b.utc.apply(null, M);
        return o && !b.isMoment(c) && C(z) && z.add(o.parse(z), "minutes"), z.tz(A), z;
    }
    (A < 2 || 2 == A && o < 6) && S("Moment Timezone requires Moment.js >= 2.6.0. You are using Moment.js " + b.version + ". See momentjs.com"), 
    N.prototype = {
        _set: function(c) {
            this.name = c.name, this.abbrs = c.abbrs, this.untils = c.untils, this.offsets = c.offsets, 
            this.population = c.population;
        },
        _index: function(c) {
            for (var M = +c, A = this.untils, o = 0; o < A.length; o++) if (M < A[o]) return o;
        },
        countries: function() {
            var M = this.name;
            return Object.keys(n).filter(function(c) {
                return -1 !== n[c].zones.indexOf(M);
            });
        },
        parse: function(c) {
            for (var M, A, o, z = +c, b = this.offsets, a = this.untils, p = a.length - 1, n = 0; n < p; n++) if (M = b[n], 
            A = b[n + 1], o = b[n ? n - 1 : n], M < A && R.moveAmbiguousForward ? M = A : o < M && R.moveInvalidForward && (M = o), 
            z < a[n] - 6e4 * M) return b[n];
            return b[p];
        },
        abbr: function(c) {
            return this.abbrs[this._index(c)];
        },
        offset: function(c) {
            return S("zone.offset has been deprecated in favor of zone.utcOffset"), this.offsets[this._index(c)];
        },
        utcOffset: function(c) {
            return this.offsets[this._index(c)];
        }
    }, f.prototype.scoreOffsetAt = function(c) {
        this.offsetScore += Math.abs(this.zone.utcOffset(c.at) - c.offset), this.zone.abbr(c.at).replace(/[^A-Z]/g, "") !== c.abbr && this.abbrScore++;
    }, R.version = "0.5.33", R.dataVersion = "", R._zones = a, R._links = p, R._names = i, 
    R._countries = n, R.add = T, R.link = s, R.load = E, R.zone = t, R.zoneExists = m, 
    R.guess = function(c) {
        return M && !c || (M = B()), M;
    }, R.names = function() {
        var c, M = [];
        for (c in i) i.hasOwnProperty(c) && (a[c] || a[p[c]]) && i[c] && M.push(i[c]);
        return M.sort();
    }, R.Zone = N, R.unpack = r, R.unpackBase60 = z, R.needsOffset = C, R.moveInvalidForward = !0, 
    R.moveAmbiguousForward = !1, R.countries = function() {
        return Object.keys(n);
    }, R.zonesForCountry = function(c, M) {
        var A;
        if (A = (A = c).toUpperCase(), !(c = n[A] || null)) return null;
        var o = c.zones.sort();
        return M ? o.map(function(c) {
            return {
                name: c,
                offset: t(c).utcOffset(new Date())
            };
        }) : o;
    };
    var g, P = b.fn;
    function D(c) {
        return function() {
            return this._z ? this._z.abbr(this) : c.call(this);
        };
    }
    function h(c) {
        return function() {
            return this._z = null, c.apply(this, arguments);
        };
    }
    b.tz = R, b.defaultZone = null, b.updateOffset = function(c, M) {
        var A, o, z = b.defaultZone;
        void 0 === c._z && (z && C(c) && !c._isUTC && (c._d = b.utc(c._a)._d, c.utc().add(z.parse(c), "minutes")), 
        c._z = z), c._z && (o = c._z.utcOffset(c), Math.abs(o) < 16 && (o /= 60), void 0 !== c.utcOffset ? (A = c._z, 
        c.utcOffset(-o, M), c._z = A) : c.zone(o, M));
    }, P.tz = function(c, M) {
        if (c) {
            if ("string" != typeof c) throw new Error("Time zone name must be a string, got " + c + " [" + typeof c + "]");
            return this._z = t(c), this._z ? b.updateOffset(this, M) : S("Moment Timezone has no data for " + c + ". See http://momentjs.com/timezone/docs/#/data-loading/."), 
            this;
        }
        if (this._z) return this._z.name;
    }, P.zoneName = D(P.zoneName), P.zoneAbbr = D(P.zoneAbbr), P.utc = h(P.utc), P.local = h(P.local), 
    P.utcOffset = (g = P.utcOffset, function() {
        return 0 < arguments.length && (this._z = null), g.apply(this, arguments);
    }), b.tz.setDefault = function(c) {
        return (A < 2 || 2 == A && o < 9) && S("Moment Timezone setDefault() requires Moment.js >= 2.9.0. You are using Moment.js " + b.version + "."), 
        b.defaultZone = c ? t(c) : null, b;
    };
    var k = b.momentProperties;
    return "[object Array]" === Object.prototype.toString.call(k) ? (k.push("_z"), k.push("_a")) : k && (k._z = null), 
    E({
        version: "2021a",
        zones: [ "Africa/Abidjan|LMT GMT|g.8 0|01|-2ldXH.Q|48e5", "Africa/Accra|LMT GMT +0020 +0030|.Q 0 -k -u|01212121212121212121212121212121212121212121212131313131313131|-2bRzX.8 9RbX.8 fdE 1BAk MLE 1Bck MLE 1Bck MLE 1Bck MLE 1BAk MLE 1Bck MLE 1Bck MLE 1Bck MLE 1BAk MLE 1Bck MLE 1Bck MLE 1Bck MLE 1BAk MLE 1Bck MLE 1Bck MLE 1Bck MLE 1BAk MLE 1Bck MLE 1Bck MLE 1Bck MLE Mok 1BXE M0k 1BXE fak 9vbu bjCu MLu 1Bcu MLu 1BAu MLu 1Bcu MLu 1Bcu MLu 1Bcu MLu|41e5", "Africa/Nairobi|LMT +0230 EAT +0245|-2r.g -2u -30 -2J|012132|-2ua2r.g N6nV.g 3Fbu h1cu dzbJ|47e5", "Africa/Algiers|PMT WET WEST CET CEST|-9.l 0 -10 -10 -20|0121212121212121343431312123431213|-2nco9.l cNb9.l HA0 19A0 1iM0 11c0 1oo0 Wo0 1rc0 QM0 1EM0 UM0 DA0 Imo0 rd0 De0 9Xz0 1fb0 1ap0 16K0 2yo0 mEp0 hwL0 jxA0 11A0 dDd0 17b0 11B0 1cN0 2Dy0 1cN0 1fB0 1cL0|26e5", "Africa/Lagos|LMT GMT +0030 WAT|-d.z 0 -u -10|01023|-2B40d.z 7iod.z dnXK.p dLzH.z|17e6", "Africa/Bissau|LMT -01 GMT|12.k 10 0|012|-2ldX0 2xoo0|39e4", "Africa/Maputo|LMT CAT|-2a.k -20|01|-2GJea.k|26e5", "Africa/Cairo|EET EEST|-20 -30|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-1bIO0 vb0 1ip0 11z0 1iN0 1nz0 12p0 1pz0 10N0 1pz0 16p0 1jz0 s3d0 Vz0 1oN0 11b0 1oO0 10N0 1pz0 10N0 1pb0 10N0 1pb0 10N0 1pb0 10N0 1pz0 10N0 1pb0 10N0 1pb0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1WL0 rd0 1Rz0 wp0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1qL0 Xd0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1ny0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 WL0 1qN0 Rb0 1wp0 On0 1zd0 Lz0 1EN0 Fb0 c10 8n0 8Nd0 gL0 e10 mn0|15e6", "Africa/Casablanca|LMT +00 +01|u.k 0 -10|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212|-2gMnt.E 130Lt.E rb0 Dd0 dVb0 b6p0 TX0 EoB0 LL0 gnd0 rz0 43d0 AL0 1Nd0 XX0 1Cp0 pz0 dEp0 4mn0 SyN0 AL0 1Nd0 wn0 1FB0 Db0 1zd0 Lz0 1Nf0 wM0 co0 go0 1o00 s00 dA0 vc0 11A0 A00 e00 y00 11A0 uM0 e00 Dc0 11A0 s00 e00 IM0 WM0 mo0 gM0 LA0 WM0 jA0 e00 28M0 e00 2600 gM0 2600 e00 2600 gM0 2600 gM0 2600 e00 2600 gM0 2600 e00 28M0 e00 2600 gM0 2600 e00 2600 gM0 2600 gM0 2600 e00 2600 gM0 2600 e00 2600 gM0 2600 gM0 2600 e00 2600 gM0|32e5", "Africa/Ceuta|WET WEST CET CEST|0 -10 -10 -20|010101010101010101010232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-25KN0 11z0 drd0 18p0 3HX0 17d0 1fz0 1a10 1io0 1a00 1y7o0 LL0 gnd0 rz0 43d0 AL0 1Nd0 XX0 1Cp0 pz0 dEp0 4VB0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|85e3", "Africa/El_Aaiun|LMT -01 +00 +01|Q.M 10 0 -10|012323232323232323232323232323232323232323232323232323232323232323232323232323232323|-1rDz7.c 1GVA7.c 6L0 AL0 1Nd0 XX0 1Cp0 pz0 1cBB0 AL0 1Nd0 wn0 1FB0 Db0 1zd0 Lz0 1Nf0 wM0 co0 go0 1o00 s00 dA0 vc0 11A0 A00 e00 y00 11A0 uM0 e00 Dc0 11A0 s00 e00 IM0 WM0 mo0 gM0 LA0 WM0 jA0 e00 28M0 e00 2600 gM0 2600 e00 2600 gM0 2600 gM0 2600 e00 2600 gM0 2600 e00 28M0 e00 2600 gM0 2600 e00 2600 gM0 2600 gM0 2600 e00 2600 gM0 2600 e00 2600 gM0 2600 gM0 2600 e00 2600 gM0|20e4", "Africa/Johannesburg|SAST SAST SAST|-1u -20 -30|012121|-2GJdu 1Ajdu 1cL0 1cN0 1cL0|84e5", "Africa/Juba|LMT CAT CAST EAT|-26.s -20 -30 -30|012121212121212121212121212121212131|-1yW26.s 1zK06.s 16L0 1iN0 17b0 1jd0 17b0 1ip0 17z0 1i10 17X0 1hB0 18n0 1hd0 19b0 1gp0 19z0 1iN0 17b0 1ip0 17z0 1i10 18n0 1hd0 18L0 1gN0 19b0 1gp0 19z0 1iN0 17z0 1i10 17X0 yGd0 PeX0|", "Africa/Khartoum|LMT CAT CAST EAT|-2a.8 -20 -30 -30|012121212121212121212121212121212131|-1yW2a.8 1zK0a.8 16L0 1iN0 17b0 1jd0 17b0 1ip0 17z0 1i10 17X0 1hB0 18n0 1hd0 19b0 1gp0 19z0 1iN0 17b0 1ip0 17z0 1i10 18n0 1hd0 18L0 1gN0 19b0 1gp0 19z0 1iN0 17z0 1i10 17X0 yGd0 HjL0|51e5", "Africa/Monrovia|MMT MMT GMT|H.8 I.u 0|012|-23Lzg.Q 28G01.m|11e5", "Africa/Ndjamena|LMT WAT WAST|-10.c -10 -20|0121|-2le10.c 2J3c0.c Wn0|13e5", "Africa/Sao_Tome|LMT GMT WAT|A.J 0 -10|0121|-2le00 4i6N0 2q00|", "Africa/Tripoli|LMT CET CEST EET|-Q.I -10 -20 -20|012121213121212121212121213123123|-21JcQ.I 1hnBQ.I vx0 4iP0 xx0 4eN0 Bb0 7ip0 U0n0 A10 1db0 1cN0 1db0 1dd0 1db0 1eN0 1bb0 1e10 1cL0 1c10 1db0 1dd0 1db0 1cN0 1db0 1q10 fAn0 1ep0 1db0 AKq0 TA0 1o00|11e5", "Africa/Tunis|PMT CET CEST|-9.l -10 -20|0121212121212121212121212121212121|-2nco9.l 18pa9.l 1qM0 DA0 3Tc0 11B0 1ze0 WM0 7z0 3d0 14L0 1cN0 1f90 1ar0 16J0 1gXB0 WM0 1rA0 11c0 nwo0 Ko0 1cM0 1cM0 1rA0 10M0 zuM0 10N0 1aN0 1qM0 WM0 1qM0 11A0 1o00|20e5", "Africa/Windhoek|+0130 SAST SAST CAT WAT|-1u -20 -30 -20 -10|01213434343434343434343434343434343434343434343434343|-2GJdu 1Ajdu 1cL0 1SqL0 9Io0 16P0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0|32e4", "America/Adak|NST NWT NPT BST BDT AHST HST HDT|b0 a0 a0 b0 a0 a0 a0 90|012034343434343434343434343434343456767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-17SX0 8wW0 iB0 Qlb0 52O0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 cm0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|326", "America/Anchorage|AST AWT APT AHST AHDT YST AKST AKDT|a0 90 90 a0 90 90 90 80|012034343434343434343434343434343456767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-17T00 8wX0 iA0 Qlb0 52O0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 cm0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|30e4", "America/Port_of_Spain|LMT AST|46.4 40|01|-2kNvR.U|43e3", "America/Araguaina|LMT -03 -02|3c.M 30 20|0121212121212121212121212121212121212121212121212121|-2glwL.c HdKL.c 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 dMN0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 ny10 Lz0|14e4", "America/Argentina/Buenos_Aires|CMT -04 -03 -02|4g.M 40 30 20|01212121212121212121212121212121212121212123232323232323232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wp0 Rb0 1wp0 TX0 A4p0 uL0 1qN0 WL0|", "America/Argentina/Catamarca|CMT -04 -03 -02|4g.M 40 30 20|01212121212121212121212121212121212121212123232323132321232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wq0 Ra0 1wp0 TX0 rlB0 7B0 8zb0 uL0|", "America/Argentina/Cordoba|CMT -04 -03 -02|4g.M 40 30 20|01212121212121212121212121212121212121212123232323132323232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wq0 Ra0 1wp0 TX0 A4p0 uL0 1qN0 WL0|", "America/Argentina/Jujuy|CMT -04 -03 -02|4g.M 40 30 20|012121212121212121212121212121212121212121232323121323232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1ze0 TX0 1ld0 WK0 1wp0 TX0 A4p0 uL0|", "America/Argentina/La_Rioja|CMT -04 -03 -02|4g.M 40 30 20|012121212121212121212121212121212121212121232323231232321232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Qn0 qO0 16n0 Rb0 1wp0 TX0 rlB0 7B0 8zb0 uL0|", "America/Argentina/Mendoza|CMT -04 -03 -02|4g.M 40 30 20|01212121212121212121212121212121212121212123232312121321232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1u20 SL0 1vd0 Tb0 1wp0 TW0 ri10 Op0 7TX0 uL0|", "America/Argentina/Rio_Gallegos|CMT -04 -03 -02|4g.M 40 30 20|01212121212121212121212121212121212121212123232323232321232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wp0 Rb0 1wp0 TX0 rlB0 7B0 8zb0 uL0|", "America/Argentina/Salta|CMT -04 -03 -02|4g.M 40 30 20|012121212121212121212121212121212121212121232323231323232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wq0 Ra0 1wp0 TX0 A4p0 uL0|", "America/Argentina/San_Juan|CMT -04 -03 -02|4g.M 40 30 20|012121212121212121212121212121212121212121232323231232321232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Qn0 qO0 16n0 Rb0 1wp0 TX0 rld0 m10 8lb0 uL0|", "America/Argentina/San_Luis|CMT -04 -03 -02|4g.M 40 30 20|012121212121212121212121212121212121212121232323121212321212|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 XX0 1q20 SL0 AN0 vDb0 m10 8lb0 8L0 jd0 1qN0 WL0 1qN0|", "America/Argentina/Tucuman|CMT -04 -03 -02|4g.M 40 30 20|0121212121212121212121212121212121212121212323232313232123232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wq0 Ra0 1wp0 TX0 rlB0 4N0 8BX0 uL0 1qN0 WL0|", "America/Argentina/Ushuaia|CMT -04 -03 -02|4g.M 40 30 20|01212121212121212121212121212121212121212123232323232321232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wp0 Rb0 1wp0 TX0 rkN0 8p0 8zb0 uL0|", "America/Curacao|LMT -0430 AST|4z.L 4u 40|012|-2kV7o.d 28KLS.d|15e4", "America/Asuncion|AMT -04 -03|3O.E 40 30|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212|-1x589.k 1DKM9.k 3CL0 3Dd0 10L0 1pB0 10n0 1pB0 10n0 1pB0 1cL0 1dd0 1db0 1dd0 1cL0 1dd0 1cL0 1dd0 1cL0 1dd0 1db0 1dd0 1cL0 1dd0 1cL0 1dd0 1cL0 1dd0 1db0 1dd0 1cL0 1lB0 14n0 1dd0 1cL0 1fd0 WL0 1rd0 1aL0 1dB0 Xz0 1qp0 Xb0 1qN0 10L0 1rB0 TX0 1tB0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 1cL0 WN0 1qL0 11B0 1nX0 1ip0 WL0 1qN0 WL0 1qN0 WL0 1tB0 TX0 1tB0 TX0 1tB0 19X0 1a10 1fz0 1a10 1fz0 1cN0 17b0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0|28e5", "America/Atikokan|CST CDT CWT CPT EST|60 50 50 50 50|0101234|-25TQ0 1in0 Rnb0 3je0 8x30 iw0|28e2", "America/Bahia_Banderas|LMT MST CST PST MDT CDT|71 70 60 80 60 50|0121212131414141414141414141414141414152525252525252525252525252525252525252525252525252525252|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 otX0 gmN0 P2N0 13Vd0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nW0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|84e3", "America/Bahia|LMT -03 -02|2y.4 30 20|01212121212121212121212121212121212121212121212121212121212121|-2glxp.U HdLp.U 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 1EN0 Lz0 1C10 IL0 1HB0 Db0 1HB0 On0 1zd0 On0 1zd0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 l5B0 Rb0|27e5", "America/Barbados|LMT BMT AST ADT|3W.t 3W.t 40 30|01232323232|-1Q0I1.v jsM0 1ODC1.v IL0 1ip0 17b0 1ip0 17b0 1ld0 13b0|28e4", "America/Belem|LMT -03 -02|3d.U 30 20|012121212121212121212121212121|-2glwK.4 HdKK.4 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0|20e5", "America/Belize|LMT CST -0530 CWT CPT CDT|5Q.M 60 5u 50 50 50|012121212121212121212121212121212121212121212121213412121212121212121212121212121212121212121215151|-2kBu7.c fPA7.c Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Rbu Rcu 7Bt0 Ni0 4nd0 Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1zcu Onu e9Au qn0 lxB0 mn0|57e3", "America/Blanc-Sablon|AST ADT AWT APT|40 30 30 30|010230|-25TS0 1in0 UGp0 8x50 iu0|11e2", "America/Boa_Vista|LMT -04 -03|42.E 40 30|0121212121212121212121212121212121|-2glvV.k HdKV.k 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 smp0 WL0 1tB0 2L0|62e2", "America/Bogota|BMT -05 -04|4U.g 50 40|0121|-2eb73.I 38yo3.I 2en0|90e5", "America/Boise|PST PDT MST MWT MPT MDT|80 70 70 60 60 60|0101023425252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252|-261q0 1nX0 11B0 1nX0 8C10 JCL0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 Dd0 1Kn0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|21e4", "America/Cambridge_Bay|-00 MST MWT MPT MDDT MDT CST CDT EST|0 70 60 60 50 60 60 50 50|0123141515151515151515151515151515151515151515678651515151515151515151515151515151515151515151515151515151515151515151515151|-21Jc0 RO90 8x20 ix0 LCL0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11A0 1nX0 2K0 WQ0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|15e2", "America/Campo_Grande|LMT -04 -03|3C.s 40 30|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2glwl.w HdLl.w 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 1EN0 Lz0 1C10 IL0 1HB0 Db0 1HB0 On0 1zd0 On0 1zd0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 1C10 Lz0 1Ip0 HX0 1zd0 On0 1HB0 IL0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1zd0 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1HB0 FX0|77e4", "America/Cancun|LMT CST EST EDT CDT|5L.4 60 50 40 50|0123232341414141414141414141414141414141412|-1UQG0 2q2o0 yLB0 1lb0 14p0 1lb0 14p0 Lz0 xB0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 Dd0|63e4", "America/Caracas|CMT -0430 -04|4r.E 4u 40|01212|-2kV7w.k 28KM2.k 1IwOu kqo0|29e5", "America/Cayenne|LMT -04 -03|3t.k 40 30|012|-2mrwu.E 2gWou.E|58e3", "America/Panama|CMT EST|5j.A 50|01|-2uduE.o|15e5", "America/Chicago|CST CDT EST CWT CPT|60 50 50 50 50|01010101010101010101010101010101010102010101010103401010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 1wp0 TX0 WN0 1qL0 1cN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 11B0 1Hz0 14p0 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 RB0 8x30 iw0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|92e5", "America/Chihuahua|LMT MST CST CDT MDT|74.k 70 60 50 60|0121212323241414141414141414141414141414141414141414141414141414141414141414141414141414141|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 2zQN0 1lb0 14p0 1lb0 14q0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|81e4", "America/Costa_Rica|SJMT CST CDT|5A.d 60 50|0121212121|-1Xd6n.L 2lu0n.L Db0 1Kp0 Db0 pRB0 15b0 1kp0 mL0|12e5", "America/Creston|MST PST|70 80|010|-29DR0 43B0|53e2", "America/Cuiaba|LMT -04 -03|3I.k 40 30|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2glwf.E HdLf.E 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 1EN0 Lz0 1C10 IL0 1HB0 Db0 1HB0 On0 1zd0 On0 1zd0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 4a10 HX0 1zd0 On0 1HB0 IL0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1zd0 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1HB0 FX0|54e4", "America/Danmarkshavn|LMT -03 -02 GMT|1e.E 30 20 0|01212121212121212121212121212121213|-2a5WJ.k 2z5fJ.k 19U0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 DC0|8", "America/Dawson_Creek|PST PDT PWT PPT MST|80 70 70 70 70|0102301010101010101010101010101010101010101010101010101014|-25TO0 1in0 UGp0 8x10 iy0 3NB0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 ML0|12e3", "America/Dawson|YST YDT YWT YPT YDDT PST PDT MST|90 80 80 80 70 80 70 70|010102304056565656565656565656565656565656565656565656565656565656565656565656565656565656567|-25TN0 1in0 1o10 13V0 Ser0 8x00 iz0 LCL0 1fA0 jrA0 fNd0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1z90|13e2", "America/Denver|MST MDT MWT MPT|70 60 60 60|01010101023010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261r0 1nX0 11B0 1nX0 11B0 1qL0 WN0 mn0 Ord0 8x20 ix0 LCN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|26e5", "America/Detroit|LMT CST EST EWT EPT EDT|5w.b 60 50 40 40 40|0123425252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252|-2Cgir.N peqr.N 156L0 8x40 iv0 6fd0 11z0 JxX1 SMX 1cN0 1cL0 aW10 1cL0 s10 1Vz0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|37e5", "America/Edmonton|LMT MST MDT MWT MPT|7x.Q 70 60 60 60|0121212121212134121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2yd4q.8 shdq.8 1in0 17d0 hz0 2dB0 1fz0 1a10 11z0 1qN0 WL0 1qN0 11z0 IGN0 8x20 ix0 3NB0 11z0 XQp0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|10e5", "America/Eirunepe|LMT -05 -04|4D.s 50 40|0121212121212121212121212121212121|-2glvk.w HdLk.w 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 dPB0 On0 yTd0 d5X0|31e3", "America/El_Salvador|LMT CST CDT|5U.M 60 50|012121|-1XiG3.c 2Fvc3.c WL0 1qN0 WL0|11e5", "America/Tijuana|LMT MST PST PDT PWT PPT|7M.4 70 80 70 70 70|012123245232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-1UQE0 4PX0 8mM0 8lc0 SN0 1cL0 pHB0 83r0 zI0 5O10 1Rz0 cOO0 11A0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 BUp0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 U10 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|20e5", "America/Fort_Nelson|PST PDT PWT PPT MST|80 70 70 70 70|01023010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010104|-25TO0 1in0 UGp0 8x10 iy0 3NB0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0|39e2", "America/Fort_Wayne|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|010101023010101010101010101040454545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 QI10 Db0 RB0 8x30 iw0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 5Tz0 1o10 qLb0 1cL0 1cN0 1cL0 1qhd0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|", "America/Fortaleza|LMT -03 -02|2y 30 20|0121212121212121212121212121212121212121|-2glxq HdLq 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 nsp0 WL0 1tB0 5z0 2mN0 On0|34e5", "America/Glace_Bay|LMT AST ADT AWT APT|3X.M 40 30 30 30|012134121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2IsI0.c CwO0.c 1in0 UGp0 8x50 iu0 iq10 11z0 Jg10 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|19e3", "America/Godthab|LMT -03 -02|3q.U 30 20|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2a5Ux.4 2z5dx.4 19U0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|17e3", "America/Goose_Bay|NST NDT NST NDT NWT NPT AST ADT ADDT|3u.Q 2u.Q 3u 2u 2u 2u 40 30 20|010232323232323245232323232323232323232323232323232323232326767676767676767676767676767676767676767676768676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-25TSt.8 1in0 DXb0 2HbX.8 WL0 1qN0 WL0 1qN0 WL0 1tB0 TX0 1tB0 WL0 1qN0 WL0 1qN0 7UHu itu 1tB0 WL0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1tB0 WL0 1ld0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 S10 g0u 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14n1 1lb0 14p0 1nW0 11C0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zcX Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|76e2", "America/Grand_Turk|KMT EST EDT AST|57.a 50 40 40|0121212121212121212121212121212121212121212121212121212121212121212121212132121212121212121212121212121212121212121|-2l1uQ.O 2HHBQ.O 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 7jA0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|37e2", "America/Guatemala|LMT CST CDT|62.4 60 50|0121212121|-24KhV.U 2efXV.U An0 mtd0 Nz0 ifB0 17b0 zDB0 11z0|13e5", "America/Guayaquil|QMT -05 -04|5e 50 40|0121|-1yVSK 2uILK rz0|27e5", "America/Guyana|LMT -0345 -03 -04|3Q.E 3J 30 40|0123|-2dvU7.k 2r6LQ.k Bxbf|80e4", "America/Halifax|LMT AST ADT AWT APT|4e.o 40 30 30 30|0121212121212121212121212121212121212121212121212134121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2IsHJ.A xzzJ.A 1db0 3I30 1in0 3HX0 IL0 1E10 ML0 1yN0 Pb0 1Bd0 Mn0 1Bd0 Rz0 1w10 Xb0 1w10 LX0 1w10 Xb0 1w10 Lz0 1C10 Jz0 1E10 OL0 1yN0 Un0 1qp0 Xb0 1qp0 11X0 1w10 Lz0 1HB0 LX0 1C10 FX0 1w10 Xb0 1qp0 Xb0 1BB0 LX0 1td0 Xb0 1qp0 Xb0 Rf0 8x50 iu0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 3Qp0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 3Qp0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 6i10 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|39e4", "America/Havana|HMT CST CDT|5t.A 50 40|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1Meuu.o 72zu.o ML0 sld0 An0 1Nd0 Db0 1Nd0 An0 6Ep0 An0 1Nd0 An0 JDd0 Mn0 1Ap0 On0 1fd0 11X0 1qN0 WL0 1wp0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 14n0 1ld0 14L0 1kN0 15b0 1kp0 1cL0 1cN0 1fz0 1a10 1fz0 1fB0 11z0 14p0 1nX0 11B0 1nX0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 14n0 1ld0 14n0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 1a10 1in0 1a10 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 17c0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 11A0 6i00 Rc0 1wo0 U00 1tA0 Rc0 1wo0 U00 1wo0 U00 1zc0 U00 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0|21e5", "America/Hermosillo|LMT MST CST PST MDT|7n.Q 70 60 80 60|0121212131414141|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 otX0 gmN0 P2N0 13Vd0 1lb0 14p0 1lb0 14p0 1lb0|64e4", "America/Indiana/Knox|CST CDT CWT CPT EST|60 50 50 50 50|0101023010101010101010101010101010101040101010101010101010101010101010101010101010101010141010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 3NB0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 11z0 1o10 11z0 1o10 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 3Cn0 8wp0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 z8o0 1o00 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|", "America/Indiana/Marengo|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|0101023010101010101010104545454545414545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 dyN0 11z0 6fd0 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 jrz0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1VA0 LA0 1BX0 1e6p0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|", "America/Indiana/Petersburg|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|01010230101010101010101010104010101010101010101010141014545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 njX0 WN0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 3Fb0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 19co0 1o00 Rd0 1zb0 Oo0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|", "America/Indiana/Tell_City|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|01010230101010101010101010401054541010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 njX0 WN0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 8wn0 1cN0 1cL0 1cN0 1cK0 1cN0 1cL0 1qhd0 1o00 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|", "America/Indiana/Vevay|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|010102304545454545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 kPB0 Awn0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1lnd0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|", "America/Indiana/Vincennes|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|01010230101010101010101010101010454541014545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 1o10 11z0 g0p0 11z0 1o10 11z0 1qL0 WN0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 caL0 1cL0 1cN0 1cL0 1qhd0 1o00 Rd0 1zb0 Oo0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|", "America/Indiana/Winamac|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|01010230101010101010101010101010101010454541054545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 jrz0 1cL0 1cN0 1cL0 1qhd0 1o00 Rd0 1za0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|", "America/Inuvik|-00 PST PDDT MST MDT|0 80 60 70 60|0121343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343|-FnA0 tWU0 1fA0 wPe0 2pz0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|35e2", "America/Iqaluit|-00 EWT EPT EST EDDT EDT CST CDT|0 40 40 50 30 40 60 50|01234353535353535353535353535353535353535353567353535353535353535353535353535353535353535353535353535353535353535353535353|-16K00 7nX0 iv0 LCL0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11C0 1nX0 11A0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|67e2", "America/Jamaica|KMT EST EDT|57.a 50 40|0121212121212121212121|-2l1uQ.O 2uM1Q.O 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0|94e4", "America/Juneau|PST PWT PPT PDT YDT YST AKST AKDT|80 70 70 70 80 90 90 80|01203030303030303030303030403030356767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-17T20 8x10 iy0 Vo10 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cM0 1cM0 1cL0 1cN0 1fz0 1a10 1fz0 co0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|33e3", "America/Kentucky/Louisville|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|0101010102301010101010101010101010101454545454545414545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 3Fd0 Nb0 LPd0 11z0 RB0 8x30 iw0 1nX1 e0X 9vd0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 xz0 gso0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1VA0 LA0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|", "America/Kentucky/Monticello|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|0101023010101010101010101010101010101010101010101010101010101010101010101454545454545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 SWp0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11A0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|", "America/La_Paz|CMT BST -04|4w.A 3w.A 40|012|-1x37r.o 13b0|19e5", "America/Lima|LMT -05 -04|58.A 50 40|0121212121212121|-2tyGP.o 1bDzP.o zX0 1aN0 1cL0 1cN0 1cL0 1PrB0 zX0 1O10 zX0 6Gp0 zX0 98p0 zX0|11e6", "America/Los_Angeles|PST PDT PWT PPT|80 70 70 70|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261q0 1nX0 11B0 1nX0 SgN0 8x10 iy0 5Wp1 1VaX 3dA0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1a00 1fA0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|15e6", "America/Maceio|LMT -03 -02|2m.Q 30 20|012121212121212121212121212121212121212121|-2glxB.8 HdLB.8 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 dMN0 Lz0 8Q10 WL0 1tB0 5z0 2mN0 On0|93e4", "America/Managua|MMT CST EST CDT|5J.c 60 50 50|0121313121213131|-1quie.M 1yAMe.M 4mn0 9Up0 Dz0 1K10 Dz0 s3F0 1KH0 DB0 9In0 k8p0 19X0 1o30 11y0|22e5", "America/Manaus|LMT -04 -03|40.4 40 30|01212121212121212121212121212121|-2glvX.U HdKX.U 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 dPB0 On0|19e5", "America/Martinique|FFMT AST ADT|44.k 40 30|0121|-2mPTT.E 2LPbT.E 19X0|39e4", "America/Matamoros|LMT CST CDT|6E 60 50|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1UQG0 2FjC0 1nX0 i6p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 U10 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|45e4", "America/Mazatlan|LMT MST CST PST MDT|75.E 70 60 80 60|0121212131414141414141414141414141414141414141414141414141414141414141414141414141414141414141|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 otX0 gmN0 P2N0 13Vd0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|44e4", "America/Menominee|CST CDT CWT CPT EST|60 50 50 50 50|01010230101041010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 1o10 11z0 LCN0 1fz0 6410 9Jb0 1cM0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|85e2", "America/Merida|LMT CST EST CDT|5W.s 60 50 50|0121313131313131313131313131313131313131313131313131313131313131313131313131313131313131|-1UQG0 2q2o0 2hz0 wu30 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|11e5", "America/Metlakatla|PST PWT PPT PDT AKST AKDT|80 70 70 70 90 80|01203030303030303030303030303030304545450454545454545454545454545454545454545454|-17T20 8x10 iy0 Vo10 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1hU10 Rd0 1zb0 Op0 1zb0 Op0 1zb0 uM0 jB0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|14e2", "America/Mexico_City|LMT MST CST CDT CWT|6A.A 70 60 50 50|012121232324232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 gEn0 TX0 3xd0 Jb0 6zB0 SL0 e5d0 17b0 1Pff0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|20e6", "America/Miquelon|LMT AST -03 -02|3I.E 40 30 20|012323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-2mKkf.k 2LTAf.k gQ10 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|61e2", "America/Moncton|EST AST ADT AWT APT|50 40 30 30 30|012121212121212121212134121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2IsH0 CwN0 1in0 zAo0 An0 1Nd0 An0 1Nd0 An0 1Nd0 An0 1Nd0 An0 1Nd0 An0 1K10 Lz0 1zB0 NX0 1u10 Wn0 S20 8x50 iu0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 3Cp0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14n1 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 ReX 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|64e3", "America/Monterrey|LMT CST CDT|6F.g 60 50|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1UQG0 2FjC0 1nX0 i6p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|41e5", "America/Montevideo|LMT MMT -04 -03 -0330 -0230 -02 -0130|3I.P 3I.P 40 30 3u 2u 20 1u|012343434343434343434343435353636353636375363636363636363636363636363636363636363636363|-2tRUf.9 sVc0 8jcf.9 1db0 1dcu 1cLu 1dcu 1cLu ircu 11zu 1o0u 11zu 1o0u 11zu 1o0u 11zu 1qMu WLu 1qMu WLu 1fAu 1cLu 1o0u 11zu NAu 3jXu zXu Dq0u 19Xu pcu jz0 cm10 19X0 6tB0 1fbu 3o0u jX0 4vB0 xz0 3Cp0 mmu 1a10 IMu Db0 4c10 uL0 1Nd0 An0 1SN0 uL0 mp0 28L0 iPB0 un0 1SN0 xz0 1zd0 Lz0 1zd0 Rb0 1zd0 On0 1wp0 Rb0 s8p0 1fB0 1ip0 11z0 1ld0 14n0 1o10 11z0 1o10 11z0 1o10 14n0 1ld0 14n0 1ld0 14n0 1o10 11z0 1o10 11z0 1o10 11z0|17e5", "America/Toronto|EST EDT EWT EPT|50 40 40 40|01010101010101010101010101010101010101010101012301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-25TR0 1in0 11Wu 1nzu 1fD0 WJ0 1wr0 Nb0 1Ap0 On0 1zd0 On0 1wp0 TX0 1tB0 TX0 1tB0 TX0 1tB0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 4kM0 8x40 iv0 1o10 11z0 1nX0 11z0 1o10 11z0 1o10 1qL0 11D0 1nX0 11B0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|65e5", "America/Nassau|LMT EST EWT EPT EDT|59.u 50 40 40 40|01212314141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141|-2kNuO.u 1drbO.u 6tX0 cp0 1hS0 pF0 J630 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|24e4", "America/New_York|EST EDT EWT EPT|50 40 40 40|01010101010101010101010101010101010101010101010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261t0 1nX0 11B0 1nX0 11B0 1qL0 1a10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 RB0 8x40 iv0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|21e6", "America/Nipigon|EST EDT EWT EPT|50 40 40 40|010123010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-25TR0 1in0 Rnb0 3je0 8x40 iv0 19yN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|16e2", "America/Nome|NST NWT NPT BST BDT YST AKST AKDT|b0 a0 a0 b0 a0 90 90 80|012034343434343434343434343434343456767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-17SX0 8wW0 iB0 Qlb0 52O0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 cl0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|38e2", "America/Noronha|LMT -02 -01|29.E 20 10|0121212121212121212121212121212121212121|-2glxO.k HdKO.k 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 nsp0 WL0 1tB0 2L0 2pB0 On0|30e2", "America/North_Dakota/Beulah|MST MDT MWT MPT CST CDT|70 60 60 60 60 50|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101014545454545454545454545454545454545454545454545454545454|-261r0 1nX0 11B0 1nX0 SgN0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Oo0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|", "America/North_Dakota/Center|MST MDT MWT MPT CST CDT|70 60 60 60 60 50|010102301010101010101010101010101010101010101010101010101014545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-261r0 1nX0 11B0 1nX0 SgN0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14o0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|", "America/North_Dakota/New_Salem|MST MDT MWT MPT CST CDT|70 60 60 60 60 50|010102301010101010101010101010101010101010101010101010101010101010101010101010101454545454545454545454545454545454545454545454545454545454545454545454|-261r0 1nX0 11B0 1nX0 SgN0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14o0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|", "America/Ojinaga|LMT MST CST CDT MDT|6V.E 70 60 50 60|0121212323241414141414141414141414141414141414141414141414141414141414141414141414141414141|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 2zQN0 1lb0 14p0 1lb0 14q0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 U10 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|23e3", "America/Pangnirtung|-00 AST AWT APT ADDT ADT EDT EST CST CDT|0 40 30 30 20 30 40 50 60 50|012314151515151515151515151515151515167676767689767676767676767676767676767676767676767676767676767676767676767676767676767|-1XiM0 PnG0 8x50 iu0 LCL0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1o00 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11C0 1nX0 11A0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|14e2", "America/Paramaribo|LMT PMT PMT -0330 -03|3E.E 3E.Q 3E.A 3u 30|01234|-2nDUj.k Wqo0.c qanX.I 1yVXN.o|24e4", "America/Phoenix|MST MDT MWT|70 60 60|01010202010|-261r0 1nX0 11B0 1nX0 SgN0 4Al1 Ap0 1db0 SWqX 1cL0|42e5", "America/Port-au-Prince|PPMT EST EDT|4N 50 40|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-28RHb 2FnMb 19X0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14q0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 i6n0 1nX0 11B0 1nX0 d430 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 3iN0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|23e5", "America/Rio_Branco|LMT -05 -04|4v.c 50 40|01212121212121212121212121212121|-2glvs.M HdLs.M 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 NBd0 d5X0|31e4", "America/Porto_Velho|LMT -04 -03|4f.A 40 30|012121212121212121212121212121|-2glvI.o HdKI.o 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0|37e4", "America/Puerto_Rico|AST AWT APT|40 30 30|0120|-17lU0 7XT0 iu0|24e5", "America/Punta_Arenas|SMT -05 -04 -03|4G.K 50 40 30|0102021212121212121232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323|-2q2jh.e fJAh.e 5knG.K 1Vzh.e jRAG.K 1pbh.e 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 nHX0 op0 blz0 ko0 Qeo0 WL0 1zd0 On0 1ip0 11z0 1o10 11z0 1qN0 WL0 1ld0 14n0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 1cL0 1cN0 11z0 1o10 11z0 1qN0 WL0 1fB0 19X0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1ip0 1fz0 1fB0 11z0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1o10 19X0 1fB0 1nX0 G10 1EL0 Op0 1zb0 Rd0 1wn0 Rd0 46n0 Ap0|", "America/Rainy_River|CST CDT CWT CPT|60 50 50 50|010123010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-25TQ0 1in0 Rnb0 3je0 8x30 iw0 19yN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|842", "America/Rankin_Inlet|-00 CST CDDT CDT EST|0 60 40 50 50|012131313131313131313131313131313131313131313431313131313131313131313131313131313131313131313131313131313131313131313131|-vDc0 keu0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|26e2", "America/Recife|LMT -03 -02|2j.A 30 20|0121212121212121212121212121212121212121|-2glxE.o HdLE.o 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 nsp0 WL0 1tB0 2L0 2pB0 On0|33e5", "America/Regina|LMT MST MDT MWT MPT CST|6W.A 70 60 60 60 60|012121212121212121212121341212121212121212121212121215|-2AD51.o uHe1.o 1in0 s2L0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 66N0 1cL0 1cN0 19X0 1fB0 1cL0 1fB0 1cL0 1cN0 1cL0 M30 8x20 ix0 1ip0 1cL0 1ip0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 3NB0 1cL0 1cN0|19e4", "America/Resolute|-00 CST CDDT CDT EST|0 60 40 50 50|012131313131313131313131313131313131313131313431313131313431313131313131313131313131313131313131313131313131313131313131|-SnA0 GWS0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|229", "America/Santarem|LMT -04 -03|3C.M 40 30|0121212121212121212121212121212|-2glwl.c HdLl.c 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 NBd0|21e4", "America/Santiago|SMT -05 -04 -03|4G.K 50 40 30|010202121212121212321232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323|-2q2jh.e fJAh.e 5knG.K 1Vzh.e jRAG.K 1pbh.e 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 nHX0 op0 9Bz0 jb0 1oN0 ko0 Qeo0 WL0 1zd0 On0 1ip0 11z0 1o10 11z0 1qN0 WL0 1ld0 14n0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 1cL0 1cN0 11z0 1o10 11z0 1qN0 WL0 1fB0 19X0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1ip0 1fz0 1fB0 11z0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1o10 19X0 1fB0 1nX0 G10 1EL0 Op0 1zb0 Rd0 1wn0 Rd0 46n0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1zb0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0|62e5", "America/Santo_Domingo|SDMT EST EDT -0430 AST|4E 50 40 4u 40|01213131313131414|-1ttjk 1lJMk Mn0 6sp0 Lbu 1Cou yLu 1RAu wLu 1QMu xzu 1Q0u xXu 1PAu 13jB0 e00|29e5", "America/Sao_Paulo|LMT -03 -02|36.s 30 20|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2glwR.w HdKR.w 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 pTd0 PX0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 1EN0 Lz0 1C10 IL0 1HB0 Db0 1HB0 On0 1zd0 On0 1zd0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 1C10 Lz0 1Ip0 HX0 1zd0 On0 1HB0 IL0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1zd0 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1HB0 FX0|20e6", "America/Scoresbysund|LMT -02 -01 +00|1r.Q 20 10 0|0121323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-2a5Ww.8 2z5ew.8 1a00 1cK0 1cL0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|452", "America/Sitka|PST PWT PPT PDT YST AKST AKDT|80 70 70 70 90 90 80|01203030303030303030303030303030345656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565|-17T20 8x10 iy0 Vo10 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 co0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|90e2", "America/St_Johns|NST NDT NST NDT NWT NPT NDDT|3u.Q 2u.Q 3u 2u 2u 2u 1u|01010101010101010101010101010101010102323232323232324523232323232323232323232323232323232323232323232323232323232323232323232323232323232326232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-28oit.8 14L0 1nB0 1in0 1gm0 Dz0 1JB0 1cL0 1cN0 1cL0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 1cL0 1cN0 1cL0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 1cL0 1fB0 19X0 1fB0 19X0 10O0 eKX.8 19X0 1iq0 WL0 1qN0 WL0 1qN0 WL0 1tB0 TX0 1tB0 WL0 1qN0 WL0 1qN0 7UHu itu 1tB0 WL0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1tB0 WL0 1ld0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14n1 1lb0 14p0 1nW0 11C0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zcX Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|11e4", "America/Swift_Current|LMT MST MDT MWT MPT CST|7b.k 70 60 60 60 60|012134121212121212121215|-2AD4M.E uHdM.E 1in0 UGp0 8x20 ix0 1o10 17b0 1ip0 11z0 1o10 11z0 1o10 11z0 isN0 1cL0 3Cp0 1cL0 1cN0 11z0 1qN0 WL0 pMp0|16e3", "America/Tegucigalpa|LMT CST CDT|5M.Q 60 50|01212121|-1WGGb.8 2ETcb.8 WL0 1qN0 WL0 GRd0 AL0|11e5", "America/Thule|LMT AST ADT|4z.8 40 30|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2a5To.Q 31NBo.Q 1cL0 1cN0 1cL0 1fB0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|656", "America/Thunder_Bay|CST EST EWT EPT EDT|60 50 40 40 40|0123141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141|-2q5S0 1iaN0 8x40 iv0 XNB0 1cL0 1cN0 1fz0 1cN0 1cL0 3Cp0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|11e4", "America/Vancouver|PST PDT PWT PPT|80 70 70 70|0102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-25TO0 1in0 UGp0 8x10 iy0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|23e5", "America/Whitehorse|YST YDT YWT YPT YDDT PST PDT MST|90 80 80 80 70 80 70 70|010102304056565656565656565656565656565656565656565656565656565656565656565656565656565656567|-25TN0 1in0 1o10 13V0 Ser0 8x00 iz0 LCL0 1fA0 3NA0 vrd0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1z90|23e3", "America/Winnipeg|CST CDT CWT CPT|60 50 50 50|010101023010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aIi0 WL0 3ND0 1in0 Jap0 Rb0 aCN0 8x30 iw0 1tB0 11z0 1ip0 11z0 1o10 11z0 1o10 11z0 1rd0 10L0 1op0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 1cL0 1cN0 11z0 6i10 WL0 6i10 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1a00 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1a00 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|66e4", "America/Yakutat|YST YWT YPT YDT AKST AKDT|90 80 80 80 90 80|01203030303030303030303030303030304545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-17T10 8x00 iz0 Vo10 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 cn0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|642", "America/Yellowknife|-00 MST MWT MPT MDDT MDT|0 70 60 60 50 60|012314151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151|-1pdA0 hix0 8x20 ix0 LCL0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|19e3", "Antarctica/Casey|-00 +08 +11|0 -80 -b0|0121212121212|-2q00 1DjS0 T90 40P0 KL0 blz0 3m10 1o30 14k0 1kr0 12l0 1o01|10", "Antarctica/Davis|-00 +07 +05|0 -70 -50|01012121|-vyo0 iXt0 alj0 1D7v0 VB0 3Wn0 KN0|70", "Antarctica/DumontDUrville|-00 +10|0 -a0|0101|-U0o0 cfq0 bFm0|80", "Antarctica/Macquarie|AEST AEDT -00|-a0 -b0 0|010201010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-29E80 1a00 4SK0 1ayy0 Lvs0 1cM0 1o00 Rc0 1wo0 Rc0 1wo0 U00 1wo0 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1qM0 WM0 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1wo0 WM0 1tA0 WM0 1tA0 U00 1tA0 U00 1tA0 11A0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 11A0 1o00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1cM0 1cM0 3Co0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|1", "Antarctica/Mawson|-00 +06 +05|0 -60 -50|012|-CEo0 2fyk0|60", "Pacific/Auckland|NZMT NZST NZST NZDT|-bu -cu -c0 -d0|01020202020202020202020202023232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323|-1GCVu Lz0 1tB0 11zu 1o0u 11zu 1o0u 11zu 1o0u 14nu 1lcu 14nu 1lcu 1lbu 11Au 1nXu 11Au 1nXu 11Au 1nXu 11Au 1nXu 11Au 1qLu WMu 1qLu 11Au 1n1bu IM0 1C00 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1qM0 14o0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1io0 17c0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1io0 17c0 1io0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00|14e5", "Antarctica/Palmer|-00 -03 -04 -02|0 30 40 20|0121212121213121212121212121212121212121212121212121212121212121212121212121212121|-cao0 nD0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 jsN0 14N0 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 1cL0 1cN0 11z0 1o10 11z0 1qN0 WL0 1fB0 19X0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1ip0 1fz0 1fB0 11z0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1o10 19X0 1fB0 1nX0 G10 1EL0 Op0 1zb0 Rd0 1wn0 Rd0 46n0 Ap0|40", "Antarctica/Rothera|-00 -03|0 30|01|gOo0|130", "Antarctica/Syowa|-00 +03|0 -30|01|-vs00|20", "Antarctica/Troll|-00 +00 +02|0 0 -20|01212121212121212121212121212121212121212121212121212121212121212121|1puo0 hd0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|40", "Antarctica/Vostok|-00 +06|0 -60|01|-tjA0|25", "Europe/Oslo|CET CEST|-10 -20|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2awM0 Qm0 W6o0 5pf0 WM0 1fA0 1cM0 1cM0 1cM0 1cM0 wJc0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1qM0 WM0 zpc0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|62e4", "Asia/Riyadh|LMT +03|-36.Q -30|01|-TvD6.Q|57e5", "Asia/Almaty|LMT +05 +06 +07|-57.M -50 -60 -70|012323232323232323232321232323232323232323232323232|-1Pc57.M eUo7.M 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0|15e5", "Asia/Amman|LMT EET EEST|-2n.I -20 -30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1yW2n.I 1HiMn.I KL0 1oN0 11b0 1oN0 11b0 1pd0 1dz0 1cp0 11b0 1op0 11b0 fO10 1db0 1e10 1cL0 1cN0 1cL0 1cN0 1fz0 1pd0 10n0 1ld0 14n0 1hB0 15b0 1ip0 19X0 1cN0 1cL0 1cN0 17b0 1ld0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1So0 y00 1fc0 1dc0 1co0 1dc0 1cM0 1cM0 1cM0 1o00 11A0 1lc0 17c0 1cM0 1cM0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 4bX0 Dd0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0|25e5", "Asia/Anadyr|LMT +12 +13 +14 +11|-bN.U -c0 -d0 -e0 -b0|01232121212121212121214121212121212121212121212121212121212141|-1PcbN.U eUnN.U 23CL0 1db0 2q10 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 2sp0 WM0|13e3", "Asia/Aqtau|LMT +04 +05 +06|-3l.4 -40 -50 -60|012323232323232323232123232312121212121212121212|-1Pc3l.4 eUnl.4 24PX0 2pX0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0|15e4", "Asia/Aqtobe|LMT +04 +05 +06|-3M.E -40 -50 -60|0123232323232323232321232323232323232323232323232|-1Pc3M.E eUnM.E 23CL0 3Db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0|27e4", "Asia/Ashgabat|LMT +04 +05 +06|-3R.w -40 -50 -60|0123232323232323232323212|-1Pc3R.w eUnR.w 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0|41e4", "Asia/Atyrau|LMT +03 +05 +06 +04|-3r.I -30 -50 -60 -40|01232323232323232323242323232323232324242424242|-1Pc3r.I eUor.I 24PW0 2pX0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 2sp0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0|", "Asia/Baghdad|BMT +03 +04|-2V.A -30 -40|012121212121212121212121212121212121212121212121212121|-26BeV.A 2ACnV.A 11b0 1cp0 1dz0 1dd0 1db0 1cN0 1cp0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1de0 1dc0 1dc0 1dc0 1cM0 1dc0 1cM0 1dc0 1cM0 1dc0 1dc0 1dc0 1cM0 1dc0 1cM0 1dc0 1cM0 1dc0 1dc0 1dc0 1cM0 1dc0 1cM0 1dc0 1cM0 1dc0 1dc0 1dc0 1cM0 1dc0 1cM0 1dc0 1cM0 1dc0|66e5", "Asia/Qatar|LMT +04 +03|-3q.8 -40 -30|012|-21Jfq.8 27BXq.8|96e4", "Asia/Baku|LMT +03 +04 +05|-3j.o -30 -40 -50|01232323232323232323232123232323232323232323232323232323232323232|-1Pc3j.o 1jUoj.o WCL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 1cM0 9Je0 1o00 11z0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00|27e5", "Asia/Bangkok|BMT +07|-6G.4 -70|01|-218SG.4|15e6", "Asia/Barnaul|LMT +06 +07 +08|-5z -60 -70 -80|0123232323232323232323212323232321212121212121212121212121212121212|-21S5z pCnz 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 p90 LE0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3rd0|", "Asia/Beirut|EET EEST|-20 -30|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-21aq0 1on0 1410 1db0 19B0 1in0 1ip0 WL0 1lQp0 11b0 1oN0 11b0 1oN0 11b0 1pd0 11b0 1oN0 11b0 q6N0 En0 1oN0 11b0 1oN0 11b0 1oN0 11b0 1pd0 11b0 1oN0 11b0 1op0 11b0 dA10 17b0 1iN0 17b0 1iN0 17b0 1iN0 17b0 1vB0 SL0 1mp0 13z0 1iN0 17b0 1iN0 17b0 1jd0 12n0 1a10 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0|22e5", "Asia/Bishkek|LMT +05 +06 +07|-4W.o -50 -60 -70|012323232323232323232321212121212121212121212121212|-1Pc4W.o eUnW.o 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2e00 1tX0 17b0 1ip0 17b0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1cPu 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0|87e4", "Asia/Brunei|LMT +0730 +08|-7D.E -7u -80|012|-1KITD.E gDc9.E|42e4", "Asia/Kolkata|MMT IST +0630|-5l.a -5u -6u|012121|-2zOtl.a 1r2LP.a 1un0 HB0 7zX0|15e6", "Asia/Chita|LMT +08 +09 +10|-7x.Q -80 -90 -a0|012323232323232323232321232323232323232323232323232323232323232312|-21Q7x.Q pAnx.Q 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3re0|33e4", "Asia/Choibalsan|LMT +07 +08 +10 +09|-7C -70 -80 -a0 -90|0123434343434343434343434343434343434343434343424242|-2APHC 2UkoC cKn0 1da0 1dd0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 6hD0 11z0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 3Db0 h1f0 1cJ0 1cP0 1cJ0|38e3", "Asia/Shanghai|CST CDT|-80 -90|01010101010101010101010101010|-23uw0 18n0 OjB0 Rz0 11d0 1wL0 A10 8HX0 1G10 Tz0 1ip0 1jX0 1cN0 11b0 1oN0 aL0 1tU30 Rb0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0|23e6", "Asia/Colombo|MMT +0530 +06 +0630|-5j.w -5u -60 -6u|01231321|-2zOtj.w 1rFbN.w 1zzu 7Apu 23dz0 11zu n3cu|22e5", "Asia/Dhaka|HMT +0630 +0530 +06 +07|-5R.k -6u -5u -60 -70|0121343|-18LFR.k 1unn.k HB0 m6n0 2kxbu 1i00|16e6", "Asia/Damascus|LMT EET EEST|-2p.c -20 -30|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-21Jep.c Hep.c 17b0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1xRB0 11X0 1oN0 10L0 1pB0 11b0 1oN0 10L0 1mp0 13X0 1oN0 11b0 1pd0 11b0 1oN0 11b0 1oN0 11b0 1oN0 11b0 1pd0 11b0 1oN0 11b0 1oN0 11b0 1oN0 11b0 1pd0 11b0 1oN0 Nb0 1AN0 Nb0 bcp0 19X0 1gp0 19X0 3ld0 1xX0 Vd0 1Bz0 Sp0 1vX0 10p0 1dz0 1cN0 1cL0 1db0 1db0 1g10 1an0 1ap0 1db0 1fd0 1db0 1cN0 1db0 1dd0 1db0 1cp0 1dz0 1c10 1dX0 1cN0 1db0 1dd0 1db0 1cN0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1db0 1cN0 1db0 1cN0 19z0 1fB0 1qL0 11B0 1on0 Wp0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0|26e5", "Asia/Dili|LMT +08 +09|-8m.k -80 -90|01212|-2le8m.k 1dnXm.k 1nfA0 Xld0|19e4", "Asia/Dubai|LMT +04|-3F.c -40|01|-21JfF.c|39e5", "Asia/Dushanbe|LMT +05 +06 +07|-4z.c -50 -60 -70|012323232323232323232321|-1Pc4z.c eUnz.c 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2hB0|76e4", "Asia/Famagusta|LMT EET EEST +03|-2f.M -20 -30 -30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212312121212121212121212121212121212121212121|-1Vc2f.M 2a3cf.M 1cL0 1qp0 Xz0 19B0 19X0 1fB0 1db0 1cp0 1cL0 1fB0 19X0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1o30 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 15U0 2Ks0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|", "Asia/Gaza|EET EEST IST IDT|-20 -30 -20 -30|010101010101010101010101010101010123232323232323232323232323232320101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-1c2o0 MM0 iM0 4JA0 10o0 1pA0 10M0 1pA0 16o0 1jA0 16o0 1jA0 pBa0 Vz0 1oN0 11b0 1oO0 10N0 1pz0 10N0 1pb0 10N0 1pb0 10N0 1pb0 10N0 1pz0 10N0 1pb0 10N0 1pb0 11d0 1oL0 dW0 hfB0 Db0 1fB0 Rb0 bXB0 gM0 8Q00 IM0 1wo0 TX0 1HB0 IL0 1s10 10n0 1o10 WL0 1zd0 On0 1ld0 11z0 1o10 14n0 1o10 14n0 1nd0 12n0 1nd0 Xz0 1q10 12n0 M10 C00 17c0 1io0 17c0 1io0 17c0 1o00 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 17c0 1io0 18N0 1bz0 19z0 1gp0 1610 1iL0 11z0 1o10 14o0 1lA1 SKX 1xd1 MKX 1AN0 1a00 1fA0 1cL0 1cN0 1nX0 1210 1nA0 1210 1qL0 WN0 1qL0 WN0 1qL0 11c0 1on0 11B0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|18e5", "Asia/Hebron|EET EEST IST IDT|-20 -30 -20 -30|01010101010101010101010101010101012323232323232323232323232323232010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-1c2o0 MM0 iM0 4JA0 10o0 1pA0 10M0 1pA0 16o0 1jA0 16o0 1jA0 pBa0 Vz0 1oN0 11b0 1oO0 10N0 1pz0 10N0 1pb0 10N0 1pb0 10N0 1pb0 10N0 1pz0 10N0 1pb0 10N0 1pb0 11d0 1oL0 dW0 hfB0 Db0 1fB0 Rb0 bXB0 gM0 8Q00 IM0 1wo0 TX0 1HB0 IL0 1s10 10n0 1o10 WL0 1zd0 On0 1ld0 11z0 1o10 14n0 1o10 14n0 1nd0 12n0 1nd0 Xz0 1q10 12n0 M10 C00 17c0 1io0 17c0 1io0 17c0 1o00 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 17c0 1io0 18N0 1bz0 19z0 1gp0 1610 1iL0 12L0 1mN0 14o0 1lc0 Tb0 1xd1 MKX bB0 cn0 1cN0 1a00 1fA0 1cL0 1cN0 1nX0 1210 1nA0 1210 1qL0 WN0 1qL0 WN0 1qL0 11c0 1on0 11B0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|25e4", "Asia/Ho_Chi_Minh|LMT PLMT +07 +08 +09|-76.E -76.u -70 -80 -90|0123423232|-2yC76.E bK00.a 1h7b6.u 5lz0 18o0 3Oq0 k5b0 aW00 BAM0|90e5", "Asia/Hong_Kong|LMT HKT HKST HKWT JST|-7A.G -80 -90 -8u -90|0123412121212121212121212121212121212121212121212121212121212121212121|-2CFH0 1taO0 Hc0 xUu 9tBu 11z0 1tDu Rc0 1wo0 11A0 1cM0 11A0 1o00 11A0 1o00 11A0 1o00 14o0 1o00 11A0 1nX0 U10 1tz0 U10 1wn0 Rd0 1wn0 U10 1tz0 U10 1tz0 U10 1tz0 U10 1wn0 Rd0 1wn0 Rd0 1wn0 U10 1tz0 U10 1tz0 17d0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 s10 1Vz0 1cN0 1cL0 1cN0 1cL0 6fd0 14n0|73e5", "Asia/Hovd|LMT +06 +07 +08|-66.A -60 -70 -80|012323232323232323232323232323232323232323232323232|-2APG6.A 2Uko6.A cKn0 1db0 1dd0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 6hD0 11z0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 kEp0 1cJ0 1cP0 1cJ0|81e3", "Asia/Irkutsk|IMT +07 +08 +09|-6V.5 -70 -80 -90|01232323232323232323232123232323232323232323232323232323232323232|-21zGV.5 pjXV.5 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|60e4", "Europe/Istanbul|IMT EET EEST +03 +04|-1U.U -20 -30 -30 -40|0121212121212121212121212121212121212121212121234312121212121212121212121212121212121212121212121212121212121212123|-2ogNU.U dzzU.U 11b0 8tB0 1on0 1410 1db0 19B0 1in0 3Rd0 Un0 1oN0 11b0 zSN0 CL0 mp0 1Vz0 1gN0 8yn0 1yp0 ML0 1kp0 17b0 1ip0 17b0 1fB0 19X0 1ip0 19X0 1ip0 17b0 qdB0 38L0 1jd0 Tz0 l6O0 11A0 WN0 1qL0 TB0 1tX0 U10 1tz0 11B0 1in0 17d0 z90 cne0 pb0 2Cp0 1800 14o0 1dc0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1a00 1fA0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WO0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 Xc0 1qo0 WM0 1qM0 11A0 1o00 1200 1nA0 11A0 1tA0 U00 15w0|13e6", "Asia/Jakarta|BMT +0720 +0730 +09 +08 WIB|-77.c -7k -7u -90 -80 -70|01232425|-1Q0Tk luM0 mPzO 8vWu 6kpu 4PXu xhcu|31e6", "Asia/Jayapura|LMT +09 +0930 WIT|-9m.M -90 -9u -90|0123|-1uu9m.M sMMm.M L4nu|26e4", "Asia/Jerusalem|JMT IST IDT IDDT|-2k.E -20 -30 -40|01212121212121321212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-26Bek.E SyOk.E MM0 iM0 4JA0 10o0 1pA0 10M0 1pA0 16o0 1jA0 16o0 1jA0 3LA0 Eo0 oo0 1co0 1dA0 16o0 10M0 1jc0 1tA0 14o0 1cM0 1a00 11A0 1Nc0 Ao0 1Nc0 Ao0 1Ko0 LA0 1o00 WM0 EQK0 Db0 1fB0 Rb0 bXB0 gM0 8Q00 IM0 1wo0 TX0 1HB0 IL0 1s10 10n0 1o10 WL0 1zd0 On0 1ld0 11z0 1o10 14n0 1o10 14n0 1nd0 12n0 1nd0 Xz0 1q10 12n0 1hB0 1dX0 1ep0 1aL0 1eN0 17X0 1nf0 11z0 1tB0 19W0 1e10 17b0 1ep0 1gL0 18N0 1fz0 1eN0 17b0 1gq0 1gn0 19d0 1dz0 1c10 17X0 1hB0 1gn0 19d0 1dz0 1c10 17X0 1kp0 1dz0 1c10 1aL0 1eN0 1oL0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0|81e4", "Asia/Kabul|+04 +0430|-40 -4u|01|-10Qs0|46e5", "Asia/Kamchatka|LMT +11 +12 +13|-ay.A -b0 -c0 -d0|012323232323232323232321232323232323232323232323232323232323212|-1SLKy.A ivXy.A 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 2sp0 WM0|18e4", "Asia/Karachi|LMT +0530 +0630 +05 PKT PKST|-4s.c -5u -6u -50 -50 -60|012134545454|-2xoss.c 1qOKW.c 7zX0 eup0 LqMu 1fy00 1cL0 dK10 11b0 1610 1jX0|24e6", "Asia/Urumqi|LMT +06|-5O.k -60|01|-1GgtO.k|32e5", "Asia/Kathmandu|LMT +0530 +0545|-5F.g -5u -5J|012|-21JhF.g 2EGMb.g|12e5", "Asia/Khandyga|LMT +08 +09 +10 +11|-92.d -80 -90 -a0 -b0|0123232323232323232323212323232323232323232323232343434343434343432|-21Q92.d pAp2.d 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 qK0 yN0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 17V0 7zD0|66e2", "Asia/Krasnoyarsk|LMT +06 +07 +08|-6b.q -60 -70 -80|01232323232323232323232123232323232323232323232323232323232323232|-21Hib.q prAb.q 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|10e5", "Asia/Kuala_Lumpur|SMT +07 +0720 +0730 +09 +08|-6T.p -70 -7k -7u -90 -80|0123435|-2Bg6T.p 17anT.p l5XE 17bO 8Fyu 1so1u|71e5", "Asia/Kuching|LMT +0730 +08 +0820 +09|-7l.k -7u -80 -8k -90|0123232323232323242|-1KITl.k gDbP.k 6ynu AnE 1O0k AnE 1NAk AnE 1NAk AnE 1NAk AnE 1O0k AnE 1NAk AnE pAk 8Fz0|13e4", "Asia/Macau|LMT CST +09 +10 CDT|-7y.a -80 -90 -a0 -90|012323214141414141414141414141414141414141414141414141414141414141414141|-2CFHy.a 1uqKy.a PX0 1kn0 15B0 11b0 4Qq0 1oM0 11c0 1ko0 1u00 11A0 1cM0 11c0 1o00 11A0 1o00 11A0 1oo0 1400 1o00 11A0 1o00 U00 1tA0 U00 1wo0 Rc0 1wru U10 1tz0 U10 1tz0 U10 1tz0 U10 1wn0 Rd0 1wn0 Rd0 1wn0 U10 1tz0 U10 1tz0 17d0 1cK0 1cO0 1cK0 1cO0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 s10 1Vz0 1cN0 1cL0 1cN0 1cL0 6fd0 14n0|57e4", "Asia/Magadan|LMT +10 +11 +12|-a3.c -a0 -b0 -c0|012323232323232323232321232323232323232323232323232323232323232312|-1Pca3.c eUo3.c 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3Cq0|95e3", "Asia/Makassar|LMT MMT +08 +09 WITA|-7V.A -7V.A -80 -90 -80|01234|-21JjV.A vfc0 myLV.A 8ML0|15e5", "Asia/Manila|PST PDT JST|-80 -90 -90|010201010|-1kJI0 AL0 cK10 65X0 mXB0 vX0 VK10 1db0|24e6", "Asia/Nicosia|LMT EET EEST|-2d.s -20 -30|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1Vc2d.s 2a3cd.s 1cL0 1qp0 Xz0 19B0 19X0 1fB0 1db0 1cp0 1cL0 1fB0 19X0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1o30 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|32e4", "Asia/Novokuznetsk|LMT +06 +07 +08|-5M.M -60 -70 -80|012323232323232323232321232323232323232323232323232323232323212|-1PctM.M eULM.M 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 2sp0 WM0|55e4", "Asia/Novosibirsk|LMT +06 +07 +08|-5v.E -60 -70 -80|0123232323232323232323212323212121212121212121212121212121212121212|-21Qnv.E pAFv.E 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 ml0 Os0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 4eN0|15e5", "Asia/Omsk|LMT +05 +06 +07|-4R.u -50 -60 -70|01232323232323232323232123232323232323232323232323232323232323232|-224sR.u pMLR.u 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|12e5", "Asia/Oral|LMT +03 +05 +06 +04|-3p.o -30 -50 -60 -40|01232323232323232424242424242424242424242424242|-1Pc3p.o eUop.o 23CK0 3Db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1fA0 1cM0 1cM0 IM0 1EM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0|27e4", "Asia/Pontianak|LMT PMT +0730 +09 +08 WITA WIB|-7h.k -7h.k -7u -90 -80 -80 -70|012324256|-2ua7h.k XE00 munL.k 8Rau 6kpu 4PXu xhcu Wqnu|23e4", "Asia/Pyongyang|LMT KST JST KST|-8n -8u -90 -90|012313|-2um8n 97XR 1lTzu 2Onc0 6BA0|29e5", "Asia/Qostanay|LMT +04 +05 +06|-4e.s -40 -50 -60|012323232323232323232123232323232323232323232323|-1Pc4e.s eUoe.s 23CL0 3Db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0|", "Asia/Qyzylorda|LMT +04 +05 +06|-4l.Q -40 -50 -60|01232323232323232323232323232323232323232323232|-1Pc4l.Q eUol.Q 23CL0 3Db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 3ao0 1EM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 zQl0|73e4", "Asia/Rangoon|RMT +0630 +09|-6o.L -6u -90|0121|-21Jio.L SmnS.L 7j9u|48e5", "Asia/Sakhalin|LMT +09 +11 +12 +10|-9u.M -90 -b0 -c0 -a0|01232323232323232323232423232323232424242424242424242424242424242|-2AGVu.M 1BoMu.M 1qFa0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 2pB0 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3rd0|58e4", "Asia/Samarkand|LMT +04 +05 +06|-4r.R -40 -50 -60|01232323232323232323232|-1Pc4r.R eUor.R 23CL0 3Db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0|36e4", "Asia/Seoul|LMT KST JST KST KDT KDT|-8r.Q -8u -90 -90 -a0 -9u|012343434343151515151515134343|-2um8r.Q 97XV.Q 1m1zu 6CM0 Fz0 1kN0 14n0 1kN0 14L0 1zd0 On0 69B0 2I0u OL0 1FB0 Rb0 1qN0 TX0 1tB0 TX0 1tB0 TX0 1tB0 TX0 2ap0 12FBu 11A0 1o00 11A0|23e6", "Asia/Srednekolymsk|LMT +10 +11 +12|-ae.Q -a0 -b0 -c0|01232323232323232323232123232323232323232323232323232323232323232|-1Pcae.Q eUoe.Q 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|35e2", "Asia/Taipei|CST JST CDT|-80 -90 -90|01020202020202020202020202020202020202020|-1iw80 joM0 1yo0 Tz0 1ip0 1jX0 1cN0 11b0 1oN0 11b0 1oN0 11b0 1oN0 11b0 10N0 1BX0 10p0 1pz0 10p0 1pz0 10p0 1db0 1dd0 1db0 1cN0 1db0 1cN0 1db0 1cN0 1db0 1BB0 ML0 1Bd0 ML0 uq10 1db0 1cN0 1db0 97B0 AL0|74e5", "Asia/Tashkent|LMT +05 +06 +07|-4B.b -50 -60 -70|012323232323232323232321|-1Pc4B.b eUnB.b 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0|23e5", "Asia/Tbilisi|TBMT +03 +04 +05|-2X.b -30 -40 -50|0123232323232323232323212121232323232323232323212|-1Pc2X.b 1jUnX.b WCL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 1cK0 1cL0 1cN0 1cL0 1cN0 2pz0 1cL0 1fB0 3Nz0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 An0 Os0 WM0|11e5", "Asia/Tehran|LMT TMT +0330 +04 +05 +0430|-3p.I -3p.I -3u -40 -50 -4u|01234325252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252|-2btDp.I 1d3c0 1huLT.I TXu 1pz0 sN0 vAu 1cL0 1dB0 1en0 pNB0 UL0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 64p0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0|14e6", "Asia/Thimphu|LMT +0530 +06|-5W.A -5u -60|012|-Su5W.A 1BGMs.A|79e3", "Asia/Tokyo|JST JDT|-90 -a0|010101010|-QJJ0 Rc0 1lc0 14o0 1zc0 Oo0 1zc0 Oo0|38e6", "Asia/Tomsk|LMT +06 +07 +08|-5D.P -60 -70 -80|0123232323232323232323212323232323232323232323212121212121212121212|-21NhD.P pxzD.P 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 co0 1bB0 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3Qp0|10e5", "Asia/Ulaanbaatar|LMT +07 +08 +09|-77.w -70 -80 -90|012323232323232323232323232323232323232323232323232|-2APH7.w 2Uko7.w cKn0 1db0 1dd0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 6hD0 11z0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 kEp0 1cJ0 1cP0 1cJ0|12e5", "Asia/Ust-Nera|LMT +08 +09 +12 +11 +10|-9w.S -80 -90 -c0 -b0 -a0|012343434343434343434345434343434343434343434343434343434343434345|-21Q9w.S pApw.S 23CL0 1d90 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 17V0 7zD0|65e2", "Asia/Vladivostok|LMT +09 +10 +11|-8L.v -90 -a0 -b0|01232323232323232323232123232323232323232323232323232323232323232|-1SJIL.v itXL.v 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|60e4", "Asia/Yakutsk|LMT +08 +09 +10|-8C.W -80 -90 -a0|01232323232323232323232123232323232323232323232323232323232323232|-21Q8C.W pAoC.W 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|28e4", "Asia/Yekaterinburg|LMT PMT +04 +05 +06|-42.x -3J.5 -40 -50 -60|012343434343434343434343234343434343434343434343434343434343434343|-2ag42.x 7mQh.s qBvJ.5 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|14e5", "Asia/Yerevan|LMT +03 +04 +05|-2W -30 -40 -50|0123232323232323232323212121212323232323232323232323232323232|-1Pc2W 1jUnW WCL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 4RX0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0|13e5", "Atlantic/Azores|HMT -02 -01 +00 WET|1S.w 20 10 0 0|01212121212121212121212121212121212121212121232123212321232121212121212121212121212121212121212121232323232323232323232323232323234323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-2ldW0 aPX0 Sp0 LX0 1vc0 Tc0 1uM0 SM0 1vc0 Tc0 1vc0 SM0 1vc0 6600 1co0 3E00 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 3I00 17c0 1cM0 1cM0 3Fc0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 1tA0 1cM0 1dc0 1400 gL0 IM0 s10 U00 dX0 Rc0 pd0 Rc0 gL0 Oo0 pd0 Rc0 gL0 Oo0 pd0 14o0 1cM0 1cP0 1cM0 1cM0 1cM0 1cM0 1cM0 3Co0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 qIl0 1cM0 1fA0 1cM0 1cM0 1cN0 1cL0 1cN0 1cM0 1cM0 1cM0 1cM0 1cN0 1cL0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cL0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|25e4", "Atlantic/Bermuda|BMT BST AST ADT|4j.i 3j.i 40 30|010102323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-28p7E.G 1bb0 1i10 11X0 ru30 thbE.G 1PX0 11B0 1tz0 Rd0 1zb0 Op0 1zb0 3I10 Lz0 1EN0 FX0 1HB0 FX0 1Kp0 Db0 1Kp0 Db0 1Kp0 FX0 93d0 11z0 GAp0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|65e3", "Atlantic/Canary|LMT -01 WET WEST|11.A 10 0 -10|01232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-1UtaW.o XPAW.o 1lAK0 1a10 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|54e4", "Atlantic/Cape_Verde|LMT -02 -01|1y.4 20 10|01212|-2ldW0 1eEo0 7zX0 1djf0|50e4", "Atlantic/Faroe|LMT WET WEST|r.4 0 -10|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2uSnw.U 2Wgow.U 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|49e3", "Atlantic/Madeira|FMT -01 +00 +01 WET WEST|17.A 10 0 -10 0 -10|01212121212121212121212121212121212121212121232123212321232121212121212121212121212121212121212121454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-2ldX0 aPX0 Sp0 LX0 1vc0 Tc0 1uM0 SM0 1vc0 Tc0 1vc0 SM0 1vc0 6600 1co0 3E00 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 3I00 17c0 1cM0 1cM0 3Fc0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 1tA0 1cM0 1dc0 1400 gL0 IM0 s10 U00 dX0 Rc0 pd0 Rc0 gL0 Oo0 pd0 Rc0 gL0 Oo0 pd0 14o0 1cM0 1cP0 1cM0 1cM0 1cM0 1cM0 1cM0 3Co0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 qIl0 1cM0 1fA0 1cM0 1cM0 1cN0 1cL0 1cN0 1cM0 1cM0 1cM0 1cM0 1cN0 1cL0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|27e4", "Atlantic/Reykjavik|LMT -01 +00 GMT|1s 10 0 0|012121212121212121212121212121212121212121212121212121212121212121213|-2uWmw mfaw 1Bd0 ML0 1LB0 Cn0 1LB0 3fX0 C10 HrX0 1cO0 LB0 1EL0 LA0 1C00 Oo0 1wo0 Rc0 1wo0 Rc0 1wo0 Rc0 1zc0 Oo0 1zc0 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1lc0 14o0 1o00 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1o00 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1o00 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1o00 14o0|12e4", "Atlantic/South_Georgia|-02|20|0||30", "Atlantic/Stanley|SMT -04 -03 -02|3P.o 40 30 20|012121212121212323212121212121212121212121212121212121212121212121212|-2kJw8.A 12bA8.A 19X0 1fB0 19X0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1fB0 Cn0 1Cc10 WL0 1qL0 U10 1tz0 2mN0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1tz0 U10 1tz0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1tz0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qN0 U10 1wn0 Rd0 1wn0 U10 1tz0 U10 1tz0 U10 1tz0 U10 1tz0 U10 1wn0 U10 1tz0 U10 1tz0 U10|21e2", "Australia/Sydney|AEST AEDT|-a0 -b0|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-293k0 xc0 10jc0 yM0 1cM0 1cM0 1fA0 1a00 17c00 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 14o0 1o00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 U00 1qM0 WM0 1tA0 WM0 1tA0 U00 1tA0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 11A0 1o00 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 14o0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|40e5", "Australia/Adelaide|ACST ACDT|-9u -au|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-293ju xc0 10jc0 yM0 1cM0 1cM0 1fA0 1a00 17c00 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 U00 1qM0 WM0 1tA0 WM0 1tA0 U00 1tA0 U00 1tA0 Oo0 1zc0 WM0 1qM0 Rc0 1zc0 U00 1tA0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 14o0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|11e5", "Australia/Brisbane|AEST AEDT|-a0 -b0|01010101010101010|-293k0 xc0 10jc0 yM0 1cM0 1cM0 1fA0 1a00 17c00 LA0 H1A0 Oo0 1zc0 Oo0 1zc0 Oo0|20e5", "Australia/Broken_Hill|ACST ACDT|-9u -au|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-293ju xc0 10jc0 yM0 1cM0 1cM0 1fA0 1a00 17c00 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 14o0 1o00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 U00 1qM0 WM0 1tA0 WM0 1tA0 U00 1tA0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 14o0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|18e3", "Australia/Hobart|AEST AEDT|-a0 -b0|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-29E80 1a00 1qM0 Oo0 1zc0 Oo0 TAo0 yM0 1cM0 1cM0 1fA0 1a00 VfA0 1cM0 1o00 Rc0 1wo0 Rc0 1wo0 U00 1wo0 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1qM0 WM0 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1wo0 WM0 1tA0 WM0 1tA0 U00 1tA0 U00 1tA0 11A0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 11A0 1o00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|21e4", "Australia/Darwin|ACST ACDT|-9u -au|010101010|-293ju xc0 10jc0 yM0 1cM0 1cM0 1fA0 1a00|12e4", "Australia/Eucla|+0845 +0945|-8J -9J|0101010101010101010|-293iJ xc0 10jc0 yM0 1cM0 1cM0 1gSo0 Oo0 l5A0 Oo0 iJA0 G00 zU00 IM0 1qM0 11A0 1o00 11A0|368", "Australia/Lord_Howe|AEST +1030 +1130 +11|-a0 -au -bu -b0|0121212121313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313|raC0 1zdu Rb0 1zd0 On0 1zd0 On0 1zd0 On0 1zd0 TXu 1qMu WLu 1tAu WLu 1tAu TXu 1tAu Onu 1zcu Onu 1zcu Onu 1zcu Rbu 1zcu Onu 1zcu Onu 1zcu 11zu 1o0u 11zu 1o0u 11zu 1o0u 11zu 1qMu WLu 11Au 1nXu 1qMu 11zu 1o0u 11zu 1o0u 11zu 1qMu WLu 1qMu 11zu 1o0u WLu 1qMu 14nu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1fzu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu|347", "Australia/Lindeman|AEST AEDT|-a0 -b0|010101010101010101010|-293k0 xc0 10jc0 yM0 1cM0 1cM0 1fA0 1a00 17c00 LA0 H1A0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0|10", "Australia/Melbourne|AEST AEDT|-a0 -b0|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-293k0 xc0 10jc0 yM0 1cM0 1cM0 1fA0 1a00 17c00 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 U00 1qM0 WM0 1qM0 11A0 1tA0 U00 1tA0 U00 1tA0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 11A0 1o00 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 14o0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|39e5", "Australia/Perth|AWST AWDT|-80 -90|0101010101010101010|-293i0 xc0 10jc0 yM0 1cM0 1cM0 1gSo0 Oo0 l5A0 Oo0 iJA0 G00 zU00 IM0 1qM0 11A0 1o00 11A0|18e5", "CET|CET CEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 1cM0 16M0 1gMM0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|", "Pacific/Easter|EMT -07 -06 -05|7h.s 70 60 50|012121212121212121212121212123232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323|-1uSgG.w 1s4IG.w WL0 1zd0 On0 1ip0 11z0 1o10 11z0 1qN0 WL0 1ld0 14n0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 2pA0 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 1cL0 1cN0 11z0 1o10 11z0 1qN0 WL0 1fB0 19X0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1ip0 1fz0 1fB0 11z0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1o10 19X0 1fB0 1nX0 G10 1EL0 Op0 1zb0 Rd0 1wn0 Rd0 46n0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1zb0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0|30e2", "CST6CDT|CST CDT CWT CPT|60 50 50 50|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|", "EET|EET EEST|-20 -30|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|hDB0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|", "Europe/Dublin|DMT IST GMT BST IST|p.l -y.D 0 -10 -10|01232323232324242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242|-2ax9y.D Rc0 1fzy.D 14M0 1fc0 1g00 1co0 1dc0 1co0 1oo0 1400 1dc0 19A0 1io0 1io0 WM0 1o00 14o0 1o00 17c0 1io0 17c0 1fA0 1a00 1lc0 17c0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1cM0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1io0 1qM0 Dc0 g600 14o0 1wo0 17c0 1io0 11A0 1o00 17c0 1fA0 1a00 1fA0 1cM0 1fA0 1a00 17c0 1fA0 1a00 1io0 17c0 1lc0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1a00 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1tA0 IM0 90o0 U00 1tA0 U00 1tA0 U00 1tA0 U00 1tA0 WM0 1qM0 WM0 1qM0 WM0 1tA0 U00 1tA0 U00 1tA0 11z0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 14o0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|12e5", "EST|EST|50|0||", "EST5EDT|EST EDT EWT EPT|50 40 40 40|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261t0 1nX0 11B0 1nX0 SgN0 8x40 iv0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|", "Etc/GMT-0|GMT|0|0||", "Etc/GMT-1|+01|-10|0||", "Pacific/Port_Moresby|+10|-a0|0||25e4", "Etc/GMT-11|+11|-b0|0||", "Pacific/Tarawa|+12|-c0|0||29e3", "Etc/GMT-13|+13|-d0|0||", "Etc/GMT-14|+14|-e0|0||", "Etc/GMT-2|+02|-20|0||", "Etc/GMT-3|+03|-30|0||", "Etc/GMT-4|+04|-40|0||", "Etc/GMT-5|+05|-50|0||", "Etc/GMT-6|+06|-60|0||", "Indian/Christmas|+07|-70|0||21e2", "Etc/GMT-8|+08|-80|0||", "Pacific/Palau|+09|-90|0||21e3", "Etc/GMT+1|-01|10|0||", "Etc/GMT+10|-10|a0|0||", "Etc/GMT+11|-11|b0|0||", "Etc/GMT+12|-12|c0|0||", "Etc/GMT+3|-03|30|0||", "Etc/GMT+4|-04|40|0||", "Etc/GMT+5|-05|50|0||", "Etc/GMT+6|-06|60|0||", "Etc/GMT+7|-07|70|0||", "Etc/GMT+8|-08|80|0||", "Etc/GMT+9|-09|90|0||", "Etc/UTC|UTC|0|0||", "Europe/Amsterdam|AMT NST +0120 +0020 CEST CET|-j.w -1j.w -1k -k -20 -10|010101010101010101010101010101010101010101012323234545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545|-2aFcj.w 11b0 1iP0 11A0 1io0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1co0 1io0 1yo0 Pc0 1a00 1fA0 1Bc0 Mo0 1tc0 Uo0 1tA0 U00 1uo0 W00 1s00 VA0 1so0 Vc0 1sM0 UM0 1wo0 Rc0 1u00 Wo0 1rA0 W00 1s00 VA0 1sM0 UM0 1w00 fV0 BCX.w 1tA0 U00 1u00 Wo0 1sm0 601k WM0 1fA0 1cM0 1cM0 1cM0 16M0 1gMM0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|16e5", "Europe/Andorra|WET CET CEST|0 -10 -20|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-UBA0 1xIN0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|79e3", "Europe/Astrakhan|LMT +03 +04 +05|-3c.c -30 -40 -50|012323232323232323212121212121212121212121212121212121212121212|-1Pcrc.c eUMc.c 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1fA0 1cM0 3Co0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3rd0|10e5", "Europe/Athens|AMT EET EEST CEST CET|-1y.Q -20 -30 -20 -10|012123434121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2a61x.Q CNbx.Q mn0 kU10 9b0 3Es0 Xa0 1fb0 1dd0 k3X0 Nz0 SCp0 1vc0 SO0 1cM0 1a00 1ao0 1fc0 1a10 1fG0 1cg0 1dX0 1bX0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|35e5", "Europe/London|GMT BST BDST|0 -10 -20|0101010101010101010101010101010101010101010101010121212121210101210101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2axa0 Rc0 1fA0 14M0 1fc0 1g00 1co0 1dc0 1co0 1oo0 1400 1dc0 19A0 1io0 1io0 WM0 1o00 14o0 1o00 17c0 1io0 17c0 1fA0 1a00 1lc0 17c0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1cM0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1io0 1qM0 Dc0 2Rz0 Dc0 1zc0 Oo0 1zc0 Rc0 1wo0 17c0 1iM0 FA0 xB0 1fA0 1a00 14o0 bb0 LA0 xB0 Rc0 1wo0 11A0 1o00 17c0 1fA0 1a00 1fA0 1cM0 1fA0 1a00 17c0 1fA0 1a00 1io0 17c0 1lc0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1a00 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1tA0 IM0 90o0 U00 1tA0 U00 1tA0 U00 1tA0 U00 1tA0 WM0 1qM0 WM0 1qM0 WM0 1tA0 U00 1tA0 U00 1tA0 11z0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 14o0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|10e6", "Europe/Belgrade|CET CEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-19RC0 3IP0 WM0 1fA0 1cM0 1cM0 1rc0 Qo0 1vmo0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|12e5", "Europe/Berlin|CET CEST CEMT|-10 -20 -30|01010101010101210101210101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 1cM0 kL0 Nc0 m10 WM0 1ao0 1cp0 dX0 jz0 Dd0 1io0 17c0 1fA0 1a00 1ehA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|41e5", "Europe/Prague|CET CEST GMT|-10 -20 0|01010101010101010201010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 1cM0 1cM0 1qM0 11c0 mp0 xA0 mn0 17c0 1io0 17c0 1fc0 1ao0 1bNc0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|13e5", "Europe/Brussels|WET CET CEST WEST|0 -10 -20 -10|0121212103030303030303030303030303030303030303030303212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2ehc0 3zX0 11c0 1iO0 11A0 1o00 11A0 my0 Ic0 1qM0 Rc0 1EM0 UM0 1u00 10o0 1io0 1io0 17c0 1a00 1fA0 1cM0 1cM0 1io0 17c0 1fA0 1a00 1io0 1a30 1io0 17c0 1fA0 1a00 1io0 17c0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 y00 5Wn0 WM0 1fA0 1cM0 16M0 1iM0 16M0 1C00 Uo0 1eeo0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|21e5", "Europe/Bucharest|BMT EET EEST|-1I.o -20 -30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1xApI.o 20LI.o RA0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1Axc0 On0 1fA0 1a10 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cK0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cL0 1cN0 1cL0 1fB0 1nX0 11E0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|19e5", "Europe/Budapest|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 1oo0 11c0 1lc0 17c0 O1V0 3Nf0 WM0 1fA0 1cM0 1cM0 1oJ0 1dd0 1020 1fX0 1cp0 1cM0 1cM0 1cM0 1fA0 1a00 bhy0 Rb0 1wr0 Rc0 1C00 LA0 1C00 LA0 SNW0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cO0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|17e5", "Europe/Zurich|CET CEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-19Lc0 11A0 1o00 11A0 1xG10 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|38e4", "Europe/Chisinau|CMT BMT EET EEST CEST CET MSK MSD|-1T -1I.o -20 -30 -20 -10 -30 -40|012323232323232323234545467676767676767676767323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-26jdT wGMa.A 20LI.o RA0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 27A0 2en0 39g0 WM0 1fA0 1cM0 V90 1t7z0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 gL0 WO0 1cM0 1cM0 1cK0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1nX0 11D0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|67e4", "Europe/Copenhagen|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2azC0 Tz0 VuO0 60q0 WM0 1fA0 1cM0 1cM0 1cM0 S00 1HA0 Nc0 1C00 Dc0 1Nc0 Ao0 1h5A0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|12e5", "Europe/Gibraltar|GMT BST BDST CET CEST|0 -10 -20 -10 -20|010101010101010101010101010101010101010101010101012121212121010121010101010101010101034343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343|-2axa0 Rc0 1fA0 14M0 1fc0 1g00 1co0 1dc0 1co0 1oo0 1400 1dc0 19A0 1io0 1io0 WM0 1o00 14o0 1o00 17c0 1io0 17c0 1fA0 1a00 1lc0 17c0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1cM0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1io0 1qM0 Dc0 2Rz0 Dc0 1zc0 Oo0 1zc0 Rc0 1wo0 17c0 1iM0 FA0 xB0 1fA0 1a00 14o0 bb0 LA0 xB0 Rc0 1wo0 11A0 1o00 17c0 1fA0 1a00 1fA0 1cM0 1fA0 1a00 17c0 1fA0 1a00 1io0 17c0 1lc0 17c0 1fA0 10Jz0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|30e3", "Europe/Helsinki|HMT EET EEST|-1D.N -20 -30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1WuND.N OULD.N 1dA0 1xGq0 1cM0 1cM0 1cM0 1cN0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|12e5", "Europe/Kaliningrad|CET CEST EET EEST MSK MSD +03|-10 -20 -20 -30 -30 -40 -30|01010101010101232454545454545454543232323232323232323232323232323232323232323262|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 1cM0 390 7A0 1en0 12N0 1pbb0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|44e4", "Europe/Kiev|KMT EET MSK CEST CET MSD EEST|-22.4 -20 -30 -20 -10 -40 -30|0123434252525252525252525256161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161|-1Pc22.4 eUo2.4 rnz0 2Hg0 WM0 1fA0 da0 1v4m0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 Db0 3220 1cK0 1cL0 1cN0 1cL0 1cN0 1cL0 1cQ0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|34e5", "Europe/Kirov|LMT +03 +04 +05|-3i.M -30 -40 -50|01232323232323232321212121212121212121212121212121212121212121|-22WM0 qH90 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1fA0 1cM0 3Co0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|48e4", "Europe/Lisbon|LMT WET WEST WEMT CET CEST|A.J 0 -10 -20 -10 -20|012121212121212121212121212121212121212121212321232123212321212121212121212121212121212121212121214121212121212121212121212121212124545454212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2le00 aPX0 Sp0 LX0 1vc0 Tc0 1uM0 SM0 1vc0 Tc0 1vc0 SM0 1vc0 6600 1co0 3E00 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 3I00 17c0 1cM0 1cM0 3Fc0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 1tA0 1cM0 1dc0 1400 gL0 IM0 s10 U00 dX0 Rc0 pd0 Rc0 gL0 Oo0 pd0 Rc0 gL0 Oo0 pd0 14o0 1cM0 1cP0 1cM0 1cM0 1cM0 1cM0 1cM0 3Co0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 pvy0 1cM0 1cM0 1fA0 1cM0 1cM0 1cN0 1cL0 1cN0 1cM0 1cM0 1cM0 1cM0 1cN0 1cL0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|27e5", "Europe/Luxembourg|LMT CET CEST WET WEST WEST WET|-o.A -10 -20 0 -10 -20 -10|0121212134343434343434343434343434343434343434343434565651212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2DG0o.A t6mo.A TB0 1nX0 Up0 1o20 11A0 rW0 CM0 1qP0 R90 1EO0 UK0 1u20 10m0 1ip0 1in0 17e0 19W0 1fB0 1db0 1cp0 1in0 17d0 1fz0 1a10 1in0 1a10 1in0 17f0 1fA0 1a00 1io0 17c0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 vA0 60L0 WM0 1fA0 1cM0 17c0 1io0 16M0 1C00 Uo0 1eeo0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|54e4", "Europe/Madrid|WET WEST WEMT CET CEST|0 -10 -20 -10 -20|010101010101010101210343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343|-25Td0 19B0 1cL0 1dd0 b1z0 18p0 3HX0 17d0 1fz0 1a10 1io0 1a00 1in0 17d0 iIn0 Hd0 1cL0 bb0 1200 2s20 14n0 5aL0 Mp0 1vz0 17d0 1in0 17d0 1in0 17d0 1in0 17d0 6hX0 11B0 XHX0 1a10 1fz0 1a10 19X0 1cN0 1fz0 1a10 1fC0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|62e5", "Europe/Malta|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2arB0 Lz0 1cN0 1db0 1410 1on0 Wp0 1qL0 17d0 1cL0 M3B0 5M20 WM0 1fA0 1co0 17c0 1iM0 16m0 1de0 1lc0 14m0 1lc0 WO0 1qM0 GTW0 On0 1C10 LA0 1C00 LA0 1EM0 LA0 1C00 LA0 1zc0 Oo0 1C00 Oo0 1co0 1cM0 1lA0 Xc0 1qq0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1iN0 19z0 1fB0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|42e4", "Europe/Minsk|MMT EET MSK CEST CET MSD EEST +03|-1O -20 -30 -20 -10 -40 -30 -30|01234343252525252525252525261616161616161616161616161616161616161617|-1Pc1O eUnO qNX0 3gQ0 WM0 1fA0 1cM0 Al0 1tsn0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 3Fc0 1cN0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0|19e5", "Europe/Monaco|PMT WET WEST WEMT CET CEST|-9.l 0 -10 -20 -10 -20|01212121212121212121212121212121212121212121212121232323232345454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-2n5c9.l cFX9.l HA0 19A0 1iM0 11c0 1oo0 Wo0 1rc0 QM0 1EM0 UM0 1u00 10o0 1io0 1wo0 Rc0 1a00 1fA0 1cM0 1cM0 1io0 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 1fA0 1a00 1io0 17c0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Df0 2RV0 11z0 11B0 1ze0 WM0 1fA0 1cM0 1fa0 1aq0 16M0 1ekn0 1cL0 1fC0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|38e3", "Europe/Moscow|MMT MMT MST MDST MSD MSK +05 EET EEST MSK|-2u.h -2v.j -3v.j -4v.j -40 -30 -50 -20 -30 -40|012132345464575454545454545454545458754545454545454545454545454545454545454595|-2ag2u.h 2pyW.W 1bA0 11X0 GN0 1Hb0 c4v.j ik0 3DA0 dz0 15A0 c10 2q10 iM10 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|16e6", "Europe/Paris|PMT WET WEST CEST CET WEMT|-9.l 0 -10 -20 -10 -20|0121212121212121212121212121212121212121212121212123434352543434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434|-2nco9.l cNb9.l HA0 19A0 1iM0 11c0 1oo0 Wo0 1rc0 QM0 1EM0 UM0 1u00 10o0 1io0 1wo0 Rc0 1a00 1fA0 1cM0 1cM0 1io0 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 1fA0 1a00 1io0 17c0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Df0 Ik0 5M30 WM0 1fA0 1cM0 Vx0 hB0 1aq0 16M0 1ekn0 1cL0 1fC0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|11e6", "Europe/Riga|RMT LST EET MSK CEST CET MSD EEST|-1A.y -2A.y -20 -30 -20 -10 -40 -30|010102345454536363636363636363727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272|-25TzA.y 11A0 1iM0 ko0 gWm0 yDXA.y 2bX0 3fE0 WM0 1fA0 1cM0 1cM0 4m0 1sLy0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 1o00 11A0 1o00 11A0 1qM0 3oo0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|64e4", "Europe/Rome|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2arB0 Lz0 1cN0 1db0 1410 1on0 Wp0 1qL0 17d0 1cL0 M3B0 5M20 WM0 1fA0 1cM0 16M0 1iM0 16m0 1de0 1lc0 14m0 1lc0 WO0 1qM0 GTW0 On0 1C10 LA0 1C00 LA0 1EM0 LA0 1C00 LA0 1zc0 Oo0 1C00 Oo0 1C00 LA0 1zc0 Oo0 1C00 LA0 1C00 LA0 1zc0 Oo0 1C00 Oo0 1zc0 Oo0 1fC0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|39e5", "Europe/Samara|LMT +03 +04 +05|-3k.k -30 -40 -50|0123232323232323232121232323232323232323232323232323232323212|-22WM0 qH90 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1fA0 2y10 14m0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 2sp0 WM0|12e5", "Europe/Saratov|LMT +03 +04 +05|-34.i -30 -40 -50|012323232323232321212121212121212121212121212121212121212121212|-22WM0 qH90 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1cM0 1cM0 1fA0 1cM0 3Co0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 5810|", "Europe/Simferopol|SMT EET MSK CEST CET MSD EEST MSK|-2g -20 -30 -20 -10 -40 -30 -40|012343432525252525252525252161616525252616161616161616161616161616161616172|-1Pc2g eUog rEn0 2qs0 WM0 1fA0 1cM0 3V0 1u0L0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1Q00 4eL0 1cL0 1cN0 1cL0 1cN0 dX0 WL0 1cN0 1cL0 1fB0 1o30 11B0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11z0 1nW0|33e4", "Europe/Sofia|EET CET CEST EEST|-20 -10 -20 -30|01212103030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030|-168L0 WM0 1fA0 1cM0 1cM0 1cN0 1mKH0 1dd0 1fb0 1ap0 1fb0 1a20 1fy0 1a30 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cK0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1nX0 11E0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|12e5", "Europe/Stockholm|CET CEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2azC0 TB0 2yDe0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|15e5", "Europe/Tallinn|TMT CET CEST EET MSK MSD EEST|-1D -10 -20 -20 -30 -40 -30|012103421212454545454545454546363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363|-26oND teD 11A0 1Ta0 4rXl KSLD 2FX0 2Jg0 WM0 1fA0 1cM0 18J0 1sTX0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o10 11A0 1qM0 5QM0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|41e4", "Europe/Tirane|LMT CET CEST|-1j.k -10 -20|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2glBj.k 14pcj.k 5LC0 WM0 4M0 1fCK0 10n0 1op0 11z0 1pd0 11z0 1qN0 WL0 1qp0 Xb0 1qp0 Xb0 1qp0 11z0 1lB0 11z0 1qN0 11z0 1iN0 16n0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|42e4", "Europe/Ulyanovsk|LMT +03 +04 +05 +02|-3d.A -30 -40 -50 -20|01232323232323232321214121212121212121212121212121212121212121212|-22WM0 qH90 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3rd0|13e5", "Europe/Uzhgorod|CET CEST MSK MSD EET EEST|-10 -20 -30 -40 -20 -30|010101023232323232323232320454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-1cqL0 6i00 WM0 1fA0 1cM0 1ml0 1Cp0 1r3W0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1Q00 1Nf0 2pw0 1cL0 1cN0 1cL0 1cN0 1cL0 1cQ0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|11e4", "Europe/Vienna|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 3KM0 14o0 LA00 6i00 WM0 1fA0 1cM0 1cM0 1cM0 400 2qM0 1ao0 1co0 1cM0 1io0 17c0 1gHa0 19X0 1cP0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|18e5", "Europe/Vilnius|WMT KMT CET EET MSK CEST MSD EEST|-1o -1z.A -10 -20 -30 -20 -40 -30|012324525254646464646464646473737373737373737352537373737373737373737373737373737373737373737373737373737373737373737373|-293do 6ILM.o 1Ooz.A zz0 Mfd0 29W0 3is0 WM0 1fA0 1cM0 LV0 1tgL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11B0 1o00 11A0 1qM0 8io0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|54e4", "Europe/Volgograd|LMT +03 +04 +05|-2V.E -30 -40 -50|0123232323232323212121212121212121212121212121212121212121212121|-21IqV.E psLV.E 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1cM0 1cM0 1fA0 1cM0 3Co0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 9Jd0 5gn0|10e5", "Europe/Warsaw|WMT CET CEST EET EEST|-1o -10 -20 -20 -30|012121234312121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2ctdo 1LXo 11d0 1iO0 11A0 1o00 11A0 1on0 11A0 6zy0 HWP0 5IM0 WM0 1fA0 1cM0 1dz0 1mL0 1en0 15B0 1aq0 1nA0 11A0 1io0 17c0 1fA0 1a00 iDX0 LA0 1cM0 1cM0 1C00 Oo0 1cM0 1cM0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1C00 LA0 uso0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|17e5", "Europe/Zaporozhye|+0220 EET MSK CEST CET MSD EEST|-2k -20 -30 -20 -10 -40 -30|01234342525252525252525252526161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161|-1Pc2k eUok rdb0 2RE0 WM0 1fA0 8m0 1v9a0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cK0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cQ0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|77e4", "HST|HST|a0|0||", "Indian/Chagos|LMT +05 +06|-4N.E -50 -60|012|-2xosN.E 3AGLN.E|30e2", "Indian/Cocos|+0630|-6u|0||596", "Indian/Kerguelen|-00 +05|0 -50|01|-MG00|130", "Indian/Mahe|LMT +04|-3F.M -40|01|-2xorF.M|79e3", "Indian/Maldives|MMT +05|-4S -50|01|-olgS|35e4", "Indian/Mauritius|LMT +04 +05|-3O -40 -50|012121|-2xorO 34unO 14L0 12kr0 11z0|15e4", "Indian/Reunion|LMT +04|-3F.Q -40|01|-2mDDF.Q|84e4", "Pacific/Kwajalein|+11 +10 +09 -12 +12|-b0 -a0 -90 c0 -c0|012034|-1kln0 akp0 6Up0 12ry0 Wan0|14e3", "MET|MET MEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 1cM0 16M0 1gMM0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|", "MST|MST|70|0||", "MST7MDT|MST MDT MWT MPT|70 60 60 60|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261r0 1nX0 11B0 1nX0 SgN0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|", "Pacific/Chatham|+1215 +1245 +1345|-cf -cJ -dJ|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212|-WqAf 1adef IM0 1C00 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1qM0 14o0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1io0 17c0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1io0 17c0 1io0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00|600", "Pacific/Apia|LMT -1130 -11 -10 +14 +13|bq.U bu b0 a0 -e0 -d0|01232345454545454545454545454545454545454545454545454545454|-2nDMx.4 1yW03.4 2rRbu 1ff0 1a00 CI0 AQ0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00|37e3", "Pacific/Bougainville|+10 +09 +11|-a0 -90 -b0|0102|-16Wy0 7CN0 2MQp0|18e4", "Pacific/Chuuk|+10 +09|-a0 -90|01010|-2ewy0 axB0 RVX0 axd0|49e3", "Pacific/Efate|LMT +11 +12|-bd.g -b0 -c0|012121212121212121212121|-2l9nd.g 2uNXd.g Dc0 n610 1cL0 1cN0 1cL0 1fB0 19X0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 Lz0 1Nd0 An0|66e3", "Pacific/Enderbury|-12 -11 +13|c0 b0 -d0|012|nIc0 B7X0|1", "Pacific/Fakaofo|-11 +13|b0 -d0|01|1Gfn0|483", "Pacific/Fiji|LMT +12 +13|-bT.I -c0 -d0|0121212121212121212121212121212121212121212121212121212121212121|-2bUzT.I 3m8NT.I LA0 1EM0 IM0 nJc0 LA0 1o00 Rc0 1wo0 Ao0 1Nc0 Ao0 1Q00 xz0 1SN0 uM0 1SM0 uM0 1VA0 s00 1VA0 s00 1VA0 s00 20o0 pc0 2hc0 bc0 20o0 pc0 20o0 pc0 20o0 pc0 20o0 pc0 20o0 s00 1VA0 s00 20o0 pc0 20o0 pc0 20o0 pc0 20o0 pc0 20o0 s00 20o0 pc0 20o0 pc0 20o0 pc0 20o0 pc0 20o0 s00 1VA0 s00|88e4", "Pacific/Galapagos|LMT -05 -06|5W.o 50 60|01212|-1yVS1.A 2dTz1.A gNd0 rz0|25e3", "Pacific/Gambier|LMT -09|8X.M 90|01|-2jof0.c|125", "Pacific/Guadalcanal|LMT +11|-aD.M -b0|01|-2joyD.M|11e4", "Pacific/Guam|GST +09 GDT ChST|-a0 -90 -b0 -a0|01020202020202020203|-18jK0 6pB0 AhB0 3QL0 g2p0 3p91 WOX rX0 1zd0 Rb0 1wp0 Rb0 5xd0 rX0 5sN0 zb1 1C0X On0 ULb0|17e4", "Pacific/Honolulu|HST HDT HWT HPT HST|au 9u 9u 9u a0|0102304|-1thLu 8x0 lef0 8wWu iAu 46p0|37e4", "Pacific/Kiritimati|-1040 -10 +14|aE a0 -e0|012|nIaE B7Xk|51e2", "Pacific/Kosrae|+11 +09 +10 +12|-b0 -90 -a0 -c0|01021030|-2ewz0 axC0 HBy0 akp0 axd0 WOK0 1bdz0|66e2", "Pacific/Majuro|+11 +09 +10 +12|-b0 -90 -a0 -c0|0102103|-2ewz0 axC0 HBy0 akp0 6RB0 12um0|28e3", "Pacific/Marquesas|LMT -0930|9i 9u|01|-2joeG|86e2", "Pacific/Pago_Pago|LMT SST|bm.M b0|01|-2nDMB.c|37e2", "Pacific/Nauru|LMT +1130 +09 +12|-b7.E -bu -90 -c0|01213|-1Xdn7.E QCnB.E 7mqu 1lnbu|10e3", "Pacific/Niue|-1120 -1130 -11|bk bu b0|012|-KfME 17y0a|12e2", "Pacific/Norfolk|+1112 +1130 +1230 +11 +12|-bc -bu -cu -b0 -c0|012134343434343434343434343434343434343434|-Kgbc W01G Oo0 1COo0 9Jcu 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|25e4", "Pacific/Noumea|LMT +11 +12|-b5.M -b0 -c0|01212121|-2l9n5.M 2EqM5.M xX0 1PB0 yn0 HeP0 Ao0|98e3", "Pacific/Pitcairn|-0830 -08|8u 80|01|18Vku|56", "Pacific/Pohnpei|+11 +09 +10|-b0 -90 -a0|010210|-2ewz0 axC0 HBy0 akp0 axd0|34e3", "Pacific/Rarotonga|-1030 -0930 -10|au 9u a0|012121212121212121212121212|lyWu IL0 1zcu Onu 1zcu Onu 1zcu Rbu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Rbu 1zcu Onu 1zcu Onu 1zcu Onu|13e3", "Pacific/Tahiti|LMT -10|9W.g a0|01|-2joe1.I|18e4", "Pacific/Tongatapu|+1220 +13 +14|-ck -d0 -e0|0121212121|-1aB0k 2n5dk 15A0 1wo0 xz0 1Q10 xz0 zWN0 s00|75e3", "PST8PDT|PST PDT PWT PPT|80 70 70 70|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261q0 1nX0 11B0 1nX0 SgN0 8x10 iy0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|", "WET|WET WEST|0 -10|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|hDB0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|" ],
        links: [ "Africa/Abidjan|Africa/Bamako", "Africa/Abidjan|Africa/Banjul", "Africa/Abidjan|Africa/Conakry", "Africa/Abidjan|Africa/Dakar", "Africa/Abidjan|Africa/Freetown", "Africa/Abidjan|Africa/Lome", "Africa/Abidjan|Africa/Nouakchott", "Africa/Abidjan|Africa/Ouagadougou", "Africa/Abidjan|Africa/Timbuktu", "Africa/Abidjan|Atlantic/St_Helena", "Africa/Cairo|Egypt", "Africa/Johannesburg|Africa/Maseru", "Africa/Johannesburg|Africa/Mbabane", "Africa/Lagos|Africa/Bangui", "Africa/Lagos|Africa/Brazzaville", "Africa/Lagos|Africa/Douala", "Africa/Lagos|Africa/Kinshasa", "Africa/Lagos|Africa/Libreville", "Africa/Lagos|Africa/Luanda", "Africa/Lagos|Africa/Malabo", "Africa/Lagos|Africa/Niamey", "Africa/Lagos|Africa/Porto-Novo", "Africa/Maputo|Africa/Blantyre", "Africa/Maputo|Africa/Bujumbura", "Africa/Maputo|Africa/Gaborone", "Africa/Maputo|Africa/Harare", "Africa/Maputo|Africa/Kigali", "Africa/Maputo|Africa/Lubumbashi", "Africa/Maputo|Africa/Lusaka", "Africa/Nairobi|Africa/Addis_Ababa", "Africa/Nairobi|Africa/Asmara", "Africa/Nairobi|Africa/Asmera", "Africa/Nairobi|Africa/Dar_es_Salaam", "Africa/Nairobi|Africa/Djibouti", "Africa/Nairobi|Africa/Kampala", "Africa/Nairobi|Africa/Mogadishu", "Africa/Nairobi|Indian/Antananarivo", "Africa/Nairobi|Indian/Comoro", "Africa/Nairobi|Indian/Mayotte", "Africa/Tripoli|Libya", "America/Adak|America/Atka", "America/Adak|US/Aleutian", "America/Anchorage|US/Alaska", "America/Argentina/Buenos_Aires|America/Buenos_Aires", "America/Argentina/Catamarca|America/Argentina/ComodRivadavia", "America/Argentina/Catamarca|America/Catamarca", "America/Argentina/Cordoba|America/Cordoba", "America/Argentina/Cordoba|America/Rosario", "America/Argentina/Jujuy|America/Jujuy", "America/Argentina/Mendoza|America/Mendoza", "America/Atikokan|America/Coral_Harbour", "America/Chicago|US/Central", "America/Curacao|America/Aruba", "America/Curacao|America/Kralendijk", "America/Curacao|America/Lower_Princes", "America/Denver|America/Shiprock", "America/Denver|Navajo", "America/Denver|US/Mountain", "America/Detroit|US/Michigan", "America/Edmonton|Canada/Mountain", "America/Fort_Wayne|America/Indiana/Indianapolis", "America/Fort_Wayne|America/Indianapolis", "America/Fort_Wayne|US/East-Indiana", "America/Godthab|America/Nuuk", "America/Halifax|Canada/Atlantic", "America/Havana|Cuba", "America/Indiana/Knox|America/Knox_IN", "America/Indiana/Knox|US/Indiana-Starke", "America/Jamaica|Jamaica", "America/Kentucky/Louisville|America/Louisville", "America/Los_Angeles|US/Pacific", "America/Manaus|Brazil/West", "America/Mazatlan|Mexico/BajaSur", "America/Mexico_City|Mexico/General", "America/New_York|US/Eastern", "America/Noronha|Brazil/DeNoronha", "America/Panama|America/Cayman", "America/Phoenix|US/Arizona", "America/Port_of_Spain|America/Anguilla", "America/Port_of_Spain|America/Antigua", "America/Port_of_Spain|America/Dominica", "America/Port_of_Spain|America/Grenada", "America/Port_of_Spain|America/Guadeloupe", "America/Port_of_Spain|America/Marigot", "America/Port_of_Spain|America/Montserrat", "America/Port_of_Spain|America/St_Barthelemy", "America/Port_of_Spain|America/St_Kitts", "America/Port_of_Spain|America/St_Lucia", "America/Port_of_Spain|America/St_Thomas", "America/Port_of_Spain|America/St_Vincent", "America/Port_of_Spain|America/Tortola", "America/Port_of_Spain|America/Virgin", "America/Regina|Canada/Saskatchewan", "America/Rio_Branco|America/Porto_Acre", "America/Rio_Branco|Brazil/Acre", "America/Santiago|Chile/Continental", "America/Sao_Paulo|Brazil/East", "America/St_Johns|Canada/Newfoundland", "America/Tijuana|America/Ensenada", "America/Tijuana|America/Santa_Isabel", "America/Tijuana|Mexico/BajaNorte", "America/Toronto|America/Montreal", "America/Toronto|Canada/Eastern", "America/Vancouver|Canada/Pacific", "America/Whitehorse|Canada/Yukon", "America/Winnipeg|Canada/Central", "Asia/Ashgabat|Asia/Ashkhabad", "Asia/Bangkok|Asia/Phnom_Penh", "Asia/Bangkok|Asia/Vientiane", "Asia/Dhaka|Asia/Dacca", "Asia/Dubai|Asia/Muscat", "Asia/Ho_Chi_Minh|Asia/Saigon", "Asia/Hong_Kong|Hongkong", "Asia/Jerusalem|Asia/Tel_Aviv", "Asia/Jerusalem|Israel", "Asia/Kathmandu|Asia/Katmandu", "Asia/Kolkata|Asia/Calcutta", "Asia/Kuala_Lumpur|Asia/Singapore", "Asia/Kuala_Lumpur|Singapore", "Asia/Macau|Asia/Macao", "Asia/Makassar|Asia/Ujung_Pandang", "Asia/Nicosia|Europe/Nicosia", "Asia/Qatar|Asia/Bahrain", "Asia/Rangoon|Asia/Yangon", "Asia/Riyadh|Asia/Aden", "Asia/Riyadh|Asia/Kuwait", "Asia/Seoul|ROK", "Asia/Shanghai|Asia/Chongqing", "Asia/Shanghai|Asia/Chungking", "Asia/Shanghai|Asia/Harbin", "Asia/Shanghai|PRC", "Asia/Taipei|ROC", "Asia/Tehran|Iran", "Asia/Thimphu|Asia/Thimbu", "Asia/Tokyo|Japan", "Asia/Ulaanbaatar|Asia/Ulan_Bator", "Asia/Urumqi|Asia/Kashgar", "Atlantic/Faroe|Atlantic/Faeroe", "Atlantic/Reykjavik|Iceland", "Atlantic/South_Georgia|Etc/GMT+2", "Australia/Adelaide|Australia/South", "Australia/Brisbane|Australia/Queensland", "Australia/Broken_Hill|Australia/Yancowinna", "Australia/Darwin|Australia/North", "Australia/Hobart|Australia/Currie", "Australia/Hobart|Australia/Tasmania", "Australia/Lord_Howe|Australia/LHI", "Australia/Melbourne|Australia/Victoria", "Australia/Perth|Australia/West", "Australia/Sydney|Australia/ACT", "Australia/Sydney|Australia/Canberra", "Australia/Sydney|Australia/NSW", "Etc/GMT-0|Etc/GMT", "Etc/GMT-0|Etc/GMT+0", "Etc/GMT-0|Etc/GMT0", "Etc/GMT-0|Etc/Greenwich", "Etc/GMT-0|GMT", "Etc/GMT-0|GMT+0", "Etc/GMT-0|GMT-0", "Etc/GMT-0|GMT0", "Etc/GMT-0|Greenwich", "Etc/UTC|Etc/UCT", "Etc/UTC|Etc/Universal", "Etc/UTC|Etc/Zulu", "Etc/UTC|UCT", "Etc/UTC|UTC", "Etc/UTC|Universal", "Etc/UTC|Zulu", "Europe/Belgrade|Europe/Ljubljana", "Europe/Belgrade|Europe/Podgorica", "Europe/Belgrade|Europe/Sarajevo", "Europe/Belgrade|Europe/Skopje", "Europe/Belgrade|Europe/Zagreb", "Europe/Chisinau|Europe/Tiraspol", "Europe/Dublin|Eire", "Europe/Helsinki|Europe/Mariehamn", "Europe/Istanbul|Asia/Istanbul", "Europe/Istanbul|Turkey", "Europe/Lisbon|Portugal", "Europe/London|Europe/Belfast", "Europe/London|Europe/Guernsey", "Europe/London|Europe/Isle_of_Man", "Europe/London|Europe/Jersey", "Europe/London|GB", "Europe/London|GB-Eire", "Europe/Moscow|W-SU", "Europe/Oslo|Arctic/Longyearbyen", "Europe/Oslo|Atlantic/Jan_Mayen", "Europe/Prague|Europe/Bratislava", "Europe/Rome|Europe/San_Marino", "Europe/Rome|Europe/Vatican", "Europe/Warsaw|Poland", "Europe/Zurich|Europe/Busingen", "Europe/Zurich|Europe/Vaduz", "Indian/Christmas|Etc/GMT-7", "Pacific/Auckland|Antarctica/McMurdo", "Pacific/Auckland|Antarctica/South_Pole", "Pacific/Auckland|NZ", "Pacific/Chatham|NZ-CHAT", "Pacific/Chuuk|Pacific/Truk", "Pacific/Chuuk|Pacific/Yap", "Pacific/Easter|Chile/EasterIsland", "Pacific/Guam|Pacific/Saipan", "Pacific/Honolulu|Pacific/Johnston", "Pacific/Honolulu|US/Hawaii", "Pacific/Kwajalein|Kwajalein", "Pacific/Pago_Pago|Pacific/Midway", "Pacific/Pago_Pago|Pacific/Samoa", "Pacific/Pago_Pago|US/Samoa", "Pacific/Palau|Etc/GMT-9", "Pacific/Pohnpei|Pacific/Ponape", "Pacific/Port_Moresby|Etc/GMT-10", "Pacific/Tarawa|Etc/GMT-12", "Pacific/Tarawa|Pacific/Funafuti", "Pacific/Tarawa|Pacific/Wake", "Pacific/Tarawa|Pacific/Wallis" ],
        countries: [ "AD|Europe/Andorra", "AE|Asia/Dubai", "AF|Asia/Kabul", "AG|America/Port_of_Spain America/Antigua", "AI|America/Port_of_Spain America/Anguilla", "AL|Europe/Tirane", "AM|Asia/Yerevan", "AO|Africa/Lagos Africa/Luanda", "AQ|Antarctica/Casey Antarctica/Davis Antarctica/DumontDUrville Antarctica/Mawson Antarctica/Palmer Antarctica/Rothera Antarctica/Syowa Antarctica/Troll Antarctica/Vostok Pacific/Auckland Antarctica/McMurdo", "AR|America/Argentina/Buenos_Aires America/Argentina/Cordoba America/Argentina/Salta America/Argentina/Jujuy America/Argentina/Tucuman America/Argentina/Catamarca America/Argentina/La_Rioja America/Argentina/San_Juan America/Argentina/Mendoza America/Argentina/San_Luis America/Argentina/Rio_Gallegos America/Argentina/Ushuaia", "AS|Pacific/Pago_Pago", "AT|Europe/Vienna", "AU|Australia/Lord_Howe Antarctica/Macquarie Australia/Hobart Australia/Currie Australia/Melbourne Australia/Sydney Australia/Broken_Hill Australia/Brisbane Australia/Lindeman Australia/Adelaide Australia/Darwin Australia/Perth Australia/Eucla", "AW|America/Curacao America/Aruba", "AX|Europe/Helsinki Europe/Mariehamn", "AZ|Asia/Baku", "BA|Europe/Belgrade Europe/Sarajevo", "BB|America/Barbados", "BD|Asia/Dhaka", "BE|Europe/Brussels", "BF|Africa/Abidjan Africa/Ouagadougou", "BG|Europe/Sofia", "BH|Asia/Qatar Asia/Bahrain", "BI|Africa/Maputo Africa/Bujumbura", "BJ|Africa/Lagos Africa/Porto-Novo", "BL|America/Port_of_Spain America/St_Barthelemy", "BM|Atlantic/Bermuda", "BN|Asia/Brunei", "BO|America/La_Paz", "BQ|America/Curacao America/Kralendijk", "BR|America/Noronha America/Belem America/Fortaleza America/Recife America/Araguaina America/Maceio America/Bahia America/Sao_Paulo America/Campo_Grande America/Cuiaba America/Santarem America/Porto_Velho America/Boa_Vista America/Manaus America/Eirunepe America/Rio_Branco", "BS|America/Nassau", "BT|Asia/Thimphu", "BW|Africa/Maputo Africa/Gaborone", "BY|Europe/Minsk", "BZ|America/Belize", "CA|America/St_Johns America/Halifax America/Glace_Bay America/Moncton America/Goose_Bay America/Blanc-Sablon America/Toronto America/Nipigon America/Thunder_Bay America/Iqaluit America/Pangnirtung America/Atikokan America/Winnipeg America/Rainy_River America/Resolute America/Rankin_Inlet America/Regina America/Swift_Current America/Edmonton America/Cambridge_Bay America/Yellowknife America/Inuvik America/Creston America/Dawson_Creek America/Fort_Nelson America/Vancouver America/Whitehorse America/Dawson", "CC|Indian/Cocos", "CD|Africa/Maputo Africa/Lagos Africa/Kinshasa Africa/Lubumbashi", "CF|Africa/Lagos Africa/Bangui", "CG|Africa/Lagos Africa/Brazzaville", "CH|Europe/Zurich", "CI|Africa/Abidjan", "CK|Pacific/Rarotonga", "CL|America/Santiago America/Punta_Arenas Pacific/Easter", "CM|Africa/Lagos Africa/Douala", "CN|Asia/Shanghai Asia/Urumqi", "CO|America/Bogota", "CR|America/Costa_Rica", "CU|America/Havana", "CV|Atlantic/Cape_Verde", "CW|America/Curacao", "CX|Indian/Christmas", "CY|Asia/Nicosia Asia/Famagusta", "CZ|Europe/Prague", "DE|Europe/Zurich Europe/Berlin Europe/Busingen", "DJ|Africa/Nairobi Africa/Djibouti", "DK|Europe/Copenhagen", "DM|America/Port_of_Spain America/Dominica", "DO|America/Santo_Domingo", "DZ|Africa/Algiers", "EC|America/Guayaquil Pacific/Galapagos", "EE|Europe/Tallinn", "EG|Africa/Cairo", "EH|Africa/El_Aaiun", "ER|Africa/Nairobi Africa/Asmara", "ES|Europe/Madrid Africa/Ceuta Atlantic/Canary", "ET|Africa/Nairobi Africa/Addis_Ababa", "FI|Europe/Helsinki", "FJ|Pacific/Fiji", "FK|Atlantic/Stanley", "FM|Pacific/Chuuk Pacific/Pohnpei Pacific/Kosrae", "FO|Atlantic/Faroe", "FR|Europe/Paris", "GA|Africa/Lagos Africa/Libreville", "GB|Europe/London", "GD|America/Port_of_Spain America/Grenada", "GE|Asia/Tbilisi", "GF|America/Cayenne", "GG|Europe/London Europe/Guernsey", "GH|Africa/Accra", "GI|Europe/Gibraltar", "GL|America/Nuuk America/Danmarkshavn America/Scoresbysund America/Thule", "GM|Africa/Abidjan Africa/Banjul", "GN|Africa/Abidjan Africa/Conakry", "GP|America/Port_of_Spain America/Guadeloupe", "GQ|Africa/Lagos Africa/Malabo", "GR|Europe/Athens", "GS|Atlantic/South_Georgia", "GT|America/Guatemala", "GU|Pacific/Guam", "GW|Africa/Bissau", "GY|America/Guyana", "HK|Asia/Hong_Kong", "HN|America/Tegucigalpa", "HR|Europe/Belgrade Europe/Zagreb", "HT|America/Port-au-Prince", "HU|Europe/Budapest", "ID|Asia/Jakarta Asia/Pontianak Asia/Makassar Asia/Jayapura", "IE|Europe/Dublin", "IL|Asia/Jerusalem", "IM|Europe/London Europe/Isle_of_Man", "IN|Asia/Kolkata", "IO|Indian/Chagos", "IQ|Asia/Baghdad", "IR|Asia/Tehran", "IS|Atlantic/Reykjavik", "IT|Europe/Rome", "JE|Europe/London Europe/Jersey", "JM|America/Jamaica", "JO|Asia/Amman", "JP|Asia/Tokyo", "KE|Africa/Nairobi", "KG|Asia/Bishkek", "KH|Asia/Bangkok Asia/Phnom_Penh", "KI|Pacific/Tarawa Pacific/Enderbury Pacific/Kiritimati", "KM|Africa/Nairobi Indian/Comoro", "KN|America/Port_of_Spain America/St_Kitts", "KP|Asia/Pyongyang", "KR|Asia/Seoul", "KW|Asia/Riyadh Asia/Kuwait", "KY|America/Panama America/Cayman", "KZ|Asia/Almaty Asia/Qyzylorda Asia/Qostanay Asia/Aqtobe Asia/Aqtau Asia/Atyrau Asia/Oral", "LA|Asia/Bangkok Asia/Vientiane", "LB|Asia/Beirut", "LC|America/Port_of_Spain America/St_Lucia", "LI|Europe/Zurich Europe/Vaduz", "LK|Asia/Colombo", "LR|Africa/Monrovia", "LS|Africa/Johannesburg Africa/Maseru", "LT|Europe/Vilnius", "LU|Europe/Luxembourg", "LV|Europe/Riga", "LY|Africa/Tripoli", "MA|Africa/Casablanca", "MC|Europe/Monaco", "MD|Europe/Chisinau", "ME|Europe/Belgrade Europe/Podgorica", "MF|America/Port_of_Spain America/Marigot", "MG|Africa/Nairobi Indian/Antananarivo", "MH|Pacific/Majuro Pacific/Kwajalein", "MK|Europe/Belgrade Europe/Skopje", "ML|Africa/Abidjan Africa/Bamako", "MM|Asia/Yangon", "MN|Asia/Ulaanbaatar Asia/Hovd Asia/Choibalsan", "MO|Asia/Macau", "MP|Pacific/Guam Pacific/Saipan", "MQ|America/Martinique", "MR|Africa/Abidjan Africa/Nouakchott", "MS|America/Port_of_Spain America/Montserrat", "MT|Europe/Malta", "MU|Indian/Mauritius", "MV|Indian/Maldives", "MW|Africa/Maputo Africa/Blantyre", "MX|America/Mexico_City America/Cancun America/Merida America/Monterrey America/Matamoros America/Mazatlan America/Chihuahua America/Ojinaga America/Hermosillo America/Tijuana America/Bahia_Banderas", "MY|Asia/Kuala_Lumpur Asia/Kuching", "MZ|Africa/Maputo", "NA|Africa/Windhoek", "NC|Pacific/Noumea", "NE|Africa/Lagos Africa/Niamey", "NF|Pacific/Norfolk", "NG|Africa/Lagos", "NI|America/Managua", "NL|Europe/Amsterdam", "NO|Europe/Oslo", "NP|Asia/Kathmandu", "NR|Pacific/Nauru", "NU|Pacific/Niue", "NZ|Pacific/Auckland Pacific/Chatham", "OM|Asia/Dubai Asia/Muscat", "PA|America/Panama", "PE|America/Lima", "PF|Pacific/Tahiti Pacific/Marquesas Pacific/Gambier", "PG|Pacific/Port_Moresby Pacific/Bougainville", "PH|Asia/Manila", "PK|Asia/Karachi", "PL|Europe/Warsaw", "PM|America/Miquelon", "PN|Pacific/Pitcairn", "PR|America/Puerto_Rico", "PS|Asia/Gaza Asia/Hebron", "PT|Europe/Lisbon Atlantic/Madeira Atlantic/Azores", "PW|Pacific/Palau", "PY|America/Asuncion", "QA|Asia/Qatar", "RE|Indian/Reunion", "RO|Europe/Bucharest", "RS|Europe/Belgrade", "RU|Europe/Kaliningrad Europe/Moscow Europe/Simferopol Europe/Kirov Europe/Astrakhan Europe/Volgograd Europe/Saratov Europe/Ulyanovsk Europe/Samara Asia/Yekaterinburg Asia/Omsk Asia/Novosibirsk Asia/Barnaul Asia/Tomsk Asia/Novokuznetsk Asia/Krasnoyarsk Asia/Irkutsk Asia/Chita Asia/Yakutsk Asia/Khandyga Asia/Vladivostok Asia/Ust-Nera Asia/Magadan Asia/Sakhalin Asia/Srednekolymsk Asia/Kamchatka Asia/Anadyr", "RW|Africa/Maputo Africa/Kigali", "SA|Asia/Riyadh", "SB|Pacific/Guadalcanal", "SC|Indian/Mahe", "SD|Africa/Khartoum", "SE|Europe/Stockholm", "SG|Asia/Singapore", "SH|Africa/Abidjan Atlantic/St_Helena", "SI|Europe/Belgrade Europe/Ljubljana", "SJ|Europe/Oslo Arctic/Longyearbyen", "SK|Europe/Prague Europe/Bratislava", "SL|Africa/Abidjan Africa/Freetown", "SM|Europe/Rome Europe/San_Marino", "SN|Africa/Abidjan Africa/Dakar", "SO|Africa/Nairobi Africa/Mogadishu", "SR|America/Paramaribo", "SS|Africa/Juba", "ST|Africa/Sao_Tome", "SV|America/El_Salvador", "SX|America/Curacao America/Lower_Princes", "SY|Asia/Damascus", "SZ|Africa/Johannesburg Africa/Mbabane", "TC|America/Grand_Turk", "TD|Africa/Ndjamena", "TF|Indian/Reunion Indian/Kerguelen", "TG|Africa/Abidjan Africa/Lome", "TH|Asia/Bangkok", "TJ|Asia/Dushanbe", "TK|Pacific/Fakaofo", "TL|Asia/Dili", "TM|Asia/Ashgabat", "TN|Africa/Tunis", "TO|Pacific/Tongatapu", "TR|Europe/Istanbul", "TT|America/Port_of_Spain", "TV|Pacific/Funafuti", "TW|Asia/Taipei", "TZ|Africa/Nairobi Africa/Dar_es_Salaam", "UA|Europe/Simferopol Europe/Kiev Europe/Uzhgorod Europe/Zaporozhye", "UG|Africa/Nairobi Africa/Kampala", "UM|Pacific/Pago_Pago Pacific/Wake Pacific/Honolulu Pacific/Midway", "US|America/New_York America/Detroit America/Kentucky/Louisville America/Kentucky/Monticello America/Indiana/Indianapolis America/Indiana/Vincennes America/Indiana/Winamac America/Indiana/Marengo America/Indiana/Petersburg America/Indiana/Vevay America/Chicago America/Indiana/Tell_City America/Indiana/Knox America/Menominee America/North_Dakota/Center America/North_Dakota/New_Salem America/North_Dakota/Beulah America/Denver America/Boise America/Phoenix America/Los_Angeles America/Anchorage America/Juneau America/Sitka America/Metlakatla America/Yakutat America/Nome America/Adak Pacific/Honolulu", "UY|America/Montevideo", "UZ|Asia/Samarkand Asia/Tashkent", "VA|Europe/Rome Europe/Vatican", "VC|America/Port_of_Spain America/St_Vincent", "VE|America/Caracas", "VG|America/Port_of_Spain America/Tortola", "VI|America/Port_of_Spain America/St_Thomas", "VN|Asia/Bangkok Asia/Ho_Chi_Minh", "VU|Pacific/Efate", "WF|Pacific/Wallis", "WS|Pacific/Apia", "YE|Asia/Riyadh Asia/Aden", "YT|Africa/Nairobi Indian/Mayotte", "ZA|Africa/Johannesburg", "ZM|Africa/Maputo Africa/Lusaka", "ZW|Africa/Maputo Africa/Harare" ]
    }), b;
});

(function(global, factory) {
    "use strict";
    if (typeof module === "object" && typeof module.exports === "object") {
        module.exports = global.document ? factory(global, true) : function(w) {
            if (!w.document) {
                throw new Error("jQuery requires a window with a document");
            }
            return factory(w);
        };
    } else {
        factory(global);
    }
})(typeof window !== "undefined" ? window : this, function(window, noGlobal) {
    "use strict";
    var arr = [];
    var document = window.document;
    var getProto = Object.getPrototypeOf;
    var slice = arr.slice;
    var concat = arr.concat;
    var push = arr.push;
    var indexOf = arr.indexOf;
    var class2type = {};
    var toString = class2type.toString;
    var hasOwn = class2type.hasOwnProperty;
    var fnToString = hasOwn.toString;
    var ObjectFunctionString = fnToString.call(Object);
    var support = {};
    var isFunction = function isFunction(obj) {
        return typeof obj === "function" && typeof obj.nodeType !== "number";
    };
    var isWindow = function isWindow(obj) {
        return obj != null && obj === obj.window;
    };
    var preservedScriptAttributes = {
        type: true,
        src: true,
        noModule: true
    };
    function DOMEval(code, doc, node) {
        doc = doc || document;
        var i, script = doc.createElement("script");
        script.text = code;
        if (node) {
            for (i in preservedScriptAttributes) {
                if (node[i]) {
                    script[i] = node[i];
                }
            }
        }
        doc.head.appendChild(script).parentNode.removeChild(script);
    }
    function toType(obj) {
        if (obj == null) {
            return obj + "";
        }
        return typeof obj === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : typeof obj;
    }
    var version = "3.3.1", jQuery = function(selector, context) {
        return new jQuery.fn.init(selector, context);
    }, rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;
    jQuery.fn = jQuery.prototype = {
        jquery: version,
        constructor: jQuery,
        length: 0,
        toArray: function() {
            return slice.call(this);
        },
        get: function(num) {
            if (num == null) {
                return slice.call(this);
            }
            return num < 0 ? this[num + this.length] : this[num];
        },
        pushStack: function(elems) {
            var ret = jQuery.merge(this.constructor(), elems);
            ret.prevObject = this;
            return ret;
        },
        each: function(callback) {
            return jQuery.each(this, callback);
        },
        map: function(callback) {
            return this.pushStack(jQuery.map(this, function(elem, i) {
                return callback.call(elem, i, elem);
            }));
        },
        slice: function() {
            return this.pushStack(slice.apply(this, arguments));
        },
        first: function() {
            return this.eq(0);
        },
        last: function() {
            return this.eq(-1);
        },
        eq: function(i) {
            var len = this.length, j = +i + (i < 0 ? len : 0);
            return this.pushStack(j >= 0 && j < len ? [ this[j] ] : []);
        },
        end: function() {
            return this.prevObject || this.constructor();
        },
        push: push,
        sort: arr.sort,
        splice: arr.splice
    };
    jQuery.extend = jQuery.fn.extend = function() {
        var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {}, i = 1, length = arguments.length, deep = false;
        if (typeof target === "boolean") {
            deep = target;
            target = arguments[i] || {};
            i++;
        }
        if (typeof target !== "object" && !isFunction(target)) {
            target = {};
        }
        if (i === length) {
            target = this;
            i--;
        }
        for (;i < length; i++) {
            if ((options = arguments[i]) != null) {
                for (name in options) {
                    src = target[name];
                    copy = options[name];
                    if (target === copy) {
                        continue;
                    }
                    if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {
                        if (copyIsArray) {
                            copyIsArray = false;
                            clone = src && Array.isArray(src) ? src : [];
                        } else {
                            clone = src && jQuery.isPlainObject(src) ? src : {};
                        }
                        target[name] = jQuery.extend(deep, clone, copy);
                    } else if (copy !== undefined) {
                        target[name] = copy;
                    }
                }
            }
        }
        return target;
    };
    jQuery.extend({
        expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),
        isReady: true,
        error: function(msg) {
            throw new Error(msg);
        },
        noop: function() {},
        isPlainObject: function(obj) {
            var proto, Ctor;
            if (!obj || toString.call(obj) !== "[object Object]") {
                return false;
            }
            proto = getProto(obj);
            if (!proto) {
                return true;
            }
            Ctor = hasOwn.call(proto, "constructor") && proto.constructor;
            return typeof Ctor === "function" && fnToString.call(Ctor) === ObjectFunctionString;
        },
        isEmptyObject: function(obj) {
            var name;
            for (name in obj) {
                return false;
            }
            return true;
        },
        globalEval: function(code) {
            DOMEval(code);
        },
        each: function(obj, callback) {
            var length, i = 0;
            if (isArrayLike(obj)) {
                length = obj.length;
                for (;i < length; i++) {
                    if (callback.call(obj[i], i, obj[i]) === false) {
                        break;
                    }
                }
            } else {
                for (i in obj) {
                    if (callback.call(obj[i], i, obj[i]) === false) {
                        break;
                    }
                }
            }
            return obj;
        },
        trim: function(text) {
            return text == null ? "" : (text + "").replace(rtrim, "");
        },
        makeArray: function(arr, results) {
            var ret = results || [];
            if (arr != null) {
                if (isArrayLike(Object(arr))) {
                    jQuery.merge(ret, typeof arr === "string" ? [ arr ] : arr);
                } else {
                    push.call(ret, arr);
                }
            }
            return ret;
        },
        inArray: function(elem, arr, i) {
            return arr == null ? -1 : indexOf.call(arr, elem, i);
        },
        merge: function(first, second) {
            var len = +second.length, j = 0, i = first.length;
            for (;j < len; j++) {
                first[i++] = second[j];
            }
            first.length = i;
            return first;
        },
        grep: function(elems, callback, invert) {
            var callbackInverse, matches = [], i = 0, length = elems.length, callbackExpect = !invert;
            for (;i < length; i++) {
                callbackInverse = !callback(elems[i], i);
                if (callbackInverse !== callbackExpect) {
                    matches.push(elems[i]);
                }
            }
            return matches;
        },
        map: function(elems, callback, arg) {
            var length, value, i = 0, ret = [];
            if (isArrayLike(elems)) {
                length = elems.length;
                for (;i < length; i++) {
                    value = callback(elems[i], i, arg);
                    if (value != null) {
                        ret.push(value);
                    }
                }
            } else {
                for (i in elems) {
                    value = callback(elems[i], i, arg);
                    if (value != null) {
                        ret.push(value);
                    }
                }
            }
            return concat.apply([], ret);
        },
        guid: 1,
        support: support
    });
    if (typeof Symbol === "function") {
        jQuery.fn[Symbol.iterator] = arr[Symbol.iterator];
    }
    jQuery.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function(i, name) {
        class2type["[object " + name + "]"] = name.toLowerCase();
    });
    function isArrayLike(obj) {
        var length = !!obj && "length" in obj && obj.length, type = toType(obj);
        if (isFunction(obj) || isWindow(obj)) {
            return false;
        }
        return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;
    }
    var Sizzle = function(window) {
        var i, support, Expr, getText, isXML, tokenize, compile, select, outermostContext, sortInput, hasDuplicate, setDocument, document, docElem, documentIsHTML, rbuggyQSA, rbuggyMatches, matches, contains, expando = "sizzle" + 1 * new Date(), preferredDoc = window.document, dirruns = 0, done = 0, classCache = createCache(), tokenCache = createCache(), compilerCache = createCache(), sortOrder = function(a, b) {
            if (a === b) {
                hasDuplicate = true;
            }
            return 0;
        }, hasOwn = {}.hasOwnProperty, arr = [], pop = arr.pop, push_native = arr.push, push = arr.push, slice = arr.slice, indexOf = function(list, elem) {
            var i = 0, len = list.length;
            for (;i < len; i++) {
                if (list[i] === elem) {
                    return i;
                }
            }
            return -1;
        }, booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped", whitespace = "[\\x20\\t\\r\\n\\f]", identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+", attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace + "*([*^$|!~]?=)" + whitespace + "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace + "*\\]", pseudos = ":(" + identifier + ")(?:\\((" + "('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" + "((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" + ".*" + ")\\)|)", rwhitespace = new RegExp(whitespace + "+", "g"), rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"), rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"), rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"), rattributeQuotes = new RegExp("=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g"), rpseudo = new RegExp(pseudos), ridentifier = new RegExp("^" + identifier + "$"), matchExpr = {
            ID: new RegExp("^#(" + identifier + ")"),
            CLASS: new RegExp("^\\.(" + identifier + ")"),
            TAG: new RegExp("^(" + identifier + "|[*])"),
            ATTR: new RegExp("^" + attributes),
            PSEUDO: new RegExp("^" + pseudos),
            CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
            bool: new RegExp("^(?:" + booleans + ")$", "i"),
            needsContext: new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
        }, rinputs = /^(?:input|select|textarea|button)$/i, rheader = /^h\d$/i, rnative = /^[^{]+\{\s*\[native \w/, rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, rsibling = /[+~]/, runescape = new RegExp("\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig"), funescape = function(_, escaped, escapedWhitespace) {
            var high = "0x" + escaped - 65536;
            return high !== high || escapedWhitespace ? escaped : high < 0 ? String.fromCharCode(high + 65536) : String.fromCharCode(high >> 10 | 55296, high & 1023 | 56320);
        }, rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g, fcssescape = function(ch, asCodePoint) {
            if (asCodePoint) {
                if (ch === "\0") {
                    return "�";
                }
                return ch.slice(0, -1) + "\\" + ch.charCodeAt(ch.length - 1).toString(16) + " ";
            }
            return "\\" + ch;
        }, unloadHandler = function() {
            setDocument();
        }, disabledAncestor = addCombinator(function(elem) {
            return elem.disabled === true && ("form" in elem || "label" in elem);
        }, {
            dir: "parentNode",
            next: "legend"
        });
        try {
            push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);
            arr[preferredDoc.childNodes.length].nodeType;
        } catch (e) {
            push = {
                apply: arr.length ? function(target, els) {
                    push_native.apply(target, slice.call(els));
                } : function(target, els) {
                    var j = target.length, i = 0;
                    while (target[j++] = els[i++]) {}
                    target.length = j - 1;
                }
            };
        }
        function Sizzle(selector, context, results, seed) {
            var m, i, elem, nid, match, groups, newSelector, newContext = context && context.ownerDocument, nodeType = context ? context.nodeType : 9;
            results = results || [];
            if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {
                return results;
            }
            if (!seed) {
                if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
                    setDocument(context);
                }
                context = context || document;
                if (documentIsHTML) {
                    if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {
                        if (m = match[1]) {
                            if (nodeType === 9) {
                                if (elem = context.getElementById(m)) {
                                    if (elem.id === m) {
                                        results.push(elem);
                                        return results;
                                    }
                                } else {
                                    return results;
                                }
                            } else {
                                if (newContext && (elem = newContext.getElementById(m)) && contains(context, elem) && elem.id === m) {
                                    results.push(elem);
                                    return results;
                                }
                            }
                        } else if (match[2]) {
                            push.apply(results, context.getElementsByTagName(selector));
                            return results;
                        } else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {
                            push.apply(results, context.getElementsByClassName(m));
                            return results;
                        }
                    }
                    if (support.qsa && !compilerCache[selector + " "] && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
                        if (nodeType !== 1) {
                            newContext = context;
                            newSelector = selector;
                        } else if (context.nodeName.toLowerCase() !== "object") {
                            if (nid = context.getAttribute("id")) {
                                nid = nid.replace(rcssescape, fcssescape);
                            } else {
                                context.setAttribute("id", nid = expando);
                            }
                            groups = tokenize(selector);
                            i = groups.length;
                            while (i--) {
                                groups[i] = "#" + nid + " " + toSelector(groups[i]);
                            }
                            newSelector = groups.join(",");
                            newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
                        }
                        if (newSelector) {
                            try {
                                push.apply(results, newContext.querySelectorAll(newSelector));
                                return results;
                            } catch (qsaError) {} finally {
                                if (nid === expando) {
                                    context.removeAttribute("id");
                                }
                            }
                        }
                    }
                }
            }
            return select(selector.replace(rtrim, "$1"), context, results, seed);
        }
        function createCache() {
            var keys = [];
            function cache(key, value) {
                if (keys.push(key + " ") > Expr.cacheLength) {
                    delete cache[keys.shift()];
                }
                return cache[key + " "] = value;
            }
            return cache;
        }
        function markFunction(fn) {
            fn[expando] = true;
            return fn;
        }
        function assert(fn) {
            var el = document.createElement("fieldset");
            try {
                return !!fn(el);
            } catch (e) {
                return false;
            } finally {
                if (el.parentNode) {
                    el.parentNode.removeChild(el);
                }
                el = null;
            }
        }
        function addHandle(attrs, handler) {
            var arr = attrs.split("|"), i = arr.length;
            while (i--) {
                Expr.attrHandle[arr[i]] = handler;
            }
        }
        function siblingCheck(a, b) {
            var cur = b && a, diff = cur && a.nodeType === 1 && b.nodeType === 1 && a.sourceIndex - b.sourceIndex;
            if (diff) {
                return diff;
            }
            if (cur) {
                while (cur = cur.nextSibling) {
                    if (cur === b) {
                        return -1;
                    }
                }
            }
            return a ? 1 : -1;
        }
        function createInputPseudo(type) {
            return function(elem) {
                var name = elem.nodeName.toLowerCase();
                return name === "input" && elem.type === type;
            };
        }
        function createButtonPseudo(type) {
            return function(elem) {
                var name = elem.nodeName.toLowerCase();
                return (name === "input" || name === "button") && elem.type === type;
            };
        }
        function createDisabledPseudo(disabled) {
            return function(elem) {
                if ("form" in elem) {
                    if (elem.parentNode && elem.disabled === false) {
                        if ("label" in elem) {
                            if ("label" in elem.parentNode) {
                                return elem.parentNode.disabled === disabled;
                            } else {
                                return elem.disabled === disabled;
                            }
                        }
                        return elem.isDisabled === disabled || elem.isDisabled !== !disabled && disabledAncestor(elem) === disabled;
                    }
                    return elem.disabled === disabled;
                } else if ("label" in elem) {
                    return elem.disabled === disabled;
                }
                return false;
            };
        }
        function createPositionalPseudo(fn) {
            return markFunction(function(argument) {
                argument = +argument;
                return markFunction(function(seed, matches) {
                    var j, matchIndexes = fn([], seed.length, argument), i = matchIndexes.length;
                    while (i--) {
                        if (seed[j = matchIndexes[i]]) {
                            seed[j] = !(matches[j] = seed[j]);
                        }
                    }
                });
            });
        }
        function testContext(context) {
            return context && typeof context.getElementsByTagName !== "undefined" && context;
        }
        support = Sizzle.support = {};
        isXML = Sizzle.isXML = function(elem) {
            var documentElement = elem && (elem.ownerDocument || elem).documentElement;
            return documentElement ? documentElement.nodeName !== "HTML" : false;
        };
        setDocument = Sizzle.setDocument = function(node) {
            var hasCompare, subWindow, doc = node ? node.ownerDocument || node : preferredDoc;
            if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
                return document;
            }
            document = doc;
            docElem = document.documentElement;
            documentIsHTML = !isXML(document);
            if (preferredDoc !== document && (subWindow = document.defaultView) && subWindow.top !== subWindow) {
                if (subWindow.addEventListener) {
                    subWindow.addEventListener("unload", unloadHandler, false);
                } else if (subWindow.attachEvent) {
                    subWindow.attachEvent("onunload", unloadHandler);
                }
            }
            support.attributes = assert(function(el) {
                el.className = "i";
                return !el.getAttribute("className");
            });
            support.getElementsByTagName = assert(function(el) {
                el.appendChild(document.createComment(""));
                return !el.getElementsByTagName("*").length;
            });
            support.getElementsByClassName = rnative.test(document.getElementsByClassName);
            support.getById = assert(function(el) {
                docElem.appendChild(el).id = expando;
                return !document.getElementsByName || !document.getElementsByName(expando).length;
            });
            if (support.getById) {
                Expr.filter["ID"] = function(id) {
                    var attrId = id.replace(runescape, funescape);
                    return function(elem) {
                        return elem.getAttribute("id") === attrId;
                    };
                };
                Expr.find["ID"] = function(id, context) {
                    if (typeof context.getElementById !== "undefined" && documentIsHTML) {
                        var elem = context.getElementById(id);
                        return elem ? [ elem ] : [];
                    }
                };
            } else {
                Expr.filter["ID"] = function(id) {
                    var attrId = id.replace(runescape, funescape);
                    return function(elem) {
                        var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
                        return node && node.value === attrId;
                    };
                };
                Expr.find["ID"] = function(id, context) {
                    if (typeof context.getElementById !== "undefined" && documentIsHTML) {
                        var node, i, elems, elem = context.getElementById(id);
                        if (elem) {
                            node = elem.getAttributeNode("id");
                            if (node && node.value === id) {
                                return [ elem ];
                            }
                            elems = context.getElementsByName(id);
                            i = 0;
                            while (elem = elems[i++]) {
                                node = elem.getAttributeNode("id");
                                if (node && node.value === id) {
                                    return [ elem ];
                                }
                            }
                        }
                        return [];
                    }
                };
            }
            Expr.find["TAG"] = support.getElementsByTagName ? function(tag, context) {
                if (typeof context.getElementsByTagName !== "undefined") {
                    return context.getElementsByTagName(tag);
                } else if (support.qsa) {
                    return context.querySelectorAll(tag);
                }
            } : function(tag, context) {
                var elem, tmp = [], i = 0, results = context.getElementsByTagName(tag);
                if (tag === "*") {
                    while (elem = results[i++]) {
                        if (elem.nodeType === 1) {
                            tmp.push(elem);
                        }
                    }
                    return tmp;
                }
                return results;
            };
            Expr.find["CLASS"] = support.getElementsByClassName && function(className, context) {
                if (typeof context.getElementsByClassName !== "undefined" && documentIsHTML) {
                    return context.getElementsByClassName(className);
                }
            };
            rbuggyMatches = [];
            rbuggyQSA = [];
            if (support.qsa = rnative.test(document.querySelectorAll)) {
                assert(function(el) {
                    docElem.appendChild(el).innerHTML = "<a id='" + expando + "'></a>" + "<select id='" + expando + "-\r\\' msallowcapture=''>" + "<option selected=''></option></select>";
                    if (el.querySelectorAll("[msallowcapture^='']").length) {
                        rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
                    }
                    if (!el.querySelectorAll("[selected]").length) {
                        rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
                    }
                    if (!el.querySelectorAll("[id~=" + expando + "-]").length) {
                        rbuggyQSA.push("~=");
                    }
                    if (!el.querySelectorAll(":checked").length) {
                        rbuggyQSA.push(":checked");
                    }
                    if (!el.querySelectorAll("a#" + expando + "+*").length) {
                        rbuggyQSA.push(".#.+[+~]");
                    }
                });
                assert(function(el) {
                    el.innerHTML = "<a href='' disabled='disabled'></a>" + "<select disabled='disabled'><option/></select>";
                    var input = document.createElement("input");
                    input.setAttribute("type", "hidden");
                    el.appendChild(input).setAttribute("name", "D");
                    if (el.querySelectorAll("[name=d]").length) {
                        rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
                    }
                    if (el.querySelectorAll(":enabled").length !== 2) {
                        rbuggyQSA.push(":enabled", ":disabled");
                    }
                    docElem.appendChild(el).disabled = true;
                    if (el.querySelectorAll(":disabled").length !== 2) {
                        rbuggyQSA.push(":enabled", ":disabled");
                    }
                    el.querySelectorAll("*,:x");
                    rbuggyQSA.push(",.*:");
                });
            }
            if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {
                assert(function(el) {
                    support.disconnectedMatch = matches.call(el, "*");
                    matches.call(el, "[s!='']:x");
                    rbuggyMatches.push("!=", pseudos);
                });
            }
            rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
            rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));
            hasCompare = rnative.test(docElem.compareDocumentPosition);
            contains = hasCompare || rnative.test(docElem.contains) ? function(a, b) {
                var adown = a.nodeType === 9 ? a.documentElement : a, bup = b && b.parentNode;
                return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
            } : function(a, b) {
                if (b) {
                    while (b = b.parentNode) {
                        if (b === a) {
                            return true;
                        }
                    }
                }
                return false;
            };
            sortOrder = hasCompare ? function(a, b) {
                if (a === b) {
                    hasDuplicate = true;
                    return 0;
                }
                var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
                if (compare) {
                    return compare;
                }
                compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1;
                if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {
                    if (a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {
                        return -1;
                    }
                    if (b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {
                        return 1;
                    }
                    return sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
                }
                return compare & 4 ? -1 : 1;
            } : function(a, b) {
                if (a === b) {
                    hasDuplicate = true;
                    return 0;
                }
                var cur, i = 0, aup = a.parentNode, bup = b.parentNode, ap = [ a ], bp = [ b ];
                if (!aup || !bup) {
                    return a === document ? -1 : b === document ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
                } else if (aup === bup) {
                    return siblingCheck(a, b);
                }
                cur = a;
                while (cur = cur.parentNode) {
                    ap.unshift(cur);
                }
                cur = b;
                while (cur = cur.parentNode) {
                    bp.unshift(cur);
                }
                while (ap[i] === bp[i]) {
                    i++;
                }
                return i ? siblingCheck(ap[i], bp[i]) : ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;
            };
            return document;
        };
        Sizzle.matches = function(expr, elements) {
            return Sizzle(expr, null, null, elements);
        };
        Sizzle.matchesSelector = function(elem, expr) {
            if ((elem.ownerDocument || elem) !== document) {
                setDocument(elem);
            }
            expr = expr.replace(rattributeQuotes, "='$1']");
            if (support.matchesSelector && documentIsHTML && !compilerCache[expr + " "] && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {
                try {
                    var ret = matches.call(elem, expr);
                    if (ret || support.disconnectedMatch || elem.document && elem.document.nodeType !== 11) {
                        return ret;
                    }
                } catch (e) {}
            }
            return Sizzle(expr, document, null, [ elem ]).length > 0;
        };
        Sizzle.contains = function(context, elem) {
            if ((context.ownerDocument || context) !== document) {
                setDocument(context);
            }
            return contains(context, elem);
        };
        Sizzle.attr = function(elem, name) {
            if ((elem.ownerDocument || elem) !== document) {
                setDocument(elem);
            }
            var fn = Expr.attrHandle[name.toLowerCase()], val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;
            return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
        };
        Sizzle.escape = function(sel) {
            return (sel + "").replace(rcssescape, fcssescape);
        };
        Sizzle.error = function(msg) {
            throw new Error("Syntax error, unrecognized expression: " + msg);
        };
        Sizzle.uniqueSort = function(results) {
            var elem, duplicates = [], j = 0, i = 0;
            hasDuplicate = !support.detectDuplicates;
            sortInput = !support.sortStable && results.slice(0);
            results.sort(sortOrder);
            if (hasDuplicate) {
                while (elem = results[i++]) {
                    if (elem === results[i]) {
                        j = duplicates.push(i);
                    }
                }
                while (j--) {
                    results.splice(duplicates[j], 1);
                }
            }
            sortInput = null;
            return results;
        };
        getText = Sizzle.getText = function(elem) {
            var node, ret = "", i = 0, nodeType = elem.nodeType;
            if (!nodeType) {
                while (node = elem[i++]) {
                    ret += getText(node);
                }
            } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
                if (typeof elem.textContent === "string") {
                    return elem.textContent;
                } else {
                    for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                        ret += getText(elem);
                    }
                }
            } else if (nodeType === 3 || nodeType === 4) {
                return elem.nodeValue;
            }
            return ret;
        };
        Expr = Sizzle.selectors = {
            cacheLength: 50,
            createPseudo: markFunction,
            match: matchExpr,
            attrHandle: {},
            find: {},
            relative: {
                ">": {
                    dir: "parentNode",
                    first: true
                },
                " ": {
                    dir: "parentNode"
                },
                "+": {
                    dir: "previousSibling",
                    first: true
                },
                "~": {
                    dir: "previousSibling"
                }
            },
            preFilter: {
                ATTR: function(match) {
                    match[1] = match[1].replace(runescape, funescape);
                    match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);
                    if (match[2] === "~=") {
                        match[3] = " " + match[3] + " ";
                    }
                    return match.slice(0, 4);
                },
                CHILD: function(match) {
                    match[1] = match[1].toLowerCase();
                    if (match[1].slice(0, 3) === "nth") {
                        if (!match[3]) {
                            Sizzle.error(match[0]);
                        }
                        match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
                        match[5] = +(match[7] + match[8] || match[3] === "odd");
                    } else if (match[3]) {
                        Sizzle.error(match[0]);
                    }
                    return match;
                },
                PSEUDO: function(match) {
                    var excess, unquoted = !match[6] && match[2];
                    if (matchExpr["CHILD"].test(match[0])) {
                        return null;
                    }
                    if (match[3]) {
                        match[2] = match[4] || match[5] || "";
                    } else if (unquoted && rpseudo.test(unquoted) && (excess = tokenize(unquoted, true)) && (excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {
                        match[0] = match[0].slice(0, excess);
                        match[2] = unquoted.slice(0, excess);
                    }
                    return match.slice(0, 3);
                }
            },
            filter: {
                TAG: function(nodeNameSelector) {
                    var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
                    return nodeNameSelector === "*" ? function() {
                        return true;
                    } : function(elem) {
                        return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
                    };
                },
                CLASS: function(className) {
                    var pattern = classCache[className + " "];
                    return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function(elem) {
                        return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");
                    });
                },
                ATTR: function(name, operator, check) {
                    return function(elem) {
                        var result = Sizzle.attr(elem, name);
                        if (result == null) {
                            return operator === "!=";
                        }
                        if (!operator) {
                            return true;
                        }
                        result += "";
                        return operator === "=" ? result === check : operator === "!=" ? result !== check : operator === "^=" ? check && result.indexOf(check) === 0 : operator === "*=" ? check && result.indexOf(check) > -1 : operator === "$=" ? check && result.slice(-check.length) === check : operator === "~=" ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 : operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" : false;
                    };
                },
                CHILD: function(type, what, argument, first, last) {
                    var simple = type.slice(0, 3) !== "nth", forward = type.slice(-4) !== "last", ofType = what === "of-type";
                    return first === 1 && last === 0 ? function(elem) {
                        return !!elem.parentNode;
                    } : function(elem, context, xml) {
                        var cache, uniqueCache, outerCache, node, nodeIndex, start, dir = simple !== forward ? "nextSibling" : "previousSibling", parent = elem.parentNode, name = ofType && elem.nodeName.toLowerCase(), useCache = !xml && !ofType, diff = false;
                        if (parent) {
                            if (simple) {
                                while (dir) {
                                    node = elem;
                                    while (node = node[dir]) {
                                        if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
                                            return false;
                                        }
                                    }
                                    start = dir = type === "only" && !start && "nextSibling";
                                }
                                return true;
                            }
                            start = [ forward ? parent.firstChild : parent.lastChild ];
                            if (forward && useCache) {
                                node = parent;
                                outerCache = node[expando] || (node[expando] = {});
                                uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                                cache = uniqueCache[type] || [];
                                nodeIndex = cache[0] === dirruns && cache[1];
                                diff = nodeIndex && cache[2];
                                node = nodeIndex && parent.childNodes[nodeIndex];
                                while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                                    if (node.nodeType === 1 && ++diff && node === elem) {
                                        uniqueCache[type] = [ dirruns, nodeIndex, diff ];
                                        break;
                                    }
                                }
                            } else {
                                if (useCache) {
                                    node = elem;
                                    outerCache = node[expando] || (node[expando] = {});
                                    uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                                    cache = uniqueCache[type] || [];
                                    nodeIndex = cache[0] === dirruns && cache[1];
                                    diff = nodeIndex;
                                }
                                if (diff === false) {
                                    while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                                        if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
                                            if (useCache) {
                                                outerCache = node[expando] || (node[expando] = {});
                                                uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                                                uniqueCache[type] = [ dirruns, diff ];
                                            }
                                            if (node === elem) {
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                            diff -= last;
                            return diff === first || diff % first === 0 && diff / first >= 0;
                        }
                    };
                },
                PSEUDO: function(pseudo, argument) {
                    var args, fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo);
                    if (fn[expando]) {
                        return fn(argument);
                    }
                    if (fn.length > 1) {
                        args = [ pseudo, pseudo, "", argument ];
                        return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function(seed, matches) {
                            var idx, matched = fn(seed, argument), i = matched.length;
                            while (i--) {
                                idx = indexOf(seed, matched[i]);
                                seed[idx] = !(matches[idx] = matched[i]);
                            }
                        }) : function(elem) {
                            return fn(elem, 0, args);
                        };
                    }
                    return fn;
                }
            },
            pseudos: {
                not: markFunction(function(selector) {
                    var input = [], results = [], matcher = compile(selector.replace(rtrim, "$1"));
                    return matcher[expando] ? markFunction(function(seed, matches, context, xml) {
                        var elem, unmatched = matcher(seed, null, xml, []), i = seed.length;
                        while (i--) {
                            if (elem = unmatched[i]) {
                                seed[i] = !(matches[i] = elem);
                            }
                        }
                    }) : function(elem, context, xml) {
                        input[0] = elem;
                        matcher(input, null, xml, results);
                        input[0] = null;
                        return !results.pop();
                    };
                }),
                has: markFunction(function(selector) {
                    return function(elem) {
                        return Sizzle(selector, elem).length > 0;
                    };
                }),
                contains: markFunction(function(text) {
                    text = text.replace(runescape, funescape);
                    return function(elem) {
                        return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;
                    };
                }),
                lang: markFunction(function(lang) {
                    if (!ridentifier.test(lang || "")) {
                        Sizzle.error("unsupported lang: " + lang);
                    }
                    lang = lang.replace(runescape, funescape).toLowerCase();
                    return function(elem) {
                        var elemLang;
                        do {
                            if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {
                                elemLang = elemLang.toLowerCase();
                                return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
                            }
                        } while ((elem = elem.parentNode) && elem.nodeType === 1);
                        return false;
                    };
                }),
                target: function(elem) {
                    var hash = window.location && window.location.hash;
                    return hash && hash.slice(1) === elem.id;
                },
                root: function(elem) {
                    return elem === docElem;
                },
                focus: function(elem) {
                    return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
                },
                enabled: createDisabledPseudo(false),
                disabled: createDisabledPseudo(true),
                checked: function(elem) {
                    var nodeName = elem.nodeName.toLowerCase();
                    return nodeName === "input" && !!elem.checked || nodeName === "option" && !!elem.selected;
                },
                selected: function(elem) {
                    if (elem.parentNode) {
                        elem.parentNode.selectedIndex;
                    }
                    return elem.selected === true;
                },
                empty: function(elem) {
                    for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                        if (elem.nodeType < 6) {
                            return false;
                        }
                    }
                    return true;
                },
                parent: function(elem) {
                    return !Expr.pseudos["empty"](elem);
                },
                header: function(elem) {
                    return rheader.test(elem.nodeName);
                },
                input: function(elem) {
                    return rinputs.test(elem.nodeName);
                },
                button: function(elem) {
                    var name = elem.nodeName.toLowerCase();
                    return name === "input" && elem.type === "button" || name === "button";
                },
                text: function(elem) {
                    var attr;
                    return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && ((attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
                },
                first: createPositionalPseudo(function() {
                    return [ 0 ];
                }),
                last: createPositionalPseudo(function(matchIndexes, length) {
                    return [ length - 1 ];
                }),
                eq: createPositionalPseudo(function(matchIndexes, length, argument) {
                    return [ argument < 0 ? argument + length : argument ];
                }),
                even: createPositionalPseudo(function(matchIndexes, length) {
                    var i = 0;
                    for (;i < length; i += 2) {
                        matchIndexes.push(i);
                    }
                    return matchIndexes;
                }),
                odd: createPositionalPseudo(function(matchIndexes, length) {
                    var i = 1;
                    for (;i < length; i += 2) {
                        matchIndexes.push(i);
                    }
                    return matchIndexes;
                }),
                lt: createPositionalPseudo(function(matchIndexes, length, argument) {
                    var i = argument < 0 ? argument + length : argument;
                    for (;--i >= 0; ) {
                        matchIndexes.push(i);
                    }
                    return matchIndexes;
                }),
                gt: createPositionalPseudo(function(matchIndexes, length, argument) {
                    var i = argument < 0 ? argument + length : argument;
                    for (;++i < length; ) {
                        matchIndexes.push(i);
                    }
                    return matchIndexes;
                })
            }
        };
        Expr.pseudos["nth"] = Expr.pseudos["eq"];
        for (i in {
            radio: true,
            checkbox: true,
            file: true,
            password: true,
            image: true
        }) {
            Expr.pseudos[i] = createInputPseudo(i);
        }
        for (i in {
            submit: true,
            reset: true
        }) {
            Expr.pseudos[i] = createButtonPseudo(i);
        }
        function setFilters() {}
        setFilters.prototype = Expr.filters = Expr.pseudos;
        Expr.setFilters = new setFilters();
        tokenize = Sizzle.tokenize = function(selector, parseOnly) {
            var matched, match, tokens, type, soFar, groups, preFilters, cached = tokenCache[selector + " "];
            if (cached) {
                return parseOnly ? 0 : cached.slice(0);
            }
            soFar = selector;
            groups = [];
            preFilters = Expr.preFilter;
            while (soFar) {
                if (!matched || (match = rcomma.exec(soFar))) {
                    if (match) {
                        soFar = soFar.slice(match[0].length) || soFar;
                    }
                    groups.push(tokens = []);
                }
                matched = false;
                if (match = rcombinators.exec(soFar)) {
                    matched = match.shift();
                    tokens.push({
                        value: matched,
                        type: match[0].replace(rtrim, " ")
                    });
                    soFar = soFar.slice(matched.length);
                }
                for (type in Expr.filter) {
                    if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
                        matched = match.shift();
                        tokens.push({
                            value: matched,
                            type: type,
                            matches: match
                        });
                        soFar = soFar.slice(matched.length);
                    }
                }
                if (!matched) {
                    break;
                }
            }
            return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : tokenCache(selector, groups).slice(0);
        };
        function toSelector(tokens) {
            var i = 0, len = tokens.length, selector = "";
            for (;i < len; i++) {
                selector += tokens[i].value;
            }
            return selector;
        }
        function addCombinator(matcher, combinator, base) {
            var dir = combinator.dir, skip = combinator.next, key = skip || dir, checkNonElements = base && key === "parentNode", doneName = done++;
            return combinator.first ? function(elem, context, xml) {
                while (elem = elem[dir]) {
                    if (elem.nodeType === 1 || checkNonElements) {
                        return matcher(elem, context, xml);
                    }
                }
                return false;
            } : function(elem, context, xml) {
                var oldCache, uniqueCache, outerCache, newCache = [ dirruns, doneName ];
                if (xml) {
                    while (elem = elem[dir]) {
                        if (elem.nodeType === 1 || checkNonElements) {
                            if (matcher(elem, context, xml)) {
                                return true;
                            }
                        }
                    }
                } else {
                    while (elem = elem[dir]) {
                        if (elem.nodeType === 1 || checkNonElements) {
                            outerCache = elem[expando] || (elem[expando] = {});
                            uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});
                            if (skip && skip === elem.nodeName.toLowerCase()) {
                                elem = elem[dir] || elem;
                            } else if ((oldCache = uniqueCache[key]) && oldCache[0] === dirruns && oldCache[1] === doneName) {
                                return newCache[2] = oldCache[2];
                            } else {
                                uniqueCache[key] = newCache;
                                if (newCache[2] = matcher(elem, context, xml)) {
                                    return true;
                                }
                            }
                        }
                    }
                }
                return false;
            };
        }
        function elementMatcher(matchers) {
            return matchers.length > 1 ? function(elem, context, xml) {
                var i = matchers.length;
                while (i--) {
                    if (!matchers[i](elem, context, xml)) {
                        return false;
                    }
                }
                return true;
            } : matchers[0];
        }
        function multipleContexts(selector, contexts, results) {
            var i = 0, len = contexts.length;
            for (;i < len; i++) {
                Sizzle(selector, contexts[i], results);
            }
            return results;
        }
        function condense(unmatched, map, filter, context, xml) {
            var elem, newUnmatched = [], i = 0, len = unmatched.length, mapped = map != null;
            for (;i < len; i++) {
                if (elem = unmatched[i]) {
                    if (!filter || filter(elem, context, xml)) {
                        newUnmatched.push(elem);
                        if (mapped) {
                            map.push(i);
                        }
                    }
                }
            }
            return newUnmatched;
        }
        function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
            if (postFilter && !postFilter[expando]) {
                postFilter = setMatcher(postFilter);
            }
            if (postFinder && !postFinder[expando]) {
                postFinder = setMatcher(postFinder, postSelector);
            }
            return markFunction(function(seed, results, context, xml) {
                var temp, i, elem, preMap = [], postMap = [], preexisting = results.length, elems = seed || multipleContexts(selector || "*", context.nodeType ? [ context ] : context, []), matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems, matcherOut = matcher ? postFinder || (seed ? preFilter : preexisting || postFilter) ? [] : results : matcherIn;
                if (matcher) {
                    matcher(matcherIn, matcherOut, context, xml);
                }
                if (postFilter) {
                    temp = condense(matcherOut, postMap);
                    postFilter(temp, [], context, xml);
                    i = temp.length;
                    while (i--) {
                        if (elem = temp[i]) {
                            matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
                        }
                    }
                }
                if (seed) {
                    if (postFinder || preFilter) {
                        if (postFinder) {
                            temp = [];
                            i = matcherOut.length;
                            while (i--) {
                                if (elem = matcherOut[i]) {
                                    temp.push(matcherIn[i] = elem);
                                }
                            }
                            postFinder(null, matcherOut = [], temp, xml);
                        }
                        i = matcherOut.length;
                        while (i--) {
                            if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {
                                seed[temp] = !(results[temp] = elem);
                            }
                        }
                    }
                } else {
                    matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
                    if (postFinder) {
                        postFinder(null, results, matcherOut, xml);
                    } else {
                        push.apply(results, matcherOut);
                    }
                }
            });
        }
        function matcherFromTokens(tokens) {
            var checkContext, matcher, j, len = tokens.length, leadingRelative = Expr.relative[tokens[0].type], implicitRelative = leadingRelative || Expr.relative[" "], i = leadingRelative ? 1 : 0, matchContext = addCombinator(function(elem) {
                return elem === checkContext;
            }, implicitRelative, true), matchAnyContext = addCombinator(function(elem) {
                return indexOf(checkContext, elem) > -1;
            }, implicitRelative, true), matchers = [ function(elem, context, xml) {
                var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
                checkContext = null;
                return ret;
            } ];
            for (;i < len; i++) {
                if (matcher = Expr.relative[tokens[i].type]) {
                    matchers = [ addCombinator(elementMatcher(matchers), matcher) ];
                } else {
                    matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);
                    if (matcher[expando]) {
                        j = ++i;
                        for (;j < len; j++) {
                            if (Expr.relative[tokens[j].type]) {
                                break;
                            }
                        }
                        return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(tokens.slice(0, i - 1).concat({
                            value: tokens[i - 2].type === " " ? "*" : ""
                        })).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
                    }
                    matchers.push(matcher);
                }
            }
            return elementMatcher(matchers);
        }
        function matcherFromGroupMatchers(elementMatchers, setMatchers) {
            var bySet = setMatchers.length > 0, byElement = elementMatchers.length > 0, superMatcher = function(seed, context, xml, results, outermost) {
                var elem, j, matcher, matchedCount = 0, i = "0", unmatched = seed && [], setMatched = [], contextBackup = outermostContext, elems = seed || byElement && Expr.find["TAG"]("*", outermost), dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || .1, len = elems.length;
                if (outermost) {
                    outermostContext = context === document || context || outermost;
                }
                for (;i !== len && (elem = elems[i]) != null; i++) {
                    if (byElement && elem) {
                        j = 0;
                        if (!context && elem.ownerDocument !== document) {
                            setDocument(elem);
                            xml = !documentIsHTML;
                        }
                        while (matcher = elementMatchers[j++]) {
                            if (matcher(elem, context || document, xml)) {
                                results.push(elem);
                                break;
                            }
                        }
                        if (outermost) {
                            dirruns = dirrunsUnique;
                        }
                    }
                    if (bySet) {
                        if (elem = !matcher && elem) {
                            matchedCount--;
                        }
                        if (seed) {
                            unmatched.push(elem);
                        }
                    }
                }
                matchedCount += i;
                if (bySet && i !== matchedCount) {
                    j = 0;
                    while (matcher = setMatchers[j++]) {
                        matcher(unmatched, setMatched, context, xml);
                    }
                    if (seed) {
                        if (matchedCount > 0) {
                            while (i--) {
                                if (!(unmatched[i] || setMatched[i])) {
                                    setMatched[i] = pop.call(results);
                                }
                            }
                        }
                        setMatched = condense(setMatched);
                    }
                    push.apply(results, setMatched);
                    if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {
                        Sizzle.uniqueSort(results);
                    }
                }
                if (outermost) {
                    dirruns = dirrunsUnique;
                    outermostContext = contextBackup;
                }
                return unmatched;
            };
            return bySet ? markFunction(superMatcher) : superMatcher;
        }
        compile = Sizzle.compile = function(selector, match) {
            var i, setMatchers = [], elementMatchers = [], cached = compilerCache[selector + " "];
            if (!cached) {
                if (!match) {
                    match = tokenize(selector);
                }
                i = match.length;
                while (i--) {
                    cached = matcherFromTokens(match[i]);
                    if (cached[expando]) {
                        setMatchers.push(cached);
                    } else {
                        elementMatchers.push(cached);
                    }
                }
                cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));
                cached.selector = selector;
            }
            return cached;
        };
        select = Sizzle.select = function(selector, context, results, seed) {
            var i, tokens, token, type, find, compiled = typeof selector === "function" && selector, match = !seed && tokenize(selector = compiled.selector || selector);
            results = results || [];
            if (match.length === 1) {
                tokens = match[0] = match[0].slice(0);
                if (tokens.length > 2 && (token = tokens[0]).type === "ID" && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {
                    context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];
                    if (!context) {
                        return results;
                    } else if (compiled) {
                        context = context.parentNode;
                    }
                    selector = selector.slice(tokens.shift().value.length);
                }
                i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;
                while (i--) {
                    token = tokens[i];
                    if (Expr.relative[type = token.type]) {
                        break;
                    }
                    if (find = Expr.find[type]) {
                        if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {
                            tokens.splice(i, 1);
                            selector = seed.length && toSelector(tokens);
                            if (!selector) {
                                push.apply(results, seed);
                                return results;
                            }
                            break;
                        }
                    }
                }
            }
            (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || rsibling.test(selector) && testContext(context.parentNode) || context);
            return results;
        };
        support.sortStable = expando.split("").sort(sortOrder).join("") === expando;
        support.detectDuplicates = !!hasDuplicate;
        setDocument();
        support.sortDetached = assert(function(el) {
            return el.compareDocumentPosition(document.createElement("fieldset")) & 1;
        });
        if (!assert(function(el) {
            el.innerHTML = "<a href='#'></a>";
            return el.firstChild.getAttribute("href") === "#";
        })) {
            addHandle("type|href|height|width", function(elem, name, isXML) {
                if (!isXML) {
                    return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);
                }
            });
        }
        if (!support.attributes || !assert(function(el) {
            el.innerHTML = "<input/>";
            el.firstChild.setAttribute("value", "");
            return el.firstChild.getAttribute("value") === "";
        })) {
            addHandle("value", function(elem, name, isXML) {
                if (!isXML && elem.nodeName.toLowerCase() === "input") {
                    return elem.defaultValue;
                }
            });
        }
        if (!assert(function(el) {
            return el.getAttribute("disabled") == null;
        })) {
            addHandle(booleans, function(elem, name, isXML) {
                var val;
                if (!isXML) {
                    return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
                }
            });
        }
        return Sizzle;
    }(window);
    jQuery.find = Sizzle;
    jQuery.expr = Sizzle.selectors;
    jQuery.expr[":"] = jQuery.expr.pseudos;
    jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
    jQuery.text = Sizzle.getText;
    jQuery.isXMLDoc = Sizzle.isXML;
    jQuery.contains = Sizzle.contains;
    jQuery.escapeSelector = Sizzle.escape;
    var dir = function(elem, dir, until) {
        var matched = [], truncate = until !== undefined;
        while ((elem = elem[dir]) && elem.nodeType !== 9) {
            if (elem.nodeType === 1) {
                if (truncate && jQuery(elem).is(until)) {
                    break;
                }
                matched.push(elem);
            }
        }
        return matched;
    };
    var siblings = function(n, elem) {
        var matched = [];
        for (;n; n = n.nextSibling) {
            if (n.nodeType === 1 && n !== elem) {
                matched.push(n);
            }
        }
        return matched;
    };
    var rneedsContext = jQuery.expr.match.needsContext;
    function nodeName(elem, name) {
        return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
    }
    var rsingleTag = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;
    function winnow(elements, qualifier, not) {
        if (isFunction(qualifier)) {
            return jQuery.grep(elements, function(elem, i) {
                return !!qualifier.call(elem, i, elem) !== not;
            });
        }
        if (qualifier.nodeType) {
            return jQuery.grep(elements, function(elem) {
                return elem === qualifier !== not;
            });
        }
        if (typeof qualifier !== "string") {
            return jQuery.grep(elements, function(elem) {
                return indexOf.call(qualifier, elem) > -1 !== not;
            });
        }
        return jQuery.filter(qualifier, elements, not);
    }
    jQuery.filter = function(expr, elems, not) {
        var elem = elems[0];
        if (not) {
            expr = ":not(" + expr + ")";
        }
        if (elems.length === 1 && elem.nodeType === 1) {
            return jQuery.find.matchesSelector(elem, expr) ? [ elem ] : [];
        }
        return jQuery.find.matches(expr, jQuery.grep(elems, function(elem) {
            return elem.nodeType === 1;
        }));
    };
    jQuery.fn.extend({
        find: function(selector) {
            var i, ret, len = this.length, self = this;
            if (typeof selector !== "string") {
                return this.pushStack(jQuery(selector).filter(function() {
                    for (i = 0; i < len; i++) {
                        if (jQuery.contains(self[i], this)) {
                            return true;
                        }
                    }
                }));
            }
            ret = this.pushStack([]);
            for (i = 0; i < len; i++) {
                jQuery.find(selector, self[i], ret);
            }
            return len > 1 ? jQuery.uniqueSort(ret) : ret;
        },
        filter: function(selector) {
            return this.pushStack(winnow(this, selector || [], false));
        },
        not: function(selector) {
            return this.pushStack(winnow(this, selector || [], true));
        },
        is: function(selector) {
            return !!winnow(this, typeof selector === "string" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;
        }
    });
    var rootjQuery, rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/, init = jQuery.fn.init = function(selector, context, root) {
        var match, elem;
        if (!selector) {
            return this;
        }
        root = root || rootjQuery;
        if (typeof selector === "string") {
            if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) {
                match = [ null, selector, null ];
            } else {
                match = rquickExpr.exec(selector);
            }
            if (match && (match[1] || !context)) {
                if (match[1]) {
                    context = context instanceof jQuery ? context[0] : context;
                    jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));
                    if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
                        for (match in context) {
                            if (isFunction(this[match])) {
                                this[match](context[match]);
                            } else {
                                this.attr(match, context[match]);
                            }
                        }
                    }
                    return this;
                } else {
                    elem = document.getElementById(match[2]);
                    if (elem) {
                        this[0] = elem;
                        this.length = 1;
                    }
                    return this;
                }
            } else if (!context || context.jquery) {
                return (context || root).find(selector);
            } else {
                return this.constructor(context).find(selector);
            }
        } else if (selector.nodeType) {
            this[0] = selector;
            this.length = 1;
            return this;
        } else if (isFunction(selector)) {
            return root.ready !== undefined ? root.ready(selector) : selector(jQuery);
        }
        return jQuery.makeArray(selector, this);
    };
    init.prototype = jQuery.fn;
    rootjQuery = jQuery(document);
    var rparentsprev = /^(?:parents|prev(?:Until|All))/, guaranteedUnique = {
        children: true,
        contents: true,
        next: true,
        prev: true
    };
    jQuery.fn.extend({
        has: function(target) {
            var targets = jQuery(target, this), l = targets.length;
            return this.filter(function() {
                var i = 0;
                for (;i < l; i++) {
                    if (jQuery.contains(this, targets[i])) {
                        return true;
                    }
                }
            });
        },
        closest: function(selectors, context) {
            var cur, i = 0, l = this.length, matched = [], targets = typeof selectors !== "string" && jQuery(selectors);
            if (!rneedsContext.test(selectors)) {
                for (;i < l; i++) {
                    for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
                        if (cur.nodeType < 11 && (targets ? targets.index(cur) > -1 : cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {
                            matched.push(cur);
                            break;
                        }
                    }
                }
            }
            return this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched);
        },
        index: function(elem) {
            if (!elem) {
                return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
            }
            if (typeof elem === "string") {
                return indexOf.call(jQuery(elem), this[0]);
            }
            return indexOf.call(this, elem.jquery ? elem[0] : elem);
        },
        add: function(selector, context) {
            return this.pushStack(jQuery.uniqueSort(jQuery.merge(this.get(), jQuery(selector, context))));
        },
        addBack: function(selector) {
            return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
        }
    });
    function sibling(cur, dir) {
        while ((cur = cur[dir]) && cur.nodeType !== 1) {}
        return cur;
    }
    jQuery.each({
        parent: function(elem) {
            var parent = elem.parentNode;
            return parent && parent.nodeType !== 11 ? parent : null;
        },
        parents: function(elem) {
            return dir(elem, "parentNode");
        },
        parentsUntil: function(elem, i, until) {
            return dir(elem, "parentNode", until);
        },
        next: function(elem) {
            return sibling(elem, "nextSibling");
        },
        prev: function(elem) {
            return sibling(elem, "previousSibling");
        },
        nextAll: function(elem) {
            return dir(elem, "nextSibling");
        },
        prevAll: function(elem) {
            return dir(elem, "previousSibling");
        },
        nextUntil: function(elem, i, until) {
            return dir(elem, "nextSibling", until);
        },
        prevUntil: function(elem, i, until) {
            return dir(elem, "previousSibling", until);
        },
        siblings: function(elem) {
            return siblings((elem.parentNode || {}).firstChild, elem);
        },
        children: function(elem) {
            return siblings(elem.firstChild);
        },
        contents: function(elem) {
            if (nodeName(elem, "iframe")) {
                return elem.contentDocument;
            }
            if (nodeName(elem, "template")) {
                elem = elem.content || elem;
            }
            return jQuery.merge([], elem.childNodes);
        }
    }, function(name, fn) {
        jQuery.fn[name] = function(until, selector) {
            var matched = jQuery.map(this, fn, until);
            if (name.slice(-5) !== "Until") {
                selector = until;
            }
            if (selector && typeof selector === "string") {
                matched = jQuery.filter(selector, matched);
            }
            if (this.length > 1) {
                if (!guaranteedUnique[name]) {
                    jQuery.uniqueSort(matched);
                }
                if (rparentsprev.test(name)) {
                    matched.reverse();
                }
            }
            return this.pushStack(matched);
        };
    });
    var rnothtmlwhite = /[^\x20\t\r\n\f]+/g;
    function createOptions(options) {
        var object = {};
        jQuery.each(options.match(rnothtmlwhite) || [], function(_, flag) {
            object[flag] = true;
        });
        return object;
    }
    jQuery.Callbacks = function(options) {
        options = typeof options === "string" ? createOptions(options) : jQuery.extend({}, options);
        var firing, memory, fired, locked, list = [], queue = [], firingIndex = -1, fire = function() {
            locked = locked || options.once;
            fired = firing = true;
            for (;queue.length; firingIndex = -1) {
                memory = queue.shift();
                while (++firingIndex < list.length) {
                    if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {
                        firingIndex = list.length;
                        memory = false;
                    }
                }
            }
            if (!options.memory) {
                memory = false;
            }
            firing = false;
            if (locked) {
                if (memory) {
                    list = [];
                } else {
                    list = "";
                }
            }
        }, self = {
            add: function() {
                if (list) {
                    if (memory && !firing) {
                        firingIndex = list.length - 1;
                        queue.push(memory);
                    }
                    (function add(args) {
                        jQuery.each(args, function(_, arg) {
                            if (isFunction(arg)) {
                                if (!options.unique || !self.has(arg)) {
                                    list.push(arg);
                                }
                            } else if (arg && arg.length && toType(arg) !== "string") {
                                add(arg);
                            }
                        });
                    })(arguments);
                    if (memory && !firing) {
                        fire();
                    }
                }
                return this;
            },
            remove: function() {
                jQuery.each(arguments, function(_, arg) {
                    var index;
                    while ((index = jQuery.inArray(arg, list, index)) > -1) {
                        list.splice(index, 1);
                        if (index <= firingIndex) {
                            firingIndex--;
                        }
                    }
                });
                return this;
            },
            has: function(fn) {
                return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0;
            },
            empty: function() {
                if (list) {
                    list = [];
                }
                return this;
            },
            disable: function() {
                locked = queue = [];
                list = memory = "";
                return this;
            },
            disabled: function() {
                return !list;
            },
            lock: function() {
                locked = queue = [];
                if (!memory && !firing) {
                    list = memory = "";
                }
                return this;
            },
            locked: function() {
                return !!locked;
            },
            fireWith: function(context, args) {
                if (!locked) {
                    args = args || [];
                    args = [ context, args.slice ? args.slice() : args ];
                    queue.push(args);
                    if (!firing) {
                        fire();
                    }
                }
                return this;
            },
            fire: function() {
                self.fireWith(this, arguments);
                return this;
            },
            fired: function() {
                return !!fired;
            }
        };
        return self;
    };
    function Identity(v) {
        return v;
    }
    function Thrower(ex) {
        throw ex;
    }
    function adoptValue(value, resolve, reject, noValue) {
        var method;
        try {
            if (value && isFunction(method = value.promise)) {
                method.call(value).done(resolve).fail(reject);
            } else if (value && isFunction(method = value.then)) {
                method.call(value, resolve, reject);
            } else {
                resolve.apply(undefined, [ value ].slice(noValue));
            }
        } catch (value) {
            reject.apply(undefined, [ value ]);
        }
    }
    jQuery.extend({
        Deferred: function(func) {
            var tuples = [ [ "notify", "progress", jQuery.Callbacks("memory"), jQuery.Callbacks("memory"), 2 ], [ "resolve", "done", jQuery.Callbacks("once memory"), jQuery.Callbacks("once memory"), 0, "resolved" ], [ "reject", "fail", jQuery.Callbacks("once memory"), jQuery.Callbacks("once memory"), 1, "rejected" ] ], state = "pending", promise = {
                state: function() {
                    return state;
                },
                always: function() {
                    deferred.done(arguments).fail(arguments);
                    return this;
                },
                catch: function(fn) {
                    return promise.then(null, fn);
                },
                pipe: function() {
                    var fns = arguments;
                    return jQuery.Deferred(function(newDefer) {
                        jQuery.each(tuples, function(i, tuple) {
                            var fn = isFunction(fns[tuple[4]]) && fns[tuple[4]];
                            deferred[tuple[1]](function() {
                                var returned = fn && fn.apply(this, arguments);
                                if (returned && isFunction(returned.promise)) {
                                    returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);
                                } else {
                                    newDefer[tuple[0] + "With"](this, fn ? [ returned ] : arguments);
                                }
                            });
                        });
                        fns = null;
                    }).promise();
                },
                then: function(onFulfilled, onRejected, onProgress) {
                    var maxDepth = 0;
                    function resolve(depth, deferred, handler, special) {
                        return function() {
                            var that = this, args = arguments, mightThrow = function() {
                                var returned, then;
                                if (depth < maxDepth) {
                                    return;
                                }
                                returned = handler.apply(that, args);
                                if (returned === deferred.promise()) {
                                    throw new TypeError("Thenable self-resolution");
                                }
                                then = returned && (typeof returned === "object" || typeof returned === "function") && returned.then;
                                if (isFunction(then)) {
                                    if (special) {
                                        then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special));
                                    } else {
                                        maxDepth++;
                                        then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special), resolve(maxDepth, deferred, Identity, deferred.notifyWith));
                                    }
                                } else {
                                    if (handler !== Identity) {
                                        that = undefined;
                                        args = [ returned ];
                                    }
                                    (special || deferred.resolveWith)(that, args);
                                }
                            }, process = special ? mightThrow : function() {
                                try {
                                    mightThrow();
                                } catch (e) {
                                    if (jQuery.Deferred.exceptionHook) {
                                        jQuery.Deferred.exceptionHook(e, process.stackTrace);
                                    }
                                    if (depth + 1 >= maxDepth) {
                                        if (handler !== Thrower) {
                                            that = undefined;
                                            args = [ e ];
                                        }
                                        deferred.rejectWith(that, args);
                                    }
                                }
                            };
                            if (depth) {
                                process();
                            } else {
                                if (jQuery.Deferred.getStackHook) {
                                    process.stackTrace = jQuery.Deferred.getStackHook();
                                }
                                window.setTimeout(process);
                            }
                        };
                    }
                    return jQuery.Deferred(function(newDefer) {
                        tuples[0][3].add(resolve(0, newDefer, isFunction(onProgress) ? onProgress : Identity, newDefer.notifyWith));
                        tuples[1][3].add(resolve(0, newDefer, isFunction(onFulfilled) ? onFulfilled : Identity));
                        tuples[2][3].add(resolve(0, newDefer, isFunction(onRejected) ? onRejected : Thrower));
                    }).promise();
                },
                promise: function(obj) {
                    return obj != null ? jQuery.extend(obj, promise) : promise;
                }
            }, deferred = {};
            jQuery.each(tuples, function(i, tuple) {
                var list = tuple[2], stateString = tuple[5];
                promise[tuple[1]] = list.add;
                if (stateString) {
                    list.add(function() {
                        state = stateString;
                    }, tuples[3 - i][2].disable, tuples[3 - i][3].disable, tuples[0][2].lock, tuples[0][3].lock);
                }
                list.add(tuple[3].fire);
                deferred[tuple[0]] = function() {
                    deferred[tuple[0] + "With"](this === deferred ? undefined : this, arguments);
                    return this;
                };
                deferred[tuple[0] + "With"] = list.fireWith;
            });
            promise.promise(deferred);
            if (func) {
                func.call(deferred, deferred);
            }
            return deferred;
        },
        when: function(singleValue) {
            var remaining = arguments.length, i = remaining, resolveContexts = Array(i), resolveValues = slice.call(arguments), master = jQuery.Deferred(), updateFunc = function(i) {
                return function(value) {
                    resolveContexts[i] = this;
                    resolveValues[i] = arguments.length > 1 ? slice.call(arguments) : value;
                    if (!--remaining) {
                        master.resolveWith(resolveContexts, resolveValues);
                    }
                };
            };
            if (remaining <= 1) {
                adoptValue(singleValue, master.done(updateFunc(i)).resolve, master.reject, !remaining);
                if (master.state() === "pending" || isFunction(resolveValues[i] && resolveValues[i].then)) {
                    return master.then();
                }
            }
            while (i--) {
                adoptValue(resolveValues[i], updateFunc(i), master.reject);
            }
            return master.promise();
        }
    });
    var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;
    jQuery.Deferred.exceptionHook = function(error, stack) {
        if (window.console && window.console.warn && error && rerrorNames.test(error.name)) {
            window.console.warn("jQuery.Deferred exception: " + error.message, error.stack, stack);
        }
    };
    jQuery.readyException = function(error) {
        window.setTimeout(function() {
            throw error;
        });
    };
    var readyList = jQuery.Deferred();
    jQuery.fn.ready = function(fn) {
        readyList.then(fn).catch(function(error) {
            jQuery.readyException(error);
        });
        return this;
    };
    jQuery.extend({
        isReady: false,
        readyWait: 1,
        ready: function(wait) {
            if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
                return;
            }
            jQuery.isReady = true;
            if (wait !== true && --jQuery.readyWait > 0) {
                return;
            }
            readyList.resolveWith(document, [ jQuery ]);
        }
    });
    jQuery.ready.then = readyList.then;
    function completed() {
        document.removeEventListener("DOMContentLoaded", completed);
        window.removeEventListener("load", completed);
        jQuery.ready();
    }
    if (document.readyState === "complete" || document.readyState !== "loading" && !document.documentElement.doScroll) {
        window.setTimeout(jQuery.ready);
    } else {
        document.addEventListener("DOMContentLoaded", completed);
        window.addEventListener("load", completed);
    }
    var access = function(elems, fn, key, value, chainable, emptyGet, raw) {
        var i = 0, len = elems.length, bulk = key == null;
        if (toType(key) === "object") {
            chainable = true;
            for (i in key) {
                access(elems, fn, i, key[i], true, emptyGet, raw);
            }
        } else if (value !== undefined) {
            chainable = true;
            if (!isFunction(value)) {
                raw = true;
            }
            if (bulk) {
                if (raw) {
                    fn.call(elems, value);
                    fn = null;
                } else {
                    bulk = fn;
                    fn = function(elem, key, value) {
                        return bulk.call(jQuery(elem), value);
                    };
                }
            }
            if (fn) {
                for (;i < len; i++) {
                    fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
                }
            }
        }
        if (chainable) {
            return elems;
        }
        if (bulk) {
            return fn.call(elems);
        }
        return len ? fn(elems[0], key) : emptyGet;
    };
    var rmsPrefix = /^-ms-/, rdashAlpha = /-([a-z])/g;
    function fcamelCase(all, letter) {
        return letter.toUpperCase();
    }
    function camelCase(string) {
        return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
    }
    var acceptData = function(owner) {
        return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;
    };
    function Data() {
        this.expando = jQuery.expando + Data.uid++;
    }
    Data.uid = 1;
    Data.prototype = {
        cache: function(owner) {
            var value = owner[this.expando];
            if (!value) {
                value = {};
                if (acceptData(owner)) {
                    if (owner.nodeType) {
                        owner[this.expando] = value;
                    } else {
                        Object.defineProperty(owner, this.expando, {
                            value: value,
                            configurable: true
                        });
                    }
                }
            }
            return value;
        },
        set: function(owner, data, value) {
            var prop, cache = this.cache(owner);
            if (typeof data === "string") {
                cache[camelCase(data)] = value;
            } else {
                for (prop in data) {
                    cache[camelCase(prop)] = data[prop];
                }
            }
            return cache;
        },
        get: function(owner, key) {
            return key === undefined ? this.cache(owner) : owner[this.expando] && owner[this.expando][camelCase(key)];
        },
        access: function(owner, key, value) {
            if (key === undefined || key && typeof key === "string" && value === undefined) {
                return this.get(owner, key);
            }
            this.set(owner, key, value);
            return value !== undefined ? value : key;
        },
        remove: function(owner, key) {
            var i, cache = owner[this.expando];
            if (cache === undefined) {
                return;
            }
            if (key !== undefined) {
                if (Array.isArray(key)) {
                    key = key.map(camelCase);
                } else {
                    key = camelCase(key);
                    key = key in cache ? [ key ] : key.match(rnothtmlwhite) || [];
                }
                i = key.length;
                while (i--) {
                    delete cache[key[i]];
                }
            }
            if (key === undefined || jQuery.isEmptyObject(cache)) {
                if (owner.nodeType) {
                    owner[this.expando] = undefined;
                } else {
                    delete owner[this.expando];
                }
            }
        },
        hasData: function(owner) {
            var cache = owner[this.expando];
            return cache !== undefined && !jQuery.isEmptyObject(cache);
        }
    };
    var dataPriv = new Data();
    var dataUser = new Data();
    var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/, rmultiDash = /[A-Z]/g;
    function getData(data) {
        if (data === "true") {
            return true;
        }
        if (data === "false") {
            return false;
        }
        if (data === "null") {
            return null;
        }
        if (data === +data + "") {
            return +data;
        }
        if (rbrace.test(data)) {
            return JSON.parse(data);
        }
        return data;
    }
    function dataAttr(elem, key, data) {
        var name;
        if (data === undefined && elem.nodeType === 1) {
            name = "data-" + key.replace(rmultiDash, "-$&").toLowerCase();
            data = elem.getAttribute(name);
            if (typeof data === "string") {
                try {
                    data = getData(data);
                } catch (e) {}
                dataUser.set(elem, key, data);
            } else {
                data = undefined;
            }
        }
        return data;
    }
    jQuery.extend({
        hasData: function(elem) {
            return dataUser.hasData(elem) || dataPriv.hasData(elem);
        },
        data: function(elem, name, data) {
            return dataUser.access(elem, name, data);
        },
        removeData: function(elem, name) {
            dataUser.remove(elem, name);
        },
        _data: function(elem, name, data) {
            return dataPriv.access(elem, name, data);
        },
        _removeData: function(elem, name) {
            dataPriv.remove(elem, name);
        }
    });
    jQuery.fn.extend({
        data: function(key, value) {
            var i, name, data, elem = this[0], attrs = elem && elem.attributes;
            if (key === undefined) {
                if (this.length) {
                    data = dataUser.get(elem);
                    if (elem.nodeType === 1 && !dataPriv.get(elem, "hasDataAttrs")) {
                        i = attrs.length;
                        while (i--) {
                            if (attrs[i]) {
                                name = attrs[i].name;
                                if (name.indexOf("data-") === 0) {
                                    name = camelCase(name.slice(5));
                                    dataAttr(elem, name, data[name]);
                                }
                            }
                        }
                        dataPriv.set(elem, "hasDataAttrs", true);
                    }
                }
                return data;
            }
            if (typeof key === "object") {
                return this.each(function() {
                    dataUser.set(this, key);
                });
            }
            return access(this, function(value) {
                var data;
                if (elem && value === undefined) {
                    data = dataUser.get(elem, key);
                    if (data !== undefined) {
                        return data;
                    }
                    data = dataAttr(elem, key);
                    if (data !== undefined) {
                        return data;
                    }
                    return;
                }
                this.each(function() {
                    dataUser.set(this, key, value);
                });
            }, null, value, arguments.length > 1, null, true);
        },
        removeData: function(key) {
            return this.each(function() {
                dataUser.remove(this, key);
            });
        }
    });
    jQuery.extend({
        queue: function(elem, type, data) {
            var queue;
            if (elem) {
                type = (type || "fx") + "queue";
                queue = dataPriv.get(elem, type);
                if (data) {
                    if (!queue || Array.isArray(data)) {
                        queue = dataPriv.access(elem, type, jQuery.makeArray(data));
                    } else {
                        queue.push(data);
                    }
                }
                return queue || [];
            }
        },
        dequeue: function(elem, type) {
            type = type || "fx";
            var queue = jQuery.queue(elem, type), startLength = queue.length, fn = queue.shift(), hooks = jQuery._queueHooks(elem, type), next = function() {
                jQuery.dequeue(elem, type);
            };
            if (fn === "inprogress") {
                fn = queue.shift();
                startLength--;
            }
            if (fn) {
                if (type === "fx") {
                    queue.unshift("inprogress");
                }
                delete hooks.stop;
                fn.call(elem, next, hooks);
            }
            if (!startLength && hooks) {
                hooks.empty.fire();
            }
        },
        _queueHooks: function(elem, type) {
            var key = type + "queueHooks";
            return dataPriv.get(elem, key) || dataPriv.access(elem, key, {
                empty: jQuery.Callbacks("once memory").add(function() {
                    dataPriv.remove(elem, [ type + "queue", key ]);
                })
            });
        }
    });
    jQuery.fn.extend({
        queue: function(type, data) {
            var setter = 2;
            if (typeof type !== "string") {
                data = type;
                type = "fx";
                setter--;
            }
            if (arguments.length < setter) {
                return jQuery.queue(this[0], type);
            }
            return data === undefined ? this : this.each(function() {
                var queue = jQuery.queue(this, type, data);
                jQuery._queueHooks(this, type);
                if (type === "fx" && queue[0] !== "inprogress") {
                    jQuery.dequeue(this, type);
                }
            });
        },
        dequeue: function(type) {
            return this.each(function() {
                jQuery.dequeue(this, type);
            });
        },
        clearQueue: function(type) {
            return this.queue(type || "fx", []);
        },
        promise: function(type, obj) {
            var tmp, count = 1, defer = jQuery.Deferred(), elements = this, i = this.length, resolve = function() {
                if (!--count) {
                    defer.resolveWith(elements, [ elements ]);
                }
            };
            if (typeof type !== "string") {
                obj = type;
                type = undefined;
            }
            type = type || "fx";
            while (i--) {
                tmp = dataPriv.get(elements[i], type + "queueHooks");
                if (tmp && tmp.empty) {
                    count++;
                    tmp.empty.add(resolve);
                }
            }
            resolve();
            return defer.promise(obj);
        }
    });
    var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
    var rcssNum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i");
    var cssExpand = [ "Top", "Right", "Bottom", "Left" ];
    var isHiddenWithinTree = function(elem, el) {
        elem = el || elem;
        return elem.style.display === "none" || elem.style.display === "" && jQuery.contains(elem.ownerDocument, elem) && jQuery.css(elem, "display") === "none";
    };
    var swap = function(elem, options, callback, args) {
        var ret, name, old = {};
        for (name in options) {
            old[name] = elem.style[name];
            elem.style[name] = options[name];
        }
        ret = callback.apply(elem, args || []);
        for (name in options) {
            elem.style[name] = old[name];
        }
        return ret;
    };
    function adjustCSS(elem, prop, valueParts, tween) {
        var adjusted, scale, maxIterations = 20, currentValue = tween ? function() {
            return tween.cur();
        } : function() {
            return jQuery.css(elem, prop, "");
        }, initial = currentValue(), unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? "" : "px"), initialInUnit = (jQuery.cssNumber[prop] || unit !== "px" && +initial) && rcssNum.exec(jQuery.css(elem, prop));
        if (initialInUnit && initialInUnit[3] !== unit) {
            initial = initial / 2;
            unit = unit || initialInUnit[3];
            initialInUnit = +initial || 1;
            while (maxIterations--) {
                jQuery.style(elem, prop, initialInUnit + unit);
                if ((1 - scale) * (1 - (scale = currentValue() / initial || .5)) <= 0) {
                    maxIterations = 0;
                }
                initialInUnit = initialInUnit / scale;
            }
            initialInUnit = initialInUnit * 2;
            jQuery.style(elem, prop, initialInUnit + unit);
            valueParts = valueParts || [];
        }
        if (valueParts) {
            initialInUnit = +initialInUnit || +initial || 0;
            adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];
            if (tween) {
                tween.unit = unit;
                tween.start = initialInUnit;
                tween.end = adjusted;
            }
        }
        return adjusted;
    }
    var defaultDisplayMap = {};
    function getDefaultDisplay(elem) {
        var temp, doc = elem.ownerDocument, nodeName = elem.nodeName, display = defaultDisplayMap[nodeName];
        if (display) {
            return display;
        }
        temp = doc.body.appendChild(doc.createElement(nodeName));
        display = jQuery.css(temp, "display");
        temp.parentNode.removeChild(temp);
        if (display === "none") {
            display = "block";
        }
        defaultDisplayMap[nodeName] = display;
        return display;
    }
    function showHide(elements, show) {
        var display, elem, values = [], index = 0, length = elements.length;
        for (;index < length; index++) {
            elem = elements[index];
            if (!elem.style) {
                continue;
            }
            display = elem.style.display;
            if (show) {
                if (display === "none") {
                    values[index] = dataPriv.get(elem, "display") || null;
                    if (!values[index]) {
                        elem.style.display = "";
                    }
                }
                if (elem.style.display === "" && isHiddenWithinTree(elem)) {
                    values[index] = getDefaultDisplay(elem);
                }
            } else {
                if (display !== "none") {
                    values[index] = "none";
                    dataPriv.set(elem, "display", display);
                }
            }
        }
        for (index = 0; index < length; index++) {
            if (values[index] != null) {
                elements[index].style.display = values[index];
            }
        }
        return elements;
    }
    jQuery.fn.extend({
        show: function() {
            return showHide(this, true);
        },
        hide: function() {
            return showHide(this);
        },
        toggle: function(state) {
            if (typeof state === "boolean") {
                return state ? this.show() : this.hide();
            }
            return this.each(function() {
                if (isHiddenWithinTree(this)) {
                    jQuery(this).show();
                } else {
                    jQuery(this).hide();
                }
            });
        }
    });
    var rcheckableType = /^(?:checkbox|radio)$/i;
    var rtagName = /<([a-z][^\/\0>\x20\t\r\n\f]+)/i;
    var rscriptType = /^$|^module$|\/(?:java|ecma)script/i;
    var wrapMap = {
        option: [ 1, "<select multiple='multiple'>", "</select>" ],
        thead: [ 1, "<table>", "</table>" ],
        col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
        tr: [ 2, "<table><tbody>", "</tbody></table>" ],
        td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
        _default: [ 0, "", "" ]
    };
    wrapMap.optgroup = wrapMap.option;
    wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
    wrapMap.th = wrapMap.td;
    function getAll(context, tag) {
        var ret;
        if (typeof context.getElementsByTagName !== "undefined") {
            ret = context.getElementsByTagName(tag || "*");
        } else if (typeof context.querySelectorAll !== "undefined") {
            ret = context.querySelectorAll(tag || "*");
        } else {
            ret = [];
        }
        if (tag === undefined || tag && nodeName(context, tag)) {
            return jQuery.merge([ context ], ret);
        }
        return ret;
    }
    function setGlobalEval(elems, refElements) {
        var i = 0, l = elems.length;
        for (;i < l; i++) {
            dataPriv.set(elems[i], "globalEval", !refElements || dataPriv.get(refElements[i], "globalEval"));
        }
    }
    var rhtml = /<|&#?\w+;/;
    function buildFragment(elems, context, scripts, selection, ignored) {
        var elem, tmp, tag, wrap, contains, j, fragment = context.createDocumentFragment(), nodes = [], i = 0, l = elems.length;
        for (;i < l; i++) {
            elem = elems[i];
            if (elem || elem === 0) {
                if (toType(elem) === "object") {
                    jQuery.merge(nodes, elem.nodeType ? [ elem ] : elem);
                } else if (!rhtml.test(elem)) {
                    nodes.push(context.createTextNode(elem));
                } else {
                    tmp = tmp || fragment.appendChild(context.createElement("div"));
                    tag = (rtagName.exec(elem) || [ "", "" ])[1].toLowerCase();
                    wrap = wrapMap[tag] || wrapMap._default;
                    tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2];
                    j = wrap[0];
                    while (j--) {
                        tmp = tmp.lastChild;
                    }
                    jQuery.merge(nodes, tmp.childNodes);
                    tmp = fragment.firstChild;
                    tmp.textContent = "";
                }
            }
        }
        fragment.textContent = "";
        i = 0;
        while (elem = nodes[i++]) {
            if (selection && jQuery.inArray(elem, selection) > -1) {
                if (ignored) {
                    ignored.push(elem);
                }
                continue;
            }
            contains = jQuery.contains(elem.ownerDocument, elem);
            tmp = getAll(fragment.appendChild(elem), "script");
            if (contains) {
                setGlobalEval(tmp);
            }
            if (scripts) {
                j = 0;
                while (elem = tmp[j++]) {
                    if (rscriptType.test(elem.type || "")) {
                        scripts.push(elem);
                    }
                }
            }
        }
        return fragment;
    }
    (function() {
        var fragment = document.createDocumentFragment(), div = fragment.appendChild(document.createElement("div")), input = document.createElement("input");
        input.setAttribute("type", "radio");
        input.setAttribute("checked", "checked");
        input.setAttribute("name", "t");
        div.appendChild(input);
        support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;
        div.innerHTML = "<textarea>x</textarea>";
        support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
    })();
    var documentElement = document.documentElement;
    var rkeyEvent = /^key/, rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/, rtypenamespace = /^([^.]*)(?:\.(.+)|)/;
    function returnTrue() {
        return true;
    }
    function returnFalse() {
        return false;
    }
    function safeActiveElement() {
        try {
            return document.activeElement;
        } catch (err) {}
    }
    function on(elem, types, selector, data, fn, one) {
        var origFn, type;
        if (typeof types === "object") {
            if (typeof selector !== "string") {
                data = data || selector;
                selector = undefined;
            }
            for (type in types) {
                on(elem, type, selector, data, types[type], one);
            }
            return elem;
        }
        if (data == null && fn == null) {
            fn = selector;
            data = selector = undefined;
        } else if (fn == null) {
            if (typeof selector === "string") {
                fn = data;
                data = undefined;
            } else {
                fn = data;
                data = selector;
                selector = undefined;
            }
        }
        if (fn === false) {
            fn = returnFalse;
        } else if (!fn) {
            return elem;
        }
        if (one === 1) {
            origFn = fn;
            fn = function(event) {
                jQuery().off(event);
                return origFn.apply(this, arguments);
            };
            fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
        }
        return elem.each(function() {
            jQuery.event.add(this, types, fn, data, selector);
        });
    }
    jQuery.event = {
        global: {},
        add: function(elem, types, handler, data, selector) {
            var handleObjIn, eventHandle, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = dataPriv.get(elem);
            if (!elemData) {
                return;
            }
            if (handler.handler) {
                handleObjIn = handler;
                handler = handleObjIn.handler;
                selector = handleObjIn.selector;
            }
            if (selector) {
                jQuery.find.matchesSelector(documentElement, selector);
            }
            if (!handler.guid) {
                handler.guid = jQuery.guid++;
            }
            if (!(events = elemData.events)) {
                events = elemData.events = {};
            }
            if (!(eventHandle = elemData.handle)) {
                eventHandle = elemData.handle = function(e) {
                    return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined;
                };
            }
            types = (types || "").match(rnothtmlwhite) || [ "" ];
            t = types.length;
            while (t--) {
                tmp = rtypenamespace.exec(types[t]) || [];
                type = origType = tmp[1];
                namespaces = (tmp[2] || "").split(".").sort();
                if (!type) {
                    continue;
                }
                special = jQuery.event.special[type] || {};
                type = (selector ? special.delegateType : special.bindType) || type;
                special = jQuery.event.special[type] || {};
                handleObj = jQuery.extend({
                    type: type,
                    origType: origType,
                    data: data,
                    handler: handler,
                    guid: handler.guid,
                    selector: selector,
                    needsContext: selector && jQuery.expr.match.needsContext.test(selector),
                    namespace: namespaces.join(".")
                }, handleObjIn);
                if (!(handlers = events[type])) {
                    handlers = events[type] = [];
                    handlers.delegateCount = 0;
                    if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
                        if (elem.addEventListener) {
                            elem.addEventListener(type, eventHandle);
                        }
                    }
                }
                if (special.add) {
                    special.add.call(elem, handleObj);
                    if (!handleObj.handler.guid) {
                        handleObj.handler.guid = handler.guid;
                    }
                }
                if (selector) {
                    handlers.splice(handlers.delegateCount++, 0, handleObj);
                } else {
                    handlers.push(handleObj);
                }
                jQuery.event.global[type] = true;
            }
        },
        remove: function(elem, types, handler, selector, mappedTypes) {
            var j, origCount, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = dataPriv.hasData(elem) && dataPriv.get(elem);
            if (!elemData || !(events = elemData.events)) {
                return;
            }
            types = (types || "").match(rnothtmlwhite) || [ "" ];
            t = types.length;
            while (t--) {
                tmp = rtypenamespace.exec(types[t]) || [];
                type = origType = tmp[1];
                namespaces = (tmp[2] || "").split(".").sort();
                if (!type) {
                    for (type in events) {
                        jQuery.event.remove(elem, type + types[t], handler, selector, true);
                    }
                    continue;
                }
                special = jQuery.event.special[type] || {};
                type = (selector ? special.delegateType : special.bindType) || type;
                handlers = events[type] || [];
                tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");
                origCount = j = handlers.length;
                while (j--) {
                    handleObj = handlers[j];
                    if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
                        handlers.splice(j, 1);
                        if (handleObj.selector) {
                            handlers.delegateCount--;
                        }
                        if (special.remove) {
                            special.remove.call(elem, handleObj);
                        }
                    }
                }
                if (origCount && !handlers.length) {
                    if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
                        jQuery.removeEvent(elem, type, elemData.handle);
                    }
                    delete events[type];
                }
            }
            if (jQuery.isEmptyObject(events)) {
                dataPriv.remove(elem, "handle events");
            }
        },
        dispatch: function(nativeEvent) {
            var event = jQuery.event.fix(nativeEvent);
            var i, j, ret, matched, handleObj, handlerQueue, args = new Array(arguments.length), handlers = (dataPriv.get(this, "events") || {})[event.type] || [], special = jQuery.event.special[event.type] || {};
            args[0] = event;
            for (i = 1; i < arguments.length; i++) {
                args[i] = arguments[i];
            }
            event.delegateTarget = this;
            if (special.preDispatch && special.preDispatch.call(this, event) === false) {
                return;
            }
            handlerQueue = jQuery.event.handlers.call(this, event, handlers);
            i = 0;
            while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
                event.currentTarget = matched.elem;
                j = 0;
                while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
                    if (!event.rnamespace || event.rnamespace.test(handleObj.namespace)) {
                        event.handleObj = handleObj;
                        event.data = handleObj.data;
                        ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);
                        if (ret !== undefined) {
                            if ((event.result = ret) === false) {
                                event.preventDefault();
                                event.stopPropagation();
                            }
                        }
                    }
                }
            }
            if (special.postDispatch) {
                special.postDispatch.call(this, event);
            }
            return event.result;
        },
        handlers: function(event, handlers) {
            var i, handleObj, sel, matchedHandlers, matchedSelectors, handlerQueue = [], delegateCount = handlers.delegateCount, cur = event.target;
            if (delegateCount && cur.nodeType && !(event.type === "click" && event.button >= 1)) {
                for (;cur !== this; cur = cur.parentNode || this) {
                    if (cur.nodeType === 1 && !(event.type === "click" && cur.disabled === true)) {
                        matchedHandlers = [];
                        matchedSelectors = {};
                        for (i = 0; i < delegateCount; i++) {
                            handleObj = handlers[i];
                            sel = handleObj.selector + " ";
                            if (matchedSelectors[sel] === undefined) {
                                matchedSelectors[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) > -1 : jQuery.find(sel, this, null, [ cur ]).length;
                            }
                            if (matchedSelectors[sel]) {
                                matchedHandlers.push(handleObj);
                            }
                        }
                        if (matchedHandlers.length) {
                            handlerQueue.push({
                                elem: cur,
                                handlers: matchedHandlers
                            });
                        }
                    }
                }
            }
            cur = this;
            if (delegateCount < handlers.length) {
                handlerQueue.push({
                    elem: cur,
                    handlers: handlers.slice(delegateCount)
                });
            }
            return handlerQueue;
        },
        addProp: function(name, hook) {
            Object.defineProperty(jQuery.Event.prototype, name, {
                enumerable: true,
                configurable: true,
                get: isFunction(hook) ? function() {
                    if (this.originalEvent) {
                        return hook(this.originalEvent);
                    }
                } : function() {
                    if (this.originalEvent) {
                        return this.originalEvent[name];
                    }
                },
                set: function(value) {
                    Object.defineProperty(this, name, {
                        enumerable: true,
                        configurable: true,
                        writable: true,
                        value: value
                    });
                }
            });
        },
        fix: function(originalEvent) {
            return originalEvent[jQuery.expando] ? originalEvent : new jQuery.Event(originalEvent);
        },
        special: {
            load: {
                noBubble: true
            },
            focus: {
                trigger: function() {
                    if (this !== safeActiveElement() && this.focus) {
                        this.focus();
                        return false;
                    }
                },
                delegateType: "focusin"
            },
            blur: {
                trigger: function() {
                    if (this === safeActiveElement() && this.blur) {
                        this.blur();
                        return false;
                    }
                },
                delegateType: "focusout"
            },
            click: {
                trigger: function() {
                    if (this.type === "checkbox" && this.click && nodeName(this, "input")) {
                        this.click();
                        return false;
                    }
                },
                _default: function(event) {
                    return nodeName(event.target, "a");
                }
            },
            beforeunload: {
                postDispatch: function(event) {
                    if (event.result !== undefined && event.originalEvent) {
                        event.originalEvent.returnValue = event.result;
                    }
                }
            }
        }
    };
    jQuery.removeEvent = function(elem, type, handle) {
        if (elem.removeEventListener) {
            elem.removeEventListener(type, handle);
        }
    };
    jQuery.Event = function(src, props) {
        if (!(this instanceof jQuery.Event)) {
            return new jQuery.Event(src, props);
        }
        if (src && src.type) {
            this.originalEvent = src;
            this.type = src.type;
            this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined && src.returnValue === false ? returnTrue : returnFalse;
            this.target = src.target && src.target.nodeType === 3 ? src.target.parentNode : src.target;
            this.currentTarget = src.currentTarget;
            this.relatedTarget = src.relatedTarget;
        } else {
            this.type = src;
        }
        if (props) {
            jQuery.extend(this, props);
        }
        this.timeStamp = src && src.timeStamp || Date.now();
        this[jQuery.expando] = true;
    };
    jQuery.Event.prototype = {
        constructor: jQuery.Event,
        isDefaultPrevented: returnFalse,
        isPropagationStopped: returnFalse,
        isImmediatePropagationStopped: returnFalse,
        isSimulated: false,
        preventDefault: function() {
            var e = this.originalEvent;
            this.isDefaultPrevented = returnTrue;
            if (e && !this.isSimulated) {
                e.preventDefault();
            }
        },
        stopPropagation: function() {
            var e = this.originalEvent;
            this.isPropagationStopped = returnTrue;
            if (e && !this.isSimulated) {
                e.stopPropagation();
            }
        },
        stopImmediatePropagation: function() {
            var e = this.originalEvent;
            this.isImmediatePropagationStopped = returnTrue;
            if (e && !this.isSimulated) {
                e.stopImmediatePropagation();
            }
            this.stopPropagation();
        }
    };
    jQuery.each({
        altKey: true,
        bubbles: true,
        cancelable: true,
        changedTouches: true,
        ctrlKey: true,
        detail: true,
        eventPhase: true,
        metaKey: true,
        pageX: true,
        pageY: true,
        shiftKey: true,
        view: true,
        char: true,
        charCode: true,
        key: true,
        keyCode: true,
        button: true,
        buttons: true,
        clientX: true,
        clientY: true,
        offsetX: true,
        offsetY: true,
        pointerId: true,
        pointerType: true,
        screenX: true,
        screenY: true,
        targetTouches: true,
        toElement: true,
        touches: true,
        which: function(event) {
            var button = event.button;
            if (event.which == null && rkeyEvent.test(event.type)) {
                return event.charCode != null ? event.charCode : event.keyCode;
            }
            if (!event.which && button !== undefined && rmouseEvent.test(event.type)) {
                if (button & 1) {
                    return 1;
                }
                if (button & 2) {
                    return 3;
                }
                if (button & 4) {
                    return 2;
                }
                return 0;
            }
            return event.which;
        }
    }, jQuery.event.addProp);
    jQuery.each({
        mouseenter: "mouseover",
        mouseleave: "mouseout",
        pointerenter: "pointerover",
        pointerleave: "pointerout"
    }, function(orig, fix) {
        jQuery.event.special[orig] = {
            delegateType: fix,
            bindType: fix,
            handle: function(event) {
                var ret, target = this, related = event.relatedTarget, handleObj = event.handleObj;
                if (!related || related !== target && !jQuery.contains(target, related)) {
                    event.type = handleObj.origType;
                    ret = handleObj.handler.apply(this, arguments);
                    event.type = fix;
                }
                return ret;
            }
        };
    });
    jQuery.fn.extend({
        on: function(types, selector, data, fn) {
            return on(this, types, selector, data, fn);
        },
        one: function(types, selector, data, fn) {
            return on(this, types, selector, data, fn, 1);
        },
        off: function(types, selector, fn) {
            var handleObj, type;
            if (types && types.preventDefault && types.handleObj) {
                handleObj = types.handleObj;
                jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
                return this;
            }
            if (typeof types === "object") {
                for (type in types) {
                    this.off(type, selector, types[type]);
                }
                return this;
            }
            if (selector === false || typeof selector === "function") {
                fn = selector;
                selector = undefined;
            }
            if (fn === false) {
                fn = returnFalse;
            }
            return this.each(function() {
                jQuery.event.remove(this, types, fn, selector);
            });
        }
    });
    var rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi, rnoInnerhtml = /<script|<style|<link/i, rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i, rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;
    function manipulationTarget(elem, content) {
        if (nodeName(elem, "table") && nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr")) {
            return jQuery(elem).children("tbody")[0] || elem;
        }
        return elem;
    }
    function disableScript(elem) {
        elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
        return elem;
    }
    function restoreScript(elem) {
        if ((elem.type || "").slice(0, 5) === "true/") {
            elem.type = elem.type.slice(5);
        } else {
            elem.removeAttribute("type");
        }
        return elem;
    }
    function cloneCopyEvent(src, dest) {
        var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;
        if (dest.nodeType !== 1) {
            return;
        }
        if (dataPriv.hasData(src)) {
            pdataOld = dataPriv.access(src);
            pdataCur = dataPriv.set(dest, pdataOld);
            events = pdataOld.events;
            if (events) {
                delete pdataCur.handle;
                pdataCur.events = {};
                for (type in events) {
                    for (i = 0, l = events[type].length; i < l; i++) {
                        jQuery.event.add(dest, type, events[type][i]);
                    }
                }
            }
        }
        if (dataUser.hasData(src)) {
            udataOld = dataUser.access(src);
            udataCur = jQuery.extend({}, udataOld);
            dataUser.set(dest, udataCur);
        }
    }
    function fixInput(src, dest) {
        var nodeName = dest.nodeName.toLowerCase();
        if (nodeName === "input" && rcheckableType.test(src.type)) {
            dest.checked = src.checked;
        } else if (nodeName === "input" || nodeName === "textarea") {
            dest.defaultValue = src.defaultValue;
        }
    }
    function domManip(collection, args, callback, ignored) {
        args = concat.apply([], args);
        var fragment, first, scripts, hasScripts, node, doc, i = 0, l = collection.length, iNoClone = l - 1, value = args[0], valueIsFunction = isFunction(value);
        if (valueIsFunction || l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value)) {
            return collection.each(function(index) {
                var self = collection.eq(index);
                if (valueIsFunction) {
                    args[0] = value.call(this, index, self.html());
                }
                domManip(self, args, callback, ignored);
            });
        }
        if (l) {
            fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);
            first = fragment.firstChild;
            if (fragment.childNodes.length === 1) {
                fragment = first;
            }
            if (first || ignored) {
                scripts = jQuery.map(getAll(fragment, "script"), disableScript);
                hasScripts = scripts.length;
                for (;i < l; i++) {
                    node = fragment;
                    if (i !== iNoClone) {
                        node = jQuery.clone(node, true, true);
                        if (hasScripts) {
                            jQuery.merge(scripts, getAll(node, "script"));
                        }
                    }
                    callback.call(collection[i], node, i);
                }
                if (hasScripts) {
                    doc = scripts[scripts.length - 1].ownerDocument;
                    jQuery.map(scripts, restoreScript);
                    for (i = 0; i < hasScripts; i++) {
                        node = scripts[i];
                        if (rscriptType.test(node.type || "") && !dataPriv.access(node, "globalEval") && jQuery.contains(doc, node)) {
                            if (node.src && (node.type || "").toLowerCase() !== "module") {
                                if (jQuery._evalUrl) {
                                    jQuery._evalUrl(node.src);
                                }
                            } else {
                                DOMEval(node.textContent.replace(rcleanScript, ""), doc, node);
                            }
                        }
                    }
                }
            }
        }
        return collection;
    }
    function remove(elem, selector, keepData) {
        var node, nodes = selector ? jQuery.filter(selector, elem) : elem, i = 0;
        for (;(node = nodes[i]) != null; i++) {
            if (!keepData && node.nodeType === 1) {
                jQuery.cleanData(getAll(node));
            }
            if (node.parentNode) {
                if (keepData && jQuery.contains(node.ownerDocument, node)) {
                    setGlobalEval(getAll(node, "script"));
                }
                node.parentNode.removeChild(node);
            }
        }
        return elem;
    }
    jQuery.extend({
        htmlPrefilter: function(html) {
            return html.replace(rxhtmlTag, "<$1></$2>");
        },
        clone: function(elem, dataAndEvents, deepDataAndEvents) {
            var i, l, srcElements, destElements, clone = elem.cloneNode(true), inPage = jQuery.contains(elem.ownerDocument, elem);
            if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
                destElements = getAll(clone);
                srcElements = getAll(elem);
                for (i = 0, l = srcElements.length; i < l; i++) {
                    fixInput(srcElements[i], destElements[i]);
                }
            }
            if (dataAndEvents) {
                if (deepDataAndEvents) {
                    srcElements = srcElements || getAll(elem);
                    destElements = destElements || getAll(clone);
                    for (i = 0, l = srcElements.length; i < l; i++) {
                        cloneCopyEvent(srcElements[i], destElements[i]);
                    }
                } else {
                    cloneCopyEvent(elem, clone);
                }
            }
            destElements = getAll(clone, "script");
            if (destElements.length > 0) {
                setGlobalEval(destElements, !inPage && getAll(elem, "script"));
            }
            return clone;
        },
        cleanData: function(elems) {
            var data, elem, type, special = jQuery.event.special, i = 0;
            for (;(elem = elems[i]) !== undefined; i++) {
                if (acceptData(elem)) {
                    if (data = elem[dataPriv.expando]) {
                        if (data.events) {
                            for (type in data.events) {
                                if (special[type]) {
                                    jQuery.event.remove(elem, type);
                                } else {
                                    jQuery.removeEvent(elem, type, data.handle);
                                }
                            }
                        }
                        elem[dataPriv.expando] = undefined;
                    }
                    if (elem[dataUser.expando]) {
                        elem[dataUser.expando] = undefined;
                    }
                }
            }
        }
    });
    jQuery.fn.extend({
        detach: function(selector) {
            return remove(this, selector, true);
        },
        remove: function(selector) {
            return remove(this, selector);
        },
        text: function(value) {
            return access(this, function(value) {
                return value === undefined ? jQuery.text(this) : this.empty().each(function() {
                    if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                        this.textContent = value;
                    }
                });
            }, null, value, arguments.length);
        },
        append: function() {
            return domManip(this, arguments, function(elem) {
                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                    var target = manipulationTarget(this, elem);
                    target.appendChild(elem);
                }
            });
        },
        prepend: function() {
            return domManip(this, arguments, function(elem) {
                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                    var target = manipulationTarget(this, elem);
                    target.insertBefore(elem, target.firstChild);
                }
            });
        },
        before: function() {
            return domManip(this, arguments, function(elem) {
                if (this.parentNode) {
                    this.parentNode.insertBefore(elem, this);
                }
            });
        },
        after: function() {
            return domManip(this, arguments, function(elem) {
                if (this.parentNode) {
                    this.parentNode.insertBefore(elem, this.nextSibling);
                }
            });
        },
        empty: function() {
            var elem, i = 0;
            for (;(elem = this[i]) != null; i++) {
                if (elem.nodeType === 1) {
                    jQuery.cleanData(getAll(elem, false));
                    elem.textContent = "";
                }
            }
            return this;
        },
        clone: function(dataAndEvents, deepDataAndEvents) {
            dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
            deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
            return this.map(function() {
                return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
            });
        },
        html: function(value) {
            return access(this, function(value) {
                var elem = this[0] || {}, i = 0, l = this.length;
                if (value === undefined && elem.nodeType === 1) {
                    return elem.innerHTML;
                }
                if (typeof value === "string" && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || [ "", "" ])[1].toLowerCase()]) {
                    value = jQuery.htmlPrefilter(value);
                    try {
                        for (;i < l; i++) {
                            elem = this[i] || {};
                            if (elem.nodeType === 1) {
                                jQuery.cleanData(getAll(elem, false));
                                elem.innerHTML = value;
                            }
                        }
                        elem = 0;
                    } catch (e) {}
                }
                if (elem) {
                    this.empty().append(value);
                }
            }, null, value, arguments.length);
        },
        replaceWith: function() {
            var ignored = [];
            return domManip(this, arguments, function(elem) {
                var parent = this.parentNode;
                if (jQuery.inArray(this, ignored) < 0) {
                    jQuery.cleanData(getAll(this));
                    if (parent) {
                        parent.replaceChild(elem, this);
                    }
                }
            }, ignored);
        }
    });
    jQuery.each({
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith"
    }, function(name, original) {
        jQuery.fn[name] = function(selector) {
            var elems, ret = [], insert = jQuery(selector), last = insert.length - 1, i = 0;
            for (;i <= last; i++) {
                elems = i === last ? this : this.clone(true);
                jQuery(insert[i])[original](elems);
                push.apply(ret, elems.get());
            }
            return this.pushStack(ret);
        };
    });
    var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");
    var getStyles = function(elem) {
        var view = elem.ownerDocument.defaultView;
        if (!view || !view.opener) {
            view = window;
        }
        return view.getComputedStyle(elem);
    };
    var rboxStyle = new RegExp(cssExpand.join("|"), "i");
    (function() {
        function computeStyleTests() {
            if (!div) {
                return;
            }
            container.style.cssText = "position:absolute;left:-11111px;width:60px;" + "margin-top:1px;padding:0;border:0";
            div.style.cssText = "position:relative;display:block;box-sizing:border-box;overflow:scroll;" + "margin:auto;border:1px;padding:1px;" + "width:60%;top:1%";
            documentElement.appendChild(container).appendChild(div);
            var divStyle = window.getComputedStyle(div);
            pixelPositionVal = divStyle.top !== "1%";
            reliableMarginLeftVal = roundPixelMeasures(divStyle.marginLeft) === 12;
            div.style.right = "60%";
            pixelBoxStylesVal = roundPixelMeasures(divStyle.right) === 36;
            boxSizingReliableVal = roundPixelMeasures(divStyle.width) === 36;
            div.style.position = "absolute";
            scrollboxSizeVal = div.offsetWidth === 36 || "absolute";
            documentElement.removeChild(container);
            div = null;
        }
        function roundPixelMeasures(measure) {
            return Math.round(parseFloat(measure));
        }
        var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal, reliableMarginLeftVal, container = document.createElement("div"), div = document.createElement("div");
        if (!div.style) {
            return;
        }
        div.style.backgroundClip = "content-box";
        div.cloneNode(true).style.backgroundClip = "";
        support.clearCloneStyle = div.style.backgroundClip === "content-box";
        jQuery.extend(support, {
            boxSizingReliable: function() {
                computeStyleTests();
                return boxSizingReliableVal;
            },
            pixelBoxStyles: function() {
                computeStyleTests();
                return pixelBoxStylesVal;
            },
            pixelPosition: function() {
                computeStyleTests();
                return pixelPositionVal;
            },
            reliableMarginLeft: function() {
                computeStyleTests();
                return reliableMarginLeftVal;
            },
            scrollboxSize: function() {
                computeStyleTests();
                return scrollboxSizeVal;
            }
        });
    })();
    function curCSS(elem, name, computed) {
        var width, minWidth, maxWidth, ret, style = elem.style;
        computed = computed || getStyles(elem);
        if (computed) {
            ret = computed.getPropertyValue(name) || computed[name];
            if (ret === "" && !jQuery.contains(elem.ownerDocument, elem)) {
                ret = jQuery.style(elem, name);
            }
            if (!support.pixelBoxStyles() && rnumnonpx.test(ret) && rboxStyle.test(name)) {
                width = style.width;
                minWidth = style.minWidth;
                maxWidth = style.maxWidth;
                style.minWidth = style.maxWidth = style.width = ret;
                ret = computed.width;
                style.width = width;
                style.minWidth = minWidth;
                style.maxWidth = maxWidth;
            }
        }
        return ret !== undefined ? ret + "" : ret;
    }
    function addGetHookIf(conditionFn, hookFn) {
        return {
            get: function() {
                if (conditionFn()) {
                    delete this.get;
                    return;
                }
                return (this.get = hookFn).apply(this, arguments);
            }
        };
    }
    var rdisplayswap = /^(none|table(?!-c[ea]).+)/, rcustomProp = /^--/, cssShow = {
        position: "absolute",
        visibility: "hidden",
        display: "block"
    }, cssNormalTransform = {
        letterSpacing: "0",
        fontWeight: "400"
    }, cssPrefixes = [ "Webkit", "Moz", "ms" ], emptyStyle = document.createElement("div").style;
    function vendorPropName(name) {
        if (name in emptyStyle) {
            return name;
        }
        var capName = name[0].toUpperCase() + name.slice(1), i = cssPrefixes.length;
        while (i--) {
            name = cssPrefixes[i] + capName;
            if (name in emptyStyle) {
                return name;
            }
        }
    }
    function finalPropName(name) {
        var ret = jQuery.cssProps[name];
        if (!ret) {
            ret = jQuery.cssProps[name] = vendorPropName(name) || name;
        }
        return ret;
    }
    function setPositiveNumber(elem, value, subtract) {
        var matches = rcssNum.exec(value);
        return matches ? Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || "px") : value;
    }
    function boxModelAdjustment(elem, dimension, box, isBorderBox, styles, computedVal) {
        var i = dimension === "width" ? 1 : 0, extra = 0, delta = 0;
        if (box === (isBorderBox ? "border" : "content")) {
            return 0;
        }
        for (;i < 4; i += 2) {
            if (box === "margin") {
                delta += jQuery.css(elem, box + cssExpand[i], true, styles);
            }
            if (!isBorderBox) {
                delta += jQuery.css(elem, "padding" + cssExpand[i], true, styles);
                if (box !== "padding") {
                    delta += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
                } else {
                    extra += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
                }
            } else {
                if (box === "content") {
                    delta -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
                }
                if (box !== "margin") {
                    delta -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
                }
            }
        }
        if (!isBorderBox && computedVal >= 0) {
            delta += Math.max(0, Math.ceil(elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - computedVal - delta - extra - .5));
        }
        return delta;
    }
    function getWidthOrHeight(elem, dimension, extra) {
        var styles = getStyles(elem), val = curCSS(elem, dimension, styles), isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box", valueIsBorderBox = isBorderBox;
        if (rnumnonpx.test(val)) {
            if (!extra) {
                return val;
            }
            val = "auto";
        }
        valueIsBorderBox = valueIsBorderBox && (support.boxSizingReliable() || val === elem.style[dimension]);
        if (val === "auto" || !parseFloat(val) && jQuery.css(elem, "display", false, styles) === "inline") {
            val = elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)];
            valueIsBorderBox = true;
        }
        val = parseFloat(val) || 0;
        return val + boxModelAdjustment(elem, dimension, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles, val) + "px";
    }
    jQuery.extend({
        cssHooks: {
            opacity: {
                get: function(elem, computed) {
                    if (computed) {
                        var ret = curCSS(elem, "opacity");
                        return ret === "" ? "1" : ret;
                    }
                }
            }
        },
        cssNumber: {
            animationIterationCount: true,
            columnCount: true,
            fillOpacity: true,
            flexGrow: true,
            flexShrink: true,
            fontWeight: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            widows: true,
            zIndex: true,
            zoom: true
        },
        cssProps: {},
        style: function(elem, name, value, extra) {
            if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
                return;
            }
            var ret, type, hooks, origName = camelCase(name), isCustomProp = rcustomProp.test(name), style = elem.style;
            if (!isCustomProp) {
                name = finalPropName(origName);
            }
            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
            if (value !== undefined) {
                type = typeof value;
                if (type === "string" && (ret = rcssNum.exec(value)) && ret[1]) {
                    value = adjustCSS(elem, name, ret);
                    type = "number";
                }
                if (value == null || value !== value) {
                    return;
                }
                if (type === "number") {
                    value += ret && ret[3] || (jQuery.cssNumber[origName] ? "" : "px");
                }
                if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
                    style[name] = "inherit";
                }
                if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {
                    if (isCustomProp) {
                        style.setProperty(name, value);
                    } else {
                        style[name] = value;
                    }
                }
            } else {
                if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
                    return ret;
                }
                return style[name];
            }
        },
        css: function(elem, name, extra, styles) {
            var val, num, hooks, origName = camelCase(name), isCustomProp = rcustomProp.test(name);
            if (!isCustomProp) {
                name = finalPropName(origName);
            }
            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
            if (hooks && "get" in hooks) {
                val = hooks.get(elem, true, extra);
            }
            if (val === undefined) {
                val = curCSS(elem, name, styles);
            }
            if (val === "normal" && name in cssNormalTransform) {
                val = cssNormalTransform[name];
            }
            if (extra === "" || extra) {
                num = parseFloat(val);
                return extra === true || isFinite(num) ? num || 0 : val;
            }
            return val;
        }
    });
    jQuery.each([ "height", "width" ], function(i, dimension) {
        jQuery.cssHooks[dimension] = {
            get: function(elem, computed, extra) {
                if (computed) {
                    return rdisplayswap.test(jQuery.css(elem, "display")) && (!elem.getClientRects().length || !elem.getBoundingClientRect().width) ? swap(elem, cssShow, function() {
                        return getWidthOrHeight(elem, dimension, extra);
                    }) : getWidthOrHeight(elem, dimension, extra);
                }
            },
            set: function(elem, value, extra) {
                var matches, styles = getStyles(elem), isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box", subtract = extra && boxModelAdjustment(elem, dimension, extra, isBorderBox, styles);
                if (isBorderBox && support.scrollboxSize() === styles.position) {
                    subtract -= Math.ceil(elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - parseFloat(styles[dimension]) - boxModelAdjustment(elem, dimension, "border", false, styles) - .5);
                }
                if (subtract && (matches = rcssNum.exec(value)) && (matches[3] || "px") !== "px") {
                    elem.style[dimension] = value;
                    value = jQuery.css(elem, dimension);
                }
                return setPositiveNumber(elem, value, subtract);
            }
        };
    });
    jQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft, function(elem, computed) {
        if (computed) {
            return (parseFloat(curCSS(elem, "marginLeft")) || elem.getBoundingClientRect().left - swap(elem, {
                marginLeft: 0
            }, function() {
                return elem.getBoundingClientRect().left;
            })) + "px";
        }
    });
    jQuery.each({
        margin: "",
        padding: "",
        border: "Width"
    }, function(prefix, suffix) {
        jQuery.cssHooks[prefix + suffix] = {
            expand: function(value) {
                var i = 0, expanded = {}, parts = typeof value === "string" ? value.split(" ") : [ value ];
                for (;i < 4; i++) {
                    expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
                }
                return expanded;
            }
        };
        if (prefix !== "margin") {
            jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
        }
    });
    jQuery.fn.extend({
        css: function(name, value) {
            return access(this, function(elem, name, value) {
                var styles, len, map = {}, i = 0;
                if (Array.isArray(name)) {
                    styles = getStyles(elem);
                    len = name.length;
                    for (;i < len; i++) {
                        map[name[i]] = jQuery.css(elem, name[i], false, styles);
                    }
                    return map;
                }
                return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
            }, name, value, arguments.length > 1);
        }
    });
    function Tween(elem, options, prop, end, easing) {
        return new Tween.prototype.init(elem, options, prop, end, easing);
    }
    jQuery.Tween = Tween;
    Tween.prototype = {
        constructor: Tween,
        init: function(elem, options, prop, end, easing, unit) {
            this.elem = elem;
            this.prop = prop;
            this.easing = easing || jQuery.easing._default;
            this.options = options;
            this.start = this.now = this.cur();
            this.end = end;
            this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
        },
        cur: function() {
            var hooks = Tween.propHooks[this.prop];
            return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
        },
        run: function(percent) {
            var eased, hooks = Tween.propHooks[this.prop];
            if (this.options.duration) {
                this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
            } else {
                this.pos = eased = percent;
            }
            this.now = (this.end - this.start) * eased + this.start;
            if (this.options.step) {
                this.options.step.call(this.elem, this.now, this);
            }
            if (hooks && hooks.set) {
                hooks.set(this);
            } else {
                Tween.propHooks._default.set(this);
            }
            return this;
        }
    };
    Tween.prototype.init.prototype = Tween.prototype;
    Tween.propHooks = {
        _default: {
            get: function(tween) {
                var result;
                if (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {
                    return tween.elem[tween.prop];
                }
                result = jQuery.css(tween.elem, tween.prop, "");
                return !result || result === "auto" ? 0 : result;
            },
            set: function(tween) {
                if (jQuery.fx.step[tween.prop]) {
                    jQuery.fx.step[tween.prop](tween);
                } else if (tween.elem.nodeType === 1 && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {
                    jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
                } else {
                    tween.elem[tween.prop] = tween.now;
                }
            }
        }
    };
    Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
        set: function(tween) {
            if (tween.elem.nodeType && tween.elem.parentNode) {
                tween.elem[tween.prop] = tween.now;
            }
        }
    };
    jQuery.easing = {
        linear: function(p) {
            return p;
        },
        swing: function(p) {
            return .5 - Math.cos(p * Math.PI) / 2;
        },
        _default: "swing"
    };
    jQuery.fx = Tween.prototype.init;
    jQuery.fx.step = {};
    var fxNow, inProgress, rfxtypes = /^(?:toggle|show|hide)$/, rrun = /queueHooks$/;
    function schedule() {
        if (inProgress) {
            if (document.hidden === false && window.requestAnimationFrame) {
                window.requestAnimationFrame(schedule);
            } else {
                window.setTimeout(schedule, jQuery.fx.interval);
            }
            jQuery.fx.tick();
        }
    }
    function createFxNow() {
        window.setTimeout(function() {
            fxNow = undefined;
        });
        return fxNow = Date.now();
    }
    function genFx(type, includeWidth) {
        var which, i = 0, attrs = {
            height: type
        };
        includeWidth = includeWidth ? 1 : 0;
        for (;i < 4; i += 2 - includeWidth) {
            which = cssExpand[i];
            attrs["margin" + which] = attrs["padding" + which] = type;
        }
        if (includeWidth) {
            attrs.opacity = attrs.width = type;
        }
        return attrs;
    }
    function createTween(value, prop, animation) {
        var tween, collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners["*"]), index = 0, length = collection.length;
        for (;index < length; index++) {
            if (tween = collection[index].call(animation, prop, value)) {
                return tween;
            }
        }
    }
    function defaultPrefilter(elem, props, opts) {
        var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display, isBox = "width" in props || "height" in props, anim = this, orig = {}, style = elem.style, hidden = elem.nodeType && isHiddenWithinTree(elem), dataShow = dataPriv.get(elem, "fxshow");
        if (!opts.queue) {
            hooks = jQuery._queueHooks(elem, "fx");
            if (hooks.unqueued == null) {
                hooks.unqueued = 0;
                oldfire = hooks.empty.fire;
                hooks.empty.fire = function() {
                    if (!hooks.unqueued) {
                        oldfire();
                    }
                };
            }
            hooks.unqueued++;
            anim.always(function() {
                anim.always(function() {
                    hooks.unqueued--;
                    if (!jQuery.queue(elem, "fx").length) {
                        hooks.empty.fire();
                    }
                });
            });
        }
        for (prop in props) {
            value = props[prop];
            if (rfxtypes.test(value)) {
                delete props[prop];
                toggle = toggle || value === "toggle";
                if (value === (hidden ? "hide" : "show")) {
                    if (value === "show" && dataShow && dataShow[prop] !== undefined) {
                        hidden = true;
                    } else {
                        continue;
                    }
                }
                orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);
            }
        }
        propTween = !jQuery.isEmptyObject(props);
        if (!propTween && jQuery.isEmptyObject(orig)) {
            return;
        }
        if (isBox && elem.nodeType === 1) {
            opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];
            restoreDisplay = dataShow && dataShow.display;
            if (restoreDisplay == null) {
                restoreDisplay = dataPriv.get(elem, "display");
            }
            display = jQuery.css(elem, "display");
            if (display === "none") {
                if (restoreDisplay) {
                    display = restoreDisplay;
                } else {
                    showHide([ elem ], true);
                    restoreDisplay = elem.style.display || restoreDisplay;
                    display = jQuery.css(elem, "display");
                    showHide([ elem ]);
                }
            }
            if (display === "inline" || display === "inline-block" && restoreDisplay != null) {
                if (jQuery.css(elem, "float") === "none") {
                    if (!propTween) {
                        anim.done(function() {
                            style.display = restoreDisplay;
                        });
                        if (restoreDisplay == null) {
                            display = style.display;
                            restoreDisplay = display === "none" ? "" : display;
                        }
                    }
                    style.display = "inline-block";
                }
            }
        }
        if (opts.overflow) {
            style.overflow = "hidden";
            anim.always(function() {
                style.overflow = opts.overflow[0];
                style.overflowX = opts.overflow[1];
                style.overflowY = opts.overflow[2];
            });
        }
        propTween = false;
        for (prop in orig) {
            if (!propTween) {
                if (dataShow) {
                    if ("hidden" in dataShow) {
                        hidden = dataShow.hidden;
                    }
                } else {
                    dataShow = dataPriv.access(elem, "fxshow", {
                        display: restoreDisplay
                    });
                }
                if (toggle) {
                    dataShow.hidden = !hidden;
                }
                if (hidden) {
                    showHide([ elem ], true);
                }
                anim.done(function() {
                    if (!hidden) {
                        showHide([ elem ]);
                    }
                    dataPriv.remove(elem, "fxshow");
                    for (prop in orig) {
                        jQuery.style(elem, prop, orig[prop]);
                    }
                });
            }
            propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
            if (!(prop in dataShow)) {
                dataShow[prop] = propTween.start;
                if (hidden) {
                    propTween.end = propTween.start;
                    propTween.start = 0;
                }
            }
        }
    }
    function propFilter(props, specialEasing) {
        var index, name, easing, value, hooks;
        for (index in props) {
            name = camelCase(index);
            easing = specialEasing[name];
            value = props[index];
            if (Array.isArray(value)) {
                easing = value[1];
                value = props[index] = value[0];
            }
            if (index !== name) {
                props[name] = value;
                delete props[index];
            }
            hooks = jQuery.cssHooks[name];
            if (hooks && "expand" in hooks) {
                value = hooks.expand(value);
                delete props[name];
                for (index in value) {
                    if (!(index in props)) {
                        props[index] = value[index];
                        specialEasing[index] = easing;
                    }
                }
            } else {
                specialEasing[name] = easing;
            }
        }
    }
    function Animation(elem, properties, options) {
        var result, stopped, index = 0, length = Animation.prefilters.length, deferred = jQuery.Deferred().always(function() {
            delete tick.elem;
        }), tick = function() {
            if (stopped) {
                return false;
            }
            var currentTime = fxNow || createFxNow(), remaining = Math.max(0, animation.startTime + animation.duration - currentTime), temp = remaining / animation.duration || 0, percent = 1 - temp, index = 0, length = animation.tweens.length;
            for (;index < length; index++) {
                animation.tweens[index].run(percent);
            }
            deferred.notifyWith(elem, [ animation, percent, remaining ]);
            if (percent < 1 && length) {
                return remaining;
            }
            if (!length) {
                deferred.notifyWith(elem, [ animation, 1, 0 ]);
            }
            deferred.resolveWith(elem, [ animation ]);
            return false;
        }, animation = deferred.promise({
            elem: elem,
            props: jQuery.extend({}, properties),
            opts: jQuery.extend(true, {
                specialEasing: {},
                easing: jQuery.easing._default
            }, options),
            originalProperties: properties,
            originalOptions: options,
            startTime: fxNow || createFxNow(),
            duration: options.duration,
            tweens: [],
            createTween: function(prop, end) {
                var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
                animation.tweens.push(tween);
                return tween;
            },
            stop: function(gotoEnd) {
                var index = 0, length = gotoEnd ? animation.tweens.length : 0;
                if (stopped) {
                    return this;
                }
                stopped = true;
                for (;index < length; index++) {
                    animation.tweens[index].run(1);
                }
                if (gotoEnd) {
                    deferred.notifyWith(elem, [ animation, 1, 0 ]);
                    deferred.resolveWith(elem, [ animation, gotoEnd ]);
                } else {
                    deferred.rejectWith(elem, [ animation, gotoEnd ]);
                }
                return this;
            }
        }), props = animation.props;
        propFilter(props, animation.opts.specialEasing);
        for (;index < length; index++) {
            result = Animation.prefilters[index].call(animation, elem, props, animation.opts);
            if (result) {
                if (isFunction(result.stop)) {
                    jQuery._queueHooks(animation.elem, animation.opts.queue).stop = result.stop.bind(result);
                }
                return result;
            }
        }
        jQuery.map(props, createTween, animation);
        if (isFunction(animation.opts.start)) {
            animation.opts.start.call(elem, animation);
        }
        animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
        jQuery.fx.timer(jQuery.extend(tick, {
            elem: elem,
            anim: animation,
            queue: animation.opts.queue
        }));
        return animation;
    }
    jQuery.Animation = jQuery.extend(Animation, {
        tweeners: {
            "*": [ function(prop, value) {
                var tween = this.createTween(prop, value);
                adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
                return tween;
            } ]
        },
        tweener: function(props, callback) {
            if (isFunction(props)) {
                callback = props;
                props = [ "*" ];
            } else {
                props = props.match(rnothtmlwhite);
            }
            var prop, index = 0, length = props.length;
            for (;index < length; index++) {
                prop = props[index];
                Animation.tweeners[prop] = Animation.tweeners[prop] || [];
                Animation.tweeners[prop].unshift(callback);
            }
        },
        prefilters: [ defaultPrefilter ],
        prefilter: function(callback, prepend) {
            if (prepend) {
                Animation.prefilters.unshift(callback);
            } else {
                Animation.prefilters.push(callback);
            }
        }
    });
    jQuery.speed = function(speed, easing, fn) {
        var opt = speed && typeof speed === "object" ? jQuery.extend({}, speed) : {
            complete: fn || !fn && easing || isFunction(speed) && speed,
            duration: speed,
            easing: fn && easing || easing && !isFunction(easing) && easing
        };
        if (jQuery.fx.off) {
            opt.duration = 0;
        } else {
            if (typeof opt.duration !== "number") {
                if (opt.duration in jQuery.fx.speeds) {
                    opt.duration = jQuery.fx.speeds[opt.duration];
                } else {
                    opt.duration = jQuery.fx.speeds._default;
                }
            }
        }
        if (opt.queue == null || opt.queue === true) {
            opt.queue = "fx";
        }
        opt.old = opt.complete;
        opt.complete = function() {
            if (isFunction(opt.old)) {
                opt.old.call(this);
            }
            if (opt.queue) {
                jQuery.dequeue(this, opt.queue);
            }
        };
        return opt;
    };
    jQuery.fn.extend({
        fadeTo: function(speed, to, easing, callback) {
            return this.filter(isHiddenWithinTree).css("opacity", 0).show().end().animate({
                opacity: to
            }, speed, easing, callback);
        },
        animate: function(prop, speed, easing, callback) {
            var empty = jQuery.isEmptyObject(prop), optall = jQuery.speed(speed, easing, callback), doAnimation = function() {
                var anim = Animation(this, jQuery.extend({}, prop), optall);
                if (empty || dataPriv.get(this, "finish")) {
                    anim.stop(true);
                }
            };
            doAnimation.finish = doAnimation;
            return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
        },
        stop: function(type, clearQueue, gotoEnd) {
            var stopQueue = function(hooks) {
                var stop = hooks.stop;
                delete hooks.stop;
                stop(gotoEnd);
            };
            if (typeof type !== "string") {
                gotoEnd = clearQueue;
                clearQueue = type;
                type = undefined;
            }
            if (clearQueue && type !== false) {
                this.queue(type || "fx", []);
            }
            return this.each(function() {
                var dequeue = true, index = type != null && type + "queueHooks", timers = jQuery.timers, data = dataPriv.get(this);
                if (index) {
                    if (data[index] && data[index].stop) {
                        stopQueue(data[index]);
                    }
                } else {
                    for (index in data) {
                        if (data[index] && data[index].stop && rrun.test(index)) {
                            stopQueue(data[index]);
                        }
                    }
                }
                for (index = timers.length; index--; ) {
                    if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
                        timers[index].anim.stop(gotoEnd);
                        dequeue = false;
                        timers.splice(index, 1);
                    }
                }
                if (dequeue || !gotoEnd) {
                    jQuery.dequeue(this, type);
                }
            });
        },
        finish: function(type) {
            if (type !== false) {
                type = type || "fx";
            }
            return this.each(function() {
                var index, data = dataPriv.get(this), queue = data[type + "queue"], hooks = data[type + "queueHooks"], timers = jQuery.timers, length = queue ? queue.length : 0;
                data.finish = true;
                jQuery.queue(this, type, []);
                if (hooks && hooks.stop) {
                    hooks.stop.call(this, true);
                }
                for (index = timers.length; index--; ) {
                    if (timers[index].elem === this && timers[index].queue === type) {
                        timers[index].anim.stop(true);
                        timers.splice(index, 1);
                    }
                }
                for (index = 0; index < length; index++) {
                    if (queue[index] && queue[index].finish) {
                        queue[index].finish.call(this);
                    }
                }
                delete data.finish;
            });
        }
    });
    jQuery.each([ "toggle", "show", "hide" ], function(i, name) {
        var cssFn = jQuery.fn[name];
        jQuery.fn[name] = function(speed, easing, callback) {
            return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
        };
    });
    jQuery.each({
        slideDown: genFx("show"),
        slideUp: genFx("hide"),
        slideToggle: genFx("toggle"),
        fadeIn: {
            opacity: "show"
        },
        fadeOut: {
            opacity: "hide"
        },
        fadeToggle: {
            opacity: "toggle"
        }
    }, function(name, props) {
        jQuery.fn[name] = function(speed, easing, callback) {
            return this.animate(props, speed, easing, callback);
        };
    });
    jQuery.timers = [];
    jQuery.fx.tick = function() {
        var timer, i = 0, timers = jQuery.timers;
        fxNow = Date.now();
        for (;i < timers.length; i++) {
            timer = timers[i];
            if (!timer() && timers[i] === timer) {
                timers.splice(i--, 1);
            }
        }
        if (!timers.length) {
            jQuery.fx.stop();
        }
        fxNow = undefined;
    };
    jQuery.fx.timer = function(timer) {
        jQuery.timers.push(timer);
        jQuery.fx.start();
    };
    jQuery.fx.interval = 13;
    jQuery.fx.start = function() {
        if (inProgress) {
            return;
        }
        inProgress = true;
        schedule();
    };
    jQuery.fx.stop = function() {
        inProgress = null;
    };
    jQuery.fx.speeds = {
        slow: 600,
        fast: 200,
        _default: 400
    };
    jQuery.fn.delay = function(time, type) {
        time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
        type = type || "fx";
        return this.queue(type, function(next, hooks) {
            var timeout = window.setTimeout(next, time);
            hooks.stop = function() {
                window.clearTimeout(timeout);
            };
        });
    };
    (function() {
        var input = document.createElement("input"), select = document.createElement("select"), opt = select.appendChild(document.createElement("option"));
        input.type = "checkbox";
        support.checkOn = input.value !== "";
        support.optSelected = opt.selected;
        input = document.createElement("input");
        input.value = "t";
        input.type = "radio";
        support.radioValue = input.value === "t";
    })();
    var boolHook, attrHandle = jQuery.expr.attrHandle;
    jQuery.fn.extend({
        attr: function(name, value) {
            return access(this, jQuery.attr, name, value, arguments.length > 1);
        },
        removeAttr: function(name) {
            return this.each(function() {
                jQuery.removeAttr(this, name);
            });
        }
    });
    jQuery.extend({
        attr: function(elem, name, value) {
            var ret, hooks, nType = elem.nodeType;
            if (nType === 3 || nType === 8 || nType === 2) {
                return;
            }
            if (typeof elem.getAttribute === "undefined") {
                return jQuery.prop(elem, name, value);
            }
            if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
                hooks = jQuery.attrHooks[name.toLowerCase()] || (jQuery.expr.match.bool.test(name) ? boolHook : undefined);
            }
            if (value !== undefined) {
                if (value === null) {
                    jQuery.removeAttr(elem, name);
                    return;
                }
                if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
                    return ret;
                }
                elem.setAttribute(name, value + "");
                return value;
            }
            if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
                return ret;
            }
            ret = jQuery.find.attr(elem, name);
            return ret == null ? undefined : ret;
        },
        attrHooks: {
            type: {
                set: function(elem, value) {
                    if (!support.radioValue && value === "radio" && nodeName(elem, "input")) {
                        var val = elem.value;
                        elem.setAttribute("type", value);
                        if (val) {
                            elem.value = val;
                        }
                        return value;
                    }
                }
            }
        },
        removeAttr: function(elem, value) {
            var name, i = 0, attrNames = value && value.match(rnothtmlwhite);
            if (attrNames && elem.nodeType === 1) {
                while (name = attrNames[i++]) {
                    elem.removeAttribute(name);
                }
            }
        }
    });
    boolHook = {
        set: function(elem, value, name) {
            if (value === false) {
                jQuery.removeAttr(elem, name);
            } else {
                elem.setAttribute(name, name);
            }
            return name;
        }
    };
    jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function(i, name) {
        var getter = attrHandle[name] || jQuery.find.attr;
        attrHandle[name] = function(elem, name, isXML) {
            var ret, handle, lowercaseName = name.toLowerCase();
            if (!isXML) {
                handle = attrHandle[lowercaseName];
                attrHandle[lowercaseName] = ret;
                ret = getter(elem, name, isXML) != null ? lowercaseName : null;
                attrHandle[lowercaseName] = handle;
            }
            return ret;
        };
    });
    var rfocusable = /^(?:input|select|textarea|button)$/i, rclickable = /^(?:a|area)$/i;
    jQuery.fn.extend({
        prop: function(name, value) {
            return access(this, jQuery.prop, name, value, arguments.length > 1);
        },
        removeProp: function(name) {
            return this.each(function() {
                delete this[jQuery.propFix[name] || name];
            });
        }
    });
    jQuery.extend({
        prop: function(elem, name, value) {
            var ret, hooks, nType = elem.nodeType;
            if (nType === 3 || nType === 8 || nType === 2) {
                return;
            }
            if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
                name = jQuery.propFix[name] || name;
                hooks = jQuery.propHooks[name];
            }
            if (value !== undefined) {
                if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
                    return ret;
                }
                return elem[name] = value;
            }
            if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
                return ret;
            }
            return elem[name];
        },
        propHooks: {
            tabIndex: {
                get: function(elem) {
                    var tabindex = jQuery.find.attr(elem, "tabindex");
                    if (tabindex) {
                        return parseInt(tabindex, 10);
                    }
                    if (rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href) {
                        return 0;
                    }
                    return -1;
                }
            }
        },
        propFix: {
            for: "htmlFor",
            class: "className"
        }
    });
    if (!support.optSelected) {
        jQuery.propHooks.selected = {
            get: function(elem) {
                var parent = elem.parentNode;
                if (parent && parent.parentNode) {
                    parent.parentNode.selectedIndex;
                }
                return null;
            },
            set: function(elem) {
                var parent = elem.parentNode;
                if (parent) {
                    parent.selectedIndex;
                    if (parent.parentNode) {
                        parent.parentNode.selectedIndex;
                    }
                }
            }
        };
    }
    jQuery.each([ "tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable" ], function() {
        jQuery.propFix[this.toLowerCase()] = this;
    });
    function stripAndCollapse(value) {
        var tokens = value.match(rnothtmlwhite) || [];
        return tokens.join(" ");
    }
    function getClass(elem) {
        return elem.getAttribute && elem.getAttribute("class") || "";
    }
    function classesToArray(value) {
        if (Array.isArray(value)) {
            return value;
        }
        if (typeof value === "string") {
            return value.match(rnothtmlwhite) || [];
        }
        return [];
    }
    jQuery.fn.extend({
        addClass: function(value) {
            var classes, elem, cur, curValue, clazz, j, finalValue, i = 0;
            if (isFunction(value)) {
                return this.each(function(j) {
                    jQuery(this).addClass(value.call(this, j, getClass(this)));
                });
            }
            classes = classesToArray(value);
            if (classes.length) {
                while (elem = this[i++]) {
                    curValue = getClass(elem);
                    cur = elem.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";
                    if (cur) {
                        j = 0;
                        while (clazz = classes[j++]) {
                            if (cur.indexOf(" " + clazz + " ") < 0) {
                                cur += clazz + " ";
                            }
                        }
                        finalValue = stripAndCollapse(cur);
                        if (curValue !== finalValue) {
                            elem.setAttribute("class", finalValue);
                        }
                    }
                }
            }
            return this;
        },
        removeClass: function(value) {
            var classes, elem, cur, curValue, clazz, j, finalValue, i = 0;
            if (isFunction(value)) {
                return this.each(function(j) {
                    jQuery(this).removeClass(value.call(this, j, getClass(this)));
                });
            }
            if (!arguments.length) {
                return this.attr("class", "");
            }
            classes = classesToArray(value);
            if (classes.length) {
                while (elem = this[i++]) {
                    curValue = getClass(elem);
                    cur = elem.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";
                    if (cur) {
                        j = 0;
                        while (clazz = classes[j++]) {
                            while (cur.indexOf(" " + clazz + " ") > -1) {
                                cur = cur.replace(" " + clazz + " ", " ");
                            }
                        }
                        finalValue = stripAndCollapse(cur);
                        if (curValue !== finalValue) {
                            elem.setAttribute("class", finalValue);
                        }
                    }
                }
            }
            return this;
        },
        toggleClass: function(value, stateVal) {
            var type = typeof value, isValidValue = type === "string" || Array.isArray(value);
            if (typeof stateVal === "boolean" && isValidValue) {
                return stateVal ? this.addClass(value) : this.removeClass(value);
            }
            if (isFunction(value)) {
                return this.each(function(i) {
                    jQuery(this).toggleClass(value.call(this, i, getClass(this), stateVal), stateVal);
                });
            }
            return this.each(function() {
                var className, i, self, classNames;
                if (isValidValue) {
                    i = 0;
                    self = jQuery(this);
                    classNames = classesToArray(value);
                    while (className = classNames[i++]) {
                        if (self.hasClass(className)) {
                            self.removeClass(className);
                        } else {
                            self.addClass(className);
                        }
                    }
                } else if (value === undefined || type === "boolean") {
                    className = getClass(this);
                    if (className) {
                        dataPriv.set(this, "__className__", className);
                    }
                    if (this.setAttribute) {
                        this.setAttribute("class", className || value === false ? "" : dataPriv.get(this, "__className__") || "");
                    }
                }
            });
        },
        hasClass: function(selector) {
            var className, elem, i = 0;
            className = " " + selector + " ";
            while (elem = this[i++]) {
                if (elem.nodeType === 1 && (" " + stripAndCollapse(getClass(elem)) + " ").indexOf(className) > -1) {
                    return true;
                }
            }
            return false;
        }
    });
    var rreturn = /\r/g;
    jQuery.fn.extend({
        val: function(value) {
            var hooks, ret, valueIsFunction, elem = this[0];
            if (!arguments.length) {
                if (elem) {
                    hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];
                    if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {
                        return ret;
                    }
                    ret = elem.value;
                    if (typeof ret === "string") {
                        return ret.replace(rreturn, "");
                    }
                    return ret == null ? "" : ret;
                }
                return;
            }
            valueIsFunction = isFunction(value);
            return this.each(function(i) {
                var val;
                if (this.nodeType !== 1) {
                    return;
                }
                if (valueIsFunction) {
                    val = value.call(this, i, jQuery(this).val());
                } else {
                    val = value;
                }
                if (val == null) {
                    val = "";
                } else if (typeof val === "number") {
                    val += "";
                } else if (Array.isArray(val)) {
                    val = jQuery.map(val, function(value) {
                        return value == null ? "" : value + "";
                    });
                }
                hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];
                if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
                    this.value = val;
                }
            });
        }
    });
    jQuery.extend({
        valHooks: {
            option: {
                get: function(elem) {
                    var val = jQuery.find.attr(elem, "value");
                    return val != null ? val : stripAndCollapse(jQuery.text(elem));
                }
            },
            select: {
                get: function(elem) {
                    var value, option, i, options = elem.options, index = elem.selectedIndex, one = elem.type === "select-one", values = one ? null : [], max = one ? index + 1 : options.length;
                    if (index < 0) {
                        i = max;
                    } else {
                        i = one ? index : 0;
                    }
                    for (;i < max; i++) {
                        option = options[i];
                        if ((option.selected || i === index) && !option.disabled && (!option.parentNode.disabled || !nodeName(option.parentNode, "optgroup"))) {
                            value = jQuery(option).val();
                            if (one) {
                                return value;
                            }
                            values.push(value);
                        }
                    }
                    return values;
                },
                set: function(elem, value) {
                    var optionSet, option, options = elem.options, values = jQuery.makeArray(value), i = options.length;
                    while (i--) {
                        option = options[i];
                        if (option.selected = jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1) {
                            optionSet = true;
                        }
                    }
                    if (!optionSet) {
                        elem.selectedIndex = -1;
                    }
                    return values;
                }
            }
        }
    });
    jQuery.each([ "radio", "checkbox" ], function() {
        jQuery.valHooks[this] = {
            set: function(elem, value) {
                if (Array.isArray(value)) {
                    return elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1;
                }
            }
        };
        if (!support.checkOn) {
            jQuery.valHooks[this].get = function(elem) {
                return elem.getAttribute("value") === null ? "on" : elem.value;
            };
        }
    });
    support.focusin = "onfocusin" in window;
    var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/, stopPropagationCallback = function(e) {
        e.stopPropagation();
    };
    jQuery.extend(jQuery.event, {
        trigger: function(event, data, elem, onlyHandlers) {
            var i, cur, tmp, bubbleType, ontype, handle, special, lastElement, eventPath = [ elem || document ], type = hasOwn.call(event, "type") ? event.type : event, namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];
            cur = lastElement = tmp = elem = elem || document;
            if (elem.nodeType === 3 || elem.nodeType === 8) {
                return;
            }
            if (rfocusMorph.test(type + jQuery.event.triggered)) {
                return;
            }
            if (type.indexOf(".") > -1) {
                namespaces = type.split(".");
                type = namespaces.shift();
                namespaces.sort();
            }
            ontype = type.indexOf(":") < 0 && "on" + type;
            event = event[jQuery.expando] ? event : new jQuery.Event(type, typeof event === "object" && event);
            event.isTrigger = onlyHandlers ? 2 : 3;
            event.namespace = namespaces.join(".");
            event.rnamespace = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;
            event.result = undefined;
            if (!event.target) {
                event.target = elem;
            }
            data = data == null ? [ event ] : jQuery.makeArray(data, [ event ]);
            special = jQuery.event.special[type] || {};
            if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
                return;
            }
            if (!onlyHandlers && !special.noBubble && !isWindow(elem)) {
                bubbleType = special.delegateType || type;
                if (!rfocusMorph.test(bubbleType + type)) {
                    cur = cur.parentNode;
                }
                for (;cur; cur = cur.parentNode) {
                    eventPath.push(cur);
                    tmp = cur;
                }
                if (tmp === (elem.ownerDocument || document)) {
                    eventPath.push(tmp.defaultView || tmp.parentWindow || window);
                }
            }
            i = 0;
            while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
                lastElement = cur;
                event.type = i > 1 ? bubbleType : special.bindType || type;
                handle = (dataPriv.get(cur, "events") || {})[event.type] && dataPriv.get(cur, "handle");
                if (handle) {
                    handle.apply(cur, data);
                }
                handle = ontype && cur[ontype];
                if (handle && handle.apply && acceptData(cur)) {
                    event.result = handle.apply(cur, data);
                    if (event.result === false) {
                        event.preventDefault();
                    }
                }
            }
            event.type = type;
            if (!onlyHandlers && !event.isDefaultPrevented()) {
                if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) {
                    if (ontype && isFunction(elem[type]) && !isWindow(elem)) {
                        tmp = elem[ontype];
                        if (tmp) {
                            elem[ontype] = null;
                        }
                        jQuery.event.triggered = type;
                        if (event.isPropagationStopped()) {
                            lastElement.addEventListener(type, stopPropagationCallback);
                        }
                        elem[type]();
                        if (event.isPropagationStopped()) {
                            lastElement.removeEventListener(type, stopPropagationCallback);
                        }
                        jQuery.event.triggered = undefined;
                        if (tmp) {
                            elem[ontype] = tmp;
                        }
                    }
                }
            }
            return event.result;
        },
        simulate: function(type, elem, event) {
            var e = jQuery.extend(new jQuery.Event(), event, {
                type: type,
                isSimulated: true
            });
            jQuery.event.trigger(e, null, elem);
        }
    });
    jQuery.fn.extend({
        trigger: function(type, data) {
            return this.each(function() {
                jQuery.event.trigger(type, data, this);
            });
        },
        triggerHandler: function(type, data) {
            var elem = this[0];
            if (elem) {
                return jQuery.event.trigger(type, data, elem, true);
            }
        }
    });
    if (!support.focusin) {
        jQuery.each({
            focus: "focusin",
            blur: "focusout"
        }, function(orig, fix) {
            var handler = function(event) {
                jQuery.event.simulate(fix, event.target, jQuery.event.fix(event));
            };
            jQuery.event.special[fix] = {
                setup: function() {
                    var doc = this.ownerDocument || this, attaches = dataPriv.access(doc, fix);
                    if (!attaches) {
                        doc.addEventListener(orig, handler, true);
                    }
                    dataPriv.access(doc, fix, (attaches || 0) + 1);
                },
                teardown: function() {
                    var doc = this.ownerDocument || this, attaches = dataPriv.access(doc, fix) - 1;
                    if (!attaches) {
                        doc.removeEventListener(orig, handler, true);
                        dataPriv.remove(doc, fix);
                    } else {
                        dataPriv.access(doc, fix, attaches);
                    }
                }
            };
        });
    }
    var location = window.location;
    var nonce = Date.now();
    var rquery = /\?/;
    jQuery.parseXML = function(data) {
        var xml;
        if (!data || typeof data !== "string") {
            return null;
        }
        try {
            xml = new window.DOMParser().parseFromString(data, "text/xml");
        } catch (e) {
            xml = undefined;
        }
        if (!xml || xml.getElementsByTagName("parsererror").length) {
            jQuery.error("Invalid XML: " + data);
        }
        return xml;
    };
    var rbracket = /\[\]$/, rCRLF = /\r?\n/g, rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i, rsubmittable = /^(?:input|select|textarea|keygen)/i;
    function buildParams(prefix, obj, traditional, add) {
        var name;
        if (Array.isArray(obj)) {
            jQuery.each(obj, function(i, v) {
                if (traditional || rbracket.test(prefix)) {
                    add(prefix, v);
                } else {
                    buildParams(prefix + "[" + (typeof v === "object" && v != null ? i : "") + "]", v, traditional, add);
                }
            });
        } else if (!traditional && toType(obj) === "object") {
            for (name in obj) {
                buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
            }
        } else {
            add(prefix, obj);
        }
    }
    jQuery.param = function(a, traditional) {
        var prefix, s = [], add = function(key, valueOrFunction) {
            var value = isFunction(valueOrFunction) ? valueOrFunction() : valueOrFunction;
            s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value == null ? "" : value);
        };
        if (Array.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {
            jQuery.each(a, function() {
                add(this.name, this.value);
            });
        } else {
            for (prefix in a) {
                buildParams(prefix, a[prefix], traditional, add);
            }
        }
        return s.join("&");
    };
    jQuery.fn.extend({
        serialize: function() {
            return jQuery.param(this.serializeArray());
        },
        serializeArray: function() {
            return this.map(function() {
                var elements = jQuery.prop(this, "elements");
                return elements ? jQuery.makeArray(elements) : this;
            }).filter(function() {
                var type = this.type;
                return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
            }).map(function(i, elem) {
                var val = jQuery(this).val();
                if (val == null) {
                    return null;
                }
                if (Array.isArray(val)) {
                    return jQuery.map(val, function(val) {
                        return {
                            name: elem.name,
                            value: val.replace(rCRLF, "\r\n")
                        };
                    });
                }
                return {
                    name: elem.name,
                    value: val.replace(rCRLF, "\r\n")
                };
            }).get();
        }
    });
    var r20 = /%20/g, rhash = /#.*$/, rantiCache = /([?&])_=[^&]*/, rheaders = /^(.*?):[ \t]*([^\r\n]*)$/gm, rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/, rnoContent = /^(?:GET|HEAD)$/, rprotocol = /^\/\//, prefilters = {}, transports = {}, allTypes = "*/".concat("*"), originAnchor = document.createElement("a");
    originAnchor.href = location.href;
    function addToPrefiltersOrTransports(structure) {
        return function(dataTypeExpression, func) {
            if (typeof dataTypeExpression !== "string") {
                func = dataTypeExpression;
                dataTypeExpression = "*";
            }
            var dataType, i = 0, dataTypes = dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];
            if (isFunction(func)) {
                while (dataType = dataTypes[i++]) {
                    if (dataType[0] === "+") {
                        dataType = dataType.slice(1) || "*";
                        (structure[dataType] = structure[dataType] || []).unshift(func);
                    } else {
                        (structure[dataType] = structure[dataType] || []).push(func);
                    }
                }
            }
        };
    }
    function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
        var inspected = {}, seekingTransport = structure === transports;
        function inspect(dataType) {
            var selected;
            inspected[dataType] = true;
            jQuery.each(structure[dataType] || [], function(_, prefilterOrFactory) {
                var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
                if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {
                    options.dataTypes.unshift(dataTypeOrTransport);
                    inspect(dataTypeOrTransport);
                    return false;
                } else if (seekingTransport) {
                    return !(selected = dataTypeOrTransport);
                }
            });
            return selected;
        }
        return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
    }
    function ajaxExtend(target, src) {
        var key, deep, flatOptions = jQuery.ajaxSettings.flatOptions || {};
        for (key in src) {
            if (src[key] !== undefined) {
                (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
            }
        }
        if (deep) {
            jQuery.extend(true, target, deep);
        }
        return target;
    }
    function ajaxHandleResponses(s, jqXHR, responses) {
        var ct, type, finalDataType, firstDataType, contents = s.contents, dataTypes = s.dataTypes;
        while (dataTypes[0] === "*") {
            dataTypes.shift();
            if (ct === undefined) {
                ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
            }
        }
        if (ct) {
            for (type in contents) {
                if (contents[type] && contents[type].test(ct)) {
                    dataTypes.unshift(type);
                    break;
                }
            }
        }
        if (dataTypes[0] in responses) {
            finalDataType = dataTypes[0];
        } else {
            for (type in responses) {
                if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
                    finalDataType = type;
                    break;
                }
                if (!firstDataType) {
                    firstDataType = type;
                }
            }
            finalDataType = finalDataType || firstDataType;
        }
        if (finalDataType) {
            if (finalDataType !== dataTypes[0]) {
                dataTypes.unshift(finalDataType);
            }
            return responses[finalDataType];
        }
    }
    function ajaxConvert(s, response, jqXHR, isSuccess) {
        var conv2, current, conv, tmp, prev, converters = {}, dataTypes = s.dataTypes.slice();
        if (dataTypes[1]) {
            for (conv in s.converters) {
                converters[conv.toLowerCase()] = s.converters[conv];
            }
        }
        current = dataTypes.shift();
        while (current) {
            if (s.responseFields[current]) {
                jqXHR[s.responseFields[current]] = response;
            }
            if (!prev && isSuccess && s.dataFilter) {
                response = s.dataFilter(response, s.dataType);
            }
            prev = current;
            current = dataTypes.shift();
            if (current) {
                if (current === "*") {
                    current = prev;
                } else if (prev !== "*" && prev !== current) {
                    conv = converters[prev + " " + current] || converters["* " + current];
                    if (!conv) {
                        for (conv2 in converters) {
                            tmp = conv2.split(" ");
                            if (tmp[1] === current) {
                                conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];
                                if (conv) {
                                    if (conv === true) {
                                        conv = converters[conv2];
                                    } else if (converters[conv2] !== true) {
                                        current = tmp[0];
                                        dataTypes.unshift(tmp[1]);
                                    }
                                    break;
                                }
                            }
                        }
                    }
                    if (conv !== true) {
                        if (conv && s.throws) {
                            response = conv(response);
                        } else {
                            try {
                                response = conv(response);
                            } catch (e) {
                                return {
                                    state: "parsererror",
                                    error: conv ? e : "No conversion from " + prev + " to " + current
                                };
                            }
                        }
                    }
                }
            }
        }
        return {
            state: "success",
            data: response
        };
    }
    jQuery.extend({
        active: 0,
        lastModified: {},
        etag: {},
        ajaxSettings: {
            url: location.href,
            type: "GET",
            isLocal: rlocalProtocol.test(location.protocol),
            global: true,
            processData: true,
            async: true,
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",
            accepts: {
                "*": allTypes,
                text: "text/plain",
                html: "text/html",
                xml: "application/xml, text/xml",
                json: "application/json, text/javascript"
            },
            contents: {
                xml: /\bxml\b/,
                html: /\bhtml/,
                json: /\bjson\b/
            },
            responseFields: {
                xml: "responseXML",
                text: "responseText",
                json: "responseJSON"
            },
            converters: {
                "* text": String,
                "text html": true,
                "text json": JSON.parse,
                "text xml": jQuery.parseXML
            },
            flatOptions: {
                url: true,
                context: true
            }
        },
        ajaxSetup: function(target, settings) {
            return settings ? ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : ajaxExtend(jQuery.ajaxSettings, target);
        },
        ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
        ajaxTransport: addToPrefiltersOrTransports(transports),
        ajax: function(url, options) {
            if (typeof url === "object") {
                options = url;
                url = undefined;
            }
            options = options || {};
            var transport, cacheURL, responseHeadersString, responseHeaders, timeoutTimer, urlAnchor, completed, fireGlobals, i, uncached, s = jQuery.ajaxSetup({}, options), callbackContext = s.context || s, globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event, deferred = jQuery.Deferred(), completeDeferred = jQuery.Callbacks("once memory"), statusCode = s.statusCode || {}, requestHeaders = {}, requestHeadersNames = {}, strAbort = "canceled", jqXHR = {
                readyState: 0,
                getResponseHeader: function(key) {
                    var match;
                    if (completed) {
                        if (!responseHeaders) {
                            responseHeaders = {};
                            while (match = rheaders.exec(responseHeadersString)) {
                                responseHeaders[match[1].toLowerCase()] = match[2];
                            }
                        }
                        match = responseHeaders[key.toLowerCase()];
                    }
                    return match == null ? null : match;
                },
                getAllResponseHeaders: function() {
                    return completed ? responseHeadersString : null;
                },
                setRequestHeader: function(name, value) {
                    if (completed == null) {
                        name = requestHeadersNames[name.toLowerCase()] = requestHeadersNames[name.toLowerCase()] || name;
                        requestHeaders[name] = value;
                    }
                    return this;
                },
                overrideMimeType: function(type) {
                    if (completed == null) {
                        s.mimeType = type;
                    }
                    return this;
                },
                statusCode: function(map) {
                    var code;
                    if (map) {
                        if (completed) {
                            jqXHR.always(map[jqXHR.status]);
                        } else {
                            for (code in map) {
                                statusCode[code] = [ statusCode[code], map[code] ];
                            }
                        }
                    }
                    return this;
                },
                abort: function(statusText) {
                    var finalText = statusText || strAbort;
                    if (transport) {
                        transport.abort(finalText);
                    }
                    done(0, finalText);
                    return this;
                }
            };
            deferred.promise(jqXHR);
            s.url = ((url || s.url || location.href) + "").replace(rprotocol, location.protocol + "//");
            s.type = options.method || options.type || s.method || s.type;
            s.dataTypes = (s.dataType || "*").toLowerCase().match(rnothtmlwhite) || [ "" ];
            if (s.crossDomain == null) {
                urlAnchor = document.createElement("a");
                try {
                    urlAnchor.href = s.url;
                    urlAnchor.href = urlAnchor.href;
                    s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !== urlAnchor.protocol + "//" + urlAnchor.host;
                } catch (e) {
                    s.crossDomain = true;
                }
            }
            if (s.data && s.processData && typeof s.data !== "string") {
                s.data = jQuery.param(s.data, s.traditional);
            }
            inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);
            if (completed) {
                return jqXHR;
            }
            fireGlobals = jQuery.event && s.global;
            if (fireGlobals && jQuery.active++ === 0) {
                jQuery.event.trigger("ajaxStart");
            }
            s.type = s.type.toUpperCase();
            s.hasContent = !rnoContent.test(s.type);
            cacheURL = s.url.replace(rhash, "");
            if (!s.hasContent) {
                uncached = s.url.slice(cacheURL.length);
                if (s.data && (s.processData || typeof s.data === "string")) {
                    cacheURL += (rquery.test(cacheURL) ? "&" : "?") + s.data;
                    delete s.data;
                }
                if (s.cache === false) {
                    cacheURL = cacheURL.replace(rantiCache, "$1");
                    uncached = (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce++ + uncached;
                }
                s.url = cacheURL + uncached;
            } else if (s.data && s.processData && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0) {
                s.data = s.data.replace(r20, "+");
            }
            if (s.ifModified) {
                if (jQuery.lastModified[cacheURL]) {
                    jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
                }
                if (jQuery.etag[cacheURL]) {
                    jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
                }
            }
            if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
                jqXHR.setRequestHeader("Content-Type", s.contentType);
            }
            jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]);
            for (i in s.headers) {
                jqXHR.setRequestHeader(i, s.headers[i]);
            }
            if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || completed)) {
                return jqXHR.abort();
            }
            strAbort = "abort";
            completeDeferred.add(s.complete);
            jqXHR.done(s.success);
            jqXHR.fail(s.error);
            transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);
            if (!transport) {
                done(-1, "No Transport");
            } else {
                jqXHR.readyState = 1;
                if (fireGlobals) {
                    globalEventContext.trigger("ajaxSend", [ jqXHR, s ]);
                }
                if (completed) {
                    return jqXHR;
                }
                if (s.async && s.timeout > 0) {
                    timeoutTimer = window.setTimeout(function() {
                        jqXHR.abort("timeout");
                    }, s.timeout);
                }
                try {
                    completed = false;
                    transport.send(requestHeaders, done);
                } catch (e) {
                    if (completed) {
                        throw e;
                    }
                    done(-1, e);
                }
            }
            function done(status, nativeStatusText, responses, headers) {
                var isSuccess, success, error, response, modified, statusText = nativeStatusText;
                if (completed) {
                    return;
                }
                completed = true;
                if (timeoutTimer) {
                    window.clearTimeout(timeoutTimer);
                }
                transport = undefined;
                responseHeadersString = headers || "";
                jqXHR.readyState = status > 0 ? 4 : 0;
                isSuccess = status >= 200 && status < 300 || status === 304;
                if (responses) {
                    response = ajaxHandleResponses(s, jqXHR, responses);
                }
                response = ajaxConvert(s, response, jqXHR, isSuccess);
                if (isSuccess) {
                    if (s.ifModified) {
                        modified = jqXHR.getResponseHeader("Last-Modified");
                        if (modified) {
                            jQuery.lastModified[cacheURL] = modified;
                        }
                        modified = jqXHR.getResponseHeader("etag");
                        if (modified) {
                            jQuery.etag[cacheURL] = modified;
                        }
                    }
                    if (status === 204 || s.type === "HEAD") {
                        statusText = "nocontent";
                    } else if (status === 304) {
                        statusText = "notmodified";
                    } else {
                        statusText = response.state;
                        success = response.data;
                        error = response.error;
                        isSuccess = !error;
                    }
                } else {
                    error = statusText;
                    if (status || !statusText) {
                        statusText = "error";
                        if (status < 0) {
                            status = 0;
                        }
                    }
                }
                jqXHR.status = status;
                jqXHR.statusText = (nativeStatusText || statusText) + "";
                if (isSuccess) {
                    deferred.resolveWith(callbackContext, [ success, statusText, jqXHR ]);
                } else {
                    deferred.rejectWith(callbackContext, [ jqXHR, statusText, error ]);
                }
                jqXHR.statusCode(statusCode);
                statusCode = undefined;
                if (fireGlobals) {
                    globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [ jqXHR, s, isSuccess ? success : error ]);
                }
                completeDeferred.fireWith(callbackContext, [ jqXHR, statusText ]);
                if (fireGlobals) {
                    globalEventContext.trigger("ajaxComplete", [ jqXHR, s ]);
                    if (!--jQuery.active) {
                        jQuery.event.trigger("ajaxStop");
                    }
                }
            }
            return jqXHR;
        },
        getJSON: function(url, data, callback) {
            return jQuery.get(url, data, callback, "json");
        },
        getScript: function(url, callback) {
            return jQuery.get(url, undefined, callback, "script");
        }
    });
    jQuery.each([ "get", "post" ], function(i, method) {
        jQuery[method] = function(url, data, callback, type) {
            if (isFunction(data)) {
                type = type || callback;
                callback = data;
                data = undefined;
            }
            return jQuery.ajax(jQuery.extend({
                url: url,
                type: method,
                dataType: type,
                data: data,
                success: callback
            }, jQuery.isPlainObject(url) && url));
        };
    });
    jQuery._evalUrl = function(url) {
        return jQuery.ajax({
            url: url,
            type: "GET",
            dataType: "script",
            cache: true,
            async: false,
            global: false,
            throws: true
        });
    };
    jQuery.fn.extend({
        wrapAll: function(html) {
            var wrap;
            if (this[0]) {
                if (isFunction(html)) {
                    html = html.call(this[0]);
                }
                wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);
                if (this[0].parentNode) {
                    wrap.insertBefore(this[0]);
                }
                wrap.map(function() {
                    var elem = this;
                    while (elem.firstElementChild) {
                        elem = elem.firstElementChild;
                    }
                    return elem;
                }).append(this);
            }
            return this;
        },
        wrapInner: function(html) {
            if (isFunction(html)) {
                return this.each(function(i) {
                    jQuery(this).wrapInner(html.call(this, i));
                });
            }
            return this.each(function() {
                var self = jQuery(this), contents = self.contents();
                if (contents.length) {
                    contents.wrapAll(html);
                } else {
                    self.append(html);
                }
            });
        },
        wrap: function(html) {
            var htmlIsFunction = isFunction(html);
            return this.each(function(i) {
                jQuery(this).wrapAll(htmlIsFunction ? html.call(this, i) : html);
            });
        },
        unwrap: function(selector) {
            this.parent(selector).not("body").each(function() {
                jQuery(this).replaceWith(this.childNodes);
            });
            return this;
        }
    });
    jQuery.expr.pseudos.hidden = function(elem) {
        return !jQuery.expr.pseudos.visible(elem);
    };
    jQuery.expr.pseudos.visible = function(elem) {
        return !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);
    };
    jQuery.ajaxSettings.xhr = function() {
        try {
            return new window.XMLHttpRequest();
        } catch (e) {}
    };
    var xhrSuccessStatus = {
        0: 200,
        1223: 204
    }, xhrSupported = jQuery.ajaxSettings.xhr();
    support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
    support.ajax = xhrSupported = !!xhrSupported;
    jQuery.ajaxTransport(function(options) {
        var callback, errorCallback;
        if (support.cors || xhrSupported && !options.crossDomain) {
            return {
                send: function(headers, complete) {
                    var i, xhr = options.xhr();
                    xhr.open(options.type, options.url, options.async, options.username, options.password);
                    if (options.xhrFields) {
                        for (i in options.xhrFields) {
                            xhr[i] = options.xhrFields[i];
                        }
                    }
                    if (options.mimeType && xhr.overrideMimeType) {
                        xhr.overrideMimeType(options.mimeType);
                    }
                    if (!options.crossDomain && !headers["X-Requested-With"]) {
                        headers["X-Requested-With"] = "XMLHttpRequest";
                    }
                    for (i in headers) {
                        xhr.setRequestHeader(i, headers[i]);
                    }
                    callback = function(type) {
                        return function() {
                            if (callback) {
                                callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.ontimeout = xhr.onreadystatechange = null;
                                if (type === "abort") {
                                    xhr.abort();
                                } else if (type === "error") {
                                    if (typeof xhr.status !== "number") {
                                        complete(0, "error");
                                    } else {
                                        complete(xhr.status, xhr.statusText);
                                    }
                                } else {
                                    complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText, (xhr.responseType || "text") !== "text" || typeof xhr.responseText !== "string" ? {
                                        binary: xhr.response
                                    } : {
                                        text: xhr.responseText
                                    }, xhr.getAllResponseHeaders());
                                }
                            }
                        };
                    };
                    xhr.onload = callback();
                    errorCallback = xhr.onerror = xhr.ontimeout = callback("error");
                    if (xhr.onabort !== undefined) {
                        xhr.onabort = errorCallback;
                    } else {
                        xhr.onreadystatechange = function() {
                            if (xhr.readyState === 4) {
                                window.setTimeout(function() {
                                    if (callback) {
                                        errorCallback();
                                    }
                                });
                            }
                        };
                    }
                    callback = callback("abort");
                    try {
                        xhr.send(options.hasContent && options.data || null);
                    } catch (e) {
                        if (callback) {
                            throw e;
                        }
                    }
                },
                abort: function() {
                    if (callback) {
                        callback();
                    }
                }
            };
        }
    });
    jQuery.ajaxPrefilter(function(s) {
        if (s.crossDomain) {
            s.contents.script = false;
        }
    });
    jQuery.ajaxSetup({
        accepts: {
            script: "text/javascript, application/javascript, " + "application/ecmascript, application/x-ecmascript"
        },
        contents: {
            script: /\b(?:java|ecma)script\b/
        },
        converters: {
            "text script": function(text) {
                jQuery.globalEval(text);
                return text;
            }
        }
    });
    jQuery.ajaxPrefilter("script", function(s) {
        if (s.cache === undefined) {
            s.cache = false;
        }
        if (s.crossDomain) {
            s.type = "GET";
        }
    });
    jQuery.ajaxTransport("script", function(s) {
        if (s.crossDomain) {
            var script, callback;
            return {
                send: function(_, complete) {
                    script = jQuery("<script>").prop({
                        charset: s.scriptCharset,
                        src: s.url
                    }).on("load error", callback = function(evt) {
                        script.remove();
                        callback = null;
                        if (evt) {
                            complete(evt.type === "error" ? 404 : 200, evt.type);
                        }
                    });
                    document.head.appendChild(script[0]);
                },
                abort: function() {
                    if (callback) {
                        callback();
                    }
                }
            };
        }
    });
    var oldCallbacks = [], rjsonp = /(=)\?(?=&|$)|\?\?/;
    jQuery.ajaxSetup({
        jsonp: "callback",
        jsonpCallback: function() {
            var callback = oldCallbacks.pop() || jQuery.expando + "_" + nonce++;
            this[callback] = true;
            return callback;
        }
    });
    jQuery.ajaxPrefilter("json jsonp", function(s, originalSettings, jqXHR) {
        var callbackName, overwritten, responseContainer, jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0 && rjsonp.test(s.data) && "data");
        if (jsonProp || s.dataTypes[0] === "jsonp") {
            callbackName = s.jsonpCallback = isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;
            if (jsonProp) {
                s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
            } else if (s.jsonp !== false) {
                s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
            }
            s.converters["script json"] = function() {
                if (!responseContainer) {
                    jQuery.error(callbackName + " was not called");
                }
                return responseContainer[0];
            };
            s.dataTypes[0] = "json";
            overwritten = window[callbackName];
            window[callbackName] = function() {
                responseContainer = arguments;
            };
            jqXHR.always(function() {
                if (overwritten === undefined) {
                    jQuery(window).removeProp(callbackName);
                } else {
                    window[callbackName] = overwritten;
                }
                if (s[callbackName]) {
                    s.jsonpCallback = originalSettings.jsonpCallback;
                    oldCallbacks.push(callbackName);
                }
                if (responseContainer && isFunction(overwritten)) {
                    overwritten(responseContainer[0]);
                }
                responseContainer = overwritten = undefined;
            });
            return "script";
        }
    });
    support.createHTMLDocument = function() {
        var body = document.implementation.createHTMLDocument("").body;
        body.innerHTML = "<form></form><form></form>";
        return body.childNodes.length === 2;
    }();
    jQuery.parseHTML = function(data, context, keepScripts) {
        if (typeof data !== "string") {
            return [];
        }
        if (typeof context === "boolean") {
            keepScripts = context;
            context = false;
        }
        var base, parsed, scripts;
        if (!context) {
            if (support.createHTMLDocument) {
                context = document.implementation.createHTMLDocument("");
                base = context.createElement("base");
                base.href = document.location.href;
                context.head.appendChild(base);
            } else {
                context = document;
            }
        }
        parsed = rsingleTag.exec(data);
        scripts = !keepScripts && [];
        if (parsed) {
            return [ context.createElement(parsed[1]) ];
        }
        parsed = buildFragment([ data ], context, scripts);
        if (scripts && scripts.length) {
            jQuery(scripts).remove();
        }
        return jQuery.merge([], parsed.childNodes);
    };
    jQuery.fn.load = function(url, params, callback) {
        var selector, type, response, self = this, off = url.indexOf(" ");
        if (off > -1) {
            selector = stripAndCollapse(url.slice(off));
            url = url.slice(0, off);
        }
        if (isFunction(params)) {
            callback = params;
            params = undefined;
        } else if (params && typeof params === "object") {
            type = "POST";
        }
        if (self.length > 0) {
            jQuery.ajax({
                url: url,
                type: type || "GET",
                dataType: "html",
                data: params
            }).done(function(responseText) {
                response = arguments;
                self.html(selector ? jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) : responseText);
            }).always(callback && function(jqXHR, status) {
                self.each(function() {
                    callback.apply(this, response || [ jqXHR.responseText, status, jqXHR ]);
                });
            });
        }
        return this;
    };
    jQuery.each([ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function(i, type) {
        jQuery.fn[type] = function(fn) {
            return this.on(type, fn);
        };
    });
    jQuery.expr.pseudos.animated = function(elem) {
        return jQuery.grep(jQuery.timers, function(fn) {
            return elem === fn.elem;
        }).length;
    };
    jQuery.offset = {
        setOffset: function(elem, options, i) {
            var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition, position = jQuery.css(elem, "position"), curElem = jQuery(elem), props = {};
            if (position === "static") {
                elem.style.position = "relative";
            }
            curOffset = curElem.offset();
            curCSSTop = jQuery.css(elem, "top");
            curCSSLeft = jQuery.css(elem, "left");
            calculatePosition = (position === "absolute" || position === "fixed") && (curCSSTop + curCSSLeft).indexOf("auto") > -1;
            if (calculatePosition) {
                curPosition = curElem.position();
                curTop = curPosition.top;
                curLeft = curPosition.left;
            } else {
                curTop = parseFloat(curCSSTop) || 0;
                curLeft = parseFloat(curCSSLeft) || 0;
            }
            if (isFunction(options)) {
                options = options.call(elem, i, jQuery.extend({}, curOffset));
            }
            if (options.top != null) {
                props.top = options.top - curOffset.top + curTop;
            }
            if (options.left != null) {
                props.left = options.left - curOffset.left + curLeft;
            }
            if ("using" in options) {
                options.using.call(elem, props);
            } else {
                curElem.css(props);
            }
        }
    };
    jQuery.fn.extend({
        offset: function(options) {
            if (arguments.length) {
                return options === undefined ? this : this.each(function(i) {
                    jQuery.offset.setOffset(this, options, i);
                });
            }
            var rect, win, elem = this[0];
            if (!elem) {
                return;
            }
            if (!elem.getClientRects().length) {
                return {
                    top: 0,
                    left: 0
                };
            }
            rect = elem.getBoundingClientRect();
            win = elem.ownerDocument.defaultView;
            return {
                top: rect.top + win.pageYOffset,
                left: rect.left + win.pageXOffset
            };
        },
        position: function() {
            if (!this[0]) {
                return;
            }
            var offsetParent, offset, doc, elem = this[0], parentOffset = {
                top: 0,
                left: 0
            };
            if (jQuery.css(elem, "position") === "fixed") {
                offset = elem.getBoundingClientRect();
            } else {
                offset = this.offset();
                doc = elem.ownerDocument;
                offsetParent = elem.offsetParent || doc.documentElement;
                while (offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && jQuery.css(offsetParent, "position") === "static") {
                    offsetParent = offsetParent.parentNode;
                }
                if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {
                    parentOffset = jQuery(offsetParent).offset();
                    parentOffset.top += jQuery.css(offsetParent, "borderTopWidth", true);
                    parentOffset.left += jQuery.css(offsetParent, "borderLeftWidth", true);
                }
            }
            return {
                top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
                left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
            };
        },
        offsetParent: function() {
            return this.map(function() {
                var offsetParent = this.offsetParent;
                while (offsetParent && jQuery.css(offsetParent, "position") === "static") {
                    offsetParent = offsetParent.offsetParent;
                }
                return offsetParent || documentElement;
            });
        }
    });
    jQuery.each({
        scrollLeft: "pageXOffset",
        scrollTop: "pageYOffset"
    }, function(method, prop) {
        var top = "pageYOffset" === prop;
        jQuery.fn[method] = function(val) {
            return access(this, function(elem, method, val) {
                var win;
                if (isWindow(elem)) {
                    win = elem;
                } else if (elem.nodeType === 9) {
                    win = elem.defaultView;
                }
                if (val === undefined) {
                    return win ? win[prop] : elem[method];
                }
                if (win) {
                    win.scrollTo(!top ? val : win.pageXOffset, top ? val : win.pageYOffset);
                } else {
                    elem[method] = val;
                }
            }, method, val, arguments.length);
        };
    });
    jQuery.each([ "top", "left" ], function(i, prop) {
        jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function(elem, computed) {
            if (computed) {
                computed = curCSS(elem, prop);
                return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed;
            }
        });
    });
    jQuery.each({
        Height: "height",
        Width: "width"
    }, function(name, type) {
        jQuery.each({
            padding: "inner" + name,
            content: type,
            "": "outer" + name
        }, function(defaultExtra, funcName) {
            jQuery.fn[funcName] = function(margin, value) {
                var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"), extra = defaultExtra || (margin === true || value === true ? "margin" : "border");
                return access(this, function(elem, type, value) {
                    var doc;
                    if (isWindow(elem)) {
                        return funcName.indexOf("outer") === 0 ? elem["inner" + name] : elem.document.documentElement["client" + name];
                    }
                    if (elem.nodeType === 9) {
                        doc = elem.documentElement;
                        return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);
                    }
                    return value === undefined ? jQuery.css(elem, type, extra) : jQuery.style(elem, type, value, extra);
                }, type, chainable ? margin : undefined, chainable);
            };
        });
    });
    jQuery.each(("blur focus focusin focusout resize scroll click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup contextmenu").split(" "), function(i, name) {
        jQuery.fn[name] = function(data, fn) {
            return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
        };
    });
    jQuery.fn.extend({
        hover: function(fnOver, fnOut) {
            return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
        }
    });
    jQuery.fn.extend({
        bind: function(types, data, fn) {
            return this.on(types, null, data, fn);
        },
        unbind: function(types, fn) {
            return this.off(types, null, fn);
        },
        delegate: function(selector, types, data, fn) {
            return this.on(types, selector, data, fn);
        },
        undelegate: function(selector, types, fn) {
            return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
        }
    });
    jQuery.proxy = function(fn, context) {
        var tmp, args, proxy;
        if (typeof context === "string") {
            tmp = fn[context];
            context = fn;
            fn = tmp;
        }
        if (!isFunction(fn)) {
            return undefined;
        }
        args = slice.call(arguments, 2);
        proxy = function() {
            return fn.apply(context || this, args.concat(slice.call(arguments)));
        };
        proxy.guid = fn.guid = fn.guid || jQuery.guid++;
        return proxy;
    };
    jQuery.holdReady = function(hold) {
        if (hold) {
            jQuery.readyWait++;
        } else {
            jQuery.ready(true);
        }
    };
    jQuery.isArray = Array.isArray;
    jQuery.parseJSON = JSON.parse;
    jQuery.nodeName = nodeName;
    jQuery.isFunction = isFunction;
    jQuery.isWindow = isWindow;
    jQuery.camelCase = camelCase;
    jQuery.type = toType;
    jQuery.now = Date.now;
    jQuery.isNumeric = function(obj) {
        var type = jQuery.type(obj);
        return (type === "number" || type === "string") && !isNaN(obj - parseFloat(obj));
    };
    if (typeof define === "function" && define.amd) {
        define("jquery", [], function() {
            return jQuery;
        });
    }
    var _jQuery = window.jQuery, _$ = window.$;
    jQuery.noConflict = function(deep) {
        if (window.$ === jQuery) {
            window.$ = _$;
        }
        if (deep && window.jQuery === jQuery) {
            window.jQuery = _jQuery;
        }
        return jQuery;
    };
    if (!noGlobal) {
        window.jQuery = window.$ = jQuery;
    }
    return jQuery;
});

(function(factory) {
    if (typeof define === "function" && define.amd) {
        define([ "jquery" ], window, factory);
    } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require("jquery"), window);
    } else {
        factory(jQuery, window);
    }
})(function(jQuery, window) {
    "use strict";
    jQuery.migrateVersion = "3.0.1";
    (function() {
        var rbadVersions = /^[12]\./;
        if (!window.console || !window.console.log) {
            return;
        }
        if (!jQuery || rbadVersions.test(jQuery.fn.jquery)) {
            window.console.log("JQMIGRATE: jQuery 3.0.0+ REQUIRED");
        }
        if (jQuery.migrateWarnings) {
            window.console.log("JQMIGRATE: Migrate plugin loaded multiple times");
        }
        window.console.log("JQMIGRATE: Migrate is installed" + (jQuery.migrateMute ? "" : " with logging active") + ", version " + jQuery.migrateVersion);
    })();
    var warnedAbout = {};
    jQuery.migrateWarnings = [];
    if (jQuery.migrateTrace === undefined) {
        jQuery.migrateTrace = true;
    }
    jQuery.migrateReset = function() {
        warnedAbout = {};
        jQuery.migrateWarnings.length = 0;
    };
    function migrateWarn(msg) {
        var console = window.console;
        if (!warnedAbout[msg]) {
            warnedAbout[msg] = true;
            jQuery.migrateWarnings.push(msg);
            if (console && console.warn && !jQuery.migrateMute) {
                console.warn("JQMIGRATE: " + msg);
                if (jQuery.migrateTrace && console.trace) {
                    console.trace();
                }
            }
        }
    }
    function migrateWarnProp(obj, prop, value, msg) {
        Object.defineProperty(obj, prop, {
            configurable: true,
            enumerable: true,
            get: function() {
                migrateWarn(msg);
                return value;
            },
            set: function(newValue) {
                migrateWarn(msg);
                value = newValue;
            }
        });
    }
    function migrateWarnFunc(obj, prop, newFunc, msg) {
        obj[prop] = function() {
            migrateWarn(msg);
            return newFunc.apply(this, arguments);
        };
    }
    if (window.document.compatMode === "BackCompat") {
        migrateWarn("jQuery is not compatible with Quirks Mode");
    }
    var oldInit = jQuery.fn.init, oldIsNumeric = jQuery.isNumeric, oldFind = jQuery.find, rattrHashTest = /\[(\s*[-\w]+\s*)([~|^$*]?=)\s*([-\w#]*?#[-\w#]*)\s*\]/, rattrHashGlob = /\[(\s*[-\w]+\s*)([~|^$*]?=)\s*([-\w#]*?#[-\w#]*)\s*\]/g;
    jQuery.fn.init = function(arg1) {
        var args = Array.prototype.slice.call(arguments);
        if (typeof arg1 === "string" && arg1 === "#") {
            migrateWarn("jQuery( '#' ) is not a valid selector");
            args[0] = [];
        }
        return oldInit.apply(this, args);
    };
    jQuery.fn.init.prototype = jQuery.fn;
    jQuery.find = function(selector) {
        var args = Array.prototype.slice.call(arguments);
        if (typeof selector === "string" && rattrHashTest.test(selector)) {
            try {
                window.document.querySelector(selector);
            } catch (err1) {
                selector = selector.replace(rattrHashGlob, function(_, attr, op, value) {
                    return "[" + attr + op + '"' + value + '"]';
                });
                try {
                    window.document.querySelector(selector);
                    migrateWarn("Attribute selector with '#' must be quoted: " + args[0]);
                    args[0] = selector;
                } catch (err2) {
                    migrateWarn("Attribute selector with '#' was not fixed: " + args[0]);
                }
            }
        }
        return oldFind.apply(this, args);
    };
    var findProp;
    for (findProp in oldFind) {
        if (Object.prototype.hasOwnProperty.call(oldFind, findProp)) {
            jQuery.find[findProp] = oldFind[findProp];
        }
    }
    jQuery.fn.size = function() {
        migrateWarn("jQuery.fn.size() is deprecated and removed; use the .length property");
        return this.length;
    };
    jQuery.parseJSON = function() {
        migrateWarn("jQuery.parseJSON is deprecated; use JSON.parse");
        return JSON.parse.apply(null, arguments);
    };
    jQuery.isNumeric = function(val) {
        function isNumeric2(obj) {
            var realStringObj = obj && obj.toString();
            return !jQuery.isArray(obj) && realStringObj - parseFloat(realStringObj) + 1 >= 0;
        }
        var newValue = oldIsNumeric(val), oldValue = isNumeric2(val);
        if (newValue !== oldValue) {
            migrateWarn("jQuery.isNumeric() should not be called on constructed objects");
        }
        return oldValue;
    };
    migrateWarnFunc(jQuery, "holdReady", jQuery.holdReady, "jQuery.holdReady is deprecated");
    migrateWarnFunc(jQuery, "unique", jQuery.uniqueSort, "jQuery.unique is deprecated; use jQuery.uniqueSort");
    migrateWarnProp(jQuery.expr, "filters", jQuery.expr.pseudos, "jQuery.expr.filters is deprecated; use jQuery.expr.pseudos");
    migrateWarnProp(jQuery.expr, ":", jQuery.expr.pseudos, "jQuery.expr[':'] is deprecated; use jQuery.expr.pseudos");
    var oldAjax = jQuery.ajax;
    jQuery.ajax = function() {
        var jQXHR = oldAjax.apply(this, arguments);
        if (jQXHR.promise) {
            migrateWarnFunc(jQXHR, "success", jQXHR.done, "jQXHR.success is deprecated and removed");
            migrateWarnFunc(jQXHR, "error", jQXHR.fail, "jQXHR.error is deprecated and removed");
            migrateWarnFunc(jQXHR, "complete", jQXHR.always, "jQXHR.complete is deprecated and removed");
        }
        return jQXHR;
    };
    var oldRemoveAttr = jQuery.fn.removeAttr, oldToggleClass = jQuery.fn.toggleClass, rmatchNonSpace = /\S+/g;
    jQuery.fn.removeAttr = function(name) {
        var self = this;
        jQuery.each(name.match(rmatchNonSpace), function(i, attr) {
            if (jQuery.expr.match.bool.test(attr)) {
                migrateWarn("jQuery.fn.removeAttr no longer sets boolean properties: " + attr);
                self.prop(attr, false);
            }
        });
        return oldRemoveAttr.apply(this, arguments);
    };
    jQuery.fn.toggleClass = function(state) {
        if (state !== undefined && typeof state !== "boolean") {
            return oldToggleClass.apply(this, arguments);
        }
        migrateWarn("jQuery.fn.toggleClass( boolean ) is deprecated");
        return this.each(function() {
            var className = this.getAttribute && this.getAttribute("class") || "";
            if (className) {
                jQuery.data(this, "__className__", className);
            }
            if (this.setAttribute) {
                this.setAttribute("class", className || state === false ? "" : jQuery.data(this, "__className__") || "");
            }
        });
    };
    var internalSwapCall = false;
    if (jQuery.swap) {
        jQuery.each([ "height", "width", "reliableMarginRight" ], function(_, name) {
            var oldHook = jQuery.cssHooks[name] && jQuery.cssHooks[name].get;
            if (oldHook) {
                jQuery.cssHooks[name].get = function() {
                    var ret;
                    internalSwapCall = true;
                    ret = oldHook.apply(this, arguments);
                    internalSwapCall = false;
                    return ret;
                };
            }
        });
    }
    jQuery.swap = function(elem, options, callback, args) {
        var ret, name, old = {};
        if (!internalSwapCall) {
            migrateWarn("jQuery.swap() is undocumented and deprecated");
        }
        for (name in options) {
            old[name] = elem.style[name];
            elem.style[name] = options[name];
        }
        ret = callback.apply(elem, args || []);
        for (name in options) {
            elem.style[name] = old[name];
        }
        return ret;
    };
    var oldData = jQuery.data;
    jQuery.data = function(elem, name, value) {
        var curData;
        if (name && typeof name === "object" && arguments.length === 2) {
            curData = jQuery.hasData(elem) && oldData.call(this, elem);
            var sameKeys = {};
            for (var key in name) {
                if (key !== jQuery.camelCase(key)) {
                    migrateWarn("jQuery.data() always sets/gets camelCased names: " + key);
                    curData[key] = name[key];
                } else {
                    sameKeys[key] = name[key];
                }
            }
            oldData.call(this, elem, sameKeys);
            return name;
        }
        if (name && typeof name === "string" && name !== jQuery.camelCase(name)) {
            curData = jQuery.hasData(elem) && oldData.call(this, elem);
            if (curData && name in curData) {
                migrateWarn("jQuery.data() always sets/gets camelCased names: " + name);
                if (arguments.length > 2) {
                    curData[name] = value;
                }
                return curData[name];
            }
        }
        return oldData.apply(this, arguments);
    };
    var oldTweenRun = jQuery.Tween.prototype.run;
    var linearEasing = function(pct) {
        return pct;
    };
    jQuery.Tween.prototype.run = function() {
        if (jQuery.easing[this.easing].length > 1) {
            migrateWarn("'jQuery.easing." + this.easing.toString() + "' should use only one argument");
            jQuery.easing[this.easing] = linearEasing;
        }
        oldTweenRun.apply(this, arguments);
    };
    jQuery.fx.interval = jQuery.fx.interval || 13;
    if (window.requestAnimationFrame) {
        migrateWarnProp(jQuery.fx, "interval", jQuery.fx.interval, "jQuery.fx.interval is deprecated");
    }
    var oldLoad = jQuery.fn.load, oldEventAdd = jQuery.event.add, originalFix = jQuery.event.fix;
    jQuery.event.props = [];
    jQuery.event.fixHooks = {};
    migrateWarnProp(jQuery.event.props, "concat", jQuery.event.props.concat, "jQuery.event.props.concat() is deprecated and removed");
    jQuery.event.fix = function(originalEvent) {
        var event, type = originalEvent.type, fixHook = this.fixHooks[type], props = jQuery.event.props;
        if (props.length) {
            migrateWarn("jQuery.event.props are deprecated and removed: " + props.join());
            while (props.length) {
                jQuery.event.addProp(props.pop());
            }
        }
        if (fixHook && !fixHook._migrated_) {
            fixHook._migrated_ = true;
            migrateWarn("jQuery.event.fixHooks are deprecated and removed: " + type);
            if ((props = fixHook.props) && props.length) {
                while (props.length) {
                    jQuery.event.addProp(props.pop());
                }
            }
        }
        event = originalFix.call(this, originalEvent);
        return fixHook && fixHook.filter ? fixHook.filter(event, originalEvent) : event;
    };
    jQuery.event.add = function(elem, types) {
        if (elem === window && types === "load" && window.document.readyState === "complete") {
            migrateWarn("jQuery(window).on('load'...) called after load event occurred");
        }
        return oldEventAdd.apply(this, arguments);
    };
    jQuery.each([ "load", "unload", "error" ], function(_, name) {
        jQuery.fn[name] = function() {
            var args = Array.prototype.slice.call(arguments, 0);
            if (name === "load" && typeof args[0] === "string") {
                return oldLoad.apply(this, args);
            }
            migrateWarn("jQuery.fn." + name + "() is deprecated");
            args.splice(0, 0, name);
            if (arguments.length) {
                return this.on.apply(this, args);
            }
            this.triggerHandler.apply(this, args);
            return this;
        };
    });
    jQuery.each(("blur focus focusin focusout resize scroll click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup contextmenu").split(" "), function(i, name) {
        jQuery.fn[name] = function(data, fn) {
            migrateWarn("jQuery.fn." + name + "() event shorthand is deprecated");
            return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
        };
    });
    jQuery(function() {
        jQuery(window.document).triggerHandler("ready");
    });
    jQuery.event.special.ready = {
        setup: function() {
            if (this === window.document) {
                migrateWarn("'ready' event is deprecated");
            }
        }
    };
    jQuery.fn.extend({
        bind: function(types, data, fn) {
            migrateWarn("jQuery.fn.bind() is deprecated");
            return this.on(types, null, data, fn);
        },
        unbind: function(types, fn) {
            migrateWarn("jQuery.fn.unbind() is deprecated");
            return this.off(types, null, fn);
        },
        delegate: function(selector, types, data, fn) {
            migrateWarn("jQuery.fn.delegate() is deprecated");
            return this.on(types, selector, data, fn);
        },
        undelegate: function(selector, types, fn) {
            migrateWarn("jQuery.fn.undelegate() is deprecated");
            return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
        },
        hover: function(fnOver, fnOut) {
            migrateWarn("jQuery.fn.hover() is deprecated");
            return this.on("mouseenter", fnOver).on("mouseleave", fnOut || fnOver);
        }
    });
    var oldOffset = jQuery.fn.offset;
    jQuery.fn.offset = function() {
        var docElem, elem = this[0], origin = {
            top: 0,
            left: 0
        };
        if (!elem || !elem.nodeType) {
            migrateWarn("jQuery.fn.offset() requires a valid DOM element");
            return origin;
        }
        docElem = (elem.ownerDocument || window.document).documentElement;
        if (!jQuery.contains(docElem, elem)) {
            migrateWarn("jQuery.fn.offset() requires an element connected to a document");
            return origin;
        }
        return oldOffset.apply(this, arguments);
    };
    var oldParam = jQuery.param;
    jQuery.param = function(data, traditional) {
        var ajaxTraditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
        if (traditional === undefined && ajaxTraditional) {
            migrateWarn("jQuery.param() no longer uses jQuery.ajaxSettings.traditional");
            traditional = ajaxTraditional;
        }
        return oldParam.call(this, data, traditional);
    };
    var oldSelf = jQuery.fn.andSelf || jQuery.fn.addBack;
    jQuery.fn.andSelf = function() {
        migrateWarn("jQuery.fn.andSelf() is deprecated and removed, use jQuery.fn.addBack()");
        return oldSelf.apply(this, arguments);
    };
    var oldDeferred = jQuery.Deferred, tuples = [ [ "resolve", "done", jQuery.Callbacks("once memory"), jQuery.Callbacks("once memory"), "resolved" ], [ "reject", "fail", jQuery.Callbacks("once memory"), jQuery.Callbacks("once memory"), "rejected" ], [ "notify", "progress", jQuery.Callbacks("memory"), jQuery.Callbacks("memory") ] ];
    jQuery.Deferred = function(func) {
        var deferred = oldDeferred(), promise = deferred.promise();
        deferred.pipe = promise.pipe = function() {
            var fns = arguments;
            migrateWarn("deferred.pipe() is deprecated");
            return jQuery.Deferred(function(newDefer) {
                jQuery.each(tuples, function(i, tuple) {
                    var fn = jQuery.isFunction(fns[i]) && fns[i];
                    deferred[tuple[1]](function() {
                        var returned = fn && fn.apply(this, arguments);
                        if (returned && jQuery.isFunction(returned.promise)) {
                            returned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify);
                        } else {
                            newDefer[tuple[0] + "With"](this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments);
                        }
                    });
                });
                fns = null;
            }).promise();
        };
        if (func) {
            func.call(deferred, deferred);
        }
        return deferred;
    };
    jQuery.Deferred.exceptionHook = oldDeferred.exceptionHook;
    return jQuery;
});

+function($) {
    "use strict";
    var Button = function(element, options) {
        this.$element = $(element);
        this.options = $.extend({}, Button.DEFAULTS, options);
        this.isLoading = false;
    };
    Button.VERSION = "3.3.7";
    Button.DEFAULTS = {
        loadingText: "loading..."
    };
    Button.prototype.setState = function(state) {
        var d = "disabled";
        var $el = this.$element;
        var val = $el.is("input") ? "val" : "html";
        var data = $el.data();
        state += "Text";
        if (data.resetText == null) $el.data("resetText", $el[val]());
        setTimeout($.proxy(function() {
            $el[val](data[state] == null ? this.options[state] : data[state]);
            if (state == "loadingText") {
                this.isLoading = true;
                $el.addClass(d).attr(d, d).prop(d, true);
            } else if (this.isLoading) {
                this.isLoading = false;
                $el.removeClass(d).removeAttr(d).prop(d, false);
            }
        }, this), 0);
    };
    Button.prototype.toggle = function() {
        var changed = true;
        var $parent = this.$element.closest('[data-toggle="buttons"]');
        if ($parent.length) {
            var $input = this.$element.find("input");
            if ($input.prop("type") == "radio") {
                if ($input.prop("checked")) changed = false;
                $parent.find(".active").removeClass("active");
                this.$element.addClass("active");
            } else if ($input.prop("type") == "checkbox") {
                if ($input.prop("checked") !== this.$element.hasClass("active")) changed = false;
                this.$element.toggleClass("active");
            }
            $input.prop("checked", this.$element.hasClass("active"));
            if (changed) $input.trigger("change");
        } else {
            this.$element.attr("aria-pressed", !this.$element.hasClass("active"));
            this.$element.toggleClass("active");
        }
    };
    function Plugin(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.button");
            var options = typeof option == "object" && option;
            if (!data) $this.data("bs.button", data = new Button(this, options));
            if (option == "toggle") data.toggle(); else if (option) data.setState(option);
        });
    }
    var old = $.fn.button;
    $.fn.button = Plugin;
    $.fn.button.Constructor = Button;
    $.fn.button.noConflict = function() {
        $.fn.button = old;
        return this;
    };
    $(document).on("click.bs.button.data-api", '[data-toggle^="button"]', function(e) {
        var $btn = $(e.target).closest(".btn");
        Plugin.call($btn, "toggle");
        if (!$(e.target).is('input[type="radio"], input[type="checkbox"]')) {
            e.preventDefault();
            if ($btn.is("input,button")) $btn.trigger("focus"); else $btn.find("input:visible,button:visible").first().trigger("focus");
        }
    }).on("focus.bs.button.data-api blur.bs.button.data-api", '[data-toggle^="button"]', function(e) {
        $(e.target).closest(".btn").toggleClass("focus", /^focus(in)?$/.test(e.type));
    });
}(jQuery);

(function(root, factory) {
    if (typeof define === "function" && define.amd && define.amd.dust === true) {
        define("dust.core", [], factory);
    } else if (typeof exports === "object") {
        module.exports = factory();
    } else {
        root.dust = factory();
    }
})(this, function() {
    var dust = {
        version: "2.7.5"
    }, NONE = "NONE", ERROR = "ERROR", WARN = "WARN", INFO = "INFO", DEBUG = "DEBUG", EMPTY_FUNC = function() {};
    dust.config = {
        whitespace: false,
        amd: false,
        cjs: false,
        cache: true
    };
    dust._aliases = {
        write: "w",
        end: "e",
        map: "m",
        render: "r",
        reference: "f",
        section: "s",
        exists: "x",
        notexists: "nx",
        block: "b",
        partial: "p",
        helper: "h"
    };
    (function initLogging() {
        var loggingLevels = {
            DEBUG: 0,
            INFO: 1,
            WARN: 2,
            ERROR: 3,
            NONE: 4
        }, consoleLog, log;
        if (typeof console !== "undefined" && console.log) {
            consoleLog = console.log;
            if (typeof consoleLog === "function") {
                log = function() {
                    consoleLog.apply(console, arguments);
                };
            } else {
                log = function() {
                    consoleLog(Array.prototype.slice.apply(arguments).join(" "));
                };
            }
        } else {
            log = EMPTY_FUNC;
        }
        dust.log = function(message, type) {
            type = type || INFO;
            if (loggingLevels[type] >= loggingLevels[dust.debugLevel]) {
                log("[DUST:" + type + "]", message);
            }
        };
        dust.debugLevel = NONE;
        if (typeof process !== "undefined" && process.env && /\bdust\b/.test(process.env.DEBUG)) {
            dust.debugLevel = DEBUG;
        }
    })();
    dust.helpers = {};
    dust.cache = {};
    dust.register = function(name, tmpl) {
        if (!name) {
            return;
        }
        tmpl.templateName = name;
        if (dust.config.cache !== false) {
            dust.cache[name] = tmpl;
        }
    };
    dust.render = function(nameOrTemplate, context, callback) {
        var chunk = new Stub(callback).head;
        try {
            load(nameOrTemplate, chunk, context).end();
        } catch (err) {
            chunk.setError(err);
        }
    };
    dust.stream = function(nameOrTemplate, context) {
        var stream = new Stream(), chunk = stream.head;
        dust.nextTick(function() {
            try {
                load(nameOrTemplate, chunk, context).end();
            } catch (err) {
                chunk.setError(err);
            }
        });
        return stream;
    };
    function getTemplate(nameOrTemplate, loadFromCache) {
        if (!nameOrTemplate) {
            return;
        }
        if (typeof nameOrTemplate === "function" && nameOrTemplate.template) {
            return nameOrTemplate.template;
        }
        if (dust.isTemplateFn(nameOrTemplate)) {
            return nameOrTemplate;
        }
        if (loadFromCache !== false) {
            return dust.cache[nameOrTemplate];
        }
    }
    function load(nameOrTemplate, chunk, context) {
        if (!nameOrTemplate) {
            return chunk.setError(new Error("No template or template name provided to render"));
        }
        var template = getTemplate(nameOrTemplate, dust.config.cache);
        if (template) {
            return template(chunk, Context.wrap(context, template.templateName));
        } else {
            if (dust.onLoad) {
                return chunk.map(function(chunk) {
                    var name = nameOrTemplate;
                    function done(err, srcOrTemplate) {
                        var template;
                        if (err) {
                            return chunk.setError(err);
                        }
                        template = getTemplate(srcOrTemplate, false) || getTemplate(name, dust.config.cache);
                        if (!template) {
                            if (dust.compile) {
                                template = dust.loadSource(dust.compile(srcOrTemplate, name));
                            } else {
                                return chunk.setError(new Error("Dust compiler not available"));
                            }
                        }
                        template(chunk, Context.wrap(context, template.templateName)).end();
                    }
                    if (dust.onLoad.length === 3) {
                        dust.onLoad(name, context.options, done);
                    } else {
                        dust.onLoad(name, done);
                    }
                });
            }
            return chunk.setError(new Error("Template Not Found: " + nameOrTemplate));
        }
    }
    dust.loadSource = function(source) {
        return eval(source);
    };
    if (Array.isArray) {
        dust.isArray = Array.isArray;
    } else {
        dust.isArray = function(arr) {
            return Object.prototype.toString.call(arr) === "[object Array]";
        };
    }
    dust.nextTick = function() {
        return function(callback) {
            setTimeout(callback, 0);
        };
    }();
    dust.isEmpty = function(value) {
        if (value === 0) {
            return false;
        }
        if (dust.isArray(value) && !value.length) {
            return true;
        }
        return !value;
    };
    dust.isEmptyObject = function(obj) {
        var key;
        if (obj === null) {
            return false;
        }
        if (obj === undefined) {
            return false;
        }
        if (obj.length > 0) {
            return false;
        }
        for (key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) {
                return false;
            }
        }
        return true;
    };
    dust.isTemplateFn = function(elem) {
        return typeof elem === "function" && elem.__dustBody;
    };
    dust.isThenable = function(elem) {
        return elem && typeof elem === "object" && typeof elem.then === "function";
    };
    dust.isStreamable = function(elem) {
        return elem && typeof elem.on === "function" && typeof elem.pipe === "function";
    };
    dust.filter = function(string, auto, filters, context) {
        var i, len, name, filter;
        if (filters) {
            for (i = 0, len = filters.length; i < len; i++) {
                name = filters[i];
                if (!name.length) {
                    continue;
                }
                filter = dust.filters[name];
                if (name === "s") {
                    auto = null;
                } else if (typeof filter === "function") {
                    string = filter(string, context);
                } else {
                    dust.log("Invalid filter `" + name + "`", WARN);
                }
            }
        }
        if (auto) {
            string = dust.filters[auto](string, context);
        }
        return string;
    };
    dust.filters = {
        h: function(value) {
            return dust.escapeHtml(value);
        },
        j: function(value) {
            return dust.escapeJs(value);
        },
        u: encodeURI,
        uc: encodeURIComponent,
        js: function(value) {
            return dust.escapeJSON(value);
        },
        jp: function(value) {
            if (!JSON) {
                dust.log("JSON is undefined; could not parse `" + value + "`", WARN);
                return value;
            } else {
                return JSON.parse(value);
            }
        }
    };
    function Context(stack, global, options, blocks, templateName) {
        if (stack !== undefined && !(stack instanceof Stack)) {
            stack = new Stack(stack);
        }
        this.stack = stack;
        this.global = global;
        this.options = options;
        this.blocks = blocks;
        this.templateName = templateName;
        this._isContext = true;
    }
    dust.makeBase = dust.context = function(global, options) {
        return new Context(undefined, global, options);
    };
    dust.isContext = function(obj) {
        return typeof obj === "object" && obj._isContext === true;
    };
    function getWithResolvedData(ctx, cur, down) {
        return function(data) {
            return ctx.push(data)._get(cur, down);
        };
    }
    Context.wrap = function(context, name) {
        if (dust.isContext(context)) {
            return context;
        }
        return new Context(context, {}, {}, null, name);
    };
    Context.prototype.get = function(path, cur) {
        if (typeof path === "string") {
            if (path[0] === ".") {
                cur = true;
                path = path.substr(1);
            }
            path = path.split(".");
        }
        return this._get(cur, path);
    };
    Context.prototype._get = function(cur, down) {
        var ctx = this.stack || {}, i = 1, value, first, len, ctxThis, fn;
        first = down[0];
        len = down.length;
        if (cur && len === 0) {
            ctxThis = ctx;
            ctx = ctx.head;
        } else {
            if (!cur) {
                while (ctx) {
                    if (ctx.isObject) {
                        ctxThis = ctx.head;
                        value = ctx.head[first];
                        if (value !== undefined) {
                            break;
                        }
                    }
                    ctx = ctx.tail;
                }
                if (value !== undefined) {
                    ctx = value;
                } else {
                    ctx = this.global && this.global[first];
                }
            } else if (ctx) {
                if (ctx.head) {
                    ctx = ctx.head[first];
                } else {
                    ctx = undefined;
                }
            }
            while (ctx && i < len) {
                if (dust.isThenable(ctx)) {
                    return ctx.then(getWithResolvedData(this, cur, down.slice(i)));
                }
                ctxThis = ctx;
                ctx = ctx[down[i]];
                i++;
            }
        }
        if (typeof ctx === "function") {
            fn = function() {
                try {
                    return ctx.apply(ctxThis, arguments);
                } catch (err) {
                    dust.log(err, ERROR);
                    throw err;
                }
            };
            fn.__dustBody = !!ctx.__dustBody;
            return fn;
        } else {
            if (ctx === undefined) {
                dust.log("Cannot find reference `{" + down.join(".") + "}` in template `" + this.getTemplateName() + "`", INFO);
            }
            return ctx;
        }
    };
    Context.prototype.getPath = function(cur, down) {
        return this._get(cur, down);
    };
    Context.prototype.push = function(head, idx, len) {
        if (head === undefined) {
            dust.log("Not pushing an undefined variable onto the context", INFO);
            return this;
        }
        return this.rebase(new Stack(head, this.stack, idx, len));
    };
    Context.prototype.pop = function() {
        var head = this.current();
        this.stack = this.stack && this.stack.tail;
        return head;
    };
    Context.prototype.rebase = function(head) {
        return new Context(head, this.global, this.options, this.blocks, this.getTemplateName());
    };
    Context.prototype.clone = function() {
        var context = this.rebase();
        context.stack = this.stack;
        return context;
    };
    Context.prototype.current = function() {
        return this.stack && this.stack.head;
    };
    Context.prototype.getBlock = function(key) {
        var blocks, len, fn;
        if (typeof key === "function") {
            key = key(new Chunk(), this).data.join("");
        }
        blocks = this.blocks;
        if (!blocks) {
            dust.log("No blocks for context `" + key + "` in template `" + this.getTemplateName() + "`", DEBUG);
            return false;
        }
        len = blocks.length;
        while (len--) {
            fn = blocks[len][key];
            if (fn) {
                return fn;
            }
        }
        dust.log("Malformed template `" + this.getTemplateName() + "` was missing one or more blocks.");
        return false;
    };
    Context.prototype.shiftBlocks = function(locals) {
        var blocks = this.blocks, newBlocks;
        if (locals) {
            if (!blocks) {
                newBlocks = [ locals ];
            } else {
                newBlocks = blocks.concat([ locals ]);
            }
            return new Context(this.stack, this.global, this.options, newBlocks, this.getTemplateName());
        }
        return this;
    };
    Context.prototype.resolve = function(body) {
        var chunk;
        if (typeof body !== "function") {
            return body;
        }
        chunk = new Chunk().render(body, this);
        if (chunk instanceof Chunk) {
            return chunk.data.join("");
        }
        return chunk;
    };
    Context.prototype.getTemplateName = function() {
        return this.templateName;
    };
    function Stack(head, tail, idx, len) {
        this.tail = tail;
        this.isObject = head && typeof head === "object";
        this.head = head;
        this.index = idx;
        this.of = len;
    }
    function Stub(callback) {
        this.head = new Chunk(this);
        this.callback = callback;
        this.out = "";
    }
    Stub.prototype.flush = function() {
        var chunk = this.head;
        while (chunk) {
            if (chunk.flushable) {
                this.out += chunk.data.join("");
            } else if (chunk.error) {
                this.callback(chunk.error);
                dust.log("Rendering failed with error `" + chunk.error + "`", ERROR);
                this.flush = EMPTY_FUNC;
                return;
            } else {
                return;
            }
            chunk = chunk.next;
            this.head = chunk;
        }
        this.callback(null, this.out);
    };
    function Stream() {
        this.head = new Chunk(this);
    }
    Stream.prototype.flush = function() {
        var chunk = this.head;
        while (chunk) {
            if (chunk.flushable) {
                this.emit("data", chunk.data.join(""));
            } else if (chunk.error) {
                this.emit("error", chunk.error);
                this.emit("end");
                dust.log("Streaming failed with error `" + chunk.error + "`", ERROR);
                this.flush = EMPTY_FUNC;
                return;
            } else {
                return;
            }
            chunk = chunk.next;
            this.head = chunk;
        }
        this.emit("end");
    };
    Stream.prototype.emit = function(type, data) {
        var events = this.events || {}, handlers = events[type] || [], i, l;
        if (!handlers.length) {
            dust.log("Stream broadcasting, but no listeners for `" + type + "`", DEBUG);
            return false;
        }
        handlers = handlers.slice(0);
        for (i = 0, l = handlers.length; i < l; i++) {
            handlers[i](data);
        }
        return true;
    };
    Stream.prototype.on = function(type, callback) {
        var events = this.events = this.events || {}, handlers = events[type] = events[type] || [];
        if (typeof callback !== "function") {
            dust.log("No callback function provided for `" + type + "` event listener", WARN);
        } else {
            handlers.push(callback);
        }
        return this;
    };
    Stream.prototype.pipe = function(stream) {
        if (typeof stream.write !== "function" || typeof stream.end !== "function") {
            dust.log("Incompatible stream passed to `pipe`", WARN);
            return this;
        }
        var destEnded = false;
        if (typeof stream.emit === "function") {
            stream.emit("pipe", this);
        }
        if (typeof stream.on === "function") {
            stream.on("error", function() {
                destEnded = true;
            });
        }
        return this.on("data", function(data) {
            if (destEnded) {
                return;
            }
            try {
                stream.write(data, "utf8");
            } catch (err) {
                dust.log(err, ERROR);
            }
        }).on("end", function() {
            if (destEnded) {
                return;
            }
            try {
                stream.end();
                destEnded = true;
            } catch (err) {
                dust.log(err, ERROR);
            }
        });
    };
    function Chunk(root, next, taps) {
        this.root = root;
        this.next = next;
        this.data = [];
        this.flushable = false;
        this.taps = taps;
    }
    Chunk.prototype.write = function(data) {
        var taps = this.taps;
        if (taps) {
            data = taps.go(data);
        }
        this.data.push(data);
        return this;
    };
    Chunk.prototype.end = function(data) {
        if (data) {
            this.write(data);
        }
        this.flushable = true;
        this.root.flush();
        return this;
    };
    Chunk.prototype.map = function(callback) {
        var cursor = new Chunk(this.root, this.next, this.taps), branch = new Chunk(this.root, cursor, this.taps);
        this.next = branch;
        this.flushable = true;
        try {
            callback(branch);
        } catch (err) {
            dust.log(err, ERROR);
            branch.setError(err);
        }
        return cursor;
    };
    Chunk.prototype.tap = function(tap) {
        var taps = this.taps;
        if (taps) {
            this.taps = taps.push(tap);
        } else {
            this.taps = new Tap(tap);
        }
        return this;
    };
    Chunk.prototype.untap = function() {
        this.taps = this.taps.tail;
        return this;
    };
    Chunk.prototype.render = function(body, context) {
        return body(this, context);
    };
    Chunk.prototype.reference = function(elem, context, auto, filters) {
        if (typeof elem === "function") {
            elem = elem.apply(context.current(), [ this, context, null, {
                auto: auto,
                filters: filters
            } ]);
            if (elem instanceof Chunk) {
                return elem;
            } else {
                return this.reference(elem, context, auto, filters);
            }
        }
        if (dust.isThenable(elem)) {
            return this.await(elem, context, null, auto, filters);
        } else if (dust.isStreamable(elem)) {
            return this.stream(elem, context, null, auto, filters);
        } else if (!dust.isEmpty(elem)) {
            return this.write(dust.filter(elem, auto, filters, context));
        } else {
            return this;
        }
    };
    Chunk.prototype.section = function(elem, context, bodies, params) {
        var body = bodies.block, skip = bodies["else"], chunk = this, i, len, head;
        if (typeof elem === "function" && !dust.isTemplateFn(elem)) {
            try {
                elem = elem.apply(context.current(), [ this, context, bodies, params ]);
            } catch (err) {
                dust.log(err, ERROR);
                return this.setError(err);
            }
            if (elem instanceof Chunk) {
                return elem;
            }
        }
        if (dust.isEmptyObject(bodies)) {
            return chunk;
        }
        if (!dust.isEmptyObject(params)) {
            context = context.push(params);
        }
        if (dust.isArray(elem)) {
            if (body) {
                len = elem.length;
                if (len > 0) {
                    head = context.stack && context.stack.head || {};
                    head.$len = len;
                    for (i = 0; i < len; i++) {
                        head.$idx = i;
                        chunk = body(chunk, context.push(elem[i], i, len));
                    }
                    head.$idx = undefined;
                    head.$len = undefined;
                    return chunk;
                } else if (skip) {
                    return skip(this, context);
                }
            }
        } else if (dust.isThenable(elem)) {
            return this.await(elem, context, bodies);
        } else if (dust.isStreamable(elem)) {
            return this.stream(elem, context, bodies);
        } else if (elem === true) {
            if (body) {
                return body(this, context);
            }
        } else if (elem || elem === 0) {
            if (body) {
                return body(this, context.push(elem));
            }
        } else if (skip) {
            return skip(this, context);
        }
        dust.log("Section without corresponding key in template `" + context.getTemplateName() + "`", DEBUG);
        return this;
    };
    Chunk.prototype.exists = function(elem, context, bodies) {
        var body = bodies.block, skip = bodies["else"];
        if (!dust.isEmpty(elem)) {
            if (body) {
                return body(this, context);
            }
            dust.log("No block for exists check in template `" + context.getTemplateName() + "`", DEBUG);
        } else if (skip) {
            return skip(this, context);
        }
        return this;
    };
    Chunk.prototype.notexists = function(elem, context, bodies) {
        var body = bodies.block, skip = bodies["else"];
        if (dust.isEmpty(elem)) {
            if (body) {
                return body(this, context);
            }
            dust.log("No block for not-exists check in template `" + context.getTemplateName() + "`", DEBUG);
        } else if (skip) {
            return skip(this, context);
        }
        return this;
    };
    Chunk.prototype.block = function(elem, context, bodies) {
        var body = elem || bodies.block;
        if (body) {
            return body(this, context);
        }
        return this;
    };
    Chunk.prototype.partial = function(elem, context, partialContext, params) {
        var head;
        if (params === undefined) {
            params = partialContext;
            partialContext = context;
        }
        if (!dust.isEmptyObject(params)) {
            partialContext = partialContext.clone();
            head = partialContext.pop();
            partialContext = partialContext.push(params).push(head);
        }
        if (dust.isTemplateFn(elem)) {
            return this.capture(elem, context, function(name, chunk) {
                partialContext.templateName = name;
                load(name, chunk, partialContext).end();
            });
        } else {
            partialContext.templateName = elem;
            return load(elem, this, partialContext);
        }
    };
    Chunk.prototype.helper = function(name, context, bodies, params, auto) {
        var chunk = this, filters = params.filters, ret;
        if (auto === undefined) {
            auto = "h";
        }
        if (dust.helpers[name]) {
            try {
                ret = dust.helpers[name](chunk, context, bodies, params);
                if (ret instanceof Chunk) {
                    return ret;
                }
                if (typeof filters === "string") {
                    filters = filters.split("|");
                }
                if (!dust.isEmptyObject(bodies)) {
                    return chunk.section(ret, context, bodies, params);
                }
                return chunk.reference(ret, context, auto, filters);
            } catch (err) {
                dust.log("Error in helper `" + name + "`: " + err.message, ERROR);
                return chunk.setError(err);
            }
        } else {
            dust.log("Helper `" + name + "` does not exist", WARN);
            return chunk;
        }
    };
    Chunk.prototype.await = function(thenable, context, bodies, auto, filters) {
        return this.map(function(chunk) {
            thenable.then(function(data) {
                if (bodies) {
                    chunk = chunk.section(data, context, bodies);
                } else {
                    chunk = chunk.reference(data, context, auto, filters);
                }
                chunk.end();
            }, function(err) {
                var errorBody = bodies && bodies.error;
                if (errorBody) {
                    chunk.render(errorBody, context.push(err)).end();
                } else {
                    dust.log("Unhandled promise rejection in `" + context.getTemplateName() + "`", INFO);
                    chunk.end();
                }
            });
        });
    };
    Chunk.prototype.stream = function(stream, context, bodies, auto, filters) {
        var body = bodies && bodies.block, errorBody = bodies && bodies.error;
        return this.map(function(chunk) {
            var ended = false;
            stream.on("data", function data(thunk) {
                if (ended) {
                    return;
                }
                if (body) {
                    chunk = chunk.map(function(chunk) {
                        chunk.render(body, context.push(thunk)).end();
                    });
                } else if (!bodies) {
                    chunk = chunk.reference(thunk, context, auto, filters);
                }
            }).on("error", function error(err) {
                if (ended) {
                    return;
                }
                if (errorBody) {
                    chunk.render(errorBody, context.push(err));
                } else {
                    dust.log("Unhandled stream error in `" + context.getTemplateName() + "`", INFO);
                }
                if (!ended) {
                    ended = true;
                    chunk.end();
                }
            }).on("end", function end() {
                if (!ended) {
                    ended = true;
                    chunk.end();
                }
            });
        });
    };
    Chunk.prototype.capture = function(body, context, callback) {
        return this.map(function(chunk) {
            var stub = new Stub(function(err, out) {
                if (err) {
                    chunk.setError(err);
                } else {
                    callback(out, chunk);
                }
            });
            body(stub.head, context).end();
        });
    };
    Chunk.prototype.setError = function(err) {
        this.error = err;
        this.root.flush();
        return this;
    };
    for (var f in Chunk.prototype) {
        if (dust._aliases[f]) {
            Chunk.prototype[dust._aliases[f]] = Chunk.prototype[f];
        }
    }
    function Tap(head, tail) {
        this.head = head;
        this.tail = tail;
    }
    Tap.prototype.push = function(tap) {
        return new Tap(tap, this);
    };
    Tap.prototype.go = function(value) {
        var tap = this;
        while (tap) {
            value = tap.head(value);
            tap = tap.tail;
        }
        return value;
    };
    var HCHARS = /[&<>"']/, AMP = /&/g, LT = /</g, GT = />/g, QUOT = /\"/g, SQUOT = /\'/g;
    dust.escapeHtml = function(s) {
        if (typeof s === "string" || s && typeof s.toString === "function") {
            if (typeof s !== "string") {
                s = s.toString();
            }
            if (!HCHARS.test(s)) {
                return s;
            }
            return s.replace(AMP, "&amp;").replace(LT, "&lt;").replace(GT, "&gt;").replace(QUOT, "&quot;").replace(SQUOT, "&#39;");
        }
        return s;
    };
    var BS = /\\/g, FS = /\//g, CR = /\r/g, LS = /\u2028/g, PS = /\u2029/g, NL = /\n/g, LF = /\f/g, SQ = /'/g, DQ = /"/g, TB = /\t/g;
    dust.escapeJs = function(s) {
        if (typeof s === "string") {
            return s.replace(BS, "\\\\").replace(FS, "\\/").replace(DQ, '\\"').replace(SQ, "\\'").replace(CR, "\\r").replace(LS, "\\u2028").replace(PS, "\\u2029").replace(NL, "\\n").replace(LF, "\\f").replace(TB, "\\t");
        }
        return s;
    };
    dust.escapeJSON = function(o) {
        if (!JSON) {
            dust.log("JSON is undefined; could not escape `" + o + "`", WARN);
            return o;
        } else {
            return JSON.stringify(o).replace(LS, "\\u2028").replace(PS, "\\u2029").replace(LT, "\\u003c");
        }
    };
    return dust;
});

if (typeof define === "function" && define.amd && define.amd.dust === true) {
    define([ "require", "dust.core" ], function(require, dust) {
        dust.onLoad = function(name, cb) {
            require([ name ], function() {
                cb();
            });
        };
        return dust;
    });
}

(function(root, factory) {
    if (typeof define === "function" && define.amd && define.amd.dust === true) {
        define([ "dust.core" ], factory);
    } else if (typeof exports === "object") {
        module.exports = factory(require("dustjs-linkedin"));
    } else {
        factory(root.dust);
    }
})(this, function(dust) {
    function log(helper, msg, level) {
        level = level || "INFO";
        helper = helper ? "{@" + helper + "}: " : "";
        dust.log(helper + msg, level);
    }
    var _deprecatedCache = {};
    function _deprecated(target) {
        if (_deprecatedCache[target]) {
            return;
        }
        log(target, "Deprecation warning: " + target + " is deprecated and will be removed in a future version of dustjs-helpers", "WARN");
        log(null, "For help and a deprecation timeline, see https://github.com/linkedin/dustjs-helpers/wiki/Deprecated-Features#" + target.replace(/\W+/g, ""), "WARN");
        _deprecatedCache[target] = true;
    }
    function isSelect(context) {
        return context.stack.tail && context.stack.tail.head && typeof context.stack.tail.head.__select__ !== "undefined";
    }
    function getSelectState(context) {
        return isSelect(context) && context.get("__select__");
    }
    function addSelectState(context, opts) {
        var head = context.stack.head, newContext = context.rebase(), key;
        if (context.stack && context.stack.tail) {
            newContext.stack = context.stack.tail;
        }
        var state = {
            isPending: false,
            isResolved: false,
            isDeferredComplete: false,
            deferreds: []
        };
        for (key in opts) {
            state[key] = opts[key];
        }
        return newContext.push({
            __select__: state
        }).push(head, context.stack.index, context.stack.of);
    }
    function resolveSelectDeferreds(state) {
        var x, len;
        state.isDeferredPending = true;
        if (state.deferreds.length) {
            state.isDeferredComplete = true;
            for (x = 0, len = state.deferreds.length; x < len; x++) {
                state.deferreds[x]();
            }
        }
        state.isDeferredPending = false;
    }
    function jsonFilter(key, value) {
        if (typeof value === "function") {
            return value.toString().replace(/(^\s+|\s+$)/gm, "").replace(/\n/gm, "").replace(/,\s*/gm, ", ").replace(/\)\{/gm, ") {");
        }
        return value;
    }
    function truthTest(name, test) {
        return function(chunk, context, bodies, params) {
            return filter(chunk, context, bodies, params, name, test);
        };
    }
    function filter(chunk, context, bodies, params, helperName, test) {
        var body = bodies.block, skip = bodies["else"], selectState = getSelectState(context) || {}, willResolve, key, value, type;
        if (selectState.isResolved && !selectState.isDeferredPending) {
            return chunk;
        }
        if (params.hasOwnProperty("key")) {
            key = params.key;
        } else if (selectState.hasOwnProperty("key")) {
            key = selectState.key;
        } else {
            log(helperName, "No key specified", "WARN");
            return chunk;
        }
        type = params.type || selectState.type;
        key = coerce(context.resolve(key), type);
        value = coerce(context.resolve(params.value), type);
        if (test(key, value)) {
            if (!selectState.isPending) {
                willResolve = true;
                selectState.isPending = true;
            }
            if (body) {
                chunk = chunk.render(body, context);
            }
            if (willResolve) {
                selectState.isResolved = true;
            }
        } else if (skip) {
            chunk = chunk.render(skip, context);
        }
        return chunk;
    }
    function coerce(value, type) {
        if (type) {
            type = type.toLowerCase();
        }
        switch (type) {
          case "number":
            return +value;

          case "string":
            return String(value);

          case "boolean":
            value = value === "false" ? false : value;
            return Boolean(value);

          case "date":
            return new Date(value);
        }
        return value;
    }
    var helpers = {
        tap: function(input, chunk, context) {
            _deprecated("tap");
            return context.resolve(input);
        },
        sep: function(chunk, context, bodies) {
            var body = bodies.block;
            if (context.stack.index === context.stack.of - 1) {
                return chunk;
            }
            if (body) {
                return body(chunk, context);
            } else {
                return chunk;
            }
        },
        first: function(chunk, context, bodies) {
            if (context.stack.index === 0) {
                return bodies.block(chunk, context);
            }
            return chunk;
        },
        last: function(chunk, context, bodies) {
            if (context.stack.index === context.stack.of - 1) {
                return bodies.block(chunk, context);
            }
            return chunk;
        },
        contextDump: function(chunk, context, bodies, params) {
            var to = context.resolve(params.to), key = context.resolve(params.key), target, output;
            switch (key) {
              case "full":
                target = context.stack;
                break;

              default:
                target = context.stack.head;
            }
            output = JSON.stringify(target, jsonFilter, 2);
            switch (to) {
              case "console":
                log("contextDump", output);
                break;

              default:
                output = output.replace(/</g, "\\u003c");
                chunk = chunk.write(output);
            }
            return chunk;
        },
        math: function(chunk, context, bodies, params) {
            var key = params.key, method = params.method, operand = params.operand, round = params.round, output, state, x, len;
            if (!params.hasOwnProperty("key") || !params.method) {
                log("math", "`key` or `method` was not provided", "ERROR");
                return chunk;
            }
            key = parseFloat(context.resolve(key));
            operand = parseFloat(context.resolve(operand));
            switch (method) {
              case "mod":
                if (operand === 0) {
                    log("math", "Division by 0", "ERROR");
                }
                output = key % operand;
                break;

              case "add":
                output = key + operand;
                break;

              case "subtract":
                output = key - operand;
                break;

              case "multiply":
                output = key * operand;
                break;

              case "divide":
                if (operand === 0) {
                    log("math", "Division by 0", "ERROR");
                }
                output = key / operand;
                break;

              case "ceil":
              case "floor":
              case "round":
              case "abs":
                output = Math[method](key);
                break;

              case "toint":
                output = parseInt(key, 10);
                break;

              default:
                log("math", "Method `" + method + "` is not supported", "ERROR");
            }
            if (typeof output !== "undefined") {
                if (round) {
                    output = Math.round(output);
                }
                if (bodies && bodies.block) {
                    context = addSelectState(context, {
                        key: output
                    });
                    chunk = chunk.render(bodies.block, context);
                    resolveSelectDeferreds(getSelectState(context));
                } else {
                    chunk = chunk.write(output);
                }
            }
            return chunk;
        },
        select: function(chunk, context, bodies, params) {
            var body = bodies.block, state = {};
            if (params.hasOwnProperty("key")) {
                state.key = context.resolve(params.key);
            }
            if (params.hasOwnProperty("type")) {
                state.type = params.type;
            }
            if (body) {
                context = addSelectState(context, state);
                chunk = chunk.render(body, context);
                resolveSelectDeferreds(getSelectState(context));
            } else {
                log("select", "Missing body block", "WARN");
            }
            return chunk;
        },
        eq: truthTest("eq", function(left, right) {
            return left === right;
        }),
        ne: truthTest("ne", function(left, right) {
            return left !== right;
        }),
        lt: truthTest("lt", function(left, right) {
            return left < right;
        }),
        lte: truthTest("lte", function(left, right) {
            return left <= right;
        }),
        gt: truthTest("gt", function(left, right) {
            return left > right;
        }),
        gte: truthTest("gte", function(left, right) {
            return left >= right;
        }),
        any: function(chunk, context, bodies, params) {
            var selectState = getSelectState(context);
            if (!selectState) {
                log("any", "Must be used inside a {@select} block", "ERROR");
            } else {
                if (selectState.isDeferredComplete) {
                    log("any", "Must not be nested inside {@any} or {@none} block", "ERROR");
                } else {
                    chunk = chunk.map(function(chunk) {
                        selectState.deferreds.push(function() {
                            if (selectState.isResolved) {
                                chunk = chunk.render(bodies.block, context);
                            }
                            chunk.end();
                        });
                    });
                }
            }
            return chunk;
        },
        none: function(chunk, context, bodies, params) {
            var selectState = getSelectState(context);
            if (!selectState) {
                log("none", "Must be used inside a {@select} block", "ERROR");
            } else {
                if (selectState.isDeferredComplete) {
                    log("none", "Must not be nested inside {@any} or {@none} block", "ERROR");
                } else {
                    chunk = chunk.map(function(chunk) {
                        selectState.deferreds.push(function() {
                            if (!selectState.isResolved) {
                                chunk = chunk.render(bodies.block, context);
                            }
                            chunk.end();
                        });
                    });
                }
            }
            return chunk;
        },
        size: function(chunk, context, bodies, params) {
            var key = params.key, value, k;
            key = context.resolve(params.key);
            if (!key || key === true) {
                value = 0;
            } else if (dust.isArray(key)) {
                value = key.length;
            } else if (!isNaN(parseFloat(key)) && isFinite(key)) {
                value = key;
            } else if (typeof key === "object") {
                value = 0;
                for (k in key) {
                    if (key.hasOwnProperty(k)) {
                        value++;
                    }
                }
            } else {
                value = (key + "").length;
            }
            return chunk.write(value);
        }
    };
    for (var key in helpers) {
        dust.helpers[key] = helpers[key];
    }
    return dust;
});

(function webpackUniversalModuleDefinition(root, factory) {
    if (typeof exports === "object" && typeof module === "object") module.exports = factory(require("moment"), require("jquery")); else if (typeof define === "function" && define.amd) define([ "moment", "jquery" ], factory); else if (typeof exports === "object") exports["FullCalendar"] = factory(require("moment"), require("jquery")); else root["FullCalendar"] = factory(root["moment"], root["jQuery"]);
})(typeof self !== "undefined" ? self : this, function(__WEBPACK_EXTERNAL_MODULE_0__, __WEBPACK_EXTERNAL_MODULE_3__) {
    return function(modules) {
        var installedModules = {};
        function __webpack_require__(moduleId) {
            if (installedModules[moduleId]) {
                return installedModules[moduleId].exports;
            }
            var module = installedModules[moduleId] = {
                i: moduleId,
                l: false,
                exports: {}
            };
            modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
            module.l = true;
            return module.exports;
        }
        __webpack_require__.m = modules;
        __webpack_require__.c = installedModules;
        __webpack_require__.d = function(exports, name, getter) {
            if (!__webpack_require__.o(exports, name)) {
                Object.defineProperty(exports, name, {
                    configurable: false,
                    enumerable: true,
                    get: getter
                });
            }
        };
        __webpack_require__.n = function(module) {
            var getter = module && module.__esModule ? function getDefault() {
                return module["default"];
            } : function getModuleExports() {
                return module;
            };
            __webpack_require__.d(getter, "a", getter);
            return getter;
        };
        __webpack_require__.o = function(object, property) {
            return Object.prototype.hasOwnProperty.call(object, property);
        };
        __webpack_require__.p = "";
        return __webpack_require__(__webpack_require__.s = 232);
    }([ function(module, exports) {
        module.exports = __WEBPACK_EXTERNAL_MODULE_0__;
    }, , function(module, exports) {
        var extendStatics = Object.setPrototypeOf || {
            __proto__: []
        } instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        exports.__extends = function(d, b) {
            extendStatics(d, b);
            function __() {
                this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    }, function(module, exports) {
        module.exports = __WEBPACK_EXTERNAL_MODULE_3__;
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var moment = __webpack_require__(0);
        var $ = __webpack_require__(3);
        function compensateScroll(rowEls, scrollbarWidths) {
            if (scrollbarWidths.left) {
                rowEls.css({
                    "border-left-width": 1,
                    "margin-left": scrollbarWidths.left - 1
                });
            }
            if (scrollbarWidths.right) {
                rowEls.css({
                    "border-right-width": 1,
                    "margin-right": scrollbarWidths.right - 1
                });
            }
        }
        exports.compensateScroll = compensateScroll;
        function uncompensateScroll(rowEls) {
            rowEls.css({
                "margin-left": "",
                "margin-right": "",
                "border-left-width": "",
                "border-right-width": ""
            });
        }
        exports.uncompensateScroll = uncompensateScroll;
        function disableCursor() {
            $("body").addClass("fc-not-allowed");
        }
        exports.disableCursor = disableCursor;
        function enableCursor() {
            $("body").removeClass("fc-not-allowed");
        }
        exports.enableCursor = enableCursor;
        function distributeHeight(els, availableHeight, shouldRedistribute) {
            var minOffset1 = Math.floor(availableHeight / els.length);
            var minOffset2 = Math.floor(availableHeight - minOffset1 * (els.length - 1));
            var flexEls = [];
            var flexOffsets = [];
            var flexHeights = [];
            var usedHeight = 0;
            undistributeHeight(els);
            els.each(function(i, el) {
                var minOffset = i === els.length - 1 ? minOffset2 : minOffset1;
                var naturalOffset = $(el).outerHeight(true);
                if (naturalOffset < minOffset) {
                    flexEls.push(el);
                    flexOffsets.push(naturalOffset);
                    flexHeights.push($(el).height());
                } else {
                    usedHeight += naturalOffset;
                }
            });
            if (shouldRedistribute) {
                availableHeight -= usedHeight;
                minOffset1 = Math.floor(availableHeight / flexEls.length);
                minOffset2 = Math.floor(availableHeight - minOffset1 * (flexEls.length - 1));
            }
            $(flexEls).each(function(i, el) {
                var minOffset = i === flexEls.length - 1 ? minOffset2 : minOffset1;
                var naturalOffset = flexOffsets[i];
                var naturalHeight = flexHeights[i];
                var newHeight = minOffset - (naturalOffset - naturalHeight);
                if (naturalOffset < minOffset) {
                    $(el).height(newHeight);
                }
            });
        }
        exports.distributeHeight = distributeHeight;
        function undistributeHeight(els) {
            els.height("");
        }
        exports.undistributeHeight = undistributeHeight;
        function matchCellWidths(els) {
            var maxInnerWidth = 0;
            els.find("> *").each(function(i, innerEl) {
                var innerWidth = $(innerEl).outerWidth();
                if (innerWidth > maxInnerWidth) {
                    maxInnerWidth = innerWidth;
                }
            });
            maxInnerWidth++;
            els.width(maxInnerWidth);
            return maxInnerWidth;
        }
        exports.matchCellWidths = matchCellWidths;
        function subtractInnerElHeight(outerEl, innerEl) {
            var both = outerEl.add(innerEl);
            var diff;
            both.css({
                position: "relative",
                left: -1
            });
            diff = outerEl.outerHeight() - innerEl.outerHeight();
            both.css({
                position: "",
                left: ""
            });
            return diff;
        }
        exports.subtractInnerElHeight = subtractInnerElHeight;
        function getScrollParent(el) {
            var position = el.css("position");
            var scrollParent = el.parents().filter(function() {
                var parent = $(this);
                return /(auto|scroll)/.test(parent.css("overflow") + parent.css("overflow-y") + parent.css("overflow-x"));
            }).eq(0);
            return position === "fixed" || !scrollParent.length ? $(el[0].ownerDocument || document) : scrollParent;
        }
        exports.getScrollParent = getScrollParent;
        function getOuterRect(el, origin) {
            var offset = el.offset();
            var left = offset.left - (origin ? origin.left : 0);
            var top = offset.top - (origin ? origin.top : 0);
            return {
                left: left,
                right: left + el.outerWidth(),
                top: top,
                bottom: top + el.outerHeight()
            };
        }
        exports.getOuterRect = getOuterRect;
        function getClientRect(el, origin) {
            var offset = el.offset();
            var scrollbarWidths = getScrollbarWidths(el);
            var left = offset.left + getCssFloat(el, "border-left-width") + scrollbarWidths.left - (origin ? origin.left : 0);
            var top = offset.top + getCssFloat(el, "border-top-width") + scrollbarWidths.top - (origin ? origin.top : 0);
            return {
                left: left,
                right: left + el[0].clientWidth,
                top: top,
                bottom: top + el[0].clientHeight
            };
        }
        exports.getClientRect = getClientRect;
        function getContentRect(el, origin) {
            var offset = el.offset();
            var left = offset.left + getCssFloat(el, "border-left-width") + getCssFloat(el, "padding-left") - (origin ? origin.left : 0);
            var top = offset.top + getCssFloat(el, "border-top-width") + getCssFloat(el, "padding-top") - (origin ? origin.top : 0);
            return {
                left: left,
                right: left + el.width(),
                top: top,
                bottom: top + el.height()
            };
        }
        exports.getContentRect = getContentRect;
        function getScrollbarWidths(el) {
            var leftRightWidth = el[0].offsetWidth - el[0].clientWidth;
            var bottomWidth = el[0].offsetHeight - el[0].clientHeight;
            var widths;
            leftRightWidth = sanitizeScrollbarWidth(leftRightWidth);
            bottomWidth = sanitizeScrollbarWidth(bottomWidth);
            widths = {
                left: 0,
                right: 0,
                top: 0,
                bottom: bottomWidth
            };
            if (getIsLeftRtlScrollbars() && el.css("direction") === "rtl") {
                widths.left = leftRightWidth;
            } else {
                widths.right = leftRightWidth;
            }
            return widths;
        }
        exports.getScrollbarWidths = getScrollbarWidths;
        function sanitizeScrollbarWidth(width) {
            width = Math.max(0, width);
            width = Math.round(width);
            return width;
        }
        var _isLeftRtlScrollbars = null;
        function getIsLeftRtlScrollbars() {
            if (_isLeftRtlScrollbars === null) {
                _isLeftRtlScrollbars = computeIsLeftRtlScrollbars();
            }
            return _isLeftRtlScrollbars;
        }
        function computeIsLeftRtlScrollbars() {
            var el = $("<div><div/></div>").css({
                position: "absolute",
                top: -1e3,
                left: 0,
                border: 0,
                padding: 0,
                overflow: "scroll",
                direction: "rtl"
            }).appendTo("body");
            var innerEl = el.children();
            var res = innerEl.offset().left > el.offset().left;
            el.remove();
            return res;
        }
        function getCssFloat(el, prop) {
            return parseFloat(el.css(prop)) || 0;
        }
        function isPrimaryMouseButton(ev) {
            return ev.which === 1 && !ev.ctrlKey;
        }
        exports.isPrimaryMouseButton = isPrimaryMouseButton;
        function getEvX(ev) {
            var touches = ev.originalEvent.touches;
            if (touches && touches.length) {
                return touches[0].pageX;
            }
            return ev.pageX;
        }
        exports.getEvX = getEvX;
        function getEvY(ev) {
            var touches = ev.originalEvent.touches;
            if (touches && touches.length) {
                return touches[0].pageY;
            }
            return ev.pageY;
        }
        exports.getEvY = getEvY;
        function getEvIsTouch(ev) {
            return /^touch/.test(ev.type);
        }
        exports.getEvIsTouch = getEvIsTouch;
        function preventSelection(el) {
            el.addClass("fc-unselectable").on("selectstart", preventDefault);
        }
        exports.preventSelection = preventSelection;
        function allowSelection(el) {
            el.removeClass("fc-unselectable").off("selectstart", preventDefault);
        }
        exports.allowSelection = allowSelection;
        function preventDefault(ev) {
            ev.preventDefault();
        }
        exports.preventDefault = preventDefault;
        function intersectRects(rect1, rect2) {
            var res = {
                left: Math.max(rect1.left, rect2.left),
                right: Math.min(rect1.right, rect2.right),
                top: Math.max(rect1.top, rect2.top),
                bottom: Math.min(rect1.bottom, rect2.bottom)
            };
            if (res.left < res.right && res.top < res.bottom) {
                return res;
            }
            return false;
        }
        exports.intersectRects = intersectRects;
        function constrainPoint(point, rect) {
            return {
                left: Math.min(Math.max(point.left, rect.left), rect.right),
                top: Math.min(Math.max(point.top, rect.top), rect.bottom)
            };
        }
        exports.constrainPoint = constrainPoint;
        function getRectCenter(rect) {
            return {
                left: (rect.left + rect.right) / 2,
                top: (rect.top + rect.bottom) / 2
            };
        }
        exports.getRectCenter = getRectCenter;
        function diffPoints(point1, point2) {
            return {
                left: point1.left - point2.left,
                top: point1.top - point2.top
            };
        }
        exports.diffPoints = diffPoints;
        function parseFieldSpecs(input) {
            var specs = [];
            var tokens = [];
            var i;
            var token;
            if (typeof input === "string") {
                tokens = input.split(/\s*,\s*/);
            } else if (typeof input === "function") {
                tokens = [ input ];
            } else if ($.isArray(input)) {
                tokens = input;
            }
            for (i = 0; i < tokens.length; i++) {
                token = tokens[i];
                if (typeof token === "string") {
                    specs.push(token.charAt(0) === "-" ? {
                        field: token.substring(1),
                        order: -1
                    } : {
                        field: token,
                        order: 1
                    });
                } else if (typeof token === "function") {
                    specs.push({
                        func: token
                    });
                }
            }
            return specs;
        }
        exports.parseFieldSpecs = parseFieldSpecs;
        function compareByFieldSpecs(obj1, obj2, fieldSpecs) {
            var i;
            var cmp;
            for (i = 0; i < fieldSpecs.length; i++) {
                cmp = compareByFieldSpec(obj1, obj2, fieldSpecs[i]);
                if (cmp) {
                    return cmp;
                }
            }
            return 0;
        }
        exports.compareByFieldSpecs = compareByFieldSpecs;
        function compareByFieldSpec(obj1, obj2, fieldSpec) {
            if (fieldSpec.func) {
                return fieldSpec.func(obj1, obj2);
            }
            return flexibleCompare(obj1[fieldSpec.field], obj2[fieldSpec.field]) * (fieldSpec.order || 1);
        }
        exports.compareByFieldSpec = compareByFieldSpec;
        function flexibleCompare(a, b) {
            if (!a && !b) {
                return 0;
            }
            if (b == null) {
                return -1;
            }
            if (a == null) {
                return 1;
            }
            if ($.type(a) === "string" || $.type(b) === "string") {
                return String(a).localeCompare(String(b));
            }
            return a - b;
        }
        exports.flexibleCompare = flexibleCompare;
        exports.dayIDs = [ "sun", "mon", "tue", "wed", "thu", "fri", "sat" ];
        exports.unitsDesc = [ "year", "month", "week", "day", "hour", "minute", "second", "millisecond" ];
        function diffDayTime(a, b) {
            return moment.duration({
                days: a.clone().stripTime().diff(b.clone().stripTime(), "days"),
                ms: a.time() - b.time()
            });
        }
        exports.diffDayTime = diffDayTime;
        function diffDay(a, b) {
            return moment.duration({
                days: a.clone().stripTime().diff(b.clone().stripTime(), "days")
            });
        }
        exports.diffDay = diffDay;
        function diffByUnit(a, b, unit) {
            return moment.duration(Math.round(a.diff(b, unit, true)), unit);
        }
        exports.diffByUnit = diffByUnit;
        function computeGreatestUnit(start, end) {
            var i;
            var unit;
            var val;
            for (i = 0; i < exports.unitsDesc.length; i++) {
                unit = exports.unitsDesc[i];
                val = computeRangeAs(unit, start, end);
                if (val >= 1 && isInt(val)) {
                    break;
                }
            }
            return unit;
        }
        exports.computeGreatestUnit = computeGreatestUnit;
        function computeDurationGreatestUnit(duration, durationInput) {
            var unit = computeGreatestUnit(duration);
            if (unit === "week" && typeof durationInput === "object" && durationInput.days) {
                unit = "day";
            }
            return unit;
        }
        exports.computeDurationGreatestUnit = computeDurationGreatestUnit;
        function computeRangeAs(unit, start, end) {
            if (end != null) {
                return end.diff(start, unit, true);
            } else if (moment.isDuration(start)) {
                return start.as(unit);
            } else {
                return start.end.diff(start.start, unit, true);
            }
        }
        function divideRangeByDuration(start, end, dur) {
            var months;
            if (durationHasTime(dur)) {
                return (end - start) / dur;
            }
            months = dur.asMonths();
            if (Math.abs(months) >= 1 && isInt(months)) {
                return end.diff(start, "months", true) / months;
            }
            return end.diff(start, "days", true) / dur.asDays();
        }
        exports.divideRangeByDuration = divideRangeByDuration;
        function divideDurationByDuration(dur1, dur2) {
            var months1;
            var months2;
            if (durationHasTime(dur1) || durationHasTime(dur2)) {
                return dur1 / dur2;
            }
            months1 = dur1.asMonths();
            months2 = dur2.asMonths();
            if (Math.abs(months1) >= 1 && isInt(months1) && Math.abs(months2) >= 1 && isInt(months2)) {
                return months1 / months2;
            }
            return dur1.asDays() / dur2.asDays();
        }
        exports.divideDurationByDuration = divideDurationByDuration;
        function multiplyDuration(dur, n) {
            var months;
            if (durationHasTime(dur)) {
                return moment.duration(dur * n);
            }
            months = dur.asMonths();
            if (Math.abs(months) >= 1 && isInt(months)) {
                return moment.duration({
                    months: months * n
                });
            }
            return moment.duration({
                days: dur.asDays() * n
            });
        }
        exports.multiplyDuration = multiplyDuration;
        function durationHasTime(dur) {
            return Boolean(dur.hours() || dur.minutes() || dur.seconds() || dur.milliseconds());
        }
        exports.durationHasTime = durationHasTime;
        function isNativeDate(input) {
            return Object.prototype.toString.call(input) === "[object Date]" || input instanceof Date;
        }
        exports.isNativeDate = isNativeDate;
        function isTimeString(str) {
            return typeof str === "string" && /^\d+\:\d+(?:\:\d+\.?(?:\d{3})?)?$/.test(str);
        }
        exports.isTimeString = isTimeString;
        function log() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var console = window.console;
            if (console && console.log) {
                return console.log.apply(console, args);
            }
        }
        exports.log = log;
        function warn() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var console = window.console;
            if (console && console.warn) {
                return console.warn.apply(console, args);
            } else {
                return log.apply(null, args);
            }
        }
        exports.warn = warn;
        var hasOwnPropMethod = {}.hasOwnProperty;
        function mergeProps(propObjs, complexProps) {
            var dest = {};
            var i;
            var name;
            var complexObjs;
            var j;
            var val;
            var props;
            if (complexProps) {
                for (i = 0; i < complexProps.length; i++) {
                    name = complexProps[i];
                    complexObjs = [];
                    for (j = propObjs.length - 1; j >= 0; j--) {
                        val = propObjs[j][name];
                        if (typeof val === "object") {
                            complexObjs.unshift(val);
                        } else if (val !== undefined) {
                            dest[name] = val;
                            break;
                        }
                    }
                    if (complexObjs.length) {
                        dest[name] = mergeProps(complexObjs);
                    }
                }
            }
            for (i = propObjs.length - 1; i >= 0; i--) {
                props = propObjs[i];
                for (name in props) {
                    if (!(name in dest)) {
                        dest[name] = props[name];
                    }
                }
            }
            return dest;
        }
        exports.mergeProps = mergeProps;
        function copyOwnProps(src, dest) {
            for (var name_1 in src) {
                if (hasOwnProp(src, name_1)) {
                    dest[name_1] = src[name_1];
                }
            }
        }
        exports.copyOwnProps = copyOwnProps;
        function hasOwnProp(obj, name) {
            return hasOwnPropMethod.call(obj, name);
        }
        exports.hasOwnProp = hasOwnProp;
        function applyAll(functions, thisObj, args) {
            if ($.isFunction(functions)) {
                functions = [ functions ];
            }
            if (functions) {
                var i = void 0;
                var ret = void 0;
                for (i = 0; i < functions.length; i++) {
                    ret = functions[i].apply(thisObj, args) || ret;
                }
                return ret;
            }
        }
        exports.applyAll = applyAll;
        function removeMatching(array, testFunc) {
            var removeCnt = 0;
            var i = 0;
            while (i < array.length) {
                if (testFunc(array[i])) {
                    array.splice(i, 1);
                    removeCnt++;
                } else {
                    i++;
                }
            }
            return removeCnt;
        }
        exports.removeMatching = removeMatching;
        function removeExact(array, exactVal) {
            var removeCnt = 0;
            var i = 0;
            while (i < array.length) {
                if (array[i] === exactVal) {
                    array.splice(i, 1);
                    removeCnt++;
                } else {
                    i++;
                }
            }
            return removeCnt;
        }
        exports.removeExact = removeExact;
        function isArraysEqual(a0, a1) {
            var len = a0.length;
            var i;
            if (len == null || len !== a1.length) {
                return false;
            }
            for (i = 0; i < len; i++) {
                if (a0[i] !== a1[i]) {
                    return false;
                }
            }
            return true;
        }
        exports.isArraysEqual = isArraysEqual;
        function firstDefined() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            for (var i = 0; i < args.length; i++) {
                if (args[i] !== undefined) {
                    return args[i];
                }
            }
        }
        exports.firstDefined = firstDefined;
        function htmlEscape(s) {
            return (s + "").replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/'/g, "&#039;").replace(/"/g, "&quot;").replace(/\n/g, "<br />");
        }
        exports.htmlEscape = htmlEscape;
        function stripHtmlEntities(text) {
            return text.replace(/&.*?;/g, "");
        }
        exports.stripHtmlEntities = stripHtmlEntities;
        function cssToStr(cssProps) {
            var statements = [];
            $.each(cssProps, function(name, val) {
                if (val != null) {
                    statements.push(name + ":" + val);
                }
            });
            return statements.join(";");
        }
        exports.cssToStr = cssToStr;
        function attrsToStr(attrs) {
            var parts = [];
            $.each(attrs, function(name, val) {
                if (val != null) {
                    parts.push(name + '="' + htmlEscape(val) + '"');
                }
            });
            return parts.join(" ");
        }
        exports.attrsToStr = attrsToStr;
        function capitaliseFirstLetter(str) {
            return str.charAt(0).toUpperCase() + str.slice(1);
        }
        exports.capitaliseFirstLetter = capitaliseFirstLetter;
        function compareNumbers(a, b) {
            return a - b;
        }
        exports.compareNumbers = compareNumbers;
        function isInt(n) {
            return n % 1 === 0;
        }
        exports.isInt = isInt;
        function proxy(obj, methodName) {
            var method = obj[methodName];
            return function() {
                return method.apply(obj, arguments);
            };
        }
        exports.proxy = proxy;
        function debounce(func, wait, immediate) {
            if (immediate === void 0) {
                immediate = false;
            }
            var timeout;
            var args;
            var context;
            var timestamp;
            var result;
            var later = function() {
                var last = +new Date() - timestamp;
                if (last < wait) {
                    timeout = setTimeout(later, wait - last);
                } else {
                    timeout = null;
                    if (!immediate) {
                        result = func.apply(context, args);
                        context = args = null;
                    }
                }
            };
            return function() {
                context = this;
                args = arguments;
                timestamp = +new Date();
                var callNow = immediate && !timeout;
                if (!timeout) {
                    timeout = setTimeout(later, wait);
                }
                if (callNow) {
                    result = func.apply(context, args);
                    context = args = null;
                }
                return result;
            };
        }
        exports.debounce = debounce;
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var moment = __webpack_require__(0);
        var moment_ext_1 = __webpack_require__(10);
        var UnzonedRange = function() {
            function UnzonedRange(startInput, endInput) {
                this.isStart = true;
                this.isEnd = true;
                if (moment.isMoment(startInput)) {
                    startInput = startInput.clone().stripZone();
                }
                if (moment.isMoment(endInput)) {
                    endInput = endInput.clone().stripZone();
                }
                if (startInput) {
                    this.startMs = startInput.valueOf();
                }
                if (endInput) {
                    this.endMs = endInput.valueOf();
                }
            }
            UnzonedRange.invertRanges = function(ranges, constraintRange) {
                var invertedRanges = [];
                var startMs = constraintRange.startMs;
                var i;
                var dateRange;
                ranges.sort(compareUnzonedRanges);
                for (i = 0; i < ranges.length; i++) {
                    dateRange = ranges[i];
                    if (dateRange.startMs > startMs) {
                        invertedRanges.push(new UnzonedRange(startMs, dateRange.startMs));
                    }
                    if (dateRange.endMs > startMs) {
                        startMs = dateRange.endMs;
                    }
                }
                if (startMs < constraintRange.endMs) {
                    invertedRanges.push(new UnzonedRange(startMs, constraintRange.endMs));
                }
                return invertedRanges;
            };
            UnzonedRange.prototype.intersect = function(otherRange) {
                var startMs = this.startMs;
                var endMs = this.endMs;
                var newRange = null;
                if (otherRange.startMs != null) {
                    if (startMs == null) {
                        startMs = otherRange.startMs;
                    } else {
                        startMs = Math.max(startMs, otherRange.startMs);
                    }
                }
                if (otherRange.endMs != null) {
                    if (endMs == null) {
                        endMs = otherRange.endMs;
                    } else {
                        endMs = Math.min(endMs, otherRange.endMs);
                    }
                }
                if (startMs == null || endMs == null || startMs < endMs) {
                    newRange = new UnzonedRange(startMs, endMs);
                    newRange.isStart = this.isStart && startMs === this.startMs;
                    newRange.isEnd = this.isEnd && endMs === this.endMs;
                }
                return newRange;
            };
            UnzonedRange.prototype.intersectsWith = function(otherRange) {
                return (this.endMs == null || otherRange.startMs == null || this.endMs > otherRange.startMs) && (this.startMs == null || otherRange.endMs == null || this.startMs < otherRange.endMs);
            };
            UnzonedRange.prototype.containsRange = function(innerRange) {
                return (this.startMs == null || innerRange.startMs != null && innerRange.startMs >= this.startMs) && (this.endMs == null || innerRange.endMs != null && innerRange.endMs <= this.endMs);
            };
            UnzonedRange.prototype.containsDate = function(date) {
                var ms = date.valueOf();
                return (this.startMs == null || ms >= this.startMs) && (this.endMs == null || ms < this.endMs);
            };
            UnzonedRange.prototype.constrainDate = function(date) {
                var ms = date.valueOf();
                if (this.startMs != null && ms < this.startMs) {
                    ms = this.startMs;
                }
                if (this.endMs != null && ms >= this.endMs) {
                    ms = this.endMs - 1;
                }
                return ms;
            };
            UnzonedRange.prototype.equals = function(otherRange) {
                return this.startMs === otherRange.startMs && this.endMs === otherRange.endMs;
            };
            UnzonedRange.prototype.clone = function() {
                var range = new UnzonedRange(this.startMs, this.endMs);
                range.isStart = this.isStart;
                range.isEnd = this.isEnd;
                return range;
            };
            UnzonedRange.prototype.getStart = function() {
                if (this.startMs != null) {
                    return moment_ext_1.default.utc(this.startMs).stripZone();
                }
                return null;
            };
            UnzonedRange.prototype.getEnd = function() {
                if (this.endMs != null) {
                    return moment_ext_1.default.utc(this.endMs).stripZone();
                }
                return null;
            };
            UnzonedRange.prototype.as = function(unit) {
                return moment.utc(this.endMs).diff(moment.utc(this.startMs), unit, true);
            };
            return UnzonedRange;
        }();
        exports.default = UnzonedRange;
        function compareUnzonedRanges(range1, range2) {
            return range1.startMs - range2.startMs;
        }
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var tslib_1 = __webpack_require__(2);
        var $ = __webpack_require__(3);
        var ParsableModelMixin_1 = __webpack_require__(204);
        var Class_1 = __webpack_require__(32);
        var EventDefParser_1 = __webpack_require__(49);
        var EventSource = function(_super) {
            tslib_1.__extends(EventSource, _super);
            function EventSource(calendar) {
                var _this = _super.call(this) || this;
                _this.calendar = calendar;
                _this.className = [];
                _this.uid = String(EventSource.uuid++);
                return _this;
            }
            EventSource.parse = function(rawInput, calendar) {
                var source = new this(calendar);
                if (typeof rawInput === "object") {
                    if (source.applyProps(rawInput)) {
                        return source;
                    }
                }
                return false;
            };
            EventSource.normalizeId = function(id) {
                if (id) {
                    return String(id);
                }
                return null;
            };
            EventSource.prototype.fetch = function(start, end, timezone) {};
            EventSource.prototype.removeEventDefsById = function(eventDefId) {};
            EventSource.prototype.removeAllEventDefs = function() {};
            EventSource.prototype.getPrimitive = function(otherSource) {};
            EventSource.prototype.parseEventDefs = function(rawEventDefs) {
                var i;
                var eventDef;
                var eventDefs = [];
                for (i = 0; i < rawEventDefs.length; i++) {
                    eventDef = this.parseEventDef(rawEventDefs[i]);
                    if (eventDef) {
                        eventDefs.push(eventDef);
                    }
                }
                return eventDefs;
            };
            EventSource.prototype.parseEventDef = function(rawInput) {
                var calendarTransform = this.calendar.opt("eventDataTransform");
                var sourceTransform = this.eventDataTransform;
                if (calendarTransform) {
                    rawInput = calendarTransform(rawInput);
                }
                if (sourceTransform) {
                    rawInput = sourceTransform(rawInput);
                }
                return EventDefParser_1.default.parse(rawInput, this);
            };
            EventSource.prototype.applyManualStandardProps = function(rawProps) {
                if (rawProps.id != null) {
                    this.id = EventSource.normalizeId(rawProps.id);
                }
                if ($.isArray(rawProps.className)) {
                    this.className = rawProps.className;
                } else if (typeof rawProps.className === "string") {
                    this.className = rawProps.className.split(/\s+/);
                }
                return true;
            };
            EventSource.uuid = 0;
            EventSource.defineStandardProps = ParsableModelMixin_1.default.defineStandardProps;
            EventSource.copyVerbatimStandardProps = ParsableModelMixin_1.default.copyVerbatimStandardProps;
            return EventSource;
        }(Class_1.default);
        exports.default = EventSource;
        ParsableModelMixin_1.default.mixInto(EventSource);
        EventSource.defineStandardProps({
            id: false,
            className: false,
            color: true,
            backgroundColor: true,
            borderColor: true,
            textColor: true,
            editable: true,
            startEditable: true,
            durationEditable: true,
            rendering: true,
            overlap: true,
            constraint: true,
            allDayDefault: true,
            eventDataTransform: true
        });
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var tslib_1 = __webpack_require__(2);
        var $ = __webpack_require__(3);
        var Mixin_1 = __webpack_require__(14);
        var guid = 0;
        var ListenerMixin = function(_super) {
            tslib_1.__extends(ListenerMixin, _super);
            function ListenerMixin() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            ListenerMixin.prototype.listenTo = function(other, arg, callback) {
                if (typeof arg === "object") {
                    for (var eventName in arg) {
                        if (arg.hasOwnProperty(eventName)) {
                            this.listenTo(other, eventName, arg[eventName]);
                        }
                    }
                } else if (typeof arg === "string") {
                    other.on(arg + "." + this.getListenerNamespace(), $.proxy(callback, this));
                }
            };
            ListenerMixin.prototype.stopListeningTo = function(other, eventName) {
                other.off((eventName || "") + "." + this.getListenerNamespace());
            };
            ListenerMixin.prototype.getListenerNamespace = function() {
                if (this.listenerId == null) {
                    this.listenerId = guid++;
                }
                return "_listener" + this.listenerId;
            };
            return ListenerMixin;
        }(Mixin_1.default);
        exports.default = ListenerMixin;
    }, , , function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var moment = __webpack_require__(0);
        var $ = __webpack_require__(3);
        var util_1 = __webpack_require__(4);
        var ambigDateOfMonthRegex = /^\s*\d{4}-\d\d$/;
        var ambigTimeOrZoneRegex = /^\s*\d{4}-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?)?$/;
        var newMomentProto = moment.fn;
        exports.newMomentProto = newMomentProto;
        var oldMomentProto = $.extend({}, newMomentProto);
        exports.oldMomentProto = oldMomentProto;
        var momentProperties = moment.momentProperties;
        momentProperties.push("_fullCalendar");
        momentProperties.push("_ambigTime");
        momentProperties.push("_ambigZone");
        function oldMomentFormat(mom, formatStr) {
            return oldMomentProto.format.call(mom, formatStr);
        }
        exports.oldMomentFormat = oldMomentFormat;
        var momentExt = function() {
            return makeMoment(arguments);
        };
        exports.default = momentExt;
        momentExt.utc = function() {
            var mom = makeMoment(arguments, true);
            if (mom.hasTime()) {
                mom.utc();
            }
            return mom;
        };
        momentExt.parseZone = function() {
            return makeMoment(arguments, true, true);
        };
        function makeMoment(args, parseAsUTC, parseZone) {
            if (parseAsUTC === void 0) {
                parseAsUTC = false;
            }
            if (parseZone === void 0) {
                parseZone = false;
            }
            var input = args[0];
            var isSingleString = args.length === 1 && typeof input === "string";
            var isAmbigTime;
            var isAmbigZone;
            var ambigMatch;
            var mom;
            if (moment.isMoment(input) || util_1.isNativeDate(input) || input === undefined) {
                mom = moment.apply(null, args);
            } else {
                isAmbigTime = false;
                isAmbigZone = false;
                if (isSingleString) {
                    if (ambigDateOfMonthRegex.test(input)) {
                        input += "-01";
                        args = [ input ];
                        isAmbigTime = true;
                        isAmbigZone = true;
                    } else if (ambigMatch = ambigTimeOrZoneRegex.exec(input)) {
                        isAmbigTime = !ambigMatch[5];
                        isAmbigZone = true;
                    }
                } else if ($.isArray(input)) {
                    isAmbigZone = true;
                }
                if (parseAsUTC || isAmbigTime) {
                    mom = moment.utc.apply(moment, args);
                } else {
                    mom = moment.apply(null, args);
                }
                if (isAmbigTime) {
                    mom._ambigTime = true;
                    mom._ambigZone = true;
                } else if (parseZone) {
                    if (isAmbigZone) {
                        mom._ambigZone = true;
                    } else if (isSingleString) {
                        mom.utcOffset(input);
                    }
                }
            }
            mom._fullCalendar = true;
            return mom;
        }
        newMomentProto.week = newMomentProto.weeks = function(input) {
            var weekCalc = this._locale._fullCalendar_weekCalc;
            if (input == null && typeof weekCalc === "function") {
                return weekCalc(this);
            } else if (weekCalc === "ISO") {
                return oldMomentProto.isoWeek.apply(this, arguments);
            }
            return oldMomentProto.week.apply(this, arguments);
        };
        newMomentProto.time = function(time) {
            if (!this._fullCalendar) {
                return oldMomentProto.time.apply(this, arguments);
            }
            if (time == null) {
                return moment.duration({
                    hours: this.hours(),
                    minutes: this.minutes(),
                    seconds: this.seconds(),
                    milliseconds: this.milliseconds()
                });
            } else {
                this._ambigTime = false;
                if (!moment.isDuration(time) && !moment.isMoment(time)) {
                    time = moment.duration(time);
                }
                var dayHours = 0;
                if (moment.isDuration(time)) {
                    dayHours = Math.floor(time.asDays()) * 24;
                }
                return this.hours(dayHours + time.hours()).minutes(time.minutes()).seconds(time.seconds()).milliseconds(time.milliseconds());
            }
        };
        newMomentProto.stripTime = function() {
            if (!this._ambigTime) {
                this.utc(true);
                this.set({
                    hours: 0,
                    minutes: 0,
                    seconds: 0,
                    ms: 0
                });
                this._ambigTime = true;
                this._ambigZone = true;
            }
            return this;
        };
        newMomentProto.hasTime = function() {
            return !this._ambigTime;
        };
        newMomentProto.stripZone = function() {
            var wasAmbigTime;
            if (!this._ambigZone) {
                wasAmbigTime = this._ambigTime;
                this.utc(true);
                this._ambigTime = wasAmbigTime || false;
                this._ambigZone = true;
            }
            return this;
        };
        newMomentProto.hasZone = function() {
            return !this._ambigZone;
        };
        newMomentProto.local = function(keepLocalTime) {
            oldMomentProto.local.call(this, this._ambigZone || keepLocalTime);
            this._ambigTime = false;
            this._ambigZone = false;
            return this;
        };
        newMomentProto.utc = function(keepLocalTime) {
            oldMomentProto.utc.call(this, keepLocalTime);
            this._ambigTime = false;
            this._ambigZone = false;
            return this;
        };
        newMomentProto.utcOffset = function(tzo) {
            if (tzo != null) {
                this._ambigTime = false;
                this._ambigZone = false;
            }
            return oldMomentProto.utcOffset.apply(this, arguments);
        };
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var tslib_1 = __webpack_require__(2);
        var $ = __webpack_require__(3);
        var Mixin_1 = __webpack_require__(14);
        var EmitterMixin = function(_super) {
            tslib_1.__extends(EmitterMixin, _super);
            function EmitterMixin() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            EmitterMixin.prototype.on = function(types, handler) {
                $(this).on(types, this._prepareIntercept(handler));
                return this;
            };
            EmitterMixin.prototype.one = function(types, handler) {
                $(this).one(types, this._prepareIntercept(handler));
                return this;
            };
            EmitterMixin.prototype._prepareIntercept = function(handler) {
                var intercept = function(ev, extra) {
                    return handler.apply(extra.context || this, extra.args || []);
                };
                if (!handler.guid) {
                    handler.guid = $.guid++;
                }
                intercept.guid = handler.guid;
                return intercept;
            };
            EmitterMixin.prototype.off = function(types, handler) {
                $(this).off(types, handler);
                return this;
            };
            EmitterMixin.prototype.trigger = function(types) {
                var args = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    args[_i - 1] = arguments[_i];
                }
                $(this).triggerHandler(types, {
                    args: args
                });
                return this;
            };
            EmitterMixin.prototype.triggerWith = function(types, context, args) {
                $(this).triggerHandler(types, {
                    context: context,
                    args: args
                });
                return this;
            };
            EmitterMixin.prototype.hasHandlers = function(type) {
                var hash = $._data(this, "events");
                return hash && hash[type] && hash[type].length > 0;
            };
            return EmitterMixin;
        }(Mixin_1.default);
        exports.default = EmitterMixin;
    }, function(module, exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var ComponentFootprint = function() {
            function ComponentFootprint(unzonedRange, isAllDay) {
                this.isAllDay = false;
                this.unzonedRange = unzonedRange;
                this.isAllDay = isAllDay;
            }
            ComponentFootprint.prototype.toLegacy = function(calendar) {
                return {
                    start: calendar.msToMoment(this.unzonedRange.startMs, this.isAllDay),
                    end: calendar.msToMoment(this.unzonedRange.endMs, this.isAllDay)
                };
            };
            return ComponentFootprint;
        }();
        exports.default = ComponentFootprint;
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var tslib_1 = __webpack_require__(2);
        var EventDef_1 = __webpack_require__(33);
        var EventInstance_1 = __webpack_require__(205);
        var EventDateProfile_1 = __webpack_require__(17);
        var SingleEventDef = function(_super) {
            tslib_1.__extends(SingleEventDef, _super);
            function SingleEventDef() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            SingleEventDef.prototype.buildInstances = function() {
                return [ this.buildInstance() ];
            };
            SingleEventDef.prototype.buildInstance = function() {
                return new EventInstance_1.default(this, this.dateProfile);
            };
            SingleEventDef.prototype.isAllDay = function() {
                return this.dateProfile.isAllDay();
            };
            SingleEventDef.prototype.clone = function() {
                var def = _super.prototype.clone.call(this);
                def.dateProfile = this.dateProfile;
                return def;
            };
            SingleEventDef.prototype.rezone = function() {
                var calendar = this.source.calendar;
                var dateProfile = this.dateProfile;
                this.dateProfile = new EventDateProfile_1.default(calendar.moment(dateProfile.start), dateProfile.end ? calendar.moment(dateProfile.end) : null, calendar);
            };
            SingleEventDef.prototype.applyManualStandardProps = function(rawProps) {
                var superSuccess = _super.prototype.applyManualStandardProps.call(this, rawProps);
                var dateProfile = EventDateProfile_1.default.parse(rawProps, this.source);
                if (dateProfile) {
                    this.dateProfile = dateProfile;
                    if (rawProps.date != null) {
                        this.miscProps.date = rawProps.date;
                    }
                    return superSuccess;
                } else {
                    return false;
                }
            };
            return SingleEventDef;
        }(EventDef_1.default);
        exports.default = SingleEventDef;
        SingleEventDef.defineStandardProps({
            start: false,
            date: false,
            end: false,
            allDay: false
        });
    }, function(module, exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var Mixin = function() {
            function Mixin() {}
            Mixin.mixInto = function(destClass) {
                var _this = this;
                Object.getOwnPropertyNames(this.prototype).forEach(function(name) {
                    if (!destClass.prototype[name]) {
                        destClass.prototype[name] = _this.prototype[name];
                    }
                });
            };
            Mixin.mixOver = function(destClass) {
                var _this = this;
                Object.getOwnPropertyNames(this.prototype).forEach(function(name) {
                    destClass.prototype[name] = _this.prototype[name];
                });
            };
            return Mixin;
        }();
        exports.default = Mixin;
    }, function(module, exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var Interaction = function() {
            function Interaction(component) {
                this.view = component._getView();
                this.component = component;
            }
            Interaction.prototype.opt = function(name) {
                return this.view.opt(name);
            };
            Interaction.prototype.end = function() {};
            return Interaction;
        }();
        exports.default = Interaction;
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.version = "3.8.0";
        exports.internalApiVersion = 12;
        var util_1 = __webpack_require__(4);
        exports.applyAll = util_1.applyAll;
        exports.debounce = util_1.debounce;
        exports.isInt = util_1.isInt;
        exports.htmlEscape = util_1.htmlEscape;
        exports.cssToStr = util_1.cssToStr;
        exports.proxy = util_1.proxy;
        exports.capitaliseFirstLetter = util_1.capitaliseFirstLetter;
        exports.getOuterRect = util_1.getOuterRect;
        exports.getClientRect = util_1.getClientRect;
        exports.getContentRect = util_1.getContentRect;
        exports.getScrollbarWidths = util_1.getScrollbarWidths;
        exports.preventDefault = util_1.preventDefault;
        exports.parseFieldSpecs = util_1.parseFieldSpecs;
        exports.compareByFieldSpecs = util_1.compareByFieldSpecs;
        exports.compareByFieldSpec = util_1.compareByFieldSpec;
        exports.flexibleCompare = util_1.flexibleCompare;
        exports.computeGreatestUnit = util_1.computeGreatestUnit;
        exports.divideRangeByDuration = util_1.divideRangeByDuration;
        exports.divideDurationByDuration = util_1.divideDurationByDuration;
        exports.multiplyDuration = util_1.multiplyDuration;
        exports.durationHasTime = util_1.durationHasTime;
        exports.log = util_1.log;
        exports.warn = util_1.warn;
        exports.removeExact = util_1.removeExact;
        exports.intersectRects = util_1.intersectRects;
        var date_formatting_1 = __webpack_require__(47);
        exports.formatDate = date_formatting_1.formatDate;
        exports.formatRange = date_formatting_1.formatRange;
        exports.queryMostGranularFormatUnit = date_formatting_1.queryMostGranularFormatUnit;
        var locale_1 = __webpack_require__(30);
        exports.datepickerLocale = locale_1.datepickerLocale;
        exports.locale = locale_1.locale;
        var moment_ext_1 = __webpack_require__(10);
        exports.moment = moment_ext_1.default;
        var EmitterMixin_1 = __webpack_require__(11);
        exports.EmitterMixin = EmitterMixin_1.default;
        var ListenerMixin_1 = __webpack_require__(7);
        exports.ListenerMixin = ListenerMixin_1.default;
        var Model_1 = __webpack_require__(48);
        exports.Model = Model_1.default;
        var Constraints_1 = __webpack_require__(203);
        exports.Constraints = Constraints_1.default;
        var UnzonedRange_1 = __webpack_require__(5);
        exports.UnzonedRange = UnzonedRange_1.default;
        var ComponentFootprint_1 = __webpack_require__(12);
        exports.ComponentFootprint = ComponentFootprint_1.default;
        var BusinessHourGenerator_1 = __webpack_require__(208);
        exports.BusinessHourGenerator = BusinessHourGenerator_1.default;
        var EventDef_1 = __webpack_require__(33);
        exports.EventDef = EventDef_1.default;
        var EventDefMutation_1 = __webpack_require__(36);
        exports.EventDefMutation = EventDefMutation_1.default;
        var EventSourceParser_1 = __webpack_require__(37);
        exports.EventSourceParser = EventSourceParser_1.default;
        var EventSource_1 = __webpack_require__(6);
        exports.EventSource = EventSource_1.default;
        var ThemeRegistry_1 = __webpack_require__(51);
        exports.defineThemeSystem = ThemeRegistry_1.defineThemeSystem;
        var EventInstanceGroup_1 = __webpack_require__(18);
        exports.EventInstanceGroup = EventInstanceGroup_1.default;
        var ArrayEventSource_1 = __webpack_require__(52);
        exports.ArrayEventSource = ArrayEventSource_1.default;
        var FuncEventSource_1 = __webpack_require__(211);
        exports.FuncEventSource = FuncEventSource_1.default;
        var JsonFeedEventSource_1 = __webpack_require__(212);
        exports.JsonFeedEventSource = JsonFeedEventSource_1.default;
        var EventFootprint_1 = __webpack_require__(35);
        exports.EventFootprint = EventFootprint_1.default;
        var Class_1 = __webpack_require__(32);
        exports.Class = Class_1.default;
        var Mixin_1 = __webpack_require__(14);
        exports.Mixin = Mixin_1.default;
        var CoordCache_1 = __webpack_require__(53);
        exports.CoordCache = CoordCache_1.default;
        var DragListener_1 = __webpack_require__(54);
        exports.DragListener = DragListener_1.default;
        var Promise_1 = __webpack_require__(19);
        exports.Promise = Promise_1.default;
        var TaskQueue_1 = __webpack_require__(213);
        exports.TaskQueue = TaskQueue_1.default;
        var RenderQueue_1 = __webpack_require__(214);
        exports.RenderQueue = RenderQueue_1.default;
        var Scroller_1 = __webpack_require__(39);
        exports.Scroller = Scroller_1.default;
        var Theme_1 = __webpack_require__(38);
        exports.Theme = Theme_1.default;
        var DateComponent_1 = __webpack_require__(215);
        exports.DateComponent = DateComponent_1.default;
        var InteractiveDateComponent_1 = __webpack_require__(40);
        exports.InteractiveDateComponent = InteractiveDateComponent_1.default;
        var Calendar_1 = __webpack_require__(216);
        exports.Calendar = Calendar_1.default;
        var View_1 = __webpack_require__(41);
        exports.View = View_1.default;
        var ViewRegistry_1 = __webpack_require__(21);
        exports.defineView = ViewRegistry_1.defineView;
        exports.getViewConfig = ViewRegistry_1.getViewConfig;
        var DayTableMixin_1 = __webpack_require__(55);
        exports.DayTableMixin = DayTableMixin_1.default;
        var BusinessHourRenderer_1 = __webpack_require__(56);
        exports.BusinessHourRenderer = BusinessHourRenderer_1.default;
        var EventRenderer_1 = __webpack_require__(42);
        exports.EventRenderer = EventRenderer_1.default;
        var FillRenderer_1 = __webpack_require__(57);
        exports.FillRenderer = FillRenderer_1.default;
        var HelperRenderer_1 = __webpack_require__(58);
        exports.HelperRenderer = HelperRenderer_1.default;
        var ExternalDropping_1 = __webpack_require__(218);
        exports.ExternalDropping = ExternalDropping_1.default;
        var EventResizing_1 = __webpack_require__(219);
        exports.EventResizing = EventResizing_1.default;
        var EventPointing_1 = __webpack_require__(59);
        exports.EventPointing = EventPointing_1.default;
        var EventDragging_1 = __webpack_require__(220);
        exports.EventDragging = EventDragging_1.default;
        var DateSelecting_1 = __webpack_require__(221);
        exports.DateSelecting = DateSelecting_1.default;
        var StandardInteractionsMixin_1 = __webpack_require__(60);
        exports.StandardInteractionsMixin = StandardInteractionsMixin_1.default;
        var AgendaView_1 = __webpack_require__(222);
        exports.AgendaView = AgendaView_1.default;
        var TimeGrid_1 = __webpack_require__(223);
        exports.TimeGrid = TimeGrid_1.default;
        var DayGrid_1 = __webpack_require__(61);
        exports.DayGrid = DayGrid_1.default;
        var BasicView_1 = __webpack_require__(62);
        exports.BasicView = BasicView_1.default;
        var MonthView_1 = __webpack_require__(225);
        exports.MonthView = MonthView_1.default;
        var ListView_1 = __webpack_require__(226);
        exports.ListView = ListView_1.default;
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var UnzonedRange_1 = __webpack_require__(5);
        var EventDateProfile = function() {
            function EventDateProfile(start, end, calendar) {
                this.start = start;
                this.end = end || null;
                this.unzonedRange = this.buildUnzonedRange(calendar);
            }
            EventDateProfile.parse = function(rawProps, source) {
                var startInput = rawProps.start || rawProps.date;
                var endInput = rawProps.end;
                if (!startInput) {
                    return false;
                }
                var calendar = source.calendar;
                var start = calendar.moment(startInput);
                var end = endInput ? calendar.moment(endInput) : null;
                var forcedAllDay = rawProps.allDay;
                var forceEventDuration = calendar.opt("forceEventDuration");
                if (!start.isValid()) {
                    return false;
                }
                if (end && (!end.isValid() || !end.isAfter(start))) {
                    end = null;
                }
                if (forcedAllDay == null) {
                    forcedAllDay = source.allDayDefault;
                    if (forcedAllDay == null) {
                        forcedAllDay = calendar.opt("allDayDefault");
                    }
                }
                if (forcedAllDay === true) {
                    start.stripTime();
                    if (end) {
                        end.stripTime();
                    }
                } else if (forcedAllDay === false) {
                    if (!start.hasTime()) {
                        start.time(0);
                    }
                    if (end && !end.hasTime()) {
                        end.time(0);
                    }
                }
                if (!end && forceEventDuration) {
                    end = calendar.getDefaultEventEnd(!start.hasTime(), start);
                }
                return new EventDateProfile(start, end, calendar);
            };
            EventDateProfile.isStandardProp = function(propName) {
                return propName === "start" || propName === "date" || propName === "end" || propName === "allDay";
            };
            EventDateProfile.prototype.isAllDay = function() {
                return !(this.start.hasTime() || this.end && this.end.hasTime());
            };
            EventDateProfile.prototype.buildUnzonedRange = function(calendar) {
                var startMs = this.start.clone().stripZone().valueOf();
                var endMs = this.getEnd(calendar).stripZone().valueOf();
                return new UnzonedRange_1.default(startMs, endMs);
            };
            EventDateProfile.prototype.getEnd = function(calendar) {
                return this.end ? this.end.clone() : calendar.getDefaultEventEnd(this.isAllDay(), this.start);
            };
            return EventDateProfile;
        }();
        exports.default = EventDateProfile;
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var UnzonedRange_1 = __webpack_require__(5);
        var util_1 = __webpack_require__(34);
        var EventRange_1 = __webpack_require__(207);
        var EventInstanceGroup = function() {
            function EventInstanceGroup(eventInstances) {
                this.eventInstances = eventInstances || [];
            }
            EventInstanceGroup.prototype.getAllEventRanges = function(constraintRange) {
                if (constraintRange) {
                    return this.sliceNormalRenderRanges(constraintRange);
                } else {
                    return this.eventInstances.map(util_1.eventInstanceToEventRange);
                }
            };
            EventInstanceGroup.prototype.sliceRenderRanges = function(constraintRange) {
                if (this.isInverse()) {
                    return this.sliceInverseRenderRanges(constraintRange);
                } else {
                    return this.sliceNormalRenderRanges(constraintRange);
                }
            };
            EventInstanceGroup.prototype.sliceNormalRenderRanges = function(constraintRange) {
                var eventInstances = this.eventInstances;
                var i;
                var eventInstance;
                var slicedRange;
                var slicedEventRanges = [];
                for (i = 0; i < eventInstances.length; i++) {
                    eventInstance = eventInstances[i];
                    slicedRange = eventInstance.dateProfile.unzonedRange.intersect(constraintRange);
                    if (slicedRange) {
                        slicedEventRanges.push(new EventRange_1.default(slicedRange, eventInstance.def, eventInstance));
                    }
                }
                return slicedEventRanges;
            };
            EventInstanceGroup.prototype.sliceInverseRenderRanges = function(constraintRange) {
                var unzonedRanges = this.eventInstances.map(util_1.eventInstanceToUnzonedRange);
                var ownerDef = this.getEventDef();
                unzonedRanges = UnzonedRange_1.default.invertRanges(unzonedRanges, constraintRange);
                return unzonedRanges.map(function(unzonedRange) {
                    return new EventRange_1.default(unzonedRange, ownerDef);
                });
            };
            EventInstanceGroup.prototype.isInverse = function() {
                return this.getEventDef().hasInverseRendering();
            };
            EventInstanceGroup.prototype.getEventDef = function() {
                return this.explicitEventDef || this.eventInstances[0].def;
            };
            return EventInstanceGroup;
        }();
        exports.default = EventInstanceGroup;
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var $ = __webpack_require__(3);
        var PromiseStub = {
            construct: function(executor) {
                var deferred = $.Deferred();
                var promise = deferred.promise();
                if (typeof executor === "function") {
                    executor(function(val) {
                        deferred.resolve(val);
                        attachImmediatelyResolvingThen(promise, val);
                    }, function() {
                        deferred.reject();
                        attachImmediatelyRejectingThen(promise);
                    });
                }
                return promise;
            },
            resolve: function(val) {
                var deferred = $.Deferred().resolve(val);
                var promise = deferred.promise();
                attachImmediatelyResolvingThen(promise, val);
                return promise;
            },
            reject: function() {
                var deferred = $.Deferred().reject();
                var promise = deferred.promise();
                attachImmediatelyRejectingThen(promise);
                return promise;
            }
        };
        exports.default = PromiseStub;
        function attachImmediatelyResolvingThen(promise, val) {
            promise.then = function(onResolve) {
                if (typeof onResolve === "function") {
                    return PromiseStub.resolve(onResolve(val));
                }
                return promise;
            };
        }
        function attachImmediatelyRejectingThen(promise) {
            promise.then = function(onResolve, onReject) {
                if (typeof onReject === "function") {
                    onReject();
                }
                return promise;
            };
        }
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var $ = __webpack_require__(3);
        var exportHooks = __webpack_require__(16);
        var EmitterMixin_1 = __webpack_require__(11);
        var ListenerMixin_1 = __webpack_require__(7);
        exportHooks.touchMouseIgnoreWait = 500;
        var globalEmitter = null;
        var neededCount = 0;
        var GlobalEmitter = function() {
            function GlobalEmitter() {
                this.isTouching = false;
                this.mouseIgnoreDepth = 0;
            }
            GlobalEmitter.get = function() {
                if (!globalEmitter) {
                    globalEmitter = new GlobalEmitter();
                    globalEmitter.bind();
                }
                return globalEmitter;
            };
            GlobalEmitter.needed = function() {
                GlobalEmitter.get();
                neededCount++;
            };
            GlobalEmitter.unneeded = function() {
                neededCount--;
                if (!neededCount) {
                    globalEmitter.unbind();
                    globalEmitter = null;
                }
            };
            GlobalEmitter.prototype.bind = function() {
                var _this = this;
                this.listenTo($(document), {
                    touchstart: this.handleTouchStart,
                    touchcancel: this.handleTouchCancel,
                    touchend: this.handleTouchEnd,
                    mousedown: this.handleMouseDown,
                    mousemove: this.handleMouseMove,
                    mouseup: this.handleMouseUp,
                    click: this.handleClick,
                    selectstart: this.handleSelectStart,
                    contextmenu: this.handleContextMenu
                });
                window.addEventListener("touchmove", this.handleTouchMoveProxy = function(ev) {
                    _this.handleTouchMove($.Event(ev));
                }, {
                    passive: false
                });
                window.addEventListener("scroll", this.handleScrollProxy = function(ev) {
                    _this.handleScroll($.Event(ev));
                }, true);
            };
            GlobalEmitter.prototype.unbind = function() {
                this.stopListeningTo($(document));
                window.removeEventListener("touchmove", this.handleTouchMoveProxy);
                window.removeEventListener("scroll", this.handleScrollProxy, true);
            };
            GlobalEmitter.prototype.handleTouchStart = function(ev) {
                this.stopTouch(ev, true);
                this.isTouching = true;
                this.trigger("touchstart", ev);
            };
            GlobalEmitter.prototype.handleTouchMove = function(ev) {
                if (this.isTouching) {
                    this.trigger("touchmove", ev);
                }
            };
            GlobalEmitter.prototype.handleTouchCancel = function(ev) {
                if (this.isTouching) {
                    this.trigger("touchcancel", ev);
                    this.stopTouch(ev);
                }
            };
            GlobalEmitter.prototype.handleTouchEnd = function(ev) {
                this.stopTouch(ev);
            };
            GlobalEmitter.prototype.handleMouseDown = function(ev) {
                if (!this.shouldIgnoreMouse()) {
                    this.trigger("mousedown", ev);
                }
            };
            GlobalEmitter.prototype.handleMouseMove = function(ev) {
                if (!this.shouldIgnoreMouse()) {
                    this.trigger("mousemove", ev);
                }
            };
            GlobalEmitter.prototype.handleMouseUp = function(ev) {
                if (!this.shouldIgnoreMouse()) {
                    this.trigger("mouseup", ev);
                }
            };
            GlobalEmitter.prototype.handleClick = function(ev) {
                if (!this.shouldIgnoreMouse()) {
                    this.trigger("click", ev);
                }
            };
            GlobalEmitter.prototype.handleSelectStart = function(ev) {
                this.trigger("selectstart", ev);
            };
            GlobalEmitter.prototype.handleContextMenu = function(ev) {
                this.trigger("contextmenu", ev);
            };
            GlobalEmitter.prototype.handleScroll = function(ev) {
                this.trigger("scroll", ev);
            };
            GlobalEmitter.prototype.stopTouch = function(ev, skipMouseIgnore) {
                if (skipMouseIgnore === void 0) {
                    skipMouseIgnore = false;
                }
                if (this.isTouching) {
                    this.isTouching = false;
                    this.trigger("touchend", ev);
                    if (!skipMouseIgnore) {
                        this.startTouchMouseIgnore();
                    }
                }
            };
            GlobalEmitter.prototype.startTouchMouseIgnore = function() {
                var _this = this;
                var wait = exportHooks.touchMouseIgnoreWait;
                if (wait) {
                    this.mouseIgnoreDepth++;
                    setTimeout(function() {
                        _this.mouseIgnoreDepth--;
                    }, wait);
                }
            };
            GlobalEmitter.prototype.shouldIgnoreMouse = function() {
                return this.isTouching || Boolean(this.mouseIgnoreDepth);
            };
            return GlobalEmitter;
        }();
        exports.default = GlobalEmitter;
        ListenerMixin_1.default.mixInto(GlobalEmitter);
        EmitterMixin_1.default.mixInto(GlobalEmitter);
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var exportHooks = __webpack_require__(16);
        exports.viewHash = {};
        exportHooks.views = exports.viewHash;
        function defineView(viewName, viewConfig) {
            exports.viewHash[viewName] = viewConfig;
        }
        exports.defineView = defineView;
        function getViewConfig(viewName) {
            return exports.viewHash[viewName];
        }
        exports.getViewConfig = getViewConfig;
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var tslib_1 = __webpack_require__(2);
        var util_1 = __webpack_require__(4);
        var DragListener_1 = __webpack_require__(54);
        var HitDragListener = function(_super) {
            tslib_1.__extends(HitDragListener, _super);
            function HitDragListener(component, options) {
                var _this = _super.call(this, options) || this;
                _this.component = component;
                return _this;
            }
            HitDragListener.prototype.handleInteractionStart = function(ev) {
                var subjectEl = this.subjectEl;
                var subjectRect;
                var origPoint;
                var point;
                this.component.hitsNeeded();
                this.computeScrollBounds();
                if (ev) {
                    origPoint = {
                        left: util_1.getEvX(ev),
                        top: util_1.getEvY(ev)
                    };
                    point = origPoint;
                    if (subjectEl) {
                        subjectRect = util_1.getOuterRect(subjectEl);
                        point = util_1.constrainPoint(point, subjectRect);
                    }
                    this.origHit = this.queryHit(point.left, point.top);
                    if (subjectEl && this.options.subjectCenter) {
                        if (this.origHit) {
                            subjectRect = util_1.intersectRects(this.origHit, subjectRect) || subjectRect;
                        }
                        point = util_1.getRectCenter(subjectRect);
                    }
                    this.coordAdjust = util_1.diffPoints(point, origPoint);
                } else {
                    this.origHit = null;
                    this.coordAdjust = null;
                }
                _super.prototype.handleInteractionStart.call(this, ev);
            };
            HitDragListener.prototype.handleDragStart = function(ev) {
                var hit;
                _super.prototype.handleDragStart.call(this, ev);
                hit = this.queryHit(util_1.getEvX(ev), util_1.getEvY(ev));
                if (hit) {
                    this.handleHitOver(hit);
                }
            };
            HitDragListener.prototype.handleDrag = function(dx, dy, ev) {
                var hit;
                _super.prototype.handleDrag.call(this, dx, dy, ev);
                hit = this.queryHit(util_1.getEvX(ev), util_1.getEvY(ev));
                if (!isHitsEqual(hit, this.hit)) {
                    if (this.hit) {
                        this.handleHitOut();
                    }
                    if (hit) {
                        this.handleHitOver(hit);
                    }
                }
            };
            HitDragListener.prototype.handleDragEnd = function(ev) {
                this.handleHitDone();
                _super.prototype.handleDragEnd.call(this, ev);
            };
            HitDragListener.prototype.handleHitOver = function(hit) {
                var isOrig = isHitsEqual(hit, this.origHit);
                this.hit = hit;
                this.trigger("hitOver", this.hit, isOrig, this.origHit);
            };
            HitDragListener.prototype.handleHitOut = function() {
                if (this.hit) {
                    this.trigger("hitOut", this.hit);
                    this.handleHitDone();
                    this.hit = null;
                }
            };
            HitDragListener.prototype.handleHitDone = function() {
                if (this.hit) {
                    this.trigger("hitDone", this.hit);
                }
            };
            HitDragListener.prototype.handleInteractionEnd = function(ev, isCancelled) {
                _super.prototype.handleInteractionEnd.call(this, ev, isCancelled);
                this.origHit = null;
                this.hit = null;
                this.component.hitsNotNeeded();
            };
            HitDragListener.prototype.handleScrollEnd = function() {
                _super.prototype.handleScrollEnd.call(this);
                if (this.isDragging) {
                    this.component.releaseHits();
                    this.component.prepareHits();
                }
            };
            HitDragListener.prototype.queryHit = function(left, top) {
                if (this.coordAdjust) {
                    left += this.coordAdjust.left;
                    top += this.coordAdjust.top;
                }
                return this.component.queryHit(left, top);
            };
            return HitDragListener;
        }(DragListener_1.default);
        exports.default = HitDragListener;
        function isHitsEqual(hit0, hit1) {
            if (!hit0 && !hit1) {
                return true;
            }
            if (hit0 && hit1) {
                return hit0.component === hit1.component && isHitPropsWithin(hit0, hit1) && isHitPropsWithin(hit1, hit0);
            }
            return false;
        }
        function isHitPropsWithin(subHit, superHit) {
            for (var propName in subHit) {
                if (!/^(component|left|right|top|bottom)$/.test(propName)) {
                    if (subHit[propName] !== superHit[propName]) {
                        return false;
                    }
                }
            }
            return true;
        }
    }, , , , , , , , function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var $ = __webpack_require__(3);
        var moment = __webpack_require__(0);
        var exportHooks = __webpack_require__(16);
        var options_1 = __webpack_require__(31);
        var util_1 = __webpack_require__(4);
        exports.localeOptionHash = {};
        exportHooks.locales = exports.localeOptionHash;
        var dpComputableOptions = {
            buttonText: function(dpOptions) {
                return {
                    prev: util_1.stripHtmlEntities(dpOptions.prevText),
                    next: util_1.stripHtmlEntities(dpOptions.nextText),
                    today: util_1.stripHtmlEntities(dpOptions.currentText)
                };
            },
            monthYearFormat: function(dpOptions) {
                return dpOptions.showMonthAfterYear ? "YYYY[" + dpOptions.yearSuffix + "] MMMM" : "MMMM YYYY[" + dpOptions.yearSuffix + "]";
            }
        };
        var momComputableOptions = {
            dayOfMonthFormat: function(momOptions, fcOptions) {
                var format = momOptions.longDateFormat("l");
                format = format.replace(/^Y+[^\w\s]*|[^\w\s]*Y+$/g, "");
                if (fcOptions.isRTL) {
                    format += " ddd";
                } else {
                    format = "ddd " + format;
                }
                return format;
            },
            mediumTimeFormat: function(momOptions) {
                return momOptions.longDateFormat("LT").replace(/\s*a$/i, "a");
            },
            smallTimeFormat: function(momOptions) {
                return momOptions.longDateFormat("LT").replace(":mm", "(:mm)").replace(/(\Wmm)$/, "($1)").replace(/\s*a$/i, "a");
            },
            extraSmallTimeFormat: function(momOptions) {
                return momOptions.longDateFormat("LT").replace(":mm", "(:mm)").replace(/(\Wmm)$/, "($1)").replace(/\s*a$/i, "t");
            },
            hourFormat: function(momOptions) {
                return momOptions.longDateFormat("LT").replace(":mm", "").replace(/(\Wmm)$/, "").replace(/\s*a$/i, "a");
            },
            noMeridiemTimeFormat: function(momOptions) {
                return momOptions.longDateFormat("LT").replace(/\s*a$/i, "");
            }
        };
        var instanceComputableOptions = {
            smallDayDateFormat: function(options) {
                return options.isRTL ? "D dd" : "dd D";
            },
            weekFormat: function(options) {
                return options.isRTL ? "w[ " + options.weekNumberTitle + "]" : "[" + options.weekNumberTitle + " ]w";
            },
            smallWeekFormat: function(options) {
                return options.isRTL ? "w[" + options.weekNumberTitle + "]" : "[" + options.weekNumberTitle + "]w";
            }
        };
        function populateInstanceComputableOptions(options) {
            $.each(instanceComputableOptions, function(name, func) {
                if (options[name] == null) {
                    options[name] = func(options);
                }
            });
        }
        exports.populateInstanceComputableOptions = populateInstanceComputableOptions;
        function datepickerLocale(localeCode, dpLocaleCode, dpOptions) {
            var fcOptions = exports.localeOptionHash[localeCode] || (exports.localeOptionHash[localeCode] = {});
            fcOptions.isRTL = dpOptions.isRTL;
            fcOptions.weekNumberTitle = dpOptions.weekHeader;
            $.each(dpComputableOptions, function(name, func) {
                fcOptions[name] = func(dpOptions);
            });
            var jqDatePicker = $.datepicker;
            if (jqDatePicker) {
                jqDatePicker.regional[dpLocaleCode] = jqDatePicker.regional[localeCode] = dpOptions;
                jqDatePicker.regional.en = jqDatePicker.regional[""];
                jqDatePicker.setDefaults(dpOptions);
            }
        }
        exports.datepickerLocale = datepickerLocale;
        function locale(localeCode, newFcOptions) {
            var fcOptions;
            var momOptions;
            fcOptions = exports.localeOptionHash[localeCode] || (exports.localeOptionHash[localeCode] = {});
            if (newFcOptions) {
                fcOptions = exports.localeOptionHash[localeCode] = options_1.mergeOptions([ fcOptions, newFcOptions ]);
            }
            momOptions = getMomentLocaleData(localeCode);
            $.each(momComputableOptions, function(name, func) {
                if (fcOptions[name] == null) {
                    fcOptions[name] = func(momOptions, fcOptions);
                }
            });
            options_1.globalDefaults.locale = localeCode;
        }
        exports.locale = locale;
        function getMomentLocaleData(localeCode) {
            return moment.localeData(localeCode) || moment.localeData("en");
        }
        exports.getMomentLocaleData = getMomentLocaleData;
        locale("en", options_1.englishDefaults);
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var util_1 = __webpack_require__(4);
        exports.globalDefaults = {
            titleRangeSeparator: " – ",
            monthYearFormat: "MMMM YYYY",
            defaultTimedEventDuration: "02:00:00",
            defaultAllDayEventDuration: {
                days: 1
            },
            forceEventDuration: false,
            nextDayThreshold: "09:00:00",
            columnHeader: true,
            defaultView: "month",
            aspectRatio: 1.35,
            header: {
                left: "title",
                center: "",
                right: "today prev,next"
            },
            weekends: true,
            weekNumbers: false,
            weekNumberTitle: "W",
            weekNumberCalculation: "local",
            scrollTime: "06:00:00",
            minTime: "00:00:00",
            maxTime: "24:00:00",
            showNonCurrentDates: true,
            lazyFetching: true,
            startParam: "start",
            endParam: "end",
            timezoneParam: "timezone",
            timezone: false,
            locale: null,
            isRTL: false,
            buttonText: {
                prev: "prev",
                next: "next",
                prevYear: "prev year",
                nextYear: "next year",
                year: "year",
                today: "today",
                month: "month",
                week: "week",
                day: "day"
            },
            allDayText: "all-day",
            agendaEventMinHeight: 0,
            theme: false,
            dragOpacity: .75,
            dragRevertDuration: 500,
            dragScroll: true,
            unselectAuto: true,
            dropAccept: "*",
            eventOrder: "title",
            eventLimit: false,
            eventLimitText: "more",
            eventLimitClick: "popover",
            dayPopoverFormat: "LL",
            handleWindowResize: true,
            windowResizeDelay: 100,
            longPressDelay: 1e3
        };
        exports.englishDefaults = {
            dayPopoverFormat: "dddd, MMMM D"
        };
        exports.rtlDefaults = {
            header: {
                left: "next,prev today",
                center: "",
                right: "title"
            },
            buttonIcons: {
                prev: "right-single-arrow",
                next: "left-single-arrow",
                prevYear: "right-double-arrow",
                nextYear: "left-double-arrow"
            },
            themeButtonIcons: {
                prev: "circle-triangle-e",
                next: "circle-triangle-w",
                nextYear: "seek-prev",
                prevYear: "seek-next"
            }
        };
        var complexOptions = [ "header", "footer", "buttonText", "buttonIcons", "themeButtonIcons" ];
        function mergeOptions(optionObjs) {
            return util_1.mergeProps(optionObjs, complexOptions);
        }
        exports.mergeOptions = mergeOptions;
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var tslib_1 = __webpack_require__(2);
        var util_1 = __webpack_require__(4);
        var Class = function() {
            function Class() {}
            Class.extend = function(members) {
                var SubClass = function(_super) {
                    tslib_1.__extends(SubClass, _super);
                    function SubClass() {
                        return _super !== null && _super.apply(this, arguments) || this;
                    }
                    return SubClass;
                }(this);
                util_1.copyOwnProps(members, SubClass.prototype);
                return SubClass;
            };
            Class.mixin = function(members) {
                util_1.copyOwnProps(members, this.prototype);
            };
            return Class;
        }();
        exports.default = Class;
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var $ = __webpack_require__(3);
        var ParsableModelMixin_1 = __webpack_require__(204);
        var EventDef = function() {
            function EventDef(source) {
                this.source = source;
                this.className = [];
                this.miscProps = {};
            }
            EventDef.parse = function(rawInput, source) {
                var def = new this(source);
                if (def.applyProps(rawInput)) {
                    return def;
                }
                return false;
            };
            EventDef.normalizeId = function(id) {
                return String(id);
            };
            EventDef.generateId = function() {
                return "_fc" + EventDef.uuid++;
            };
            EventDef.prototype.clone = function() {
                var copy = new this.constructor(this.source);
                copy.id = this.id;
                copy.rawId = this.rawId;
                copy.uid = this.uid;
                EventDef.copyVerbatimStandardProps(this, copy);
                copy.className = this.className.slice();
                copy.miscProps = $.extend({}, this.miscProps);
                return copy;
            };
            EventDef.prototype.hasInverseRendering = function() {
                return this.getRendering() === "inverse-background";
            };
            EventDef.prototype.hasBgRendering = function() {
                var rendering = this.getRendering();
                return rendering === "inverse-background" || rendering === "background";
            };
            EventDef.prototype.getRendering = function() {
                if (this.rendering != null) {
                    return this.rendering;
                }
                return this.source.rendering;
            };
            EventDef.prototype.getConstraint = function() {
                if (this.constraint != null) {
                    return this.constraint;
                }
                if (this.source.constraint != null) {
                    return this.source.constraint;
                }
                return this.source.calendar.opt("eventConstraint");
            };
            EventDef.prototype.getOverlap = function() {
                if (this.overlap != null) {
                    return this.overlap;
                }
                if (this.source.overlap != null) {
                    return this.source.overlap;
                }
                return this.source.calendar.opt("eventOverlap");
            };
            EventDef.prototype.isStartExplicitlyEditable = function() {
                if (this.startEditable != null) {
                    return this.startEditable;
                }
                return this.source.startEditable;
            };
            EventDef.prototype.isDurationExplicitlyEditable = function() {
                if (this.durationEditable != null) {
                    return this.durationEditable;
                }
                return this.source.durationEditable;
            };
            EventDef.prototype.isExplicitlyEditable = function() {
                if (this.editable != null) {
                    return this.editable;
                }
                return this.source.editable;
            };
            EventDef.prototype.toLegacy = function() {
                var obj = $.extend({}, this.miscProps);
                obj._id = this.uid;
                obj.source = this.source;
                obj.className = this.className.slice();
                obj.allDay = this.isAllDay();
                if (this.rawId != null) {
                    obj.id = this.rawId;
                }
                EventDef.copyVerbatimStandardProps(this, obj);
                return obj;
            };
            EventDef.prototype.applyManualStandardProps = function(rawProps) {
                if (rawProps.id != null) {
                    this.id = EventDef.normalizeId(this.rawId = rawProps.id);
                } else {
                    this.id = EventDef.generateId();
                }
                if (rawProps._id != null) {
                    this.uid = String(rawProps._id);
                } else {
                    this.uid = EventDef.generateId();
                }
                if ($.isArray(rawProps.className)) {
                    this.className = rawProps.className;
                }
                if (typeof rawProps.className === "string") {
                    this.className = rawProps.className.split(/\s+/);
                }
                return true;
            };
            EventDef.prototype.applyMiscProps = function(rawProps) {
                $.extend(this.miscProps, rawProps);
            };
            EventDef.uuid = 0;
            EventDef.defineStandardProps = ParsableModelMixin_1.default.defineStandardProps;
            EventDef.copyVerbatimStandardProps = ParsableModelMixin_1.default.copyVerbatimStandardProps;
            return EventDef;
        }();
        exports.default = EventDef;
        ParsableModelMixin_1.default.mixInto(EventDef);
        EventDef.defineStandardProps({
            _id: false,
            id: false,
            className: false,
            source: false,
            title: true,
            url: true,
            rendering: true,
            constraint: true,
            overlap: true,
            editable: true,
            startEditable: true,
            durationEditable: true,
            color: true,
            backgroundColor: true,
            borderColor: true,
            textColor: true
        });
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var EventRange_1 = __webpack_require__(207);
        var EventFootprint_1 = __webpack_require__(35);
        var ComponentFootprint_1 = __webpack_require__(12);
        function eventDefsToEventInstances(eventDefs, unzonedRange) {
            var eventInstances = [];
            var i;
            for (i = 0; i < eventDefs.length; i++) {
                eventInstances.push.apply(eventInstances, eventDefs[i].buildInstances(unzonedRange));
            }
            return eventInstances;
        }
        exports.eventDefsToEventInstances = eventDefsToEventInstances;
        function eventInstanceToEventRange(eventInstance) {
            return new EventRange_1.default(eventInstance.dateProfile.unzonedRange, eventInstance.def, eventInstance);
        }
        exports.eventInstanceToEventRange = eventInstanceToEventRange;
        function eventRangeToEventFootprint(eventRange) {
            return new EventFootprint_1.default(new ComponentFootprint_1.default(eventRange.unzonedRange, eventRange.eventDef.isAllDay()), eventRange.eventDef, eventRange.eventInstance);
        }
        exports.eventRangeToEventFootprint = eventRangeToEventFootprint;
        function eventInstanceToUnzonedRange(eventInstance) {
            return eventInstance.dateProfile.unzonedRange;
        }
        exports.eventInstanceToUnzonedRange = eventInstanceToUnzonedRange;
        function eventFootprintToComponentFootprint(eventFootprint) {
            return eventFootprint.componentFootprint;
        }
        exports.eventFootprintToComponentFootprint = eventFootprintToComponentFootprint;
    }, function(module, exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var EventFootprint = function() {
            function EventFootprint(componentFootprint, eventDef, eventInstance) {
                this.componentFootprint = componentFootprint;
                this.eventDef = eventDef;
                if (eventInstance) {
                    this.eventInstance = eventInstance;
                }
            }
            EventFootprint.prototype.getEventLegacy = function() {
                return (this.eventInstance || this.eventDef).toLegacy();
            };
            return EventFootprint;
        }();
        exports.default = EventFootprint;
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var util_1 = __webpack_require__(4);
        var EventDateProfile_1 = __webpack_require__(17);
        var EventDef_1 = __webpack_require__(33);
        var EventDefDateMutation_1 = __webpack_require__(50);
        var SingleEventDef_1 = __webpack_require__(13);
        var EventDefMutation = function() {
            function EventDefMutation() {}
            EventDefMutation.createFromRawProps = function(eventInstance, rawProps, largeUnit) {
                var eventDef = eventInstance.def;
                var dateProps = {};
                var standardProps = {};
                var miscProps = {};
                var verbatimStandardProps = {};
                var eventDefId = null;
                var className = null;
                var propName;
                var dateProfile;
                var dateMutation;
                var defMutation;
                for (propName in rawProps) {
                    if (EventDateProfile_1.default.isStandardProp(propName)) {
                        dateProps[propName] = rawProps[propName];
                    } else if (eventDef.isStandardProp(propName)) {
                        standardProps[propName] = rawProps[propName];
                    } else if (eventDef.miscProps[propName] !== rawProps[propName]) {
                        miscProps[propName] = rawProps[propName];
                    }
                }
                dateProfile = EventDateProfile_1.default.parse(dateProps, eventDef.source);
                if (dateProfile) {
                    dateMutation = EventDefDateMutation_1.default.createFromDiff(eventInstance.dateProfile, dateProfile, largeUnit);
                }
                if (standardProps.id !== eventDef.id) {
                    eventDefId = standardProps.id;
                }
                if (!util_1.isArraysEqual(standardProps.className, eventDef.className)) {
                    className = standardProps.className;
                }
                EventDef_1.default.copyVerbatimStandardProps(standardProps, verbatimStandardProps);
                defMutation = new EventDefMutation();
                defMutation.eventDefId = eventDefId;
                defMutation.className = className;
                defMutation.verbatimStandardProps = verbatimStandardProps;
                defMutation.miscProps = miscProps;
                if (dateMutation) {
                    defMutation.dateMutation = dateMutation;
                }
                return defMutation;
            };
            EventDefMutation.prototype.mutateSingle = function(eventDef) {
                var origDateProfile;
                if (this.dateMutation) {
                    origDateProfile = eventDef.dateProfile;
                    eventDef.dateProfile = this.dateMutation.buildNewDateProfile(origDateProfile, eventDef.source.calendar);
                }
                if (this.eventDefId != null) {
                    eventDef.id = EventDef_1.default.normalizeId(eventDef.rawId = this.eventDefId);
                }
                if (this.className) {
                    eventDef.className = this.className;
                }
                if (this.verbatimStandardProps) {
                    SingleEventDef_1.default.copyVerbatimStandardProps(this.verbatimStandardProps, eventDef);
                }
                if (this.miscProps) {
                    eventDef.applyMiscProps(this.miscProps);
                }
                if (origDateProfile) {
                    return function() {
                        eventDef.dateProfile = origDateProfile;
                    };
                } else {
                    return function() {};
                }
            };
            EventDefMutation.prototype.setDateMutation = function(dateMutation) {
                if (dateMutation && !dateMutation.isEmpty()) {
                    this.dateMutation = dateMutation;
                } else {
                    this.dateMutation = null;
                }
            };
            EventDefMutation.prototype.isEmpty = function() {
                return !this.dateMutation;
            };
            return EventDefMutation;
        }();
        exports.default = EventDefMutation;
    }, function(module, exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = {
            sourceClasses: [],
            registerClass: function(EventSourceClass) {
                this.sourceClasses.unshift(EventSourceClass);
            },
            parse: function(rawInput, calendar) {
                var sourceClasses = this.sourceClasses;
                var i;
                var eventSource;
                for (i = 0; i < sourceClasses.length; i++) {
                    eventSource = sourceClasses[i].parse(rawInput, calendar);
                    if (eventSource) {
                        return eventSource;
                    }
                }
            }
        };
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var $ = __webpack_require__(3);
        var Theme = function() {
            function Theme(optionsManager) {
                this.optionsManager = optionsManager;
                this.processIconOverride();
            }
            Theme.prototype.processIconOverride = function() {
                if (this.iconOverrideOption) {
                    this.setIconOverride(this.optionsManager.get(this.iconOverrideOption));
                }
            };
            Theme.prototype.setIconOverride = function(iconOverrideHash) {
                var iconClassesCopy;
                var buttonName;
                if ($.isPlainObject(iconOverrideHash)) {
                    iconClassesCopy = $.extend({}, this.iconClasses);
                    for (buttonName in iconOverrideHash) {
                        iconClassesCopy[buttonName] = this.applyIconOverridePrefix(iconOverrideHash[buttonName]);
                    }
                    this.iconClasses = iconClassesCopy;
                } else if (iconOverrideHash === false) {
                    this.iconClasses = {};
                }
            };
            Theme.prototype.applyIconOverridePrefix = function(className) {
                var prefix = this.iconOverridePrefix;
                if (prefix && className.indexOf(prefix) !== 0) {
                    className = prefix + className;
                }
                return className;
            };
            Theme.prototype.getClass = function(key) {
                return this.classes[key] || "";
            };
            Theme.prototype.getIconClass = function(buttonName) {
                var className = this.iconClasses[buttonName];
                if (className) {
                    return this.baseIconClass + " " + className;
                }
                return "";
            };
            Theme.prototype.getCustomButtonIconClass = function(customButtonProps) {
                var className;
                if (this.iconOverrideCustomButtonOption) {
                    className = customButtonProps[this.iconOverrideCustomButtonOption];
                    if (className) {
                        return this.baseIconClass + " " + this.applyIconOverridePrefix(className);
                    }
                }
                return "";
            };
            return Theme;
        }();
        exports.default = Theme;
        Theme.prototype.classes = {};
        Theme.prototype.iconClasses = {};
        Theme.prototype.baseIconClass = "";
        Theme.prototype.iconOverridePrefix = "";
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var tslib_1 = __webpack_require__(2);
        var $ = __webpack_require__(3);
        var util_1 = __webpack_require__(4);
        var Class_1 = __webpack_require__(32);
        var Scroller = function(_super) {
            tslib_1.__extends(Scroller, _super);
            function Scroller(options) {
                var _this = _super.call(this) || this;
                options = options || {};
                _this.overflowX = options.overflowX || options.overflow || "auto";
                _this.overflowY = options.overflowY || options.overflow || "auto";
                return _this;
            }
            Scroller.prototype.render = function() {
                this.el = this.renderEl();
                this.applyOverflow();
            };
            Scroller.prototype.renderEl = function() {
                return this.scrollEl = $('<div class="fc-scroller"></div>');
            };
            Scroller.prototype.clear = function() {
                this.setHeight("auto");
                this.applyOverflow();
            };
            Scroller.prototype.destroy = function() {
                this.el.remove();
            };
            Scroller.prototype.applyOverflow = function() {
                this.scrollEl.css({
                    "overflow-x": this.overflowX,
                    "overflow-y": this.overflowY
                });
            };
            Scroller.prototype.lockOverflow = function(scrollbarWidths) {
                var overflowX = this.overflowX;
                var overflowY = this.overflowY;
                scrollbarWidths = scrollbarWidths || this.getScrollbarWidths();
                if (overflowX === "auto") {
                    overflowX = scrollbarWidths.top || scrollbarWidths.bottom || this.scrollEl[0].scrollWidth - 1 > this.scrollEl[0].clientWidth ? "scroll" : "hidden";
                }
                if (overflowY === "auto") {
                    overflowY = scrollbarWidths.left || scrollbarWidths.right || this.scrollEl[0].scrollHeight - 1 > this.scrollEl[0].clientHeight ? "scroll" : "hidden";
                }
                this.scrollEl.css({
                    "overflow-x": overflowX,
                    "overflow-y": overflowY
                });
            };
            Scroller.prototype.setHeight = function(height) {
                this.scrollEl.height(height);
            };
            Scroller.prototype.getScrollTop = function() {
                return this.scrollEl.scrollTop();
            };
            Scroller.prototype.setScrollTop = function(top) {
                this.scrollEl.scrollTop(top);
            };
            Scroller.prototype.getClientWidth = function() {
                return this.scrollEl[0].clientWidth;
            };
            Scroller.prototype.getClientHeight = function() {
                return this.scrollEl[0].clientHeight;
            };
            Scroller.prototype.getScrollbarWidths = function() {
                return util_1.getScrollbarWidths(this.scrollEl);
            };
            return Scroller;
        }(Class_1.default);
        exports.default = Scroller;
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var tslib_1 = __webpack_require__(2);
        var $ = __webpack_require__(3);
        var util_1 = __webpack_require__(4);
        var DateComponent_1 = __webpack_require__(215);
        var GlobalEmitter_1 = __webpack_require__(20);
        var InteractiveDateComponent = function(_super) {
            tslib_1.__extends(InteractiveDateComponent, _super);
            function InteractiveDateComponent(_view, _options) {
                var _this = _super.call(this, _view, _options) || this;
                _this.segSelector = ".fc-event-container > *";
                if (_this.dateSelectingClass) {
                    _this.dateClicking = new _this.dateClickingClass(_this);
                }
                if (_this.dateSelectingClass) {
                    _this.dateSelecting = new _this.dateSelectingClass(_this);
                }
                if (_this.eventPointingClass) {
                    _this.eventPointing = new _this.eventPointingClass(_this);
                }
                if (_this.eventDraggingClass && _this.eventPointing) {
                    _this.eventDragging = new _this.eventDraggingClass(_this, _this.eventPointing);
                }
                if (_this.eventResizingClass && _this.eventPointing) {
                    _this.eventResizing = new _this.eventResizingClass(_this, _this.eventPointing);
                }
                if (_this.externalDroppingClass) {
                    _this.externalDropping = new _this.externalDroppingClass(_this);
                }
                return _this;
            }
            InteractiveDateComponent.prototype.setElement = function(el) {
                _super.prototype.setElement.call(this, el);
                if (this.dateClicking) {
                    this.dateClicking.bindToEl(el);
                }
                if (this.dateSelecting) {
                    this.dateSelecting.bindToEl(el);
                }
                this.bindAllSegHandlersToEl(el);
            };
            InteractiveDateComponent.prototype.removeElement = function() {
                this.endInteractions();
                _super.prototype.removeElement.call(this);
            };
            InteractiveDateComponent.prototype.executeEventUnrender = function() {
                this.endInteractions();
                _super.prototype.executeEventUnrender.call(this);
            };
            InteractiveDateComponent.prototype.bindGlobalHandlers = function() {
                _super.prototype.bindGlobalHandlers.call(this);
                if (this.externalDropping) {
                    this.externalDropping.bindToDocument();
                }
            };
            InteractiveDateComponent.prototype.unbindGlobalHandlers = function() {
                _super.prototype.unbindGlobalHandlers.call(this);
                if (this.externalDropping) {
                    this.externalDropping.unbindFromDocument();
                }
            };
            InteractiveDateComponent.prototype.bindDateHandlerToEl = function(el, name, handler) {
                var _this = this;
                this.el.on(name, function(ev) {
                    if (!$(ev.target).is(_this.segSelector + "," + _this.segSelector + " *," + ".fc-more," + "a[data-goto]")) {
                        return handler.call(_this, ev);
                    }
                });
            };
            InteractiveDateComponent.prototype.bindAllSegHandlersToEl = function(el) {
                [ this.eventPointing, this.eventDragging, this.eventResizing ].forEach(function(eventInteraction) {
                    if (eventInteraction) {
                        eventInteraction.bindToEl(el);
                    }
                });
            };
            InteractiveDateComponent.prototype.bindSegHandlerToEl = function(el, name, handler) {
                var _this = this;
                el.on(name, this.segSelector, function(ev) {
                    var seg = $(ev.currentTarget).data("fc-seg");
                    if (seg && !_this.shouldIgnoreEventPointing()) {
                        return handler.call(_this, seg, ev);
                    }
                });
            };
            InteractiveDateComponent.prototype.shouldIgnoreMouse = function() {
                return GlobalEmitter_1.default.get().shouldIgnoreMouse();
            };
            InteractiveDateComponent.prototype.shouldIgnoreTouch = function() {
                var view = this._getView();
                return view.isSelected || view.selectedEvent;
            };
            InteractiveDateComponent.prototype.shouldIgnoreEventPointing = function() {
                return this.eventDragging && this.eventDragging.isDragging || this.eventResizing && this.eventResizing.isResizing;
            };
            InteractiveDateComponent.prototype.canStartSelection = function(seg, ev) {
                return util_1.getEvIsTouch(ev) && !this.canStartResize(seg, ev) && (this.isEventDefDraggable(seg.footprint.eventDef) || this.isEventDefResizable(seg.footprint.eventDef));
            };
            InteractiveDateComponent.prototype.canStartDrag = function(seg, ev) {
                return !this.canStartResize(seg, ev) && this.isEventDefDraggable(seg.footprint.eventDef);
            };
            InteractiveDateComponent.prototype.canStartResize = function(seg, ev) {
                var view = this._getView();
                var eventDef = seg.footprint.eventDef;
                return (!util_1.getEvIsTouch(ev) || view.isEventDefSelected(eventDef)) && this.isEventDefResizable(eventDef) && $(ev.target).is(".fc-resizer");
            };
            InteractiveDateComponent.prototype.endInteractions = function() {
                [ this.dateClicking, this.dateSelecting, this.eventPointing, this.eventDragging, this.eventResizing ].forEach(function(interaction) {
                    if (interaction) {
                        interaction.end();
                    }
                });
            };
            InteractiveDateComponent.prototype.isEventDefDraggable = function(eventDef) {
                return this.isEventDefStartEditable(eventDef);
            };
            InteractiveDateComponent.prototype.isEventDefStartEditable = function(eventDef) {
                var isEditable = eventDef.isStartExplicitlyEditable();
                if (isEditable == null) {
                    isEditable = this.opt("eventStartEditable");
                    if (isEditable == null) {
                        isEditable = this.isEventDefGenerallyEditable(eventDef);
                    }
                }
                return isEditable;
            };
            InteractiveDateComponent.prototype.isEventDefGenerallyEditable = function(eventDef) {
                var isEditable = eventDef.isExplicitlyEditable();
                if (isEditable == null) {
                    isEditable = this.opt("editable");
                }
                return isEditable;
            };
            InteractiveDateComponent.prototype.isEventDefResizableFromStart = function(eventDef) {
                return this.opt("eventResizableFromStart") && this.isEventDefResizable(eventDef);
            };
            InteractiveDateComponent.prototype.isEventDefResizableFromEnd = function(eventDef) {
                return this.isEventDefResizable(eventDef);
            };
            InteractiveDateComponent.prototype.isEventDefResizable = function(eventDef) {
                var isResizable = eventDef.isDurationExplicitlyEditable();
                if (isResizable == null) {
                    isResizable = this.opt("eventDurationEditable");
                    if (isResizable == null) {
                        isResizable = this.isEventDefGenerallyEditable(eventDef);
                    }
                }
                return isResizable;
            };
            InteractiveDateComponent.prototype.diffDates = function(a, b) {
                if (this.largeUnit) {
                    return util_1.diffByUnit(a, b, this.largeUnit);
                } else {
                    return util_1.diffDayTime(a, b);
                }
            };
            InteractiveDateComponent.prototype.isEventInstanceGroupAllowed = function(eventInstanceGroup) {
                var view = this._getView();
                var dateProfile = this.dateProfile;
                var eventFootprints = this.eventRangesToEventFootprints(eventInstanceGroup.getAllEventRanges());
                var i;
                for (i = 0; i < eventFootprints.length; i++) {
                    if (!dateProfile.validUnzonedRange.containsRange(eventFootprints[i].componentFootprint.unzonedRange)) {
                        return false;
                    }
                }
                return view.calendar.constraints.isEventInstanceGroupAllowed(eventInstanceGroup);
            };
            InteractiveDateComponent.prototype.isExternalInstanceGroupAllowed = function(eventInstanceGroup) {
                var view = this._getView();
                var dateProfile = this.dateProfile;
                var eventFootprints = this.eventRangesToEventFootprints(eventInstanceGroup.getAllEventRanges());
                var i;
                for (i = 0; i < eventFootprints.length; i++) {
                    if (!dateProfile.validUnzonedRange.containsRange(eventFootprints[i].componentFootprint.unzonedRange)) {
                        return false;
                    }
                }
                for (i = 0; i < eventFootprints.length; i++) {
                    if (!view.calendar.constraints.isSelectionFootprintAllowed(eventFootprints[i].componentFootprint)) {
                        return false;
                    }
                }
                return true;
            };
            return InteractiveDateComponent;
        }(DateComponent_1.default);
        exports.default = InteractiveDateComponent;
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var tslib_1 = __webpack_require__(2);
        var $ = __webpack_require__(3);
        var moment = __webpack_require__(0);
        var util_1 = __webpack_require__(4);
        var RenderQueue_1 = __webpack_require__(214);
        var DateProfileGenerator_1 = __webpack_require__(217);
        var InteractiveDateComponent_1 = __webpack_require__(40);
        var GlobalEmitter_1 = __webpack_require__(20);
        var UnzonedRange_1 = __webpack_require__(5);
        var View = function(_super) {
            tslib_1.__extends(View, _super);
            function View(calendar, viewSpec) {
                var _this = _super.call(this, null, viewSpec.options) || this;
                _this.batchRenderDepth = 0;
                _this.isSelected = false;
                _this.calendar = calendar;
                _this.viewSpec = viewSpec;
                _this.type = viewSpec.type;
                _this.name = _this.type;
                _this.initRenderQueue();
                _this.initHiddenDays();
                _this.dateProfileGenerator = new _this.dateProfileGeneratorClass(_this);
                _this.bindBaseRenderHandlers();
                _this.eventOrderSpecs = util_1.parseFieldSpecs(_this.opt("eventOrder"));
                if (_this["initialize"]) {
                    _this["initialize"]();
                }
                return _this;
            }
            View.prototype._getView = function() {
                return this;
            };
            View.prototype.opt = function(name) {
                return this.options[name];
            };
            View.prototype.initRenderQueue = function() {
                this.renderQueue = new RenderQueue_1.default({
                    event: this.opt("eventRenderWait")
                });
                this.renderQueue.on("start", this.onRenderQueueStart.bind(this));
                this.renderQueue.on("stop", this.onRenderQueueStop.bind(this));
                this.on("before:change", this.startBatchRender);
                this.on("change", this.stopBatchRender);
            };
            View.prototype.onRenderQueueStart = function() {
                this.calendar.freezeContentHeight();
                this.addScroll(this.queryScroll());
            };
            View.prototype.onRenderQueueStop = function() {
                if (this.calendar.updateViewSize()) {
                    this.popScroll();
                }
                this.calendar.thawContentHeight();
            };
            View.prototype.startBatchRender = function() {
                if (!this.batchRenderDepth++) {
                    this.renderQueue.pause();
                }
            };
            View.prototype.stopBatchRender = function() {
                if (!--this.batchRenderDepth) {
                    this.renderQueue.resume();
                }
            };
            View.prototype.requestRender = function(func, namespace, actionType) {
                this.renderQueue.queue(func, namespace, actionType);
            };
            View.prototype.whenSizeUpdated = function(func) {
                if (this.renderQueue.isRunning) {
                    this.renderQueue.one("stop", func.bind(this));
                } else {
                    func.call(this);
                }
            };
            View.prototype.computeTitle = function(dateProfile) {
                var unzonedRange;
                if (/^(year|month)$/.test(dateProfile.currentRangeUnit)) {
                    unzonedRange = dateProfile.currentUnzonedRange;
                } else {
                    unzonedRange = dateProfile.activeUnzonedRange;
                }
                return this.formatRange({
                    start: this.calendar.msToMoment(unzonedRange.startMs, dateProfile.isRangeAllDay),
                    end: this.calendar.msToMoment(unzonedRange.endMs, dateProfile.isRangeAllDay)
                }, dateProfile.isRangeAllDay, this.opt("titleFormat") || this.computeTitleFormat(dateProfile), this.opt("titleRangeSeparator"));
            };
            View.prototype.computeTitleFormat = function(dateProfile) {
                var currentRangeUnit = dateProfile.currentRangeUnit;
                if (currentRangeUnit === "year") {
                    return "YYYY";
                } else if (currentRangeUnit === "month") {
                    return this.opt("monthYearFormat");
                } else if (dateProfile.currentUnzonedRange.as("days") > 1) {
                    return "ll";
                } else {
                    return "LL";
                }
            };
            View.prototype.setDate = function(date) {
                var currentDateProfile = this.get("dateProfile");
                var newDateProfile = this.dateProfileGenerator.build(date, undefined, true);
                if (!currentDateProfile || !currentDateProfile.activeUnzonedRange.equals(newDateProfile.activeUnzonedRange)) {
                    this.set("dateProfile", newDateProfile);
                }
            };
            View.prototype.unsetDate = function() {
                this.unset("dateProfile");
            };
            View.prototype.fetchInitialEvents = function(dateProfile) {
                var calendar = this.calendar;
                var forceAllDay = dateProfile.isRangeAllDay && !this.usesMinMaxTime;
                return calendar.requestEvents(calendar.msToMoment(dateProfile.activeUnzonedRange.startMs, forceAllDay), calendar.msToMoment(dateProfile.activeUnzonedRange.endMs, forceAllDay));
            };
            View.prototype.bindEventChanges = function() {
                this.listenTo(this.calendar, "eventsReset", this.resetEvents);
            };
            View.prototype.unbindEventChanges = function() {
                this.stopListeningTo(this.calendar, "eventsReset");
            };
            View.prototype.setEvents = function(eventsPayload) {
                this.set("currentEvents", eventsPayload);
                this.set("hasEvents", true);
            };
            View.prototype.unsetEvents = function() {
                this.unset("currentEvents");
                this.unset("hasEvents");
            };
            View.prototype.resetEvents = function(eventsPayload) {
                this.startBatchRender();
                this.unsetEvents();
                this.setEvents(eventsPayload);
                this.stopBatchRender();
            };
            View.prototype.requestDateRender = function(dateProfile) {
                var _this = this;
                this.requestRender(function() {
                    _this.executeDateRender(dateProfile);
                }, "date", "init");
            };
            View.prototype.requestDateUnrender = function() {
                var _this = this;
                this.requestRender(function() {
                    _this.executeDateUnrender();
                }, "date", "destroy");
            };
            View.prototype.executeDateRender = function(dateProfile) {
                _super.prototype.executeDateRender.call(this, dateProfile);
                if (this["render"]) {
                    this["render"]();
                }
                this.trigger("datesRendered");
                this.addScroll({
                    isDateInit: true
                });
                this.startNowIndicator();
            };
            View.prototype.executeDateUnrender = function() {
                this.unselect();
                this.stopNowIndicator();
                this.trigger("before:datesUnrendered");
                if (this["destroy"]) {
                    this["destroy"]();
                }
                _super.prototype.executeDateUnrender.call(this);
            };
            View.prototype.bindBaseRenderHandlers = function() {
                var _this = this;
                this.on("datesRendered", function() {
                    _this.whenSizeUpdated(_this.triggerViewRender);
                });
                this.on("before:datesUnrendered", function() {
                    _this.triggerViewDestroy();
                });
            };
            View.prototype.triggerViewRender = function() {
                this.publiclyTrigger("viewRender", {
                    context: this,
                    args: [ this, this.el ]
                });
            };
            View.prototype.triggerViewDestroy = function() {
                this.publiclyTrigger("viewDestroy", {
                    context: this,
                    args: [ this, this.el ]
                });
            };
            View.prototype.requestEventsRender = function(eventsPayload) {
                var _this = this;
                this.requestRender(function() {
                    _this.executeEventRender(eventsPayload);
                    _this.whenSizeUpdated(_this.triggerAfterEventsRendered);
                }, "event", "init");
            };
            View.prototype.requestEventsUnrender = function() {
                var _this = this;
                this.requestRender(function() {
                    _this.triggerBeforeEventsDestroyed();
                    _this.executeEventUnrender();
                }, "event", "destroy");
            };
            View.prototype.requestBusinessHoursRender = function(businessHourGenerator) {
                var _this = this;
                this.requestRender(function() {
                    _this.renderBusinessHours(businessHourGenerator);
                }, "businessHours", "init");
            };
            View.prototype.requestBusinessHoursUnrender = function() {
                var _this = this;
                this.requestRender(function() {
                    _this.unrenderBusinessHours();
                }, "businessHours", "destroy");
            };
            View.prototype.bindGlobalHandlers = function() {
                _super.prototype.bindGlobalHandlers.call(this);
                this.listenTo(GlobalEmitter_1.default.get(), {
                    touchstart: this.processUnselect,
                    mousedown: this.handleDocumentMousedown
                });
            };
            View.prototype.unbindGlobalHandlers = function() {
                _super.prototype.unbindGlobalHandlers.call(this);
                this.stopListeningTo(GlobalEmitter_1.default.get());
            };
            View.prototype.startNowIndicator = function() {
                var _this = this;
                var unit;
                var update;
                var delay;
                if (this.opt("nowIndicator")) {
                    unit = this.getNowIndicatorUnit();
                    if (unit) {
                        update = util_1.proxy(this, "updateNowIndicator");
                        this.initialNowDate = this.calendar.getNow();
                        this.initialNowQueriedMs = new Date().valueOf();
                        delay = this.initialNowDate.clone().startOf(unit).add(1, unit).valueOf() - this.initialNowDate.valueOf();
                        this.nowIndicatorTimeoutID = setTimeout(function() {
                            _this.nowIndicatorTimeoutID = null;
                            update();
                            delay = +moment.duration(1, unit);
                            delay = Math.max(100, delay);
                            _this.nowIndicatorIntervalID = setInterval(update, delay);
                        }, delay);
                    }
                }
            };
            View.prototype.updateNowIndicator = function() {
                if (this.isDatesRendered && this.initialNowDate) {
                    this.unrenderNowIndicator();
                    this.renderNowIndicator(this.initialNowDate.clone().add(new Date().valueOf() - this.initialNowQueriedMs));
                    this.isNowIndicatorRendered = true;
                }
            };
            View.prototype.stopNowIndicator = function() {
                if (this.isNowIndicatorRendered) {
                    if (this.nowIndicatorTimeoutID) {
                        clearTimeout(this.nowIndicatorTimeoutID);
                        this.nowIndicatorTimeoutID = null;
                    }
                    if (this.nowIndicatorIntervalID) {
                        clearInterval(this.nowIndicatorIntervalID);
                        this.nowIndicatorIntervalID = null;
                    }
                    this.unrenderNowIndicator();
                    this.isNowIndicatorRendered = false;
                }
            };
            View.prototype.updateSize = function(totalHeight, isAuto, isResize) {
                if (this["setHeight"]) {
                    this["setHeight"](totalHeight, isAuto);
                } else {
                    _super.prototype.updateSize.call(this, totalHeight, isAuto, isResize);
                }
                this.updateNowIndicator();
            };
            View.prototype.addScroll = function(scroll) {
                var queuedScroll = this.queuedScroll || (this.queuedScroll = {});
                $.extend(queuedScroll, scroll);
            };
            View.prototype.popScroll = function() {
                this.applyQueuedScroll();
                this.queuedScroll = null;
            };
            View.prototype.applyQueuedScroll = function() {
                if (this.queuedScroll) {
                    this.applyScroll(this.queuedScroll);
                }
            };
            View.prototype.queryScroll = function() {
                var scroll = {};
                if (this.isDatesRendered) {
                    $.extend(scroll, this.queryDateScroll());
                }
                return scroll;
            };
            View.prototype.applyScroll = function(scroll) {
                if (scroll.isDateInit && this.isDatesRendered) {
                    $.extend(scroll, this.computeInitialDateScroll());
                }
                if (this.isDatesRendered) {
                    this.applyDateScroll(scroll);
                }
            };
            View.prototype.computeInitialDateScroll = function() {
                return {};
            };
            View.prototype.queryDateScroll = function() {
                return {};
            };
            View.prototype.applyDateScroll = function(scroll) {};
            View.prototype.reportEventDrop = function(eventInstance, eventMutation, el, ev) {
                var eventManager = this.calendar.eventManager;
                var undoFunc = eventManager.mutateEventsWithId(eventInstance.def.id, eventMutation);
                var dateMutation = eventMutation.dateMutation;
                if (dateMutation) {
                    eventInstance.dateProfile = dateMutation.buildNewDateProfile(eventInstance.dateProfile, this.calendar);
                }
                this.triggerEventDrop(eventInstance, dateMutation && dateMutation.dateDelta || moment.duration(), undoFunc, el, ev);
            };
            View.prototype.triggerEventDrop = function(eventInstance, dateDelta, undoFunc, el, ev) {
                this.publiclyTrigger("eventDrop", {
                    context: el[0],
                    args: [ eventInstance.toLegacy(), dateDelta, undoFunc, ev, {}, this ]
                });
            };
            View.prototype.reportExternalDrop = function(singleEventDef, isEvent, isSticky, el, ev, ui) {
                if (isEvent) {
                    this.calendar.eventManager.addEventDef(singleEventDef, isSticky);
                }
                this.triggerExternalDrop(singleEventDef, isEvent, el, ev, ui);
            };
            View.prototype.triggerExternalDrop = function(singleEventDef, isEvent, el, ev, ui) {
                this.publiclyTrigger("drop", {
                    context: el[0],
                    args: [ singleEventDef.dateProfile.start.clone(), ev, ui, this ]
                });
                if (isEvent) {
                    this.publiclyTrigger("eventReceive", {
                        context: this,
                        args: [ singleEventDef.buildInstance().toLegacy(), this ]
                    });
                }
            };
            View.prototype.reportEventResize = function(eventInstance, eventMutation, el, ev) {
                var eventManager = this.calendar.eventManager;
                var undoFunc = eventManager.mutateEventsWithId(eventInstance.def.id, eventMutation);
                eventInstance.dateProfile = eventMutation.dateMutation.buildNewDateProfile(eventInstance.dateProfile, this.calendar);
                this.triggerEventResize(eventInstance, eventMutation.dateMutation.endDelta, undoFunc, el, ev);
            };
            View.prototype.triggerEventResize = function(eventInstance, durationDelta, undoFunc, el, ev) {
                this.publiclyTrigger("eventResize", {
                    context: el[0],
                    args: [ eventInstance.toLegacy(), durationDelta, undoFunc, ev, {}, this ]
                });
            };
            View.prototype.select = function(footprint, ev) {
                this.unselect(ev);
                this.renderSelectionFootprint(footprint);
                this.reportSelection(footprint, ev);
            };
            View.prototype.renderSelectionFootprint = function(footprint) {
                if (this["renderSelection"]) {
                    this["renderSelection"](footprint.toLegacy(this.calendar));
                } else {
                    _super.prototype.renderSelectionFootprint.call(this, footprint);
                }
            };
            View.prototype.reportSelection = function(footprint, ev) {
                this.isSelected = true;
                this.triggerSelect(footprint, ev);
            };
            View.prototype.triggerSelect = function(footprint, ev) {
                var dateProfile = this.calendar.footprintToDateProfile(footprint);
                this.publiclyTrigger("select", {
                    context: this,
                    args: [ dateProfile.start, dateProfile.end, ev, this ]
                });
            };
            View.prototype.unselect = function(ev) {
                if (this.isSelected) {
                    this.isSelected = false;
                    if (this["destroySelection"]) {
                        this["destroySelection"]();
                    }
                    this.unrenderSelection();
                    this.publiclyTrigger("unselect", {
                        context: this,
                        args: [ ev, this ]
                    });
                }
            };
            View.prototype.selectEventInstance = function(eventInstance) {
                if (!this.selectedEventInstance || this.selectedEventInstance !== eventInstance) {
                    this.unselectEventInstance();
                    this.getEventSegs().forEach(function(seg) {
                        if (seg.footprint.eventInstance === eventInstance && seg.el) {
                            seg.el.addClass("fc-selected");
                        }
                    });
                    this.selectedEventInstance = eventInstance;
                }
            };
            View.prototype.unselectEventInstance = function() {
                if (this.selectedEventInstance) {
                    this.getEventSegs().forEach(function(seg) {
                        if (seg.el) {
                            seg.el.removeClass("fc-selected");
                        }
                    });
                    this.selectedEventInstance = null;
                }
            };
            View.prototype.isEventDefSelected = function(eventDef) {
                return this.selectedEventInstance && this.selectedEventInstance.def.id === eventDef.id;
            };
            View.prototype.handleDocumentMousedown = function(ev) {
                if (util_1.isPrimaryMouseButton(ev)) {
                    this.processUnselect(ev);
                }
            };
            View.prototype.processUnselect = function(ev) {
                this.processRangeUnselect(ev);
                this.processEventUnselect(ev);
            };
            View.prototype.processRangeUnselect = function(ev) {
                var ignore;
                if (this.isSelected && this.opt("unselectAuto")) {
                    ignore = this.opt("unselectCancel");
                    if (!ignore || !$(ev.target).closest(ignore).length) {
                        this.unselect(ev);
                    }
                }
            };
            View.prototype.processEventUnselect = function(ev) {
                if (this.selectedEventInstance) {
                    if (!$(ev.target).closest(".fc-selected").length) {
                        this.unselectEventInstance();
                    }
                }
            };
            View.prototype.triggerBaseRendered = function() {
                this.publiclyTrigger("viewRender", {
                    context: this,
                    args: [ this, this.el ]
                });
            };
            View.prototype.triggerBaseUnrendered = function() {
                this.publiclyTrigger("viewDestroy", {
                    context: this,
                    args: [ this, this.el ]
                });
            };
            View.prototype.triggerDayClick = function(footprint, dayEl, ev) {
                var dateProfile = this.calendar.footprintToDateProfile(footprint);
                this.publiclyTrigger("dayClick", {
                    context: dayEl,
                    args: [ dateProfile.start, ev, this ]
                });
            };
            View.prototype.isDateInOtherMonth = function(date, dateProfile) {
                return false;
            };
            View.prototype.getUnzonedRangeOption = function(name) {
                var val = this.opt(name);
                if (typeof val === "function") {
                    val = val.apply(null, Array.prototype.slice.call(arguments, 1));
                }
                if (val) {
                    return this.calendar.parseUnzonedRange(val);
                }
            };
            View.prototype.initHiddenDays = function() {
                var hiddenDays = this.opt("hiddenDays") || [];
                var isHiddenDayHash = [];
                var dayCnt = 0;
                var i;
                if (this.opt("weekends") === false) {
                    hiddenDays.push(0, 6);
                }
                for (i = 0; i < 7; i++) {
                    if (!(isHiddenDayHash[i] = $.inArray(i, hiddenDays) !== -1)) {
                        dayCnt++;
                    }
                }
                if (!dayCnt) {
                    throw new Error("invalid hiddenDays");
                }
                this.isHiddenDayHash = isHiddenDayHash;
            };
            View.prototype.trimHiddenDays = function(inputUnzonedRange) {
                var start = inputUnzonedRange.getStart();
                var end = inputUnzonedRange.getEnd();
                if (start) {
                    start = this.skipHiddenDays(start);
                }
                if (end) {
                    end = this.skipHiddenDays(end, -1, true);
                }
                if (start === null || end === null || start < end) {
                    return new UnzonedRange_1.default(start, end);
                }
                return null;
            };
            View.prototype.isHiddenDay = function(day) {
                if (moment.isMoment(day)) {
                    day = day.day();
                }
                return this.isHiddenDayHash[day];
            };
            View.prototype.skipHiddenDays = function(date, inc, isExclusive) {
                if (inc === void 0) {
                    inc = 1;
                }
                if (isExclusive === void 0) {
                    isExclusive = false;
                }
                var out = date.clone();
                while (this.isHiddenDayHash[(out.day() + (isExclusive ? inc : 0) + 7) % 7]) {
                    out.add(inc, "days");
                }
                return out;
            };
            return View;
        }(InteractiveDateComponent_1.default);
        exports.default = View;
        View.prototype.usesMinMaxTime = false;
        View.prototype.dateProfileGeneratorClass = DateProfileGenerator_1.default;
        View.watch("displayingDates", [ "isInDom", "dateProfile" ], function(deps) {
            this.requestDateRender(deps.dateProfile);
        }, function() {
            this.requestDateUnrender();
        });
        View.watch("displayingBusinessHours", [ "displayingDates", "businessHourGenerator" ], function(deps) {
            this.requestBusinessHoursRender(deps.businessHourGenerator);
        }, function() {
            this.requestBusinessHoursUnrender();
        });
        View.watch("initialEvents", [ "dateProfile" ], function(deps) {
            return this.fetchInitialEvents(deps.dateProfile);
        });
        View.watch("bindingEvents", [ "initialEvents" ], function(deps) {
            this.setEvents(deps.initialEvents);
            this.bindEventChanges();
        }, function() {
            this.unbindEventChanges();
            this.unsetEvents();
        });
        View.watch("displayingEvents", [ "displayingDates", "hasEvents" ], function() {
            this.requestEventsRender(this.get("currentEvents"));
        }, function() {
            this.requestEventsUnrender();
        });
        View.watch("title", [ "dateProfile" ], function(deps) {
            return this.title = this.computeTitle(deps.dateProfile);
        });
        View.watch("legacyDateProps", [ "dateProfile" ], function(deps) {
            var calendar = this.calendar;
            var dateProfile = deps.dateProfile;
            this.start = calendar.msToMoment(dateProfile.activeUnzonedRange.startMs, dateProfile.isRangeAllDay);
            this.end = calendar.msToMoment(dateProfile.activeUnzonedRange.endMs, dateProfile.isRangeAllDay);
            this.intervalStart = calendar.msToMoment(dateProfile.currentUnzonedRange.startMs, dateProfile.isRangeAllDay);
            this.intervalEnd = calendar.msToMoment(dateProfile.currentUnzonedRange.endMs, dateProfile.isRangeAllDay);
        });
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var $ = __webpack_require__(3);
        var util_1 = __webpack_require__(4);
        var EventRenderer = function() {
            function EventRenderer(component, fillRenderer) {
                this.view = component._getView();
                this.component = component;
                this.fillRenderer = fillRenderer;
            }
            EventRenderer.prototype.opt = function(name) {
                return this.view.opt(name);
            };
            EventRenderer.prototype.rangeUpdated = function() {
                var displayEventTime;
                var displayEventEnd;
                this.eventTimeFormat = this.opt("eventTimeFormat") || this.opt("timeFormat") || this.computeEventTimeFormat();
                displayEventTime = this.opt("displayEventTime");
                if (displayEventTime == null) {
                    displayEventTime = this.computeDisplayEventTime();
                }
                displayEventEnd = this.opt("displayEventEnd");
                if (displayEventEnd == null) {
                    displayEventEnd = this.computeDisplayEventEnd();
                }
                this.displayEventTime = displayEventTime;
                this.displayEventEnd = displayEventEnd;
            };
            EventRenderer.prototype.render = function(eventsPayload) {
                var dateProfile = this.component._getDateProfile();
                var eventDefId;
                var instanceGroup;
                var eventRanges;
                var bgRanges = [];
                var fgRanges = [];
                for (eventDefId in eventsPayload) {
                    instanceGroup = eventsPayload[eventDefId];
                    eventRanges = instanceGroup.sliceRenderRanges(dateProfile.activeUnzonedRange);
                    if (instanceGroup.getEventDef().hasBgRendering()) {
                        bgRanges.push.apply(bgRanges, eventRanges);
                    } else {
                        fgRanges.push.apply(fgRanges, eventRanges);
                    }
                }
                this.renderBgRanges(bgRanges);
                this.renderFgRanges(fgRanges);
            };
            EventRenderer.prototype.unrender = function() {
                this.unrenderBgRanges();
                this.unrenderFgRanges();
            };
            EventRenderer.prototype.renderFgRanges = function(eventRanges) {
                var eventFootprints = this.component.eventRangesToEventFootprints(eventRanges);
                var segs = this.component.eventFootprintsToSegs(eventFootprints);
                segs = this.renderFgSegEls(segs);
                if (this.renderFgSegs(segs) !== false) {
                    this.fgSegs = segs;
                }
            };
            EventRenderer.prototype.unrenderFgRanges = function() {
                this.unrenderFgSegs(this.fgSegs || []);
                this.fgSegs = null;
            };
            EventRenderer.prototype.renderBgRanges = function(eventRanges) {
                var eventFootprints = this.component.eventRangesToEventFootprints(eventRanges);
                var segs = this.component.eventFootprintsToSegs(eventFootprints);
                if (this.renderBgSegs(segs) !== false) {
                    this.bgSegs = segs;
                }
            };
            EventRenderer.prototype.unrenderBgRanges = function() {
                this.unrenderBgSegs();
                this.bgSegs = null;
            };
            EventRenderer.prototype.getSegs = function() {
                return (this.bgSegs || []).concat(this.fgSegs || []);
            };
            EventRenderer.prototype.renderFgSegs = function(segs) {
                return false;
            };
            EventRenderer.prototype.unrenderFgSegs = function(segs) {};
            EventRenderer.prototype.renderBgSegs = function(segs) {
                var _this = this;
                if (this.fillRenderer) {
                    this.fillRenderer.renderSegs("bgEvent", segs, {
                        getClasses: function(seg) {
                            return _this.getBgClasses(seg.footprint.eventDef);
                        },
                        getCss: function(seg) {
                            return {
                                "background-color": _this.getBgColor(seg.footprint.eventDef)
                            };
                        },
                        filterEl: function(seg, el) {
                            return _this.filterEventRenderEl(seg.footprint, el);
                        }
                    });
                } else {
                    return false;
                }
            };
            EventRenderer.prototype.unrenderBgSegs = function() {
                if (this.fillRenderer) {
                    this.fillRenderer.unrender("bgEvent");
                }
            };
            EventRenderer.prototype.renderFgSegEls = function(segs, disableResizing) {
                var _this = this;
                if (disableResizing === void 0) {
                    disableResizing = false;
                }
                var hasEventRenderHandlers = this.view.hasPublicHandlers("eventRender");
                var html = "";
                var renderedSegs = [];
                var i;
                if (segs.length) {
                    for (i = 0; i < segs.length; i++) {
                        this.beforeFgSegHtml(segs[i]);
                        html += this.fgSegHtml(segs[i], disableResizing);
                    }
                    $(html).each(function(i, node) {
                        var seg = segs[i];
                        var el = $(node);
                        if (hasEventRenderHandlers) {
                            el = _this.filterEventRenderEl(seg.footprint, el);
                        }
                        if (el) {
                            el.data("fc-seg", seg);
                            seg.el = el;
                            renderedSegs.push(seg);
                        }
                    });
                }
                return renderedSegs;
            };
            EventRenderer.prototype.beforeFgSegHtml = function(seg) {};
            EventRenderer.prototype.fgSegHtml = function(seg, disableResizing) {};
            EventRenderer.prototype.getSegClasses = function(seg, isDraggable, isResizable) {
                var classes = [ "fc-event", seg.isStart ? "fc-start" : "fc-not-start", seg.isEnd ? "fc-end" : "fc-not-end" ].concat(this.getClasses(seg.footprint.eventDef));
                if (isDraggable) {
                    classes.push("fc-draggable");
                }
                if (isResizable) {
                    classes.push("fc-resizable");
                }
                if (this.view.isEventDefSelected(seg.footprint.eventDef)) {
                    classes.push("fc-selected");
                }
                return classes;
            };
            EventRenderer.prototype.filterEventRenderEl = function(eventFootprint, el) {
                var legacy = eventFootprint.getEventLegacy();
                var custom = this.view.publiclyTrigger("eventRender", {
                    context: legacy,
                    args: [ legacy, el, this.view ]
                });
                if (custom === false) {
                    el = null;
                } else if (custom && custom !== true) {
                    el = $(custom);
                }
                return el;
            };
            EventRenderer.prototype.getTimeText = function(eventFootprint, formatStr, displayEnd) {
                return this._getTimeText(eventFootprint.eventInstance.dateProfile.start, eventFootprint.eventInstance.dateProfile.end, eventFootprint.componentFootprint.isAllDay, formatStr, displayEnd);
            };
            EventRenderer.prototype._getTimeText = function(start, end, isAllDay, formatStr, displayEnd) {
                if (formatStr == null) {
                    formatStr = this.eventTimeFormat;
                }
                if (displayEnd == null) {
                    displayEnd = this.displayEventEnd;
                }
                if (this.displayEventTime && !isAllDay) {
                    if (displayEnd && end) {
                        return this.view.formatRange({
                            start: start,
                            end: end
                        }, false, formatStr);
                    } else {
                        return start.format(formatStr);
                    }
                }
                return "";
            };
            EventRenderer.prototype.computeEventTimeFormat = function() {
                return this.opt("smallTimeFormat");
            };
            EventRenderer.prototype.computeDisplayEventTime = function() {
                return true;
            };
            EventRenderer.prototype.computeDisplayEventEnd = function() {
                return true;
            };
            EventRenderer.prototype.getBgClasses = function(eventDef) {
                var classNames = this.getClasses(eventDef);
                classNames.push("fc-bgevent");
                return classNames;
            };
            EventRenderer.prototype.getClasses = function(eventDef) {
                var objs = this.getStylingObjs(eventDef);
                var i;
                var classNames = [];
                for (i = 0; i < objs.length; i++) {
                    classNames.push.apply(classNames, objs[i].eventClassName || objs[i].className || []);
                }
                return classNames;
            };
            EventRenderer.prototype.getSkinCss = function(eventDef) {
                return {
                    "background-color": this.getBgColor(eventDef),
                    "border-color": this.getBorderColor(eventDef),
                    color: this.getTextColor(eventDef)
                };
            };
            EventRenderer.prototype.getBgColor = function(eventDef) {
                var objs = this.getStylingObjs(eventDef);
                var i;
                var val;
                for (i = 0; i < objs.length && !val; i++) {
                    val = objs[i].eventBackgroundColor || objs[i].eventColor || objs[i].backgroundColor || objs[i].color;
                }
                if (!val) {
                    val = this.opt("eventBackgroundColor") || this.opt("eventColor");
                }
                return val;
            };
            EventRenderer.prototype.getBorderColor = function(eventDef) {
                var objs = this.getStylingObjs(eventDef);
                var i;
                var val;
                for (i = 0; i < objs.length && !val; i++) {
                    val = objs[i].eventBorderColor || objs[i].eventColor || objs[i].borderColor || objs[i].color;
                }
                if (!val) {
                    val = this.opt("eventBorderColor") || this.opt("eventColor");
                }
                return val;
            };
            EventRenderer.prototype.getTextColor = function(eventDef) {
                var objs = this.getStylingObjs(eventDef);
                var i;
                var val;
                for (i = 0; i < objs.length && !val; i++) {
                    val = objs[i].eventTextColor || objs[i].textColor;
                }
                if (!val) {
                    val = this.opt("eventTextColor");
                }
                return val;
            };
            EventRenderer.prototype.getStylingObjs = function(eventDef) {
                var objs = this.getFallbackStylingObjs(eventDef);
                objs.unshift(eventDef);
                return objs;
            };
            EventRenderer.prototype.getFallbackStylingObjs = function(eventDef) {
                return [ eventDef.source ];
            };
            EventRenderer.prototype.sortEventSegs = function(segs) {
                segs.sort(util_1.proxy(this, "compareEventSegs"));
            };
            EventRenderer.prototype.compareEventSegs = function(seg1, seg2) {
                var f1 = seg1.footprint.componentFootprint;
                var r1 = f1.unzonedRange;
                var f2 = seg2.footprint.componentFootprint;
                var r2 = f2.unzonedRange;
                return r1.startMs - r2.startMs || r2.endMs - r2.startMs - (r1.endMs - r1.startMs) || f2.isAllDay - f1.isAllDay || util_1.compareByFieldSpecs(seg1.footprint.eventDef, seg2.footprint.eventDef, this.view.eventOrderSpecs);
            };
            return EventRenderer;
        }();
        exports.default = EventRenderer;
    }, , , , , function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var moment_ext_1 = __webpack_require__(10);
        moment_ext_1.newMomentProto.format = function() {
            if (this._fullCalendar && arguments[0]) {
                return formatDate(this, arguments[0]);
            }
            if (this._ambigTime) {
                return moment_ext_1.oldMomentFormat(englishMoment(this), "YYYY-MM-DD");
            }
            if (this._ambigZone) {
                return moment_ext_1.oldMomentFormat(englishMoment(this), "YYYY-MM-DD[T]HH:mm:ss");
            }
            if (this._fullCalendar) {
                return moment_ext_1.oldMomentFormat(englishMoment(this));
            }
            return moment_ext_1.oldMomentProto.format.apply(this, arguments);
        };
        moment_ext_1.newMomentProto.toISOString = function() {
            if (this._ambigTime) {
                return moment_ext_1.oldMomentFormat(englishMoment(this), "YYYY-MM-DD");
            }
            if (this._ambigZone) {
                return moment_ext_1.oldMomentFormat(englishMoment(this), "YYYY-MM-DD[T]HH:mm:ss");
            }
            if (this._fullCalendar) {
                return moment_ext_1.oldMomentProto.toISOString.apply(englishMoment(this), arguments);
            }
            return moment_ext_1.oldMomentProto.toISOString.apply(this, arguments);
        };
        function englishMoment(mom) {
            if (mom.locale() !== "en") {
                return mom.clone().locale("en");
            }
            return mom;
        }
        var PART_SEPARATOR = "\v";
        var SPECIAL_TOKEN_MARKER = "";
        var MAYBE_MARKER = "";
        var MAYBE_REGEXP = new RegExp(MAYBE_MARKER + "([^" + MAYBE_MARKER + "]*)" + MAYBE_MARKER, "g");
        var specialTokens = {
            t: function(date) {
                return moment_ext_1.oldMomentFormat(date, "a").charAt(0);
            },
            T: function(date) {
                return moment_ext_1.oldMomentFormat(date, "A").charAt(0);
            }
        };
        var largeTokenMap = {
            Y: {
                value: 1,
                unit: "year"
            },
            M: {
                value: 2,
                unit: "month"
            },
            W: {
                value: 3,
                unit: "week"
            },
            w: {
                value: 3,
                unit: "week"
            },
            D: {
                value: 4,
                unit: "day"
            },
            d: {
                value: 4,
                unit: "day"
            }
        };
        function formatDate(date, formatStr) {
            return renderFakeFormatString(getParsedFormatString(formatStr).fakeFormatString, date);
        }
        exports.formatDate = formatDate;
        function formatRange(date1, date2, formatStr, separator, isRTL) {
            var localeData;
            date1 = moment_ext_1.default.parseZone(date1);
            date2 = moment_ext_1.default.parseZone(date2);
            localeData = date1.localeData();
            formatStr = localeData.longDateFormat(formatStr) || formatStr;
            return renderParsedFormat(getParsedFormatString(formatStr), date1, date2, separator || " - ", isRTL);
        }
        exports.formatRange = formatRange;
        function renderParsedFormat(parsedFormat, date1, date2, separator, isRTL) {
            var sameUnits = parsedFormat.sameUnits;
            var unzonedDate1 = date1.clone().stripZone();
            var unzonedDate2 = date2.clone().stripZone();
            var renderedParts1 = renderFakeFormatStringParts(parsedFormat.fakeFormatString, date1);
            var renderedParts2 = renderFakeFormatStringParts(parsedFormat.fakeFormatString, date2);
            var leftI;
            var leftStr = "";
            var rightI;
            var rightStr = "";
            var middleI;
            var middleStr1 = "";
            var middleStr2 = "";
            var middleStr = "";
            for (leftI = 0; leftI < sameUnits.length && (!sameUnits[leftI] || unzonedDate1.isSame(unzonedDate2, sameUnits[leftI])); leftI++) {
                leftStr += renderedParts1[leftI];
            }
            for (rightI = sameUnits.length - 1; rightI > leftI && (!sameUnits[rightI] || unzonedDate1.isSame(unzonedDate2, sameUnits[rightI])); rightI--) {
                if (rightI - 1 === leftI && renderedParts1[rightI] === ".") {
                    break;
                }
                rightStr = renderedParts1[rightI] + rightStr;
            }
            for (middleI = leftI; middleI <= rightI; middleI++) {
                middleStr1 += renderedParts1[middleI];
                middleStr2 += renderedParts2[middleI];
            }
            if (middleStr1 || middleStr2) {
                if (isRTL) {
                    middleStr = middleStr2 + separator + middleStr1;
                } else {
                    middleStr = middleStr1 + separator + middleStr2;
                }
            }
            return processMaybeMarkers(leftStr + middleStr + rightStr);
        }
        var parsedFormatStrCache = {};
        function getParsedFormatString(formatStr) {
            return parsedFormatStrCache[formatStr] || (parsedFormatStrCache[formatStr] = parseFormatString(formatStr));
        }
        function parseFormatString(formatStr) {
            var chunks = chunkFormatString(formatStr);
            return {
                fakeFormatString: buildFakeFormatString(chunks),
                sameUnits: buildSameUnits(chunks)
            };
        }
        function chunkFormatString(formatStr) {
            var chunks = [];
            var match;
            var chunker = /\[([^\]]*)\]|\(([^\)]*)\)|(LTS|LT|(\w)\4*o?)|([^\w\[\(]+)/g;
            while (match = chunker.exec(formatStr)) {
                if (match[1]) {
                    chunks.push.apply(chunks, splitStringLiteral(match[1]));
                } else if (match[2]) {
                    chunks.push({
                        maybe: chunkFormatString(match[2])
                    });
                } else if (match[3]) {
                    chunks.push({
                        token: match[3]
                    });
                } else if (match[5]) {
                    chunks.push.apply(chunks, splitStringLiteral(match[5]));
                }
            }
            return chunks;
        }
        function splitStringLiteral(s) {
            if (s === ". ") {
                return [ ".", " " ];
            } else {
                return [ s ];
            }
        }
        function buildFakeFormatString(chunks) {
            var parts = [];
            var i;
            var chunk;
            for (i = 0; i < chunks.length; i++) {
                chunk = chunks[i];
                if (typeof chunk === "string") {
                    parts.push("[" + chunk + "]");
                } else if (chunk.token) {
                    if (chunk.token in specialTokens) {
                        parts.push(SPECIAL_TOKEN_MARKER + "[" + chunk.token + "]");
                    } else {
                        parts.push(chunk.token);
                    }
                } else if (chunk.maybe) {
                    parts.push(MAYBE_MARKER + buildFakeFormatString(chunk.maybe) + MAYBE_MARKER);
                }
            }
            return parts.join(PART_SEPARATOR);
        }
        function buildSameUnits(chunks) {
            var units = [];
            var i;
            var chunk;
            var tokenInfo;
            for (i = 0; i < chunks.length; i++) {
                chunk = chunks[i];
                if (chunk.token) {
                    tokenInfo = largeTokenMap[chunk.token.charAt(0)];
                    units.push(tokenInfo ? tokenInfo.unit : "second");
                } else if (chunk.maybe) {
                    units.push.apply(units, buildSameUnits(chunk.maybe));
                } else {
                    units.push(null);
                }
            }
            return units;
        }
        function renderFakeFormatString(fakeFormatString, date) {
            return processMaybeMarkers(renderFakeFormatStringParts(fakeFormatString, date).join(""));
        }
        function renderFakeFormatStringParts(fakeFormatString, date) {
            var parts = [];
            var fakeRender = moment_ext_1.oldMomentFormat(date, fakeFormatString);
            var fakeParts = fakeRender.split(PART_SEPARATOR);
            var i;
            var fakePart;
            for (i = 0; i < fakeParts.length; i++) {
                fakePart = fakeParts[i];
                if (fakePart.charAt(0) === SPECIAL_TOKEN_MARKER) {
                    parts.push(specialTokens[fakePart.substring(1)](date));
                } else {
                    parts.push(fakePart);
                }
            }
            return parts;
        }
        function processMaybeMarkers(s) {
            return s.replace(MAYBE_REGEXP, function(m0, m1) {
                if (m1.match(/[1-9]/)) {
                    return m1;
                } else {
                    return "";
                }
            });
        }
        function queryMostGranularFormatUnit(formatStr) {
            var chunks = chunkFormatString(formatStr);
            var i;
            var chunk;
            var candidate;
            var best;
            for (i = 0; i < chunks.length; i++) {
                chunk = chunks[i];
                if (chunk.token) {
                    candidate = largeTokenMap[chunk.token.charAt(0)];
                    if (candidate) {
                        if (!best || candidate.value > best.value) {
                            best = candidate;
                        }
                    }
                }
            }
            if (best) {
                return best.unit;
            }
            return null;
        }
        exports.queryMostGranularFormatUnit = queryMostGranularFormatUnit;
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var tslib_1 = __webpack_require__(2);
        var Class_1 = __webpack_require__(32);
        var EmitterMixin_1 = __webpack_require__(11);
        var ListenerMixin_1 = __webpack_require__(7);
        var Model = function(_super) {
            tslib_1.__extends(Model, _super);
            function Model() {
                var _this = _super.call(this) || this;
                _this._watchers = {};
                _this._props = {};
                _this.applyGlobalWatchers();
                _this.constructed();
                return _this;
            }
            Model.watch = function(name) {
                var args = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    args[_i - 1] = arguments[_i];
                }
                if (!this.prototype.hasOwnProperty("_globalWatchArgs")) {
                    this.prototype._globalWatchArgs = Object.create(this.prototype._globalWatchArgs);
                }
                this.prototype._globalWatchArgs[name] = args;
            };
            Model.prototype.constructed = function() {};
            Model.prototype.applyGlobalWatchers = function() {
                var map = this._globalWatchArgs;
                var name;
                for (name in map) {
                    this.watch.apply(this, [ name ].concat(map[name]));
                }
            };
            Model.prototype.has = function(name) {
                return name in this._props;
            };
            Model.prototype.get = function(name) {
                if (name === undefined) {
                    return this._props;
                }
                return this._props[name];
            };
            Model.prototype.set = function(name, val) {
                var newProps;
                if (typeof name === "string") {
                    newProps = {};
                    newProps[name] = val === undefined ? null : val;
                } else {
                    newProps = name;
                }
                this.setProps(newProps);
            };
            Model.prototype.reset = function(newProps) {
                var oldProps = this._props;
                var changeset = {};
                var name;
                for (name in oldProps) {
                    changeset[name] = undefined;
                }
                for (name in newProps) {
                    changeset[name] = newProps[name];
                }
                this.setProps(changeset);
            };
            Model.prototype.unset = function(name) {
                var newProps = {};
                var names;
                var i;
                if (typeof name === "string") {
                    names = [ name ];
                } else {
                    names = name;
                }
                for (i = 0; i < names.length; i++) {
                    newProps[names[i]] = undefined;
                }
                this.setProps(newProps);
            };
            Model.prototype.setProps = function(newProps) {
                var changedProps = {};
                var changedCnt = 0;
                var name;
                var val;
                for (name in newProps) {
                    val = newProps[name];
                    if (typeof val === "object" || val !== this._props[name]) {
                        changedProps[name] = val;
                        changedCnt++;
                    }
                }
                if (changedCnt) {
                    this.trigger("before:batchChange", changedProps);
                    for (name in changedProps) {
                        val = changedProps[name];
                        this.trigger("before:change", name, val);
                        this.trigger("before:change:" + name, val);
                    }
                    for (name in changedProps) {
                        val = changedProps[name];
                        if (val === undefined) {
                            delete this._props[name];
                        } else {
                            this._props[name] = val;
                        }
                        this.trigger("change:" + name, val);
                        this.trigger("change", name, val);
                    }
                    this.trigger("batchChange", changedProps);
                }
            };
            Model.prototype.watch = function(name, depList, startFunc, stopFunc) {
                var _this = this;
                this.unwatch(name);
                this._watchers[name] = this._watchDeps(depList, function(deps) {
                    var res = startFunc.call(_this, deps);
                    if (res && res.then) {
                        _this.unset(name);
                        res.then(function(val) {
                            _this.set(name, val);
                        });
                    } else {
                        _this.set(name, res);
                    }
                }, function(deps) {
                    _this.unset(name);
                    if (stopFunc) {
                        stopFunc.call(_this, deps);
                    }
                });
            };
            Model.prototype.unwatch = function(name) {
                var watcher = this._watchers[name];
                if (watcher) {
                    delete this._watchers[name];
                    watcher.teardown();
                }
            };
            Model.prototype._watchDeps = function(depList, startFunc, stopFunc) {
                var _this = this;
                var queuedChangeCnt = 0;
                var depCnt = depList.length;
                var satisfyCnt = 0;
                var values = {};
                var bindTuples = [];
                var isCallingStop = false;
                var onBeforeDepChange = function(depName, val, isOptional) {
                    queuedChangeCnt++;
                    if (queuedChangeCnt === 1) {
                        if (satisfyCnt === depCnt) {
                            isCallingStop = true;
                            stopFunc(values);
                            isCallingStop = false;
                        }
                    }
                };
                var onDepChange = function(depName, val, isOptional) {
                    if (val === undefined) {
                        if (!isOptional && values[depName] !== undefined) {
                            satisfyCnt--;
                        }
                        delete values[depName];
                    } else {
                        if (!isOptional && values[depName] === undefined) {
                            satisfyCnt++;
                        }
                        values[depName] = val;
                    }
                    queuedChangeCnt--;
                    if (!queuedChangeCnt) {
                        if (satisfyCnt === depCnt) {
                            if (!isCallingStop) {
                                startFunc(values);
                            }
                        }
                    }
                };
                var bind = function(eventName, handler) {
                    _this.on(eventName, handler);
                    bindTuples.push([ eventName, handler ]);
                };
                depList.forEach(function(depName) {
                    var isOptional = false;
                    if (depName.charAt(0) === "?") {
                        depName = depName.substring(1);
                        isOptional = true;
                    }
                    bind("before:change:" + depName, function(val) {
                        onBeforeDepChange(depName, val, isOptional);
                    });
                    bind("change:" + depName, function(val) {
                        onDepChange(depName, val, isOptional);
                    });
                });
                depList.forEach(function(depName) {
                    var isOptional = false;
                    if (depName.charAt(0) === "?") {
                        depName = depName.substring(1);
                        isOptional = true;
                    }
                    if (_this.has(depName)) {
                        values[depName] = _this.get(depName);
                        satisfyCnt++;
                    } else if (isOptional) {
                        satisfyCnt++;
                    }
                });
                if (satisfyCnt === depCnt) {
                    startFunc(values);
                }
                return {
                    teardown: function() {
                        for (var i = 0; i < bindTuples.length; i++) {
                            _this.off(bindTuples[i][0], bindTuples[i][1]);
                        }
                        bindTuples = null;
                        if (satisfyCnt === depCnt) {
                            stopFunc();
                        }
                    },
                    flash: function() {
                        if (satisfyCnt === depCnt) {
                            stopFunc();
                            startFunc(values);
                        }
                    }
                };
            };
            Model.prototype.flash = function(name) {
                var watcher = this._watchers[name];
                if (watcher) {
                    watcher.flash();
                }
            };
            return Model;
        }(Class_1.default);
        exports.default = Model;
        Model.prototype._globalWatchArgs = {};
        EmitterMixin_1.default.mixInto(Model);
        ListenerMixin_1.default.mixInto(Model);
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var moment = __webpack_require__(0);
        var util_1 = __webpack_require__(4);
        var SingleEventDef_1 = __webpack_require__(13);
        var RecurringEventDef_1 = __webpack_require__(206);
        exports.default = {
            parse: function(eventInput, source) {
                if (util_1.isTimeString(eventInput.start) || moment.isDuration(eventInput.start) || util_1.isTimeString(eventInput.end) || moment.isDuration(eventInput.end)) {
                    return RecurringEventDef_1.default.parse(eventInput, source);
                } else {
                    return SingleEventDef_1.default.parse(eventInput, source);
                }
            }
        };
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var util_1 = __webpack_require__(4);
        var EventDateProfile_1 = __webpack_require__(17);
        var EventDefDateMutation = function() {
            function EventDefDateMutation() {
                this.clearEnd = false;
                this.forceTimed = false;
                this.forceAllDay = false;
            }
            EventDefDateMutation.createFromDiff = function(dateProfile0, dateProfile1, largeUnit) {
                var clearEnd = dateProfile0.end && !dateProfile1.end;
                var forceTimed = dateProfile0.isAllDay() && !dateProfile1.isAllDay();
                var forceAllDay = !dateProfile0.isAllDay() && dateProfile1.isAllDay();
                var dateDelta;
                var endDiff;
                var endDelta;
                var mutation;
                function subtractDates(date1, date0) {
                    if (largeUnit) {
                        return util_1.diffByUnit(date1, date0, largeUnit);
                    } else if (dateProfile1.isAllDay()) {
                        return util_1.diffDay(date1, date0);
                    } else {
                        return util_1.diffDayTime(date1, date0);
                    }
                }
                dateDelta = subtractDates(dateProfile1.start, dateProfile0.start);
                if (dateProfile1.end) {
                    endDiff = subtractDates(dateProfile1.unzonedRange.getEnd(), dateProfile0.unzonedRange.getEnd());
                    endDelta = endDiff.subtract(dateDelta);
                }
                mutation = new EventDefDateMutation();
                mutation.clearEnd = clearEnd;
                mutation.forceTimed = forceTimed;
                mutation.forceAllDay = forceAllDay;
                mutation.setDateDelta(dateDelta);
                mutation.setEndDelta(endDelta);
                return mutation;
            };
            EventDefDateMutation.prototype.buildNewDateProfile = function(eventDateProfile, calendar) {
                var start = eventDateProfile.start.clone();
                var end = null;
                var shouldRezone = false;
                if (eventDateProfile.end && !this.clearEnd) {
                    end = eventDateProfile.end.clone();
                } else if (this.endDelta && !end) {
                    end = calendar.getDefaultEventEnd(eventDateProfile.isAllDay(), start);
                }
                if (this.forceTimed) {
                    shouldRezone = true;
                    if (!start.hasTime()) {
                        start.time(0);
                    }
                    if (end && !end.hasTime()) {
                        end.time(0);
                    }
                } else if (this.forceAllDay) {
                    if (start.hasTime()) {
                        start.stripTime();
                    }
                    if (end && end.hasTime()) {
                        end.stripTime();
                    }
                }
                if (this.dateDelta) {
                    shouldRezone = true;
                    start.add(this.dateDelta);
                    if (end) {
                        end.add(this.dateDelta);
                    }
                }
                if (this.endDelta) {
                    shouldRezone = true;
                    end.add(this.endDelta);
                }
                if (this.startDelta) {
                    shouldRezone = true;
                    start.add(this.startDelta);
                }
                if (shouldRezone) {
                    start = calendar.applyTimezone(start);
                    if (end) {
                        end = calendar.applyTimezone(end);
                    }
                }
                if (!end && calendar.opt("forceEventDuration")) {
                    end = calendar.getDefaultEventEnd(eventDateProfile.isAllDay(), start);
                }
                return new EventDateProfile_1.default(start, end, calendar);
            };
            EventDefDateMutation.prototype.setDateDelta = function(dateDelta) {
                if (dateDelta && dateDelta.valueOf()) {
                    this.dateDelta = dateDelta;
                } else {
                    this.dateDelta = null;
                }
            };
            EventDefDateMutation.prototype.setStartDelta = function(startDelta) {
                if (startDelta && startDelta.valueOf()) {
                    this.startDelta = startDelta;
                } else {
                    this.startDelta = null;
                }
            };
            EventDefDateMutation.prototype.setEndDelta = function(endDelta) {
                if (endDelta && endDelta.valueOf()) {
                    this.endDelta = endDelta;
                } else {
                    this.endDelta = null;
                }
            };
            EventDefDateMutation.prototype.isEmpty = function() {
                return !this.clearEnd && !this.forceTimed && !this.forceAllDay && !this.dateDelta && !this.startDelta && !this.endDelta;
            };
            return EventDefDateMutation;
        }();
        exports.default = EventDefDateMutation;
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var StandardTheme_1 = __webpack_require__(209);
        var JqueryUiTheme_1 = __webpack_require__(210);
        var themeClassHash = {};
        function defineThemeSystem(themeName, themeClass) {
            themeClassHash[themeName] = themeClass;
        }
        exports.defineThemeSystem = defineThemeSystem;
        function getThemeSystemClass(themeSetting) {
            if (!themeSetting) {
                return StandardTheme_1.default;
            } else if (themeSetting === true) {
                return JqueryUiTheme_1.default;
            } else {
                return themeClassHash[themeSetting];
            }
        }
        exports.getThemeSystemClass = getThemeSystemClass;
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var tslib_1 = __webpack_require__(2);
        var $ = __webpack_require__(3);
        var util_1 = __webpack_require__(4);
        var Promise_1 = __webpack_require__(19);
        var EventSource_1 = __webpack_require__(6);
        var SingleEventDef_1 = __webpack_require__(13);
        var ArrayEventSource = function(_super) {
            tslib_1.__extends(ArrayEventSource, _super);
            function ArrayEventSource(calendar) {
                var _this = _super.call(this, calendar) || this;
                _this.eventDefs = [];
                return _this;
            }
            ArrayEventSource.parse = function(rawInput, calendar) {
                var rawProps;
                if ($.isArray(rawInput.events)) {
                    rawProps = rawInput;
                } else if ($.isArray(rawInput)) {
                    rawProps = {
                        events: rawInput
                    };
                }
                if (rawProps) {
                    return EventSource_1.default.parse.call(this, rawProps, calendar);
                }
                return false;
            };
            ArrayEventSource.prototype.setRawEventDefs = function(rawEventDefs) {
                this.rawEventDefs = rawEventDefs;
                this.eventDefs = this.parseEventDefs(rawEventDefs);
            };
            ArrayEventSource.prototype.fetch = function(start, end, timezone) {
                var eventDefs = this.eventDefs;
                var i;
                if (this.currentTimezone != null && this.currentTimezone !== timezone) {
                    for (i = 0; i < eventDefs.length; i++) {
                        if (eventDefs[i] instanceof SingleEventDef_1.default) {
                            eventDefs[i].rezone();
                        }
                    }
                }
                this.currentTimezone = timezone;
                return Promise_1.default.resolve(eventDefs);
            };
            ArrayEventSource.prototype.addEventDef = function(eventDef) {
                this.eventDefs.push(eventDef);
            };
            ArrayEventSource.prototype.removeEventDefsById = function(eventDefId) {
                return util_1.removeMatching(this.eventDefs, function(eventDef) {
                    return eventDef.id === eventDefId;
                });
            };
            ArrayEventSource.prototype.removeAllEventDefs = function() {
                this.eventDefs = [];
            };
            ArrayEventSource.prototype.getPrimitive = function() {
                return this.rawEventDefs;
            };
            ArrayEventSource.prototype.applyManualStandardProps = function(rawProps) {
                var superSuccess = _super.prototype.applyManualStandardProps.call(this, rawProps);
                this.setRawEventDefs(rawProps.events);
                return superSuccess;
            };
            return ArrayEventSource;
        }(EventSource_1.default);
        exports.default = ArrayEventSource;
        ArrayEventSource.defineStandardProps({
            events: false
        });
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var $ = __webpack_require__(3);
        var util_1 = __webpack_require__(4);
        var CoordCache = function() {
            function CoordCache(options) {
                this.isHorizontal = false;
                this.isVertical = false;
                this.els = $(options.els);
                this.isHorizontal = options.isHorizontal;
                this.isVertical = options.isVertical;
                this.forcedOffsetParentEl = options.offsetParent ? $(options.offsetParent) : null;
            }
            CoordCache.prototype.build = function() {
                var offsetParentEl = this.forcedOffsetParentEl;
                if (!offsetParentEl && this.els.length > 0) {
                    offsetParentEl = this.els.eq(0).offsetParent();
                }
                this.origin = offsetParentEl ? offsetParentEl.offset() : null;
                this.boundingRect = this.queryBoundingRect();
                if (this.isHorizontal) {
                    this.buildElHorizontals();
                }
                if (this.isVertical) {
                    this.buildElVerticals();
                }
            };
            CoordCache.prototype.clear = function() {
                this.origin = null;
                this.boundingRect = null;
                this.lefts = null;
                this.rights = null;
                this.tops = null;
                this.bottoms = null;
            };
            CoordCache.prototype.ensureBuilt = function() {
                if (!this.origin) {
                    this.build();
                }
            };
            CoordCache.prototype.buildElHorizontals = function() {
                var lefts = [];
                var rights = [];
                this.els.each(function(i, node) {
                    var el = $(node);
                    var left = el.offset().left;
                    var width = el.outerWidth();
                    lefts.push(left);
                    rights.push(left + width);
                });
                this.lefts = lefts;
                this.rights = rights;
            };
            CoordCache.prototype.buildElVerticals = function() {
                var tops = [];
                var bottoms = [];
                this.els.each(function(i, node) {
                    var el = $(node);
                    var top = el.offset().top;
                    var height = el.outerHeight();
                    tops.push(top);
                    bottoms.push(top + height);
                });
                this.tops = tops;
                this.bottoms = bottoms;
            };
            CoordCache.prototype.getHorizontalIndex = function(leftOffset) {
                this.ensureBuilt();
                var lefts = this.lefts;
                var rights = this.rights;
                var len = lefts.length;
                var i;
                for (i = 0; i < len; i++) {
                    if (leftOffset >= lefts[i] && leftOffset < rights[i]) {
                        return i;
                    }
                }
            };
            CoordCache.prototype.getVerticalIndex = function(topOffset) {
                this.ensureBuilt();
                var tops = this.tops;
                var bottoms = this.bottoms;
                var len = tops.length;
                var i;
                for (i = 0; i < len; i++) {
                    if (topOffset >= tops[i] && topOffset < bottoms[i]) {
                        return i;
                    }
                }
            };
            CoordCache.prototype.getLeftOffset = function(leftIndex) {
                this.ensureBuilt();
                return this.lefts[leftIndex];
            };
            CoordCache.prototype.getLeftPosition = function(leftIndex) {
                this.ensureBuilt();
                return this.lefts[leftIndex] - this.origin.left;
            };
            CoordCache.prototype.getRightOffset = function(leftIndex) {
                this.ensureBuilt();
                return this.rights[leftIndex];
            };
            CoordCache.prototype.getRightPosition = function(leftIndex) {
                this.ensureBuilt();
                return this.rights[leftIndex] - this.origin.left;
            };
            CoordCache.prototype.getWidth = function(leftIndex) {
                this.ensureBuilt();
                return this.rights[leftIndex] - this.lefts[leftIndex];
            };
            CoordCache.prototype.getTopOffset = function(topIndex) {
                this.ensureBuilt();
                return this.tops[topIndex];
            };
            CoordCache.prototype.getTopPosition = function(topIndex) {
                this.ensureBuilt();
                return this.tops[topIndex] - this.origin.top;
            };
            CoordCache.prototype.getBottomOffset = function(topIndex) {
                this.ensureBuilt();
                return this.bottoms[topIndex];
            };
            CoordCache.prototype.getBottomPosition = function(topIndex) {
                this.ensureBuilt();
                return this.bottoms[topIndex] - this.origin.top;
            };
            CoordCache.prototype.getHeight = function(topIndex) {
                this.ensureBuilt();
                return this.bottoms[topIndex] - this.tops[topIndex];
            };
            CoordCache.prototype.queryBoundingRect = function() {
                var scrollParentEl;
                if (this.els.length > 0) {
                    scrollParentEl = util_1.getScrollParent(this.els.eq(0));
                    if (!scrollParentEl.is(document)) {
                        return util_1.getClientRect(scrollParentEl);
                    }
                }
                return null;
            };
            CoordCache.prototype.isPointInBounds = function(leftOffset, topOffset) {
                return this.isLeftInBounds(leftOffset) && this.isTopInBounds(topOffset);
            };
            CoordCache.prototype.isLeftInBounds = function(leftOffset) {
                return !this.boundingRect || leftOffset >= this.boundingRect.left && leftOffset < this.boundingRect.right;
            };
            CoordCache.prototype.isTopInBounds = function(topOffset) {
                return !this.boundingRect || topOffset >= this.boundingRect.top && topOffset < this.boundingRect.bottom;
            };
            return CoordCache;
        }();
        exports.default = CoordCache;
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var $ = __webpack_require__(3);
        var util_1 = __webpack_require__(4);
        var ListenerMixin_1 = __webpack_require__(7);
        var GlobalEmitter_1 = __webpack_require__(20);
        var DragListener = function() {
            function DragListener(options) {
                this.isInteracting = false;
                this.isDistanceSurpassed = false;
                this.isDelayEnded = false;
                this.isDragging = false;
                this.isTouch = false;
                this.isGeneric = false;
                this.shouldCancelTouchScroll = true;
                this.scrollAlwaysKills = false;
                this.isAutoScroll = false;
                this.scrollSensitivity = 30;
                this.scrollSpeed = 200;
                this.scrollIntervalMs = 50;
                this.options = options || {};
            }
            DragListener.prototype.startInteraction = function(ev, extraOptions) {
                if (extraOptions === void 0) {
                    extraOptions = {};
                }
                if (ev.type === "mousedown") {
                    if (GlobalEmitter_1.default.get().shouldIgnoreMouse()) {
                        return;
                    } else if (!util_1.isPrimaryMouseButton(ev)) {
                        return;
                    } else {
                        ev.preventDefault();
                    }
                }
                if (!this.isInteracting) {
                    this.delay = util_1.firstDefined(extraOptions.delay, this.options.delay, 0);
                    this.minDistance = util_1.firstDefined(extraOptions.distance, this.options.distance, 0);
                    this.subjectEl = this.options.subjectEl;
                    util_1.preventSelection($("body"));
                    this.isInteracting = true;
                    this.isTouch = util_1.getEvIsTouch(ev);
                    this.isGeneric = ev.type === "dragstart";
                    this.isDelayEnded = false;
                    this.isDistanceSurpassed = false;
                    this.originX = util_1.getEvX(ev);
                    this.originY = util_1.getEvY(ev);
                    this.scrollEl = util_1.getScrollParent($(ev.target));
                    this.bindHandlers();
                    this.initAutoScroll();
                    this.handleInteractionStart(ev);
                    this.startDelay(ev);
                    if (!this.minDistance) {
                        this.handleDistanceSurpassed(ev);
                    }
                }
            };
            DragListener.prototype.handleInteractionStart = function(ev) {
                this.trigger("interactionStart", ev);
            };
            DragListener.prototype.endInteraction = function(ev, isCancelled) {
                if (this.isInteracting) {
                    this.endDrag(ev);
                    if (this.delayTimeoutId) {
                        clearTimeout(this.delayTimeoutId);
                        this.delayTimeoutId = null;
                    }
                    this.destroyAutoScroll();
                    this.unbindHandlers();
                    this.isInteracting = false;
                    this.handleInteractionEnd(ev, isCancelled);
                    util_1.allowSelection($("body"));
                }
            };
            DragListener.prototype.handleInteractionEnd = function(ev, isCancelled) {
                this.trigger("interactionEnd", ev, isCancelled || false);
            };
            DragListener.prototype.bindHandlers = function() {
                var globalEmitter = GlobalEmitter_1.default.get();
                if (this.isGeneric) {
                    this.listenTo($(document), {
                        drag: this.handleMove,
                        dragstop: this.endInteraction
                    });
                } else if (this.isTouch) {
                    this.listenTo(globalEmitter, {
                        touchmove: this.handleTouchMove,
                        touchend: this.endInteraction,
                        scroll: this.handleTouchScroll
                    });
                } else {
                    this.listenTo(globalEmitter, {
                        mousemove: this.handleMouseMove,
                        mouseup: this.endInteraction
                    });
                }
                this.listenTo(globalEmitter, {
                    selectstart: util_1.preventDefault,
                    contextmenu: util_1.preventDefault
                });
            };
            DragListener.prototype.unbindHandlers = function() {
                this.stopListeningTo(GlobalEmitter_1.default.get());
                this.stopListeningTo($(document));
            };
            DragListener.prototype.startDrag = function(ev, extraOptions) {
                this.startInteraction(ev, extraOptions);
                if (!this.isDragging) {
                    this.isDragging = true;
                    this.handleDragStart(ev);
                }
            };
            DragListener.prototype.handleDragStart = function(ev) {
                this.trigger("dragStart", ev);
            };
            DragListener.prototype.handleMove = function(ev) {
                var dx = util_1.getEvX(ev) - this.originX;
                var dy = util_1.getEvY(ev) - this.originY;
                var minDistance = this.minDistance;
                var distanceSq;
                if (!this.isDistanceSurpassed) {
                    distanceSq = dx * dx + dy * dy;
                    if (distanceSq >= minDistance * minDistance) {
                        this.handleDistanceSurpassed(ev);
                    }
                }
                if (this.isDragging) {
                    this.handleDrag(dx, dy, ev);
                }
            };
            DragListener.prototype.handleDrag = function(dx, dy, ev) {
                this.trigger("drag", dx, dy, ev);
                this.updateAutoScroll(ev);
            };
            DragListener.prototype.endDrag = function(ev) {
                if (this.isDragging) {
                    this.isDragging = false;
                    this.handleDragEnd(ev);
                }
            };
            DragListener.prototype.handleDragEnd = function(ev) {
                this.trigger("dragEnd", ev);
            };
            DragListener.prototype.startDelay = function(initialEv) {
                var _this = this;
                if (this.delay) {
                    this.delayTimeoutId = setTimeout(function() {
                        _this.handleDelayEnd(initialEv);
                    }, this.delay);
                } else {
                    this.handleDelayEnd(initialEv);
                }
            };
            DragListener.prototype.handleDelayEnd = function(initialEv) {
                this.isDelayEnded = true;
                if (this.isDistanceSurpassed) {
                    this.startDrag(initialEv);
                }
            };
            DragListener.prototype.handleDistanceSurpassed = function(ev) {
                this.isDistanceSurpassed = true;
                if (this.isDelayEnded) {
                    this.startDrag(ev);
                }
            };
            DragListener.prototype.handleTouchMove = function(ev) {
                if (this.isDragging && this.shouldCancelTouchScroll) {
                    ev.preventDefault();
                }
                this.handleMove(ev);
            };
            DragListener.prototype.handleMouseMove = function(ev) {
                this.handleMove(ev);
            };
            DragListener.prototype.handleTouchScroll = function(ev) {
                if (!this.isDragging || this.scrollAlwaysKills) {
                    this.endInteraction(ev, true);
                }
            };
            DragListener.prototype.trigger = function(name) {
                var args = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    args[_i - 1] = arguments[_i];
                }
                if (this.options[name]) {
                    this.options[name].apply(this, args);
                }
                if (this["_" + name]) {
                    this["_" + name].apply(this, args);
                }
            };
            DragListener.prototype.initAutoScroll = function() {
                var scrollEl = this.scrollEl;
                this.isAutoScroll = this.options.scroll && scrollEl && !scrollEl.is(window) && !scrollEl.is(document);
                if (this.isAutoScroll) {
                    this.listenTo(scrollEl, "scroll", util_1.debounce(this.handleDebouncedScroll, 100));
                }
            };
            DragListener.prototype.destroyAutoScroll = function() {
                this.endAutoScroll();
                if (this.isAutoScroll) {
                    this.stopListeningTo(this.scrollEl, "scroll");
                }
            };
            DragListener.prototype.computeScrollBounds = function() {
                if (this.isAutoScroll) {
                    this.scrollBounds = util_1.getOuterRect(this.scrollEl);
                }
            };
            DragListener.prototype.updateAutoScroll = function(ev) {
                var sensitivity = this.scrollSensitivity;
                var bounds = this.scrollBounds;
                var topCloseness;
                var bottomCloseness;
                var leftCloseness;
                var rightCloseness;
                var topVel = 0;
                var leftVel = 0;
                if (bounds) {
                    topCloseness = (sensitivity - (util_1.getEvY(ev) - bounds.top)) / sensitivity;
                    bottomCloseness = (sensitivity - (bounds.bottom - util_1.getEvY(ev))) / sensitivity;
                    leftCloseness = (sensitivity - (util_1.getEvX(ev) - bounds.left)) / sensitivity;
                    rightCloseness = (sensitivity - (bounds.right - util_1.getEvX(ev))) / sensitivity;
                    if (topCloseness >= 0 && topCloseness <= 1) {
                        topVel = topCloseness * this.scrollSpeed * -1;
                    } else if (bottomCloseness >= 0 && bottomCloseness <= 1) {
                        topVel = bottomCloseness * this.scrollSpeed;
                    }
                    if (leftCloseness >= 0 && leftCloseness <= 1) {
                        leftVel = leftCloseness * this.scrollSpeed * -1;
                    } else if (rightCloseness >= 0 && rightCloseness <= 1) {
                        leftVel = rightCloseness * this.scrollSpeed;
                    }
                }
                this.setScrollVel(topVel, leftVel);
            };
            DragListener.prototype.setScrollVel = function(topVel, leftVel) {
                this.scrollTopVel = topVel;
                this.scrollLeftVel = leftVel;
                this.constrainScrollVel();
                if ((this.scrollTopVel || this.scrollLeftVel) && !this.scrollIntervalId) {
                    this.scrollIntervalId = setInterval(util_1.proxy(this, "scrollIntervalFunc"), this.scrollIntervalMs);
                }
            };
            DragListener.prototype.constrainScrollVel = function() {
                var el = this.scrollEl;
                if (this.scrollTopVel < 0) {
                    if (el.scrollTop() <= 0) {
                        this.scrollTopVel = 0;
                    }
                } else if (this.scrollTopVel > 0) {
                    if (el.scrollTop() + el[0].clientHeight >= el[0].scrollHeight) {
                        this.scrollTopVel = 0;
                    }
                }
                if (this.scrollLeftVel < 0) {
                    if (el.scrollLeft() <= 0) {
                        this.scrollLeftVel = 0;
                    }
                } else if (this.scrollLeftVel > 0) {
                    if (el.scrollLeft() + el[0].clientWidth >= el[0].scrollWidth) {
                        this.scrollLeftVel = 0;
                    }
                }
            };
            DragListener.prototype.scrollIntervalFunc = function() {
                var el = this.scrollEl;
                var frac = this.scrollIntervalMs / 1e3;
                if (this.scrollTopVel) {
                    el.scrollTop(el.scrollTop() + this.scrollTopVel * frac);
                }
                if (this.scrollLeftVel) {
                    el.scrollLeft(el.scrollLeft() + this.scrollLeftVel * frac);
                }
                this.constrainScrollVel();
                if (!this.scrollTopVel && !this.scrollLeftVel) {
                    this.endAutoScroll();
                }
            };
            DragListener.prototype.endAutoScroll = function() {
                if (this.scrollIntervalId) {
                    clearInterval(this.scrollIntervalId);
                    this.scrollIntervalId = null;
                    this.handleScrollEnd();
                }
            };
            DragListener.prototype.handleDebouncedScroll = function() {
                if (!this.scrollIntervalId) {
                    this.handleScrollEnd();
                }
            };
            DragListener.prototype.handleScrollEnd = function() {};
            return DragListener;
        }();
        exports.default = DragListener;
        ListenerMixin_1.default.mixInto(DragListener);
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var tslib_1 = __webpack_require__(2);
        var util_1 = __webpack_require__(4);
        var Mixin_1 = __webpack_require__(14);
        var DayTableMixin = function(_super) {
            tslib_1.__extends(DayTableMixin, _super);
            function DayTableMixin() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            DayTableMixin.prototype.updateDayTable = function() {
                var t = this;
                var view = t.view;
                var calendar = view.calendar;
                var date = calendar.msToUtcMoment(t.dateProfile.renderUnzonedRange.startMs, true);
                var end = calendar.msToUtcMoment(t.dateProfile.renderUnzonedRange.endMs, true);
                var dayIndex = -1;
                var dayIndices = [];
                var dayDates = [];
                var daysPerRow;
                var firstDay;
                var rowCnt;
                while (date.isBefore(end)) {
                    if (view.isHiddenDay(date)) {
                        dayIndices.push(dayIndex + .5);
                    } else {
                        dayIndex++;
                        dayIndices.push(dayIndex);
                        dayDates.push(date.clone());
                    }
                    date.add(1, "days");
                }
                if (this.breakOnWeeks) {
                    firstDay = dayDates[0].day();
                    for (daysPerRow = 1; daysPerRow < dayDates.length; daysPerRow++) {
                        if (dayDates[daysPerRow].day() === firstDay) {
                            break;
                        }
                    }
                    rowCnt = Math.ceil(dayDates.length / daysPerRow);
                } else {
                    rowCnt = 1;
                    daysPerRow = dayDates.length;
                }
                this.dayDates = dayDates;
                this.dayIndices = dayIndices;
                this.daysPerRow = daysPerRow;
                this.rowCnt = rowCnt;
                this.updateDayTableCols();
            };
            DayTableMixin.prototype.updateDayTableCols = function() {
                this.colCnt = this.computeColCnt();
                this.colHeadFormat = this.opt("columnHeaderFormat") || this.opt("columnFormat") || this.computeColHeadFormat();
            };
            DayTableMixin.prototype.computeColCnt = function() {
                return this.daysPerRow;
            };
            DayTableMixin.prototype.getCellDate = function(row, col) {
                return this.dayDates[this.getCellDayIndex(row, col)].clone();
            };
            DayTableMixin.prototype.getCellRange = function(row, col) {
                var start = this.getCellDate(row, col);
                var end = start.clone().add(1, "days");
                return {
                    start: start,
                    end: end
                };
            };
            DayTableMixin.prototype.getCellDayIndex = function(row, col) {
                return row * this.daysPerRow + this.getColDayIndex(col);
            };
            DayTableMixin.prototype.getColDayIndex = function(col) {
                if (this.isRTL) {
                    return this.colCnt - 1 - col;
                } else {
                    return col;
                }
            };
            DayTableMixin.prototype.getDateDayIndex = function(date) {
                var dayIndices = this.dayIndices;
                var dayOffset = date.diff(this.dayDates[0], "days");
                if (dayOffset < 0) {
                    return dayIndices[0] - 1;
                } else if (dayOffset >= dayIndices.length) {
                    return dayIndices[dayIndices.length - 1] + 1;
                } else {
                    return dayIndices[dayOffset];
                }
            };
            DayTableMixin.prototype.computeColHeadFormat = function() {
                if (this.rowCnt > 1 || this.colCnt > 10) {
                    return "ddd";
                } else if (this.colCnt > 1) {
                    return this.opt("dayOfMonthFormat");
                } else {
                    return "dddd";
                }
            };
            DayTableMixin.prototype.sliceRangeByRow = function(unzonedRange) {
                var daysPerRow = this.daysPerRow;
                var normalRange = this.view.computeDayRange(unzonedRange);
                var rangeFirst = this.getDateDayIndex(normalRange.start);
                var rangeLast = this.getDateDayIndex(normalRange.end.clone().subtract(1, "days"));
                var segs = [];
                var row;
                var rowFirst;
                var rowLast;
                var segFirst;
                var segLast;
                for (row = 0; row < this.rowCnt; row++) {
                    rowFirst = row * daysPerRow;
                    rowLast = rowFirst + daysPerRow - 1;
                    segFirst = Math.max(rangeFirst, rowFirst);
                    segLast = Math.min(rangeLast, rowLast);
                    segFirst = Math.ceil(segFirst);
                    segLast = Math.floor(segLast);
                    if (segFirst <= segLast) {
                        segs.push({
                            row: row,
                            firstRowDayIndex: segFirst - rowFirst,
                            lastRowDayIndex: segLast - rowFirst,
                            isStart: segFirst === rangeFirst,
                            isEnd: segLast === rangeLast
                        });
                    }
                }
                return segs;
            };
            DayTableMixin.prototype.sliceRangeByDay = function(unzonedRange) {
                var daysPerRow = this.daysPerRow;
                var normalRange = this.view.computeDayRange(unzonedRange);
                var rangeFirst = this.getDateDayIndex(normalRange.start);
                var rangeLast = this.getDateDayIndex(normalRange.end.clone().subtract(1, "days"));
                var segs = [];
                var row;
                var rowFirst;
                var rowLast;
                var i;
                var segFirst;
                var segLast;
                for (row = 0; row < this.rowCnt; row++) {
                    rowFirst = row * daysPerRow;
                    rowLast = rowFirst + daysPerRow - 1;
                    for (i = rowFirst; i <= rowLast; i++) {
                        segFirst = Math.max(rangeFirst, i);
                        segLast = Math.min(rangeLast, i);
                        segFirst = Math.ceil(segFirst);
                        segLast = Math.floor(segLast);
                        if (segFirst <= segLast) {
                            segs.push({
                                row: row,
                                firstRowDayIndex: segFirst - rowFirst,
                                lastRowDayIndex: segLast - rowFirst,
                                isStart: segFirst === rangeFirst,
                                isEnd: segLast === rangeLast
                            });
                        }
                    }
                }
                return segs;
            };
            DayTableMixin.prototype.renderHeadHtml = function() {
                var theme = this.view.calendar.theme;
                return "" + '<div class="fc-row ' + theme.getClass("headerRow") + '">' + '<table class="' + theme.getClass("tableGrid") + '">' + "<thead>" + this.renderHeadTrHtml() + "</thead>" + "</table>" + "</div>";
            };
            DayTableMixin.prototype.renderHeadIntroHtml = function() {
                return this.renderIntroHtml();
            };
            DayTableMixin.prototype.renderHeadTrHtml = function() {
                return "" + "<tr>" + (this.isRTL ? "" : this.renderHeadIntroHtml()) + this.renderHeadDateCellsHtml() + (this.isRTL ? this.renderHeadIntroHtml() : "") + "</tr>";
            };
            DayTableMixin.prototype.renderHeadDateCellsHtml = function() {
                var htmls = [];
                var col;
                var date;
                for (col = 0; col < this.colCnt; col++) {
                    date = this.getCellDate(0, col);
                    htmls.push(this.renderHeadDateCellHtml(date));
                }
                return htmls.join("");
            };
            DayTableMixin.prototype.renderHeadDateCellHtml = function(date, colspan, otherAttrs) {
                var t = this;
                var view = t.view;
                var isDateValid = t.dateProfile.activeUnzonedRange.containsDate(date);
                var classNames = [ "fc-day-header", view.calendar.theme.getClass("widgetHeader") ];
                var innerHtml;
                if (typeof t.opt("columnHeaderHtml") === "function") {
                    innerHtml = t.opt("columnHeaderHtml")(date);
                } else if (typeof t.opt("columnHeaderText") === "function") {
                    innerHtml = util_1.htmlEscape(t.opt("columnHeaderText")(date));
                } else {
                    innerHtml = util_1.htmlEscape(date.format(t.colHeadFormat));
                }
                if (t.rowCnt === 1) {
                    classNames = classNames.concat(t.getDayClasses(date, true));
                } else {
                    classNames.push("fc-" + util_1.dayIDs[date.day()]);
                }
                return "" + '<th class="' + classNames.join(" ") + '"' + ((isDateValid && t.rowCnt) === 1 ? ' data-date="' + date.format("YYYY-MM-DD") + '"' : "") + (colspan > 1 ? ' colspan="' + colspan + '"' : "") + (otherAttrs ? " " + otherAttrs : "") + ">" + (isDateValid ? view.buildGotoAnchorHtml({
                    date: date,
                    forceOff: t.rowCnt > 1 || t.colCnt === 1
                }, innerHtml) : innerHtml) + "</th>";
            };
            DayTableMixin.prototype.renderBgTrHtml = function(row) {
                return "" + "<tr>" + (this.isRTL ? "" : this.renderBgIntroHtml(row)) + this.renderBgCellsHtml(row) + (this.isRTL ? this.renderBgIntroHtml(row) : "") + "</tr>";
            };
            DayTableMixin.prototype.renderBgIntroHtml = function(row) {
                return this.renderIntroHtml();
            };
            DayTableMixin.prototype.renderBgCellsHtml = function(row) {
                var htmls = [];
                var col;
                var date;
                for (col = 0; col < this.colCnt; col++) {
                    date = this.getCellDate(row, col);
                    htmls.push(this.renderBgCellHtml(date));
                }
                return htmls.join("");
            };
            DayTableMixin.prototype.renderBgCellHtml = function(date, otherAttrs) {
                var t = this;
                var view = t.view;
                var isDateValid = t.dateProfile.activeUnzonedRange.containsDate(date);
                var classes = t.getDayClasses(date);
                classes.unshift("fc-day", view.calendar.theme.getClass("widgetContent"));
                return '<td class="' + classes.join(" ") + '"' + (isDateValid ? ' data-date="' + date.format("YYYY-MM-DD") + '"' : "") + (otherAttrs ? " " + otherAttrs : "") + "></td>";
            };
            DayTableMixin.prototype.renderIntroHtml = function() {};
            DayTableMixin.prototype.bookendCells = function(trEl) {
                var introHtml = this.renderIntroHtml();
                if (introHtml) {
                    if (this.isRTL) {
                        trEl.append(introHtml);
                    } else {
                        trEl.prepend(introHtml);
                    }
                }
            };
            return DayTableMixin;
        }(Mixin_1.default);
        exports.default = DayTableMixin;
    }, function(module, exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var BusinessHourRenderer = function() {
            function BusinessHourRenderer(component, fillRenderer) {
                this.component = component;
                this.fillRenderer = fillRenderer;
            }
            BusinessHourRenderer.prototype.render = function(businessHourGenerator) {
                var component = this.component;
                var unzonedRange = component._getDateProfile().activeUnzonedRange;
                var eventInstanceGroup = businessHourGenerator.buildEventInstanceGroup(component.hasAllDayBusinessHours, unzonedRange);
                var eventFootprints = eventInstanceGroup ? component.eventRangesToEventFootprints(eventInstanceGroup.sliceRenderRanges(unzonedRange)) : [];
                this.renderEventFootprints(eventFootprints);
            };
            BusinessHourRenderer.prototype.renderEventFootprints = function(eventFootprints) {
                var segs = this.component.eventFootprintsToSegs(eventFootprints);
                this.renderSegs(segs);
                this.segs = segs;
            };
            BusinessHourRenderer.prototype.renderSegs = function(segs) {
                if (this.fillRenderer) {
                    this.fillRenderer.renderSegs("businessHours", segs, {
                        getClasses: function(seg) {
                            return [ "fc-nonbusiness", "fc-bgevent" ];
                        }
                    });
                }
            };
            BusinessHourRenderer.prototype.unrender = function() {
                if (this.fillRenderer) {
                    this.fillRenderer.unrender("businessHours");
                }
                this.segs = null;
            };
            BusinessHourRenderer.prototype.getSegs = function() {
                return this.segs || [];
            };
            return BusinessHourRenderer;
        }();
        exports.default = BusinessHourRenderer;
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var $ = __webpack_require__(3);
        var util_1 = __webpack_require__(4);
        var FillRenderer = function() {
            function FillRenderer(component) {
                this.fillSegTag = "div";
                this.component = component;
                this.elsByFill = {};
            }
            FillRenderer.prototype.renderFootprint = function(type, componentFootprint, props) {
                this.renderSegs(type, this.component.componentFootprintToSegs(componentFootprint), props);
            };
            FillRenderer.prototype.renderSegs = function(type, segs, props) {
                var els;
                segs = this.buildSegEls(type, segs, props);
                els = this.attachSegEls(type, segs);
                if (els) {
                    this.reportEls(type, els);
                }
                return segs;
            };
            FillRenderer.prototype.unrender = function(type) {
                var el = this.elsByFill[type];
                if (el) {
                    el.remove();
                    delete this.elsByFill[type];
                }
            };
            FillRenderer.prototype.buildSegEls = function(type, segs, props) {
                var _this = this;
                var html = "";
                var renderedSegs = [];
                var i;
                if (segs.length) {
                    for (i = 0; i < segs.length; i++) {
                        html += this.buildSegHtml(type, segs[i], props);
                    }
                    $(html).each(function(i, node) {
                        var seg = segs[i];
                        var el = $(node);
                        if (props.filterEl) {
                            el = props.filterEl(seg, el);
                        }
                        if (el) {
                            el = $(el);
                            if (el.is(_this.fillSegTag)) {
                                seg.el = el;
                                renderedSegs.push(seg);
                            }
                        }
                    });
                }
                return renderedSegs;
            };
            FillRenderer.prototype.buildSegHtml = function(type, seg, props) {
                var classes = props.getClasses ? props.getClasses(seg) : [];
                var css = util_1.cssToStr(props.getCss ? props.getCss(seg) : {});
                return "<" + this.fillSegTag + (classes.length ? ' class="' + classes.join(" ") + '"' : "") + (css ? ' style="' + css + '"' : "") + " />";
            };
            FillRenderer.prototype.attachSegEls = function(type, segs) {};
            FillRenderer.prototype.reportEls = function(type, nodes) {
                if (this.elsByFill[type]) {
                    this.elsByFill[type] = this.elsByFill[type].add(nodes);
                } else {
                    this.elsByFill[type] = $(nodes);
                }
            };
            return FillRenderer;
        }();
        exports.default = FillRenderer;
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var SingleEventDef_1 = __webpack_require__(13);
        var EventFootprint_1 = __webpack_require__(35);
        var EventSource_1 = __webpack_require__(6);
        var HelperRenderer = function() {
            function HelperRenderer(component, eventRenderer) {
                this.view = component._getView();
                this.component = component;
                this.eventRenderer = eventRenderer;
            }
            HelperRenderer.prototype.renderComponentFootprint = function(componentFootprint) {
                this.renderEventFootprints([ this.fabricateEventFootprint(componentFootprint) ]);
            };
            HelperRenderer.prototype.renderEventDraggingFootprints = function(eventFootprints, sourceSeg, isTouch) {
                this.renderEventFootprints(eventFootprints, sourceSeg, "fc-dragging", isTouch ? null : this.view.opt("dragOpacity"));
            };
            HelperRenderer.prototype.renderEventResizingFootprints = function(eventFootprints, sourceSeg, isTouch) {
                this.renderEventFootprints(eventFootprints, sourceSeg, "fc-resizing");
            };
            HelperRenderer.prototype.renderEventFootprints = function(eventFootprints, sourceSeg, extraClassNames, opacity) {
                var segs = this.component.eventFootprintsToSegs(eventFootprints);
                var classNames = "fc-helper " + (extraClassNames || "");
                var i;
                segs = this.eventRenderer.renderFgSegEls(segs);
                for (i = 0; i < segs.length; i++) {
                    segs[i].el.addClass(classNames);
                }
                if (opacity != null) {
                    for (i = 0; i < segs.length; i++) {
                        segs[i].el.css("opacity", opacity);
                    }
                }
                this.helperEls = this.renderSegs(segs, sourceSeg);
            };
            HelperRenderer.prototype.renderSegs = function(segs, sourceSeg) {};
            HelperRenderer.prototype.unrender = function() {
                if (this.helperEls) {
                    this.helperEls.remove();
                    this.helperEls = null;
                }
            };
            HelperRenderer.prototype.fabricateEventFootprint = function(componentFootprint) {
                var calendar = this.view.calendar;
                var eventDateProfile = calendar.footprintToDateProfile(componentFootprint);
                var dummyEvent = new SingleEventDef_1.default(new EventSource_1.default(calendar));
                var dummyInstance;
                dummyEvent.dateProfile = eventDateProfile;
                dummyInstance = dummyEvent.buildInstance();
                return new EventFootprint_1.default(componentFootprint, dummyEvent, dummyInstance);
            };
            return HelperRenderer;
        }();
        exports.default = HelperRenderer;
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var tslib_1 = __webpack_require__(2);
        var GlobalEmitter_1 = __webpack_require__(20);
        var Interaction_1 = __webpack_require__(15);
        var EventPointing = function(_super) {
            tslib_1.__extends(EventPointing, _super);
            function EventPointing() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            EventPointing.prototype.bindToEl = function(el) {
                var component = this.component;
                component.bindSegHandlerToEl(el, "click", this.handleClick.bind(this));
                component.bindSegHandlerToEl(el, "mouseenter", this.handleMouseover.bind(this));
                component.bindSegHandlerToEl(el, "mouseleave", this.handleMouseout.bind(this));
            };
            EventPointing.prototype.handleClick = function(seg, ev) {
                var res = this.component.publiclyTrigger("eventClick", {
                    context: seg.el[0],
                    args: [ seg.footprint.getEventLegacy(), ev, this.view ]
                });
                if (res === false) {
                    ev.preventDefault();
                }
            };
            EventPointing.prototype.handleMouseover = function(seg, ev) {
                if (!GlobalEmitter_1.default.get().shouldIgnoreMouse() && !this.mousedOverSeg) {
                    this.mousedOverSeg = seg;
                    if (this.view.isEventDefResizable(seg.footprint.eventDef)) {
                        seg.el.addClass("fc-allow-mouse-resize");
                    }
                    this.component.publiclyTrigger("eventMouseover", {
                        context: seg.el[0],
                        args: [ seg.footprint.getEventLegacy(), ev, this.view ]
                    });
                }
            };
            EventPointing.prototype.handleMouseout = function(seg, ev) {
                if (this.mousedOverSeg) {
                    this.mousedOverSeg = null;
                    if (this.view.isEventDefResizable(seg.footprint.eventDef)) {
                        seg.el.removeClass("fc-allow-mouse-resize");
                    }
                    this.component.publiclyTrigger("eventMouseout", {
                        context: seg.el[0],
                        args: [ seg.footprint.getEventLegacy(), ev || {}, this.view ]
                    });
                }
            };
            EventPointing.prototype.end = function() {
                if (this.mousedOverSeg) {
                    this.handleMouseout(this.mousedOverSeg);
                }
            };
            return EventPointing;
        }(Interaction_1.default);
        exports.default = EventPointing;
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var tslib_1 = __webpack_require__(2);
        var Mixin_1 = __webpack_require__(14);
        var DateClicking_1 = __webpack_require__(241);
        var DateSelecting_1 = __webpack_require__(221);
        var EventPointing_1 = __webpack_require__(59);
        var EventDragging_1 = __webpack_require__(220);
        var EventResizing_1 = __webpack_require__(219);
        var ExternalDropping_1 = __webpack_require__(218);
        var StandardInteractionsMixin = function(_super) {
            tslib_1.__extends(StandardInteractionsMixin, _super);
            function StandardInteractionsMixin() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return StandardInteractionsMixin;
        }(Mixin_1.default);
        exports.default = StandardInteractionsMixin;
        StandardInteractionsMixin.prototype.dateClickingClass = DateClicking_1.default;
        StandardInteractionsMixin.prototype.dateSelectingClass = DateSelecting_1.default;
        StandardInteractionsMixin.prototype.eventPointingClass = EventPointing_1.default;
        StandardInteractionsMixin.prototype.eventDraggingClass = EventDragging_1.default;
        StandardInteractionsMixin.prototype.eventResizingClass = EventResizing_1.default;
        StandardInteractionsMixin.prototype.externalDroppingClass = ExternalDropping_1.default;
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var tslib_1 = __webpack_require__(2);
        var $ = __webpack_require__(3);
        var util_1 = __webpack_require__(4);
        var CoordCache_1 = __webpack_require__(53);
        var Popover_1 = __webpack_require__(245);
        var UnzonedRange_1 = __webpack_require__(5);
        var ComponentFootprint_1 = __webpack_require__(12);
        var EventFootprint_1 = __webpack_require__(35);
        var BusinessHourRenderer_1 = __webpack_require__(56);
        var StandardInteractionsMixin_1 = __webpack_require__(60);
        var InteractiveDateComponent_1 = __webpack_require__(40);
        var DayTableMixin_1 = __webpack_require__(55);
        var DayGridEventRenderer_1 = __webpack_require__(246);
        var DayGridHelperRenderer_1 = __webpack_require__(247);
        var DayGridFillRenderer_1 = __webpack_require__(248);
        var DayGrid = function(_super) {
            tslib_1.__extends(DayGrid, _super);
            function DayGrid(view) {
                var _this = _super.call(this, view) || this;
                _this.cellWeekNumbersVisible = false;
                _this.bottomCoordPadding = 0;
                _this.isRigid = false;
                _this.hasAllDayBusinessHours = true;
                return _this;
            }
            DayGrid.prototype.componentFootprintToSegs = function(componentFootprint) {
                var segs = this.sliceRangeByRow(componentFootprint.unzonedRange);
                var i;
                var seg;
                for (i = 0; i < segs.length; i++) {
                    seg = segs[i];
                    if (this.isRTL) {
                        seg.leftCol = this.daysPerRow - 1 - seg.lastRowDayIndex;
                        seg.rightCol = this.daysPerRow - 1 - seg.firstRowDayIndex;
                    } else {
                        seg.leftCol = seg.firstRowDayIndex;
                        seg.rightCol = seg.lastRowDayIndex;
                    }
                }
                return segs;
            };
            DayGrid.prototype.renderDates = function(dateProfile) {
                this.dateProfile = dateProfile;
                this.updateDayTable();
                this.renderGrid();
            };
            DayGrid.prototype.unrenderDates = function() {
                this.removeSegPopover();
            };
            DayGrid.prototype.renderGrid = function() {
                var view = this.view;
                var rowCnt = this.rowCnt;
                var colCnt = this.colCnt;
                var html = "";
                var row;
                var col;
                if (this.headContainerEl) {
                    this.headContainerEl.html(this.renderHeadHtml());
                }
                for (row = 0; row < rowCnt; row++) {
                    html += this.renderDayRowHtml(row, this.isRigid);
                }
                this.el.html(html);
                this.rowEls = this.el.find(".fc-row");
                this.cellEls = this.el.find(".fc-day, .fc-disabled-day");
                this.rowCoordCache = new CoordCache_1.default({
                    els: this.rowEls,
                    isVertical: true
                });
                this.colCoordCache = new CoordCache_1.default({
                    els: this.cellEls.slice(0, this.colCnt),
                    isHorizontal: true
                });
                for (row = 0; row < rowCnt; row++) {
                    for (col = 0; col < colCnt; col++) {
                        this.publiclyTrigger("dayRender", {
                            context: view,
                            args: [ this.getCellDate(row, col), this.getCellEl(row, col), view ]
                        });
                    }
                }
            };
            DayGrid.prototype.renderDayRowHtml = function(row, isRigid) {
                var theme = this.view.calendar.theme;
                var classes = [ "fc-row", "fc-week", theme.getClass("dayRow") ];
                if (isRigid) {
                    classes.push("fc-rigid");
                }
                return "" + '<div class="' + classes.join(" ") + '">' + '<div class="fc-bg">' + '<table class="' + theme.getClass("tableGrid") + '">' + this.renderBgTrHtml(row) + "</table>" + "</div>" + '<div class="fc-content-skeleton">' + "<table>" + (this.getIsNumbersVisible() ? "<thead>" + this.renderNumberTrHtml(row) + "</thead>" : "") + "</table>" + "</div>" + "</div>";
            };
            DayGrid.prototype.getIsNumbersVisible = function() {
                return this.getIsDayNumbersVisible() || this.cellWeekNumbersVisible;
            };
            DayGrid.prototype.getIsDayNumbersVisible = function() {
                return this.rowCnt > 1;
            };
            DayGrid.prototype.renderNumberTrHtml = function(row) {
                return "" + "<tr>" + (this.isRTL ? "" : this.renderNumberIntroHtml(row)) + this.renderNumberCellsHtml(row) + (this.isRTL ? this.renderNumberIntroHtml(row) : "") + "</tr>";
            };
            DayGrid.prototype.renderNumberIntroHtml = function(row) {
                return this.renderIntroHtml();
            };
            DayGrid.prototype.renderNumberCellsHtml = function(row) {
                var htmls = [];
                var col;
                var date;
                for (col = 0; col < this.colCnt; col++) {
                    date = this.getCellDate(row, col);
                    htmls.push(this.renderNumberCellHtml(date));
                }
                return htmls.join("");
            };
            DayGrid.prototype.renderNumberCellHtml = function(date) {
                var view = this.view;
                var html = "";
                var isDateValid = this.dateProfile.activeUnzonedRange.containsDate(date);
                var isDayNumberVisible = this.getIsDayNumbersVisible() && isDateValid;
                var classes;
                var weekCalcFirstDoW;
                if (!isDayNumberVisible && !this.cellWeekNumbersVisible) {
                    return "<td/>";
                }
                classes = this.getDayClasses(date);
                classes.unshift("fc-day-top");
                if (this.cellWeekNumbersVisible) {
                    if (date._locale._fullCalendar_weekCalc === "ISO") {
                        weekCalcFirstDoW = 1;
                    } else {
                        weekCalcFirstDoW = date._locale.firstDayOfWeek();
                    }
                }
                html += '<td class="' + classes.join(" ") + '"' + (isDateValid ? ' data-date="' + date.format() + '"' : "") + ">";
                if (this.cellWeekNumbersVisible && date.day() === weekCalcFirstDoW) {
                    html += view.buildGotoAnchorHtml({
                        date: date,
                        type: "week"
                    }, {
                        class: "fc-week-number"
                    }, date.format("w"));
                }
                if (isDayNumberVisible) {
                    html += view.buildGotoAnchorHtml(date, {
                        class: "fc-day-number"
                    }, date.date());
                }
                html += "</td>";
                return html;
            };
            DayGrid.prototype.prepareHits = function() {
                this.colCoordCache.build();
                this.rowCoordCache.build();
                this.rowCoordCache.bottoms[this.rowCnt - 1] += this.bottomCoordPadding;
            };
            DayGrid.prototype.releaseHits = function() {
                this.colCoordCache.clear();
                this.rowCoordCache.clear();
            };
            DayGrid.prototype.queryHit = function(leftOffset, topOffset) {
                if (this.colCoordCache.isLeftInBounds(leftOffset) && this.rowCoordCache.isTopInBounds(topOffset)) {
                    var col = this.colCoordCache.getHorizontalIndex(leftOffset);
                    var row = this.rowCoordCache.getVerticalIndex(topOffset);
                    if (row != null && col != null) {
                        return this.getCellHit(row, col);
                    }
                }
            };
            DayGrid.prototype.getHitFootprint = function(hit) {
                var range = this.getCellRange(hit.row, hit.col);
                return new ComponentFootprint_1.default(new UnzonedRange_1.default(range.start, range.end), true);
            };
            DayGrid.prototype.getHitEl = function(hit) {
                return this.getCellEl(hit.row, hit.col);
            };
            DayGrid.prototype.getCellHit = function(row, col) {
                return {
                    row: row,
                    col: col,
                    component: this,
                    left: this.colCoordCache.getLeftOffset(col),
                    right: this.colCoordCache.getRightOffset(col),
                    top: this.rowCoordCache.getTopOffset(row),
                    bottom: this.rowCoordCache.getBottomOffset(row)
                };
            };
            DayGrid.prototype.getCellEl = function(row, col) {
                return this.cellEls.eq(row * this.colCnt + col);
            };
            DayGrid.prototype.executeEventUnrender = function() {
                this.removeSegPopover();
                _super.prototype.executeEventUnrender.call(this);
            };
            DayGrid.prototype.getOwnEventSegs = function() {
                return _super.prototype.getOwnEventSegs.call(this).concat(this.popoverSegs || []);
            };
            DayGrid.prototype.renderDrag = function(eventFootprints, seg, isTouch) {
                var i;
                for (i = 0; i < eventFootprints.length; i++) {
                    this.renderHighlight(eventFootprints[i].componentFootprint);
                }
                if (eventFootprints.length && seg && seg.component !== this) {
                    this.helperRenderer.renderEventDraggingFootprints(eventFootprints, seg, isTouch);
                    return true;
                }
            };
            DayGrid.prototype.unrenderDrag = function() {
                this.unrenderHighlight();
                this.helperRenderer.unrender();
            };
            DayGrid.prototype.renderEventResize = function(eventFootprints, seg, isTouch) {
                var i;
                for (i = 0; i < eventFootprints.length; i++) {
                    this.renderHighlight(eventFootprints[i].componentFootprint);
                }
                this.helperRenderer.renderEventResizingFootprints(eventFootprints, seg, isTouch);
            };
            DayGrid.prototype.unrenderEventResize = function() {
                this.unrenderHighlight();
                this.helperRenderer.unrender();
            };
            DayGrid.prototype.removeSegPopover = function() {
                if (this.segPopover) {
                    this.segPopover.hide();
                }
            };
            DayGrid.prototype.limitRows = function(levelLimit) {
                var rowStructs = this.eventRenderer.rowStructs || [];
                var row;
                var rowLevelLimit;
                for (row = 0; row < rowStructs.length; row++) {
                    this.unlimitRow(row);
                    if (!levelLimit) {
                        rowLevelLimit = false;
                    } else if (typeof levelLimit === "number") {
                        rowLevelLimit = levelLimit;
                    } else {
                        rowLevelLimit = this.computeRowLevelLimit(row);
                    }
                    if (rowLevelLimit !== false) {
                        this.limitRow(row, rowLevelLimit);
                    }
                }
            };
            DayGrid.prototype.computeRowLevelLimit = function(row) {
                var rowEl = this.rowEls.eq(row);
                var rowHeight = rowEl.height();
                var trEls = this.eventRenderer.rowStructs[row].tbodyEl.children();
                var i;
                var trEl;
                var trHeight;
                function iterInnerHeights(i, childNode) {
                    trHeight = Math.max(trHeight, $(childNode).outerHeight());
                }
                for (i = 0; i < trEls.length; i++) {
                    trEl = trEls.eq(i).removeClass("fc-limited");
                    trHeight = 0;
                    trEl.find("> td > :first-child").each(iterInnerHeights);
                    if (trEl.position().top + trHeight > rowHeight) {
                        return i;
                    }
                }
                return false;
            };
            DayGrid.prototype.limitRow = function(row, levelLimit) {
                var _this = this;
                var rowStruct = this.eventRenderer.rowStructs[row];
                var moreNodes = [];
                var col = 0;
                var levelSegs;
                var cellMatrix;
                var limitedNodes;
                var i;
                var seg;
                var segsBelow;
                var totalSegsBelow;
                var colSegsBelow;
                var td;
                var rowspan;
                var segMoreNodes;
                var j;
                var moreTd;
                var moreWrap;
                var moreLink;
                var emptyCellsUntil = function(endCol) {
                    while (col < endCol) {
                        segsBelow = _this.getCellSegs(row, col, levelLimit);
                        if (segsBelow.length) {
                            td = cellMatrix[levelLimit - 1][col];
                            moreLink = _this.renderMoreLink(row, col, segsBelow);
                            moreWrap = $("<div/>").append(moreLink);
                            td.append(moreWrap);
                            moreNodes.push(moreWrap[0]);
                        }
                        col++;
                    }
                };
                if (levelLimit && levelLimit < rowStruct.segLevels.length) {
                    levelSegs = rowStruct.segLevels[levelLimit - 1];
                    cellMatrix = rowStruct.cellMatrix;
                    limitedNodes = rowStruct.tbodyEl.children().slice(levelLimit).addClass("fc-limited").get();
                    for (i = 0; i < levelSegs.length; i++) {
                        seg = levelSegs[i];
                        emptyCellsUntil(seg.leftCol);
                        colSegsBelow = [];
                        totalSegsBelow = 0;
                        while (col <= seg.rightCol) {
                            segsBelow = this.getCellSegs(row, col, levelLimit);
                            colSegsBelow.push(segsBelow);
                            totalSegsBelow += segsBelow.length;
                            col++;
                        }
                        if (totalSegsBelow) {
                            td = cellMatrix[levelLimit - 1][seg.leftCol];
                            rowspan = td.attr("rowspan") || 1;
                            segMoreNodes = [];
                            for (j = 0; j < colSegsBelow.length; j++) {
                                moreTd = $('<td class="fc-more-cell"/>').attr("rowspan", rowspan);
                                segsBelow = colSegsBelow[j];
                                moreLink = this.renderMoreLink(row, seg.leftCol + j, [ seg ].concat(segsBelow));
                                moreWrap = $("<div/>").append(moreLink);
                                moreTd.append(moreWrap);
                                segMoreNodes.push(moreTd[0]);
                                moreNodes.push(moreTd[0]);
                            }
                            td.addClass("fc-limited").after($(segMoreNodes));
                            limitedNodes.push(td[0]);
                        }
                    }
                    emptyCellsUntil(this.colCnt);
                    rowStruct.moreEls = $(moreNodes);
                    rowStruct.limitedEls = $(limitedNodes);
                }
            };
            DayGrid.prototype.unlimitRow = function(row) {
                var rowStruct = this.eventRenderer.rowStructs[row];
                if (rowStruct.moreEls) {
                    rowStruct.moreEls.remove();
                    rowStruct.moreEls = null;
                }
                if (rowStruct.limitedEls) {
                    rowStruct.limitedEls.removeClass("fc-limited");
                    rowStruct.limitedEls = null;
                }
            };
            DayGrid.prototype.renderMoreLink = function(row, col, hiddenSegs) {
                var _this = this;
                var view = this.view;
                return $('<a class="fc-more"/>').text(this.getMoreLinkText(hiddenSegs.length)).on("click", function(ev) {
                    var clickOption = _this.opt("eventLimitClick");
                    var date = _this.getCellDate(row, col);
                    var moreEl = $(ev.currentTarget);
                    var dayEl = _this.getCellEl(row, col);
                    var allSegs = _this.getCellSegs(row, col);
                    var reslicedAllSegs = _this.resliceDaySegs(allSegs, date);
                    var reslicedHiddenSegs = _this.resliceDaySegs(hiddenSegs, date);
                    if (typeof clickOption === "function") {
                        clickOption = _this.publiclyTrigger("eventLimitClick", {
                            context: view,
                            args: [ {
                                date: date.clone(),
                                dayEl: dayEl,
                                moreEl: moreEl,
                                segs: reslicedAllSegs,
                                hiddenSegs: reslicedHiddenSegs
                            }, ev, view ]
                        });
                    }
                    if (clickOption === "popover") {
                        _this.showSegPopover(row, col, moreEl, reslicedAllSegs);
                    } else if (typeof clickOption === "string") {
                        view.calendar.zoomTo(date, clickOption);
                    }
                });
            };
            DayGrid.prototype.showSegPopover = function(row, col, moreLink, segs) {
                var _this = this;
                var view = this.view;
                var moreWrap = moreLink.parent();
                var topEl;
                var options;
                if (this.rowCnt === 1) {
                    topEl = view.el;
                } else {
                    topEl = this.rowEls.eq(row);
                }
                options = {
                    className: "fc-more-popover " + view.calendar.theme.getClass("popover"),
                    content: this.renderSegPopoverContent(row, col, segs),
                    parentEl: view.el,
                    top: topEl.offset().top,
                    autoHide: true,
                    viewportConstrain: this.opt("popoverViewportConstrain"),
                    hide: function() {
                        if (_this.popoverSegs) {
                            _this.triggerBeforeEventSegsDestroyed(_this.popoverSegs);
                        }
                        _this.segPopover.removeElement();
                        _this.segPopover = null;
                        _this.popoverSegs = null;
                    }
                };
                if (this.isRTL) {
                    options.right = moreWrap.offset().left + moreWrap.outerWidth() + 1;
                } else {
                    options.left = moreWrap.offset().left - 1;
                }
                this.segPopover = new Popover_1.default(options);
                this.segPopover.show();
                this.bindAllSegHandlersToEl(this.segPopover.el);
                this.triggerAfterEventSegsRendered(segs);
            };
            DayGrid.prototype.renderSegPopoverContent = function(row, col, segs) {
                var view = this.view;
                var theme = view.calendar.theme;
                var title = this.getCellDate(row, col).format(this.opt("dayPopoverFormat"));
                var content = $('<div class="fc-header ' + theme.getClass("popoverHeader") + '">' + '<span class="fc-close ' + theme.getIconClass("close") + '"></span>' + '<span class="fc-title">' + util_1.htmlEscape(title) + "</span>" + '<div class="fc-clear"/>' + "</div>" + '<div class="fc-body ' + theme.getClass("popoverContent") + '">' + '<div class="fc-event-container"></div>' + "</div>");
                var segContainer = content.find(".fc-event-container");
                var i;
                segs = this.eventRenderer.renderFgSegEls(segs, true);
                this.popoverSegs = segs;
                for (i = 0; i < segs.length; i++) {
                    this.hitsNeeded();
                    segs[i].hit = this.getCellHit(row, col);
                    this.hitsNotNeeded();
                    segContainer.append(segs[i].el);
                }
                return content;
            };
            DayGrid.prototype.resliceDaySegs = function(segs, dayDate) {
                var dayStart = dayDate.clone();
                var dayEnd = dayStart.clone().add(1, "days");
                var dayRange = new UnzonedRange_1.default(dayStart, dayEnd);
                var newSegs = [];
                var i;
                var seg;
                var slicedRange;
                for (i = 0; i < segs.length; i++) {
                    seg = segs[i];
                    slicedRange = seg.footprint.componentFootprint.unzonedRange.intersect(dayRange);
                    if (slicedRange) {
                        newSegs.push($.extend({}, seg, {
                            footprint: new EventFootprint_1.default(new ComponentFootprint_1.default(slicedRange, seg.footprint.componentFootprint.isAllDay), seg.footprint.eventDef, seg.footprint.eventInstance),
                            isStart: seg.isStart && slicedRange.isStart,
                            isEnd: seg.isEnd && slicedRange.isEnd
                        }));
                    }
                }
                this.eventRenderer.sortEventSegs(newSegs);
                return newSegs;
            };
            DayGrid.prototype.getMoreLinkText = function(num) {
                var opt = this.opt("eventLimitText");
                if (typeof opt === "function") {
                    return opt(num);
                } else {
                    return "+" + num + " " + opt;
                }
            };
            DayGrid.prototype.getCellSegs = function(row, col, startLevel) {
                var segMatrix = this.eventRenderer.rowStructs[row].segMatrix;
                var level = startLevel || 0;
                var segs = [];
                var seg;
                while (level < segMatrix.length) {
                    seg = segMatrix[level][col];
                    if (seg) {
                        segs.push(seg);
                    }
                    level++;
                }
                return segs;
            };
            return DayGrid;
        }(InteractiveDateComponent_1.default);
        exports.default = DayGrid;
        DayGrid.prototype.eventRendererClass = DayGridEventRenderer_1.default;
        DayGrid.prototype.businessHourRendererClass = BusinessHourRenderer_1.default;
        DayGrid.prototype.helperRendererClass = DayGridHelperRenderer_1.default;
        DayGrid.prototype.fillRendererClass = DayGridFillRenderer_1.default;
        StandardInteractionsMixin_1.default.mixInto(DayGrid);
        DayTableMixin_1.default.mixInto(DayGrid);
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var tslib_1 = __webpack_require__(2);
        var $ = __webpack_require__(3);
        var util_1 = __webpack_require__(4);
        var Scroller_1 = __webpack_require__(39);
        var View_1 = __webpack_require__(41);
        var BasicViewDateProfileGenerator_1 = __webpack_require__(224);
        var DayGrid_1 = __webpack_require__(61);
        var BasicView = function(_super) {
            tslib_1.__extends(BasicView, _super);
            function BasicView(calendar, viewSpec) {
                var _this = _super.call(this, calendar, viewSpec) || this;
                _this.dayGrid = _this.instantiateDayGrid();
                _this.dayGrid.isRigid = _this.hasRigidRows();
                if (_this.opt("weekNumbers")) {
                    if (_this.opt("weekNumbersWithinDays")) {
                        _this.dayGrid.cellWeekNumbersVisible = true;
                        _this.dayGrid.colWeekNumbersVisible = false;
                    } else {
                        _this.dayGrid.cellWeekNumbersVisible = false;
                        _this.dayGrid.colWeekNumbersVisible = true;
                    }
                }
                _this.addChild(_this.dayGrid);
                _this.scroller = new Scroller_1.default({
                    overflowX: "hidden",
                    overflowY: "auto"
                });
                return _this;
            }
            BasicView.prototype.instantiateDayGrid = function() {
                var subclass = makeDayGridSubclass(this.dayGridClass);
                return new subclass(this);
            };
            BasicView.prototype.executeDateRender = function(dateProfile) {
                this.dayGrid.breakOnWeeks = /year|month|week/.test(dateProfile.currentRangeUnit);
                _super.prototype.executeDateRender.call(this, dateProfile);
            };
            BasicView.prototype.renderSkeleton = function() {
                var dayGridContainerEl;
                var dayGridEl;
                this.el.addClass("fc-basic-view").html(this.renderSkeletonHtml());
                this.scroller.render();
                dayGridContainerEl = this.scroller.el.addClass("fc-day-grid-container");
                dayGridEl = $('<div class="fc-day-grid" />').appendTo(dayGridContainerEl);
                this.el.find(".fc-body > tr > td").append(dayGridContainerEl);
                this.dayGrid.headContainerEl = this.el.find(".fc-head-container");
                this.dayGrid.setElement(dayGridEl);
            };
            BasicView.prototype.unrenderSkeleton = function() {
                this.dayGrid.removeElement();
                this.scroller.destroy();
            };
            BasicView.prototype.renderSkeletonHtml = function() {
                var theme = this.calendar.theme;
                return "" + '<table class="' + theme.getClass("tableGrid") + '">' + (this.opt("columnHeader") ? '<thead class="fc-head">' + "<tr>" + '<td class="fc-head-container ' + theme.getClass("widgetHeader") + '">&nbsp;</td>' + "</tr>" + "</thead>" : "") + '<tbody class="fc-body">' + "<tr>" + '<td class="' + theme.getClass("widgetContent") + '"></td>' + "</tr>" + "</tbody>" + "</table>";
            };
            BasicView.prototype.weekNumberStyleAttr = function() {
                if (this.weekNumberWidth != null) {
                    return 'style="width:' + this.weekNumberWidth + 'px"';
                }
                return "";
            };
            BasicView.prototype.hasRigidRows = function() {
                var eventLimit = this.opt("eventLimit");
                return eventLimit && typeof eventLimit !== "number";
            };
            BasicView.prototype.updateSize = function(totalHeight, isAuto, isResize) {
                var eventLimit = this.opt("eventLimit");
                var headRowEl = this.dayGrid.headContainerEl.find(".fc-row");
                var scrollerHeight;
                var scrollbarWidths;
                if (!this.dayGrid.rowEls) {
                    if (!isAuto) {
                        scrollerHeight = this.computeScrollerHeight(totalHeight);
                        this.scroller.setHeight(scrollerHeight);
                    }
                    return;
                }
                _super.prototype.updateSize.call(this, totalHeight, isAuto, isResize);
                if (this.dayGrid.colWeekNumbersVisible) {
                    this.weekNumberWidth = util_1.matchCellWidths(this.el.find(".fc-week-number"));
                }
                this.scroller.clear();
                util_1.uncompensateScroll(headRowEl);
                this.dayGrid.removeSegPopover();
                if (eventLimit && typeof eventLimit === "number") {
                    this.dayGrid.limitRows(eventLimit);
                }
                scrollerHeight = this.computeScrollerHeight(totalHeight);
                this.setGridHeight(scrollerHeight, isAuto);
                if (eventLimit && typeof eventLimit !== "number") {
                    this.dayGrid.limitRows(eventLimit);
                }
                if (!isAuto) {
                    this.scroller.setHeight(scrollerHeight);
                    scrollbarWidths = this.scroller.getScrollbarWidths();
                    if (scrollbarWidths.left || scrollbarWidths.right) {
                        util_1.compensateScroll(headRowEl, scrollbarWidths);
                        scrollerHeight = this.computeScrollerHeight(totalHeight);
                        this.scroller.setHeight(scrollerHeight);
                    }
                    this.scroller.lockOverflow(scrollbarWidths);
                }
            };
            BasicView.prototype.computeScrollerHeight = function(totalHeight) {
                return totalHeight - util_1.subtractInnerElHeight(this.el, this.scroller.el);
            };
            BasicView.prototype.setGridHeight = function(height, isAuto) {
                if (isAuto) {
                    util_1.undistributeHeight(this.dayGrid.rowEls);
                } else {
                    util_1.distributeHeight(this.dayGrid.rowEls, height, true);
                }
            };
            BasicView.prototype.computeInitialDateScroll = function() {
                return {
                    top: 0
                };
            };
            BasicView.prototype.queryDateScroll = function() {
                return {
                    top: this.scroller.getScrollTop()
                };
            };
            BasicView.prototype.applyDateScroll = function(scroll) {
                if (scroll.top !== undefined) {
                    this.scroller.setScrollTop(scroll.top);
                }
            };
            return BasicView;
        }(View_1.default);
        exports.default = BasicView;
        BasicView.prototype.dateProfileGeneratorClass = BasicViewDateProfileGenerator_1.default;
        BasicView.prototype.dayGridClass = DayGrid_1.default;
        function makeDayGridSubclass(SuperClass) {
            return function(_super) {
                tslib_1.__extends(SubClass, _super);
                function SubClass() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.colWeekNumbersVisible = false;
                    return _this;
                }
                SubClass.prototype.renderHeadIntroHtml = function() {
                    var view = this.view;
                    if (this.colWeekNumbersVisible) {
                        return "" + '<th class="fc-week-number ' + view.calendar.theme.getClass("widgetHeader") + '" ' + view.weekNumberStyleAttr() + ">" + "<span>" + util_1.htmlEscape(this.opt("weekNumberTitle")) + "</span>" + "</th>";
                    }
                    return "";
                };
                SubClass.prototype.renderNumberIntroHtml = function(row) {
                    var view = this.view;
                    var weekStart = this.getCellDate(row, 0);
                    if (this.colWeekNumbersVisible) {
                        return "" + '<td class="fc-week-number" ' + view.weekNumberStyleAttr() + ">" + view.buildGotoAnchorHtml({
                            date: weekStart,
                            type: "week",
                            forceOff: this.colCnt === 1
                        }, weekStart.format("w")) + "</td>";
                    }
                    return "";
                };
                SubClass.prototype.renderBgIntroHtml = function() {
                    var view = this.view;
                    if (this.colWeekNumbersVisible) {
                        return '<td class="fc-week-number ' + view.calendar.theme.getClass("widgetContent") + '" ' + view.weekNumberStyleAttr() + "></td>";
                    }
                    return "";
                };
                SubClass.prototype.renderIntroHtml = function() {
                    var view = this.view;
                    if (this.colWeekNumbersVisible) {
                        return '<td class="fc-week-number" ' + view.weekNumberStyleAttr() + "></td>";
                    }
                    return "";
                };
                SubClass.prototype.getIsNumbersVisible = function() {
                    return DayGrid_1.default.prototype.getIsNumbersVisible.apply(this, arguments) || this.colWeekNumbersVisible;
                };
                return SubClass;
            }(SuperClass);
        }
    }, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var UnzonedRange_1 = __webpack_require__(5);
        var ComponentFootprint_1 = __webpack_require__(12);
        var EventDefParser_1 = __webpack_require__(49);
        var EventSource_1 = __webpack_require__(6);
        var util_1 = __webpack_require__(34);
        var Constraints = function() {
            function Constraints(eventManager, _calendar) {
                this.eventManager = eventManager;
                this._calendar = _calendar;
            }
            Constraints.prototype.opt = function(name) {
                return this._calendar.opt(name);
            };
            Constraints.prototype.isEventInstanceGroupAllowed = function(eventInstanceGroup) {
                var eventDef = eventInstanceGroup.getEventDef();
                var eventFootprints = this.eventRangesToEventFootprints(eventInstanceGroup.getAllEventRanges());
                var i;
                var peerEventInstances = this.getPeerEventInstances(eventDef);
                var peerEventRanges = peerEventInstances.map(util_1.eventInstanceToEventRange);
                var peerEventFootprints = this.eventRangesToEventFootprints(peerEventRanges);
                var constraintVal = eventDef.getConstraint();
                var overlapVal = eventDef.getOverlap();
                var eventAllowFunc = this.opt("eventAllow");
                for (i = 0; i < eventFootprints.length; i++) {
                    if (!this.isFootprintAllowed(eventFootprints[i].componentFootprint, peerEventFootprints, constraintVal, overlapVal, eventFootprints[i].eventInstance)) {
                        return false;
                    }
                }
                if (eventAllowFunc) {
                    for (i = 0; i < eventFootprints.length; i++) {
                        if (eventAllowFunc(eventFootprints[i].componentFootprint.toLegacy(this._calendar), eventFootprints[i].getEventLegacy()) === false) {
                            return false;
                        }
                    }
                }
                return true;
            };
            Constraints.prototype.getPeerEventInstances = function(eventDef) {
                return this.eventManager.getEventInstancesWithoutId(eventDef.id);
            };
            Constraints.prototype.isSelectionFootprintAllowed = function(componentFootprint) {
                var peerEventInstances = this.eventManager.getEventInstances();
                var peerEventRanges = peerEventInstances.map(util_1.eventInstanceToEventRange);
                var peerEventFootprints = this.eventRangesToEventFootprints(peerEventRanges);
                var selectAllowFunc;
                if (this.isFootprintAllowed(componentFootprint, peerEventFootprints, this.opt("selectConstraint"), this.opt("selectOverlap"))) {
                    selectAllowFunc = this.opt("selectAllow");
                    if (selectAllowFunc) {
                        return selectAllowFunc(componentFootprint.toLegacy(this._calendar)) !== false;
                    } else {
                        return true;
                    }
                }
                return false;
            };
            Constraints.prototype.isFootprintAllowed = function(componentFootprint, peerEventFootprints, constraintVal, overlapVal, subjectEventInstance) {
                var constraintFootprints;
                var overlapEventFootprints;
                if (constraintVal != null) {
                    constraintFootprints = this.constraintValToFootprints(constraintVal, componentFootprint.isAllDay);
                    if (!this.isFootprintWithinConstraints(componentFootprint, constraintFootprints)) {
                        return false;
                    }
                }
                overlapEventFootprints = this.collectOverlapEventFootprints(peerEventFootprints, componentFootprint);
                if (overlapVal === false) {
                    if (overlapEventFootprints.length) {
                        return false;
                    }
                } else if (typeof overlapVal === "function") {
                    if (!isOverlapsAllowedByFunc(overlapEventFootprints, overlapVal, subjectEventInstance)) {
                        return false;
                    }
                }
                if (subjectEventInstance) {
                    if (!isOverlapEventInstancesAllowed(overlapEventFootprints, subjectEventInstance)) {
                        return false;
                    }
                }
                return true;
            };
            Constraints.prototype.isFootprintWithinConstraints = function(componentFootprint, constraintFootprints) {
                var i;
                for (i = 0; i < constraintFootprints.length; i++) {
                    if (this.footprintContainsFootprint(constraintFootprints[i], componentFootprint)) {
                        return true;
                    }
                }
                return false;
            };
            Constraints.prototype.constraintValToFootprints = function(constraintVal, isAllDay) {
                var eventInstances;
                if (constraintVal === "businessHours") {
                    return this.buildCurrentBusinessFootprints(isAllDay);
                } else if (typeof constraintVal === "object") {
                    eventInstances = this.parseEventDefToInstances(constraintVal);
                    if (!eventInstances) {
                        return this.parseFootprints(constraintVal);
                    } else {
                        return this.eventInstancesToFootprints(eventInstances);
                    }
                } else if (constraintVal != null) {
                    eventInstances = this.eventManager.getEventInstancesWithId(constraintVal);
                    return this.eventInstancesToFootprints(eventInstances);
                }
            };
            Constraints.prototype.buildCurrentBusinessFootprints = function(isAllDay) {
                var view = this._calendar.view;
                var businessHourGenerator = view.get("businessHourGenerator");
                var unzonedRange = view.dateProfile.activeUnzonedRange;
                var eventInstanceGroup = businessHourGenerator.buildEventInstanceGroup(isAllDay, unzonedRange);
                if (eventInstanceGroup) {
                    return this.eventInstancesToFootprints(eventInstanceGroup.eventInstances);
                } else {
                    return [];
                }
            };
            Constraints.prototype.eventInstancesToFootprints = function(eventInstances) {
                var eventRanges = eventInstances.map(util_1.eventInstanceToEventRange);
                var eventFootprints = this.eventRangesToEventFootprints(eventRanges);
                return eventFootprints.map(util_1.eventFootprintToComponentFootprint);
            };
            Constraints.prototype.collectOverlapEventFootprints = function(peerEventFootprints, targetFootprint) {
                var overlapEventFootprints = [];
                var i;
                for (i = 0; i < peerEventFootprints.length; i++) {
                    if (this.footprintsIntersect(targetFootprint, peerEventFootprints[i].componentFootprint)) {
                        overlapEventFootprints.push(peerEventFootprints[i]);
                    }
                }
                return overlapEventFootprints;
            };
            Constraints.prototype.parseEventDefToInstances = function(eventInput) {
                var eventManager = this.eventManager;
                var eventDef = EventDefParser_1.default.parse(eventInput, new EventSource_1.default(this._calendar));
                if (!eventDef) {
                    return false;
                }
                return eventDef.buildInstances(eventManager.currentPeriod.unzonedRange);
            };
            Constraints.prototype.eventRangesToEventFootprints = function(eventRanges) {
                var i;
                var eventFootprints = [];
                for (i = 0; i < eventRanges.length; i++) {
                    eventFootprints.push.apply(eventFootprints, this.eventRangeToEventFootprints(eventRanges[i]));
                }
                return eventFootprints;
            };
            Constraints.prototype.eventRangeToEventFootprints = function(eventRange) {
                return [ util_1.eventRangeToEventFootprint(eventRange) ];
            };
            Constraints.prototype.parseFootprints = function(rawInput) {
                var start;
                var end;
                if (rawInput.start) {
                    start = this._calendar.moment(rawInput.start);
                    if (!start.isValid()) {
                        start = null;
                    }
                }
                if (rawInput.end) {
                    end = this._calendar.moment(rawInput.end);
                    if (!end.isValid()) {
                        end = null;
                    }
                }
                return [ new ComponentFootprint_1.default(new UnzonedRange_1.default(start, end), start && !start.hasTime() || end && !end.hasTime()) ];
            };
            Constraints.prototype.footprintContainsFootprint = function(outerFootprint, innerFootprint) {
                return outerFootprint.unzonedRange.containsRange(innerFootprint.unzonedRange);
            };
            Constraints.prototype.footprintsIntersect = function(footprint0, footprint1) {
                return footprint0.unzonedRange.intersectsWith(footprint1.unzonedRange);
            };
            return Constraints;
        }();
        exports.default = Constraints;
        function isOverlapsAllowedByFunc(overlapEventFootprints, overlapFunc, subjectEventInstance) {
            var i;
            for (i = 0; i < overlapEventFootprints.length; i++) {
                if (!overlapFunc(overlapEventFootprints[i].eventInstance.toLegacy(), subjectEventInstance ? subjectEventInstance.toLegacy() : null)) {
                    return false;
                }
            }
            return true;
        }
        function isOverlapEventInstancesAllowed(overlapEventFootprints, subjectEventInstance) {
            var subjectLegacyInstance = subjectEventInstance.toLegacy();
            var i;
            var overlapEventInstance;
            var overlapEventDef;
            var overlapVal;
            for (i = 0; i < overlapEventFootprints.length; i++) {
                overlapEventInstance = overlapEventFootprints[i].eventInstance;
                overlapEventDef = overlapEventInstance.def;
                overlapVal = overlapEventDef.getOverlap();
                if (overlapVal === false) {
                    return false;
                } else if (typeof overlapVal === "function") {
                    if (!overlapVal(overlapEventInstance.toLegacy(), subjectLegacyInstance)) {
                        return false;
                    }
                }
            }
            return true;
        }
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var tslib_1 = __webpack_require__(2);
        var util_1 = __webpack_require__(4);
        var Mixin_1 = __webpack_require__(14);
        var ParsableModelMixin = function(_super) {
            tslib_1.__extends(ParsableModelMixin, _super);
            function ParsableModelMixin() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            ParsableModelMixin.defineStandardProps = function(propDefs) {
                var proto = this.prototype;
                if (!proto.hasOwnProperty("standardPropMap")) {
                    proto.standardPropMap = Object.create(proto.standardPropMap);
                }
                util_1.copyOwnProps(propDefs, proto.standardPropMap);
            };
            ParsableModelMixin.copyVerbatimStandardProps = function(src, dest) {
                var map = this.prototype.standardPropMap;
                var propName;
                for (propName in map) {
                    if (src[propName] != null && map[propName] === true) {
                        dest[propName] = src[propName];
                    }
                }
            };
            ParsableModelMixin.prototype.applyProps = function(rawProps) {
                var standardPropMap = this.standardPropMap;
                var manualProps = {};
                var miscProps = {};
                var propName;
                for (propName in rawProps) {
                    if (standardPropMap[propName] === true) {
                        this[propName] = rawProps[propName];
                    } else if (standardPropMap[propName] === false) {
                        manualProps[propName] = rawProps[propName];
                    } else {
                        miscProps[propName] = rawProps[propName];
                    }
                }
                this.applyMiscProps(miscProps);
                return this.applyManualStandardProps(manualProps);
            };
            ParsableModelMixin.prototype.applyManualStandardProps = function(rawProps) {
                return true;
            };
            ParsableModelMixin.prototype.applyMiscProps = function(rawProps) {};
            ParsableModelMixin.prototype.isStandardProp = function(propName) {
                return propName in this.standardPropMap;
            };
            return ParsableModelMixin;
        }(Mixin_1.default);
        exports.default = ParsableModelMixin;
        ParsableModelMixin.prototype.standardPropMap = {};
    }, function(module, exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var EventInstance = function() {
            function EventInstance(def, dateProfile) {
                this.def = def;
                this.dateProfile = dateProfile;
            }
            EventInstance.prototype.toLegacy = function() {
                var dateProfile = this.dateProfile;
                var obj = this.def.toLegacy();
                obj.start = dateProfile.start.clone();
                obj.end = dateProfile.end ? dateProfile.end.clone() : null;
                return obj;
            };
            return EventInstance;
        }();
        exports.default = EventInstance;
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var tslib_1 = __webpack_require__(2);
        var $ = __webpack_require__(3);
        var moment = __webpack_require__(0);
        var EventDef_1 = __webpack_require__(33);
        var EventInstance_1 = __webpack_require__(205);
        var EventDateProfile_1 = __webpack_require__(17);
        var RecurringEventDef = function(_super) {
            tslib_1.__extends(RecurringEventDef, _super);
            function RecurringEventDef() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            RecurringEventDef.prototype.isAllDay = function() {
                return !this.startTime && !this.endTime;
            };
            RecurringEventDef.prototype.buildInstances = function(unzonedRange) {
                var calendar = this.source.calendar;
                var unzonedDate = unzonedRange.getStart();
                var unzonedEnd = unzonedRange.getEnd();
                var zonedDayStart;
                var instanceStart;
                var instanceEnd;
                var instances = [];
                while (unzonedDate.isBefore(unzonedEnd)) {
                    if (!this.dowHash || this.dowHash[unzonedDate.day()]) {
                        zonedDayStart = calendar.applyTimezone(unzonedDate);
                        instanceStart = zonedDayStart.clone();
                        instanceEnd = null;
                        if (this.startTime) {
                            instanceStart.time(this.startTime);
                        } else {
                            instanceStart.stripTime();
                        }
                        if (this.endTime) {
                            instanceEnd = zonedDayStart.clone().time(this.endTime);
                        }
                        instances.push(new EventInstance_1.default(this, new EventDateProfile_1.default(instanceStart, instanceEnd, calendar)));
                    }
                    unzonedDate.add(1, "days");
                }
                return instances;
            };
            RecurringEventDef.prototype.setDow = function(dowNumbers) {
                if (!this.dowHash) {
                    this.dowHash = {};
                }
                for (var i = 0; i < dowNumbers.length; i++) {
                    this.dowHash[dowNumbers[i]] = true;
                }
            };
            RecurringEventDef.prototype.clone = function() {
                var def = _super.prototype.clone.call(this);
                if (def.startTime) {
                    def.startTime = moment.duration(this.startTime);
                }
                if (def.endTime) {
                    def.endTime = moment.duration(this.endTime);
                }
                if (this.dowHash) {
                    def.dowHash = $.extend({}, this.dowHash);
                }
                return def;
            };
            return RecurringEventDef;
        }(EventDef_1.default);
        exports.default = RecurringEventDef;
        RecurringEventDef.prototype.applyProps = function(rawProps) {
            var superSuccess = EventDef_1.default.prototype.applyProps.call(this, rawProps);
            if (rawProps.start) {
                this.startTime = moment.duration(rawProps.start);
            }
            if (rawProps.end) {
                this.endTime = moment.duration(rawProps.end);
            }
            if (rawProps.dow) {
                this.setDow(rawProps.dow);
            }
            return superSuccess;
        };
        RecurringEventDef.defineStandardProps({
            start: false,
            end: false,
            dow: false
        });
    }, function(module, exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var EventRange = function() {
            function EventRange(unzonedRange, eventDef, eventInstance) {
                this.unzonedRange = unzonedRange;
                this.eventDef = eventDef;
                if (eventInstance) {
                    this.eventInstance = eventInstance;
                }
            }
            return EventRange;
        }();
        exports.default = EventRange;
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var $ = __webpack_require__(3);
        var util_1 = __webpack_require__(34);
        var EventInstanceGroup_1 = __webpack_require__(18);
        var RecurringEventDef_1 = __webpack_require__(206);
        var EventSource_1 = __webpack_require__(6);
        var BUSINESS_HOUR_EVENT_DEFAULTS = {
            start: "09:00",
            end: "17:00",
            dow: [ 1, 2, 3, 4, 5 ],
            rendering: "inverse-background"
        };
        var BusinessHourGenerator = function() {
            function BusinessHourGenerator(rawComplexDef, calendar) {
                this.rawComplexDef = rawComplexDef;
                this.calendar = calendar;
            }
            BusinessHourGenerator.prototype.buildEventInstanceGroup = function(isAllDay, unzonedRange) {
                var eventDefs = this.buildEventDefs(isAllDay);
                var eventInstanceGroup;
                if (eventDefs.length) {
                    eventInstanceGroup = new EventInstanceGroup_1.default(util_1.eventDefsToEventInstances(eventDefs, unzonedRange));
                    eventInstanceGroup.explicitEventDef = eventDefs[0];
                    return eventInstanceGroup;
                }
            };
            BusinessHourGenerator.prototype.buildEventDefs = function(isAllDay) {
                var rawComplexDef = this.rawComplexDef;
                var rawDefs = [];
                var requireDow = false;
                var i;
                var defs = [];
                if (rawComplexDef === true) {
                    rawDefs = [ {} ];
                } else if ($.isPlainObject(rawComplexDef)) {
                    rawDefs = [ rawComplexDef ];
                } else if ($.isArray(rawComplexDef)) {
                    rawDefs = rawComplexDef;
                    requireDow = true;
                }
                for (i = 0; i < rawDefs.length; i++) {
                    if (!requireDow || rawDefs[i].dow) {
                        defs.push(this.buildEventDef(isAllDay, rawDefs[i]));
                    }
                }
                return defs;
            };
            BusinessHourGenerator.prototype.buildEventDef = function(isAllDay, rawDef) {
                var fullRawDef = $.extend({}, BUSINESS_HOUR_EVENT_DEFAULTS, rawDef);
                if (isAllDay) {
                    fullRawDef.start = null;
                    fullRawDef.end = null;
                }
                return RecurringEventDef_1.default.parse(fullRawDef, new EventSource_1.default(this.calendar));
            };
            return BusinessHourGenerator;
        }();
        exports.default = BusinessHourGenerator;
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var tslib_1 = __webpack_require__(2);
        var Theme_1 = __webpack_require__(38);
        var StandardTheme = function(_super) {
            tslib_1.__extends(StandardTheme, _super);
            function StandardTheme() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return StandardTheme;
        }(Theme_1.default);
        exports.default = StandardTheme;
        StandardTheme.prototype.classes = {
            widget: "fc-unthemed",
            widgetHeader: "fc-widget-header",
            widgetContent: "fc-widget-content",
            buttonGroup: "fc-button-group",
            button: "fc-button",
            cornerLeft: "fc-corner-left",
            cornerRight: "fc-corner-right",
            stateDefault: "fc-state-default",
            stateActive: "fc-state-active",
            stateDisabled: "fc-state-disabled",
            stateHover: "fc-state-hover",
            stateDown: "fc-state-down",
            popoverHeader: "fc-widget-header",
            popoverContent: "fc-widget-content",
            headerRow: "fc-widget-header",
            dayRow: "fc-widget-content",
            listView: "fc-widget-content"
        };
        StandardTheme.prototype.baseIconClass = "fc-icon";
        StandardTheme.prototype.iconClasses = {
            close: "fc-icon-x",
            prev: "fc-icon-left-single-arrow",
            next: "fc-icon-right-single-arrow",
            prevYear: "fc-icon-left-double-arrow",
            nextYear: "fc-icon-right-double-arrow"
        };
        StandardTheme.prototype.iconOverrideOption = "buttonIcons";
        StandardTheme.prototype.iconOverrideCustomButtonOption = "icon";
        StandardTheme.prototype.iconOverridePrefix = "fc-icon-";
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var tslib_1 = __webpack_require__(2);
        var Theme_1 = __webpack_require__(38);
        var JqueryUiTheme = function(_super) {
            tslib_1.__extends(JqueryUiTheme, _super);
            function JqueryUiTheme() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return JqueryUiTheme;
        }(Theme_1.default);
        exports.default = JqueryUiTheme;
        JqueryUiTheme.prototype.classes = {
            widget: "ui-widget",
            widgetHeader: "ui-widget-header",
            widgetContent: "ui-widget-content",
            buttonGroup: "fc-button-group",
            button: "ui-button",
            cornerLeft: "ui-corner-left",
            cornerRight: "ui-corner-right",
            stateDefault: "ui-state-default",
            stateActive: "ui-state-active",
            stateDisabled: "ui-state-disabled",
            stateHover: "ui-state-hover",
            stateDown: "ui-state-down",
            today: "ui-state-highlight",
            popoverHeader: "ui-widget-header",
            popoverContent: "ui-widget-content",
            headerRow: "ui-widget-header",
            dayRow: "ui-widget-content",
            listView: "ui-widget-content"
        };
        JqueryUiTheme.prototype.baseIconClass = "ui-icon";
        JqueryUiTheme.prototype.iconClasses = {
            close: "ui-icon-closethick",
            prev: "ui-icon-circle-triangle-w",
            next: "ui-icon-circle-triangle-e",
            prevYear: "ui-icon-seek-prev",
            nextYear: "ui-icon-seek-next"
        };
        JqueryUiTheme.prototype.iconOverrideOption = "themeButtonIcons";
        JqueryUiTheme.prototype.iconOverrideCustomButtonOption = "themeIcon";
        JqueryUiTheme.prototype.iconOverridePrefix = "ui-icon-";
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var tslib_1 = __webpack_require__(2);
        var $ = __webpack_require__(3);
        var Promise_1 = __webpack_require__(19);
        var EventSource_1 = __webpack_require__(6);
        var FuncEventSource = function(_super) {
            tslib_1.__extends(FuncEventSource, _super);
            function FuncEventSource() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            FuncEventSource.parse = function(rawInput, calendar) {
                var rawProps;
                if ($.isFunction(rawInput.events)) {
                    rawProps = rawInput;
                } else if ($.isFunction(rawInput)) {
                    rawProps = {
                        events: rawInput
                    };
                }
                if (rawProps) {
                    return EventSource_1.default.parse.call(this, rawProps, calendar);
                }
                return false;
            };
            FuncEventSource.prototype.fetch = function(start, end, timezone) {
                var _this = this;
                this.calendar.pushLoading();
                return Promise_1.default.construct(function(onResolve) {
                    _this.func.call(_this.calendar, start.clone(), end.clone(), timezone, function(rawEventDefs) {
                        _this.calendar.popLoading();
                        onResolve(_this.parseEventDefs(rawEventDefs));
                    });
                });
            };
            FuncEventSource.prototype.getPrimitive = function() {
                return this.func;
            };
            FuncEventSource.prototype.applyManualStandardProps = function(rawProps) {
                var superSuccess = _super.prototype.applyManualStandardProps.call(this, rawProps);
                this.func = rawProps.events;
                return superSuccess;
            };
            return FuncEventSource;
        }(EventSource_1.default);
        exports.default = FuncEventSource;
        FuncEventSource.defineStandardProps({
            events: false
        });
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var tslib_1 = __webpack_require__(2);
        var $ = __webpack_require__(3);
        var util_1 = __webpack_require__(4);
        var Promise_1 = __webpack_require__(19);
        var EventSource_1 = __webpack_require__(6);
        var JsonFeedEventSource = function(_super) {
            tslib_1.__extends(JsonFeedEventSource, _super);
            function JsonFeedEventSource() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            JsonFeedEventSource.parse = function(rawInput, calendar) {
                var rawProps;
                if (typeof rawInput.url === "string") {
                    rawProps = rawInput;
                } else if (typeof rawInput === "string") {
                    rawProps = {
                        url: rawInput
                    };
                }
                if (rawProps) {
                    return EventSource_1.default.parse.call(this, rawProps, calendar);
                }
                return false;
            };
            JsonFeedEventSource.prototype.fetch = function(start, end, timezone) {
                var _this = this;
                var ajaxSettings = this.ajaxSettings;
                var onSuccess = ajaxSettings.success;
                var onError = ajaxSettings.error;
                var requestParams = this.buildRequestParams(start, end, timezone);
                this.calendar.pushLoading();
                return Promise_1.default.construct(function(onResolve, onReject) {
                    $.ajax($.extend({}, JsonFeedEventSource.AJAX_DEFAULTS, ajaxSettings, {
                        url: _this.url,
                        data: requestParams,
                        success: function(rawEventDefs, status, xhr) {
                            var callbackRes;
                            _this.calendar.popLoading();
                            if (rawEventDefs) {
                                callbackRes = util_1.applyAll(onSuccess, _this, [ rawEventDefs, status, xhr ]);
                                if ($.isArray(callbackRes)) {
                                    rawEventDefs = callbackRes;
                                }
                                onResolve(_this.parseEventDefs(rawEventDefs));
                            } else {
                                onReject();
                            }
                        },
                        error: function(xhr, statusText, errorThrown) {
                            _this.calendar.popLoading();
                            util_1.applyAll(onError, _this, [ xhr, statusText, errorThrown ]);
                            onReject();
                        }
                    }));
                });
            };
            JsonFeedEventSource.prototype.buildRequestParams = function(start, end, timezone) {
                var calendar = this.calendar;
                var ajaxSettings = this.ajaxSettings;
                var startParam;
                var endParam;
                var timezoneParam;
                var customRequestParams;
                var params = {};
                startParam = this.startParam;
                if (startParam == null) {
                    startParam = calendar.opt("startParam");
                }
                endParam = this.endParam;
                if (endParam == null) {
                    endParam = calendar.opt("endParam");
                }
                timezoneParam = this.timezoneParam;
                if (timezoneParam == null) {
                    timezoneParam = calendar.opt("timezoneParam");
                }
                if ($.isFunction(ajaxSettings.data)) {
                    customRequestParams = ajaxSettings.data();
                } else {
                    customRequestParams = ajaxSettings.data || {};
                }
                $.extend(params, customRequestParams);
                params[startParam] = start.format();
                params[endParam] = end.format();
                if (timezone && timezone !== "local") {
                    params[timezoneParam] = timezone;
                }
                return params;
            };
            JsonFeedEventSource.prototype.getPrimitive = function() {
                return this.url;
            };
            JsonFeedEventSource.prototype.applyMiscProps = function(rawProps) {
                this.ajaxSettings = rawProps;
            };
            JsonFeedEventSource.AJAX_DEFAULTS = {
                dataType: "json",
                cache: false
            };
            return JsonFeedEventSource;
        }(EventSource_1.default);
        exports.default = JsonFeedEventSource;
        JsonFeedEventSource.defineStandardProps({
            url: true,
            startParam: true,
            endParam: true,
            timezoneParam: true
        });
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var EmitterMixin_1 = __webpack_require__(11);
        var TaskQueue = function() {
            function TaskQueue() {
                this.q = [];
                this.isPaused = false;
                this.isRunning = false;
            }
            TaskQueue.prototype.queue = function() {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                this.q.push.apply(this.q, args);
                this.tryStart();
            };
            TaskQueue.prototype.pause = function() {
                this.isPaused = true;
            };
            TaskQueue.prototype.resume = function() {
                this.isPaused = false;
                this.tryStart();
            };
            TaskQueue.prototype.getIsIdle = function() {
                return !this.isRunning && !this.isPaused;
            };
            TaskQueue.prototype.tryStart = function() {
                if (!this.isRunning && this.canRunNext()) {
                    this.isRunning = true;
                    this.trigger("start");
                    this.runRemaining();
                }
            };
            TaskQueue.prototype.canRunNext = function() {
                return !this.isPaused && this.q.length;
            };
            TaskQueue.prototype.runRemaining = function() {
                var _this = this;
                var task;
                var res;
                do {
                    task = this.q.shift();
                    res = this.runTask(task);
                    if (res && res.then) {
                        res.then(function() {
                            if (_this.canRunNext()) {
                                _this.runRemaining();
                            }
                        });
                        return;
                    }
                } while (this.canRunNext());
                this.trigger("stop");
                this.isRunning = false;
                this.tryStart();
            };
            TaskQueue.prototype.runTask = function(task) {
                return task();
            };
            return TaskQueue;
        }();
        exports.default = TaskQueue;
        EmitterMixin_1.default.mixInto(TaskQueue);
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var tslib_1 = __webpack_require__(2);
        var TaskQueue_1 = __webpack_require__(213);
        var RenderQueue = function(_super) {
            tslib_1.__extends(RenderQueue, _super);
            function RenderQueue(waitsByNamespace) {
                var _this = _super.call(this) || this;
                _this.waitsByNamespace = waitsByNamespace || {};
                return _this;
            }
            RenderQueue.prototype.queue = function(taskFunc, namespace, type) {
                var task = {
                    func: taskFunc,
                    namespace: namespace,
                    type: type
                };
                var waitMs;
                if (namespace) {
                    waitMs = this.waitsByNamespace[namespace];
                }
                if (this.waitNamespace) {
                    if (namespace === this.waitNamespace && waitMs != null) {
                        this.delayWait(waitMs);
                    } else {
                        this.clearWait();
                        this.tryStart();
                    }
                }
                if (this.compoundTask(task)) {
                    if (!this.waitNamespace && waitMs != null) {
                        this.startWait(namespace, waitMs);
                    } else {
                        this.tryStart();
                    }
                }
            };
            RenderQueue.prototype.startWait = function(namespace, waitMs) {
                this.waitNamespace = namespace;
                this.spawnWait(waitMs);
            };
            RenderQueue.prototype.delayWait = function(waitMs) {
                clearTimeout(this.waitId);
                this.spawnWait(waitMs);
            };
            RenderQueue.prototype.spawnWait = function(waitMs) {
                var _this = this;
                this.waitId = setTimeout(function() {
                    _this.waitNamespace = null;
                    _this.tryStart();
                }, waitMs);
            };
            RenderQueue.prototype.clearWait = function() {
                if (this.waitNamespace) {
                    clearTimeout(this.waitId);
                    this.waitId = null;
                    this.waitNamespace = null;
                }
            };
            RenderQueue.prototype.canRunNext = function() {
                if (!_super.prototype.canRunNext.call(this)) {
                    return false;
                }
                if (this.waitNamespace) {
                    var q = this.q;
                    for (var i = 0; i < q.length; i++) {
                        if (q[i].namespace !== this.waitNamespace) {
                            return true;
                        }
                    }
                    return false;
                }
                return true;
            };
            RenderQueue.prototype.runTask = function(task) {
                task.func();
            };
            RenderQueue.prototype.compoundTask = function(newTask) {
                var q = this.q;
                var shouldAppend = true;
                var i;
                var task;
                if (newTask.namespace && newTask.type === "destroy") {
                    for (i = q.length - 1; i >= 0; i--) {
                        task = q[i];
                        switch (task.type) {
                          case "init":
                            shouldAppend = false;

                          case "add":
                          case "remove":
                            q.splice(i, 1);
                        }
                    }
                }
                if (shouldAppend) {
                    q.push(newTask);
                }
                return shouldAppend;
            };
            return RenderQueue;
        }(TaskQueue_1.default);
        exports.default = RenderQueue;
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var tslib_1 = __webpack_require__(2);
        var $ = __webpack_require__(3);
        var moment = __webpack_require__(0);
        var util_1 = __webpack_require__(4);
        var moment_ext_1 = __webpack_require__(10);
        var date_formatting_1 = __webpack_require__(47);
        var Component_1 = __webpack_require__(233);
        var util_2 = __webpack_require__(34);
        var DateComponent = function(_super) {
            tslib_1.__extends(DateComponent, _super);
            function DateComponent(_view, _options) {
                var _this = _super.call(this) || this;
                _this.isRTL = false;
                _this.hitsNeededDepth = 0;
                _this.hasAllDayBusinessHours = false;
                _this.isDatesRendered = false;
                if (_view) {
                    _this["view"] = _view;
                }
                if (_options) {
                    _this["options"] = _options;
                }
                _this.uid = String(DateComponent.guid++);
                _this.childrenByUid = {};
                _this.nextDayThreshold = moment.duration(_this.opt("nextDayThreshold"));
                _this.isRTL = _this.opt("isRTL");
                if (_this.fillRendererClass) {
                    _this.fillRenderer = new _this.fillRendererClass(_this);
                }
                if (_this.eventRendererClass) {
                    _this.eventRenderer = new _this.eventRendererClass(_this, _this.fillRenderer);
                }
                if (_this.helperRendererClass && _this.eventRenderer) {
                    _this.helperRenderer = new _this.helperRendererClass(_this, _this.eventRenderer);
                }
                if (_this.businessHourRendererClass && _this.fillRenderer) {
                    _this.businessHourRenderer = new _this.businessHourRendererClass(_this, _this.fillRenderer);
                }
                return _this;
            }
            DateComponent.prototype.addChild = function(child) {
                if (!this.childrenByUid[child.uid]) {
                    this.childrenByUid[child.uid] = child;
                    return true;
                }
                return false;
            };
            DateComponent.prototype.removeChild = function(child) {
                if (this.childrenByUid[child.uid]) {
                    delete this.childrenByUid[child.uid];
                    return true;
                }
                return false;
            };
            DateComponent.prototype.updateSize = function(totalHeight, isAuto, isResize) {
                this.callChildren("updateSize", arguments);
            };
            DateComponent.prototype.opt = function(name) {
                return this._getView().opt(name);
            };
            DateComponent.prototype.publiclyTrigger = function() {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                var calendar = this._getCalendar();
                return calendar.publiclyTrigger.apply(calendar, args);
            };
            DateComponent.prototype.hasPublicHandlers = function() {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                var calendar = this._getCalendar();
                return calendar.hasPublicHandlers.apply(calendar, args);
            };
            DateComponent.prototype.executeDateRender = function(dateProfile) {
                this.dateProfile = dateProfile;
                this.renderDates(dateProfile);
                this.isDatesRendered = true;
                this.callChildren("executeDateRender", arguments);
            };
            DateComponent.prototype.executeDateUnrender = function() {
                this.callChildren("executeDateUnrender", arguments);
                this.dateProfile = null;
                this.unrenderDates();
                this.isDatesRendered = false;
            };
            DateComponent.prototype.renderDates = function(dateProfile) {};
            DateComponent.prototype.unrenderDates = function() {};
            DateComponent.prototype.getNowIndicatorUnit = function() {};
            DateComponent.prototype.renderNowIndicator = function(date) {
                this.callChildren("renderNowIndicator", arguments);
            };
            DateComponent.prototype.unrenderNowIndicator = function() {
                this.callChildren("unrenderNowIndicator", arguments);
            };
            DateComponent.prototype.renderBusinessHours = function(businessHourGenerator) {
                if (this.businessHourRenderer) {
                    this.businessHourRenderer.render(businessHourGenerator);
                }
                this.callChildren("renderBusinessHours", arguments);
            };
            DateComponent.prototype.unrenderBusinessHours = function() {
                this.callChildren("unrenderBusinessHours", arguments);
                if (this.businessHourRenderer) {
                    this.businessHourRenderer.unrender();
                }
            };
            DateComponent.prototype.executeEventRender = function(eventsPayload) {
                if (this.eventRenderer) {
                    this.eventRenderer.rangeUpdated();
                    this.eventRenderer.render(eventsPayload);
                } else if (this["renderEvents"]) {
                    this["renderEvents"](convertEventsPayloadToLegacyArray(eventsPayload));
                }
                this.callChildren("executeEventRender", arguments);
            };
            DateComponent.prototype.executeEventUnrender = function() {
                this.callChildren("executeEventUnrender", arguments);
                if (this.eventRenderer) {
                    this.eventRenderer.unrender();
                } else if (this["destroyEvents"]) {
                    this["destroyEvents"]();
                }
            };
            DateComponent.prototype.getBusinessHourSegs = function() {
                var segs = this.getOwnBusinessHourSegs();
                this.iterChildren(function(child) {
                    segs.push.apply(segs, child.getBusinessHourSegs());
                });
                return segs;
            };
            DateComponent.prototype.getOwnBusinessHourSegs = function() {
                if (this.businessHourRenderer) {
                    return this.businessHourRenderer.getSegs();
                }
                return [];
            };
            DateComponent.prototype.getEventSegs = function() {
                var segs = this.getOwnEventSegs();
                this.iterChildren(function(child) {
                    segs.push.apply(segs, child.getEventSegs());
                });
                return segs;
            };
            DateComponent.prototype.getOwnEventSegs = function() {
                if (this.eventRenderer) {
                    return this.eventRenderer.getSegs();
                }
                return [];
            };
            DateComponent.prototype.triggerAfterEventsRendered = function() {
                this.triggerAfterEventSegsRendered(this.getEventSegs());
                this.publiclyTrigger("eventAfterAllRender", {
                    context: this,
                    args: [ this ]
                });
            };
            DateComponent.prototype.triggerAfterEventSegsRendered = function(segs) {
                var _this = this;
                if (this.hasPublicHandlers("eventAfterRender")) {
                    segs.forEach(function(seg) {
                        var legacy;
                        if (seg.el) {
                            legacy = seg.footprint.getEventLegacy();
                            _this.publiclyTrigger("eventAfterRender", {
                                context: legacy,
                                args: [ legacy, seg.el, _this ]
                            });
                        }
                    });
                }
            };
            DateComponent.prototype.triggerBeforeEventsDestroyed = function() {
                this.triggerBeforeEventSegsDestroyed(this.getEventSegs());
            };
            DateComponent.prototype.triggerBeforeEventSegsDestroyed = function(segs) {
                var _this = this;
                if (this.hasPublicHandlers("eventDestroy")) {
                    segs.forEach(function(seg) {
                        var legacy;
                        if (seg.el) {
                            legacy = seg.footprint.getEventLegacy();
                            _this.publiclyTrigger("eventDestroy", {
                                context: legacy,
                                args: [ legacy, seg.el, _this ]
                            });
                        }
                    });
                }
            };
            DateComponent.prototype.showEventsWithId = function(eventDefId) {
                this.getEventSegs().forEach(function(seg) {
                    if (seg.footprint.eventDef.id === eventDefId && seg.el) {
                        seg.el.css("visibility", "");
                    }
                });
                this.callChildren("showEventsWithId", arguments);
            };
            DateComponent.prototype.hideEventsWithId = function(eventDefId) {
                this.getEventSegs().forEach(function(seg) {
                    if (seg.footprint.eventDef.id === eventDefId && seg.el) {
                        seg.el.css("visibility", "hidden");
                    }
                });
                this.callChildren("hideEventsWithId", arguments);
            };
            DateComponent.prototype.renderDrag = function(eventFootprints, seg, isTouch) {
                var renderedHelper = false;
                this.iterChildren(function(child) {
                    if (child.renderDrag(eventFootprints, seg, isTouch)) {
                        renderedHelper = true;
                    }
                });
                return renderedHelper;
            };
            DateComponent.prototype.unrenderDrag = function() {
                this.callChildren("unrenderDrag", arguments);
            };
            DateComponent.prototype.renderEventResize = function(eventFootprints, seg, isTouch) {
                this.callChildren("renderEventResize", arguments);
            };
            DateComponent.prototype.unrenderEventResize = function() {
                this.callChildren("unrenderEventResize", arguments);
            };
            DateComponent.prototype.renderSelectionFootprint = function(componentFootprint) {
                this.renderHighlight(componentFootprint);
                this.callChildren("renderSelectionFootprint", arguments);
            };
            DateComponent.prototype.unrenderSelection = function() {
                this.unrenderHighlight();
                this.callChildren("unrenderSelection", arguments);
            };
            DateComponent.prototype.renderHighlight = function(componentFootprint) {
                if (this.fillRenderer) {
                    this.fillRenderer.renderFootprint("highlight", componentFootprint, {
                        getClasses: function() {
                            return [ "fc-highlight" ];
                        }
                    });
                }
                this.callChildren("renderHighlight", arguments);
            };
            DateComponent.prototype.unrenderHighlight = function() {
                if (this.fillRenderer) {
                    this.fillRenderer.unrender("highlight");
                }
                this.callChildren("unrenderHighlight", arguments);
            };
            DateComponent.prototype.hitsNeeded = function() {
                if (!this.hitsNeededDepth++) {
                    this.prepareHits();
                }
                this.callChildren("hitsNeeded", arguments);
            };
            DateComponent.prototype.hitsNotNeeded = function() {
                if (this.hitsNeededDepth && !--this.hitsNeededDepth) {
                    this.releaseHits();
                }
                this.callChildren("hitsNotNeeded", arguments);
            };
            DateComponent.prototype.prepareHits = function() {};
            DateComponent.prototype.releaseHits = function() {};
            DateComponent.prototype.queryHit = function(leftOffset, topOffset) {
                var childrenByUid = this.childrenByUid;
                var uid;
                var hit;
                for (uid in childrenByUid) {
                    hit = childrenByUid[uid].queryHit(leftOffset, topOffset);
                    if (hit) {
                        break;
                    }
                }
                return hit;
            };
            DateComponent.prototype.getSafeHitFootprint = function(hit) {
                var footprint = this.getHitFootprint(hit);
                if (!this.dateProfile.activeUnzonedRange.containsRange(footprint.unzonedRange)) {
                    return null;
                }
                return footprint;
            };
            DateComponent.prototype.getHitFootprint = function(hit) {};
            DateComponent.prototype.getHitEl = function(hit) {};
            DateComponent.prototype.eventRangesToEventFootprints = function(eventRanges) {
                var eventFootprints = [];
                var i;
                for (i = 0; i < eventRanges.length; i++) {
                    eventFootprints.push.apply(eventFootprints, this.eventRangeToEventFootprints(eventRanges[i]));
                }
                return eventFootprints;
            };
            DateComponent.prototype.eventRangeToEventFootprints = function(eventRange) {
                return [ util_2.eventRangeToEventFootprint(eventRange) ];
            };
            DateComponent.prototype.eventFootprintsToSegs = function(eventFootprints) {
                var segs = [];
                var i;
                for (i = 0; i < eventFootprints.length; i++) {
                    segs.push.apply(segs, this.eventFootprintToSegs(eventFootprints[i]));
                }
                return segs;
            };
            DateComponent.prototype.eventFootprintToSegs = function(eventFootprint) {
                var unzonedRange = eventFootprint.componentFootprint.unzonedRange;
                var segs;
                var i;
                var seg;
                segs = this.componentFootprintToSegs(eventFootprint.componentFootprint);
                for (i = 0; i < segs.length; i++) {
                    seg = segs[i];
                    if (!unzonedRange.isStart) {
                        seg.isStart = false;
                    }
                    if (!unzonedRange.isEnd) {
                        seg.isEnd = false;
                    }
                    seg.footprint = eventFootprint;
                }
                return segs;
            };
            DateComponent.prototype.componentFootprintToSegs = function(componentFootprint) {
                return [];
            };
            DateComponent.prototype.callChildren = function(methodName, args) {
                this.iterChildren(function(child) {
                    child[methodName].apply(child, args);
                });
            };
            DateComponent.prototype.iterChildren = function(func) {
                var childrenByUid = this.childrenByUid;
                var uid;
                for (uid in childrenByUid) {
                    func(childrenByUid[uid]);
                }
            };
            DateComponent.prototype._getCalendar = function() {
                var t = this;
                return t.calendar || t.view.calendar;
            };
            DateComponent.prototype._getView = function() {
                return this.view;
            };
            DateComponent.prototype._getDateProfile = function() {
                return this._getView().get("dateProfile");
            };
            DateComponent.prototype.buildGotoAnchorHtml = function(gotoOptions, attrs, innerHtml) {
                var date;
                var type;
                var forceOff;
                var finalOptions;
                if ($.isPlainObject(gotoOptions)) {
                    date = gotoOptions.date;
                    type = gotoOptions.type;
                    forceOff = gotoOptions.forceOff;
                } else {
                    date = gotoOptions;
                }
                date = moment_ext_1.default(date);
                finalOptions = {
                    date: date.format("YYYY-MM-DD"),
                    type: type || "day"
                };
                if (typeof attrs === "string") {
                    innerHtml = attrs;
                    attrs = null;
                }
                attrs = attrs ? " " + util_1.attrsToStr(attrs) : "";
                innerHtml = innerHtml || "";
                if (!forceOff && this.opt("navLinks")) {
                    return "<a" + attrs + ' data-goto="' + util_1.htmlEscape(JSON.stringify(finalOptions)) + '">' + innerHtml + "</a>";
                } else {
                    return "<span" + attrs + ">" + innerHtml + "</span>";
                }
            };
            DateComponent.prototype.getAllDayHtml = function() {
                return this.opt("allDayHtml") || util_1.htmlEscape(this.opt("allDayText"));
            };
            DateComponent.prototype.getDayClasses = function(date, noThemeHighlight) {
                var view = this._getView();
                var classes = [];
                var today;
                if (!this.dateProfile.activeUnzonedRange.containsDate(date)) {
                    classes.push("fc-disabled-day");
                } else {
                    classes.push("fc-" + util_1.dayIDs[date.day()]);
                    if (view.isDateInOtherMonth(date, this.dateProfile)) {
                        classes.push("fc-other-month");
                    }
                    today = view.calendar.getNow();
                    if (date.isSame(today, "day")) {
                        classes.push("fc-today");
                        if (noThemeHighlight !== true) {
                            classes.push(view.calendar.theme.getClass("today"));
                        }
                    } else if (date < today) {
                        classes.push("fc-past");
                    } else {
                        classes.push("fc-future");
                    }
                }
                return classes;
            };
            DateComponent.prototype.formatRange = function(range, isAllDay, formatStr, separator) {
                var end = range.end;
                if (isAllDay) {
                    end = end.clone().subtract(1);
                }
                return date_formatting_1.formatRange(range.start, end, formatStr, separator, this.isRTL);
            };
            DateComponent.prototype.currentRangeAs = function(unit) {
                return this._getDateProfile().currentUnzonedRange.as(unit);
            };
            DateComponent.prototype.computeDayRange = function(unzonedRange) {
                var calendar = this._getCalendar();
                var startDay = calendar.msToUtcMoment(unzonedRange.startMs, true);
                var end = calendar.msToUtcMoment(unzonedRange.endMs);
                var endTimeMS = +end.time();
                var endDay = end.clone().stripTime();
                if (endTimeMS && endTimeMS >= this.nextDayThreshold) {
                    endDay.add(1, "days");
                }
                if (endDay <= startDay) {
                    endDay = startDay.clone().add(1, "days");
                }
                return {
                    start: startDay,
                    end: endDay
                };
            };
            DateComponent.prototype.isMultiDayRange = function(unzonedRange) {
                var dayRange = this.computeDayRange(unzonedRange);
                return dayRange.end.diff(dayRange.start, "days") > 1;
            };
            DateComponent.guid = 0;
            return DateComponent;
        }(Component_1.default);
        exports.default = DateComponent;
        function convertEventsPayloadToLegacyArray(eventsPayload) {
            var eventDefId;
            var eventInstances;
            var legacyEvents = [];
            var i;
            for (eventDefId in eventsPayload) {
                eventInstances = eventsPayload[eventDefId].eventInstances;
                for (i = 0; i < eventInstances.length; i++) {
                    legacyEvents.push(eventInstances[i].toLegacy());
                }
            }
            return legacyEvents;
        }
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var $ = __webpack_require__(3);
        var moment = __webpack_require__(0);
        var util_1 = __webpack_require__(4);
        var options_1 = __webpack_require__(31);
        var Iterator_1 = __webpack_require__(234);
        var GlobalEmitter_1 = __webpack_require__(20);
        var EmitterMixin_1 = __webpack_require__(11);
        var ListenerMixin_1 = __webpack_require__(7);
        var Toolbar_1 = __webpack_require__(235);
        var OptionsManager_1 = __webpack_require__(236);
        var ViewSpecManager_1 = __webpack_require__(237);
        var Constraints_1 = __webpack_require__(203);
        var locale_1 = __webpack_require__(30);
        var moment_ext_1 = __webpack_require__(10);
        var UnzonedRange_1 = __webpack_require__(5);
        var ComponentFootprint_1 = __webpack_require__(12);
        var EventDateProfile_1 = __webpack_require__(17);
        var EventManager_1 = __webpack_require__(238);
        var BusinessHourGenerator_1 = __webpack_require__(208);
        var EventSourceParser_1 = __webpack_require__(37);
        var EventDefParser_1 = __webpack_require__(49);
        var SingleEventDef_1 = __webpack_require__(13);
        var EventDefMutation_1 = __webpack_require__(36);
        var EventSource_1 = __webpack_require__(6);
        var ThemeRegistry_1 = __webpack_require__(51);
        var Calendar = function() {
            function Calendar(el, overrides) {
                this.loadingLevel = 0;
                this.ignoreUpdateViewSize = 0;
                this.freezeContentHeightDepth = 0;
                GlobalEmitter_1.default.needed();
                this.el = el;
                this.viewsByType = {};
                this.optionsManager = new OptionsManager_1.default(this, overrides);
                this.viewSpecManager = new ViewSpecManager_1.default(this.optionsManager, this);
                this.initMomentInternals();
                this.initCurrentDate();
                this.initEventManager();
                this.constraints = new Constraints_1.default(this.eventManager, this);
                this.constructed();
            }
            Calendar.prototype.constructed = function() {};
            Calendar.prototype.getView = function() {
                return this.view;
            };
            Calendar.prototype.publiclyTrigger = function(name, triggerInfo) {
                var optHandler = this.opt(name);
                var context;
                var args;
                if ($.isPlainObject(triggerInfo)) {
                    context = triggerInfo.context;
                    args = triggerInfo.args;
                } else if ($.isArray(triggerInfo)) {
                    args = triggerInfo;
                }
                if (context == null) {
                    context = this.el[0];
                }
                if (!args) {
                    args = [];
                }
                this.triggerWith(name, context, args);
                if (optHandler) {
                    return optHandler.apply(context, args);
                }
            };
            Calendar.prototype.hasPublicHandlers = function(name) {
                return this.hasHandlers(name) || this.opt(name);
            };
            Calendar.prototype.option = function(name, value) {
                var newOptionHash;
                if (typeof name === "string") {
                    if (value === undefined) {
                        return this.optionsManager.get(name);
                    } else {
                        newOptionHash = {};
                        newOptionHash[name] = value;
                        this.optionsManager.add(newOptionHash);
                    }
                } else if (typeof name === "object") {
                    this.optionsManager.add(name);
                }
            };
            Calendar.prototype.opt = function(name) {
                return this.optionsManager.get(name);
            };
            Calendar.prototype.instantiateView = function(viewType) {
                var spec = this.viewSpecManager.getViewSpec(viewType);
                return new spec["class"](this, spec);
            };
            Calendar.prototype.isValidViewType = function(viewType) {
                return Boolean(this.viewSpecManager.getViewSpec(viewType));
            };
            Calendar.prototype.changeView = function(viewName, dateOrRange) {
                if (dateOrRange) {
                    if (dateOrRange.start && dateOrRange.end) {
                        this.optionsManager.recordOverrides({
                            visibleRange: dateOrRange
                        });
                    } else {
                        this.currentDate = this.moment(dateOrRange).stripZone();
                    }
                }
                this.renderView(viewName);
            };
            Calendar.prototype.zoomTo = function(newDate, viewType) {
                var spec;
                viewType = viewType || "day";
                spec = this.viewSpecManager.getViewSpec(viewType) || this.viewSpecManager.getUnitViewSpec(viewType);
                this.currentDate = newDate.clone();
                this.renderView(spec ? spec.type : null);
            };
            Calendar.prototype.initCurrentDate = function() {
                var defaultDateInput = this.opt("defaultDate");
                if (defaultDateInput != null) {
                    this.currentDate = this.moment(defaultDateInput).stripZone();
                } else {
                    this.currentDate = this.getNow();
                }
            };
            Calendar.prototype.prev = function() {
                var view = this.view;
                var prevInfo = view.dateProfileGenerator.buildPrev(view.get("dateProfile"));
                if (prevInfo.isValid) {
                    this.currentDate = prevInfo.date;
                    this.renderView();
                }
            };
            Calendar.prototype.next = function() {
                var view = this.view;
                var nextInfo = view.dateProfileGenerator.buildNext(view.get("dateProfile"));
                if (nextInfo.isValid) {
                    this.currentDate = nextInfo.date;
                    this.renderView();
                }
            };
            Calendar.prototype.prevYear = function() {
                this.currentDate.add(-1, "years");
                this.renderView();
            };
            Calendar.prototype.nextYear = function() {
                this.currentDate.add(1, "years");
                this.renderView();
            };
            Calendar.prototype.today = function() {
                this.currentDate = this.getNow();
                this.renderView();
            };
            Calendar.prototype.gotoDate = function(zonedDateInput) {
                this.currentDate = this.moment(zonedDateInput).stripZone();
                this.renderView();
            };
            Calendar.prototype.incrementDate = function(delta) {
                this.currentDate.add(moment.duration(delta));
                this.renderView();
            };
            Calendar.prototype.getDate = function() {
                return this.applyTimezone(this.currentDate);
            };
            Calendar.prototype.pushLoading = function() {
                if (!this.loadingLevel++) {
                    this.publiclyTrigger("loading", [ true, this.view ]);
                }
            };
            Calendar.prototype.popLoading = function() {
                if (!--this.loadingLevel) {
                    this.publiclyTrigger("loading", [ false, this.view ]);
                }
            };
            Calendar.prototype.render = function() {
                if (!this.contentEl) {
                    this.initialRender();
                } else if (this.elementVisible()) {
                    this.calcSize();
                    this.updateViewSize();
                }
            };
            Calendar.prototype.initialRender = function() {
                var _this = this;
                var el = this.el;
                el.addClass("fc");
                el.on("click.fc", "a[data-goto]", function(ev) {
                    var anchorEl = $(ev.currentTarget);
                    var gotoOptions = anchorEl.data("goto");
                    var date = _this.moment(gotoOptions.date);
                    var viewType = gotoOptions.type;
                    var customAction = _this.view.opt("navLink" + util_1.capitaliseFirstLetter(viewType) + "Click");
                    if (typeof customAction === "function") {
                        customAction(date, ev);
                    } else {
                        if (typeof customAction === "string") {
                            viewType = customAction;
                        }
                        _this.zoomTo(date, viewType);
                    }
                });
                this.optionsManager.watch("settingTheme", [ "?theme", "?themeSystem" ], function(opts) {
                    var themeClass = ThemeRegistry_1.getThemeSystemClass(opts.themeSystem || opts.theme);
                    var theme = new themeClass(_this.optionsManager);
                    var widgetClass = theme.getClass("widget");
                    _this.theme = theme;
                    if (widgetClass) {
                        el.addClass(widgetClass);
                    }
                }, function() {
                    var widgetClass = _this.theme.getClass("widget");
                    _this.theme = null;
                    if (widgetClass) {
                        el.removeClass(widgetClass);
                    }
                });
                this.optionsManager.watch("settingBusinessHourGenerator", [ "?businessHours" ], function(deps) {
                    _this.businessHourGenerator = new BusinessHourGenerator_1.default(deps.businessHours, _this);
                    if (_this.view) {
                        _this.view.set("businessHourGenerator", _this.businessHourGenerator);
                    }
                }, function() {
                    _this.businessHourGenerator = null;
                });
                this.optionsManager.watch("applyingDirClasses", [ "?isRTL", "?locale" ], function(opts) {
                    el.toggleClass("fc-ltr", !opts.isRTL);
                    el.toggleClass("fc-rtl", opts.isRTL);
                });
                this.contentEl = $("<div class='fc-view-container'/>").prependTo(el);
                this.initToolbars();
                this.renderHeader();
                this.renderFooter();
                this.renderView(this.opt("defaultView"));
                if (this.opt("handleWindowResize")) {
                    $(window).resize(this.windowResizeProxy = util_1.debounce(this.windowResize.bind(this), this.opt("windowResizeDelay")));
                }
            };
            Calendar.prototype.destroy = function() {
                if (this.view) {
                    this.clearView();
                }
                this.toolbarsManager.proxyCall("removeElement");
                this.contentEl.remove();
                this.el.removeClass("fc fc-ltr fc-rtl");
                this.optionsManager.unwatch("settingTheme");
                this.optionsManager.unwatch("settingBusinessHourGenerator");
                this.el.off(".fc");
                if (this.windowResizeProxy) {
                    $(window).unbind("resize", this.windowResizeProxy);
                    this.windowResizeProxy = null;
                }
                GlobalEmitter_1.default.unneeded();
            };
            Calendar.prototype.elementVisible = function() {
                return this.el.is(":visible");
            };
            Calendar.prototype.bindViewHandlers = function(view) {
                var _this = this;
                view.watch("titleForCalendar", [ "title" ], function(deps) {
                    if (view === _this.view) {
                        _this.setToolbarsTitle(deps.title);
                    }
                });
                view.watch("dateProfileForCalendar", [ "dateProfile" ], function(deps) {
                    if (view === _this.view) {
                        _this.currentDate = deps.dateProfile.date;
                        _this.updateToolbarButtons(deps.dateProfile);
                    }
                });
            };
            Calendar.prototype.unbindViewHandlers = function(view) {
                view.unwatch("titleForCalendar");
                view.unwatch("dateProfileForCalendar");
            };
            Calendar.prototype.renderView = function(viewType) {
                var oldView = this.view;
                var newView;
                this.freezeContentHeight();
                if (oldView && viewType && oldView.type !== viewType) {
                    this.clearView();
                }
                if (!this.view && viewType) {
                    newView = this.view = this.viewsByType[viewType] || (this.viewsByType[viewType] = this.instantiateView(viewType));
                    this.bindViewHandlers(newView);
                    newView.startBatchRender();
                    newView.setElement($("<div class='fc-view fc-" + viewType + "-view' />").appendTo(this.contentEl));
                    this.toolbarsManager.proxyCall("activateButton", viewType);
                }
                if (this.view) {
                    if (this.view.get("businessHourGenerator") !== this.businessHourGenerator) {
                        this.view.set("businessHourGenerator", this.businessHourGenerator);
                    }
                    this.view.setDate(this.currentDate);
                    if (newView) {
                        newView.stopBatchRender();
                    }
                }
                this.thawContentHeight();
            };
            Calendar.prototype.clearView = function() {
                var currentView = this.view;
                this.toolbarsManager.proxyCall("deactivateButton", currentView.type);
                this.unbindViewHandlers(currentView);
                currentView.removeElement();
                currentView.unsetDate();
                this.view = null;
            };
            Calendar.prototype.reinitView = function() {
                var oldView = this.view;
                var scroll = oldView.queryScroll();
                this.freezeContentHeight();
                this.clearView();
                this.calcSize();
                this.renderView(oldView.type);
                this.view.applyScroll(scroll);
                this.thawContentHeight();
            };
            Calendar.prototype.getSuggestedViewHeight = function() {
                if (this.suggestedViewHeight == null) {
                    this.calcSize();
                }
                return this.suggestedViewHeight;
            };
            Calendar.prototype.isHeightAuto = function() {
                return this.opt("contentHeight") === "auto" || this.opt("height") === "auto";
            };
            Calendar.prototype.updateViewSize = function(isResize) {
                if (isResize === void 0) {
                    isResize = false;
                }
                var view = this.view;
                var scroll;
                if (!this.ignoreUpdateViewSize && view) {
                    if (isResize) {
                        this.calcSize();
                        scroll = view.queryScroll();
                    }
                    this.ignoreUpdateViewSize++;
                    view.updateSize(this.getSuggestedViewHeight(), this.isHeightAuto(), isResize);
                    this.ignoreUpdateViewSize--;
                    if (isResize) {
                        view.applyScroll(scroll);
                    }
                    return true;
                }
            };
            Calendar.prototype.calcSize = function() {
                if (this.elementVisible()) {
                    this._calcSize();
                }
            };
            Calendar.prototype._calcSize = function() {
                var contentHeightInput = this.opt("contentHeight");
                var heightInput = this.opt("height");
                if (typeof contentHeightInput === "number") {
                    this.suggestedViewHeight = contentHeightInput;
                } else if (typeof contentHeightInput === "function") {
                    this.suggestedViewHeight = contentHeightInput();
                } else if (typeof heightInput === "number") {
                    this.suggestedViewHeight = heightInput - this.queryToolbarsHeight();
                } else if (typeof heightInput === "function") {
                    this.suggestedViewHeight = heightInput() - this.queryToolbarsHeight();
                } else if (heightInput === "parent") {
                    this.suggestedViewHeight = this.el.parent().height() - this.queryToolbarsHeight();
                } else {
                    this.suggestedViewHeight = Math.round(this.contentEl.width() / Math.max(this.opt("aspectRatio"), .5));
                }
            };
            Calendar.prototype.windowResize = function(ev) {
                if (ev.target === window && this.view && this.view.isDatesRendered) {
                    if (this.updateViewSize(true)) {
                        this.publiclyTrigger("windowResize", [ this.view ]);
                    }
                }
            };
            Calendar.prototype.freezeContentHeight = function() {
                if (!this.freezeContentHeightDepth++) {
                    this.forceFreezeContentHeight();
                }
            };
            Calendar.prototype.forceFreezeContentHeight = function() {
                this.contentEl.css({
                    width: "100%",
                    height: this.contentEl.height(),
                    overflow: "hidden"
                });
            };
            Calendar.prototype.thawContentHeight = function() {
                this.freezeContentHeightDepth--;
                this.contentEl.css({
                    width: "",
                    height: "",
                    overflow: ""
                });
                if (this.freezeContentHeightDepth) {
                    this.forceFreezeContentHeight();
                }
            };
            Calendar.prototype.initToolbars = function() {
                this.header = new Toolbar_1.default(this, this.computeHeaderOptions());
                this.footer = new Toolbar_1.default(this, this.computeFooterOptions());
                this.toolbarsManager = new Iterator_1.default([ this.header, this.footer ]);
            };
            Calendar.prototype.computeHeaderOptions = function() {
                return {
                    extraClasses: "fc-header-toolbar",
                    layout: this.opt("header")
                };
            };
            Calendar.prototype.computeFooterOptions = function() {
                return {
                    extraClasses: "fc-footer-toolbar",
                    layout: this.opt("footer")
                };
            };
            Calendar.prototype.renderHeader = function() {
                var header = this.header;
                header.setToolbarOptions(this.computeHeaderOptions());
                header.render();
                if (header.el) {
                    this.el.prepend(header.el);
                }
            };
            Calendar.prototype.renderFooter = function() {
                var footer = this.footer;
                footer.setToolbarOptions(this.computeFooterOptions());
                footer.render();
                if (footer.el) {
                    this.el.append(footer.el);
                }
            };
            Calendar.prototype.setToolbarsTitle = function(title) {
                this.toolbarsManager.proxyCall("updateTitle", title);
            };
            Calendar.prototype.updateToolbarButtons = function(dateProfile) {
                var now = this.getNow();
                var view = this.view;
                var todayInfo = view.dateProfileGenerator.build(now);
                var prevInfo = view.dateProfileGenerator.buildPrev(view.get("dateProfile"));
                var nextInfo = view.dateProfileGenerator.buildNext(view.get("dateProfile"));
                this.toolbarsManager.proxyCall(todayInfo.isValid && !dateProfile.currentUnzonedRange.containsDate(now) ? "enableButton" : "disableButton", "today");
                this.toolbarsManager.proxyCall(prevInfo.isValid ? "enableButton" : "disableButton", "prev");
                this.toolbarsManager.proxyCall(nextInfo.isValid ? "enableButton" : "disableButton", "next");
            };
            Calendar.prototype.queryToolbarsHeight = function() {
                return this.toolbarsManager.items.reduce(function(accumulator, toolbar) {
                    var toolbarHeight = toolbar.el ? toolbar.el.outerHeight(true) : 0;
                    return accumulator + toolbarHeight;
                }, 0);
            };
            Calendar.prototype.select = function(zonedStartInput, zonedEndInput) {
                this.view.select(this.buildSelectFootprint.apply(this, arguments));
            };
            Calendar.prototype.unselect = function() {
                if (this.view) {
                    this.view.unselect();
                }
            };
            Calendar.prototype.buildSelectFootprint = function(zonedStartInput, zonedEndInput) {
                var start = this.moment(zonedStartInput).stripZone();
                var end;
                if (zonedEndInput) {
                    end = this.moment(zonedEndInput).stripZone();
                } else if (start.hasTime()) {
                    end = start.clone().add(this.defaultTimedEventDuration);
                } else {
                    end = start.clone().add(this.defaultAllDayEventDuration);
                }
                return new ComponentFootprint_1.default(new UnzonedRange_1.default(start, end), !start.hasTime());
            };
            Calendar.prototype.initMomentInternals = function() {
                var _this = this;
                this.defaultAllDayEventDuration = moment.duration(this.opt("defaultAllDayEventDuration"));
                this.defaultTimedEventDuration = moment.duration(this.opt("defaultTimedEventDuration"));
                this.optionsManager.watch("buildingMomentLocale", [ "?locale", "?monthNames", "?monthNamesShort", "?dayNames", "?dayNamesShort", "?firstDay", "?weekNumberCalculation" ], function(opts) {
                    var weekNumberCalculation = opts.weekNumberCalculation;
                    var firstDay = opts.firstDay;
                    var _week;
                    if (weekNumberCalculation === "iso") {
                        weekNumberCalculation = "ISO";
                    }
                    var localeData = Object.create(locale_1.getMomentLocaleData(opts.locale));
                    if (opts.monthNames) {
                        localeData._months = opts.monthNames;
                    }
                    if (opts.monthNamesShort) {
                        localeData._monthsShort = opts.monthNamesShort;
                    }
                    if (opts.dayNames) {
                        localeData._weekdays = opts.dayNames;
                    }
                    if (opts.dayNamesShort) {
                        localeData._weekdaysShort = opts.dayNamesShort;
                    }
                    if (firstDay == null && weekNumberCalculation === "ISO") {
                        firstDay = 1;
                    }
                    if (firstDay != null) {
                        _week = Object.create(localeData._week);
                        _week.dow = firstDay;
                        localeData._week = _week;
                    }
                    if (weekNumberCalculation === "ISO" || weekNumberCalculation === "local" || typeof weekNumberCalculation === "function") {
                        localeData._fullCalendar_weekCalc = weekNumberCalculation;
                    }
                    _this.localeData = localeData;
                    if (_this.currentDate) {
                        _this.localizeMoment(_this.currentDate);
                    }
                });
            };
            Calendar.prototype.moment = function() {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                var mom;
                if (this.opt("timezone") === "local") {
                    mom = moment_ext_1.default.apply(null, args);
                    if (mom.hasTime()) {
                        mom.local();
                    }
                } else if (this.opt("timezone") === "UTC") {
                    mom = moment_ext_1.default.utc.apply(null, args);
                } else {
                    mom = moment_ext_1.default.parseZone.apply(null, args);
                }
                this.localizeMoment(mom);
                return mom;
            };
            Calendar.prototype.msToMoment = function(ms, forceAllDay) {
                var mom = moment_ext_1.default.utc(ms);
                if (forceAllDay) {
                    mom.stripTime();
                } else {
                    mom = this.applyTimezone(mom);
                }
                this.localizeMoment(mom);
                return mom;
            };
            Calendar.prototype.msToUtcMoment = function(ms, forceAllDay) {
                var mom = moment_ext_1.default.utc(ms);
                if (forceAllDay) {
                    mom.stripTime();
                }
                this.localizeMoment(mom);
                return mom;
            };
            Calendar.prototype.localizeMoment = function(mom) {
                mom._locale = this.localeData;
            };
            Calendar.prototype.getIsAmbigTimezone = function() {
                return this.opt("timezone") !== "local" && this.opt("timezone") !== "UTC";
            };
            Calendar.prototype.applyTimezone = function(date) {
                if (!date.hasTime()) {
                    return date.clone();
                }
                var zonedDate = this.moment(date.toArray());
                var timeAdjust = date.time().asMilliseconds() - zonedDate.time().asMilliseconds();
                var adjustedZonedDate;
                if (timeAdjust) {
                    adjustedZonedDate = zonedDate.clone().add(timeAdjust);
                    if (date.time().asMilliseconds() - adjustedZonedDate.time().asMilliseconds() === 0) {
                        zonedDate = adjustedZonedDate;
                    }
                }
                return zonedDate;
            };
            Calendar.prototype.footprintToDateProfile = function(componentFootprint, ignoreEnd) {
                if (ignoreEnd === void 0) {
                    ignoreEnd = false;
                }
                var start = moment_ext_1.default.utc(componentFootprint.unzonedRange.startMs);
                var end;
                if (!ignoreEnd) {
                    end = moment_ext_1.default.utc(componentFootprint.unzonedRange.endMs);
                }
                if (componentFootprint.isAllDay) {
                    start.stripTime();
                    if (end) {
                        end.stripTime();
                    }
                } else {
                    start = this.applyTimezone(start);
                    if (end) {
                        end = this.applyTimezone(end);
                    }
                }
                return new EventDateProfile_1.default(start, end, this);
            };
            Calendar.prototype.getNow = function() {
                var now = this.opt("now");
                if (typeof now === "function") {
                    now = now();
                }
                return this.moment(now).stripZone();
            };
            Calendar.prototype.humanizeDuration = function(duration) {
                return duration.locale(this.opt("locale")).humanize();
            };
            Calendar.prototype.parseUnzonedRange = function(rangeInput) {
                var start = null;
                var end = null;
                if (rangeInput.start) {
                    start = this.moment(rangeInput.start).stripZone();
                }
                if (rangeInput.end) {
                    end = this.moment(rangeInput.end).stripZone();
                }
                if (!start && !end) {
                    return null;
                }
                if (start && end && end.isBefore(start)) {
                    return null;
                }
                return new UnzonedRange_1.default(start, end);
            };
            Calendar.prototype.initEventManager = function() {
                var _this = this;
                var eventManager = new EventManager_1.default(this);
                var rawSources = this.opt("eventSources") || [];
                var singleRawSource = this.opt("events");
                this.eventManager = eventManager;
                if (singleRawSource) {
                    rawSources.unshift(singleRawSource);
                }
                eventManager.on("release", function(eventsPayload) {
                    _this.trigger("eventsReset", eventsPayload);
                });
                eventManager.freeze();
                rawSources.forEach(function(rawSource) {
                    var source = EventSourceParser_1.default.parse(rawSource, _this);
                    if (source) {
                        eventManager.addSource(source);
                    }
                });
                eventManager.thaw();
            };
            Calendar.prototype.requestEvents = function(start, end) {
                return this.eventManager.requestEvents(start, end, this.opt("timezone"), !this.opt("lazyFetching"));
            };
            Calendar.prototype.getEventEnd = function(event) {
                if (event.end) {
                    return event.end.clone();
                } else {
                    return this.getDefaultEventEnd(event.allDay, event.start);
                }
            };
            Calendar.prototype.getDefaultEventEnd = function(allDay, zonedStart) {
                var end = zonedStart.clone();
                if (allDay) {
                    end.stripTime().add(this.defaultAllDayEventDuration);
                } else {
                    end.add(this.defaultTimedEventDuration);
                }
                if (this.getIsAmbigTimezone()) {
                    end.stripZone();
                }
                return end;
            };
            Calendar.prototype.rerenderEvents = function() {
                this.view.flash("displayingEvents");
            };
            Calendar.prototype.refetchEvents = function() {
                this.eventManager.refetchAllSources();
            };
            Calendar.prototype.renderEvents = function(eventInputs, isSticky) {
                this.eventManager.freeze();
                for (var i = 0; i < eventInputs.length; i++) {
                    this.renderEvent(eventInputs[i], isSticky);
                }
                this.eventManager.thaw();
            };
            Calendar.prototype.renderEvent = function(eventInput, isSticky) {
                if (isSticky === void 0) {
                    isSticky = false;
                }
                var eventManager = this.eventManager;
                var eventDef = EventDefParser_1.default.parse(eventInput, eventInput.source || eventManager.stickySource);
                if (eventDef) {
                    eventManager.addEventDef(eventDef, isSticky);
                }
            };
            Calendar.prototype.removeEvents = function(legacyQuery) {
                var eventManager = this.eventManager;
                var legacyInstances = [];
                var idMap = {};
                var eventDef;
                var i;
                if (legacyQuery == null) {
                    eventManager.removeAllEventDefs();
                } else {
                    eventManager.getEventInstances().forEach(function(eventInstance) {
                        legacyInstances.push(eventInstance.toLegacy());
                    });
                    legacyInstances = filterLegacyEventInstances(legacyInstances, legacyQuery);
                    for (i = 0; i < legacyInstances.length; i++) {
                        eventDef = this.eventManager.getEventDefByUid(legacyInstances[i]._id);
                        idMap[eventDef.id] = true;
                    }
                    eventManager.freeze();
                    for (i in idMap) {
                        eventManager.removeEventDefsById(i);
                    }
                    eventManager.thaw();
                }
            };
            Calendar.prototype.clientEvents = function(legacyQuery) {
                var legacyEventInstances = [];
                this.eventManager.getEventInstances().forEach(function(eventInstance) {
                    legacyEventInstances.push(eventInstance.toLegacy());
                });
                return filterLegacyEventInstances(legacyEventInstances, legacyQuery);
            };
            Calendar.prototype.updateEvents = function(eventPropsArray) {
                this.eventManager.freeze();
                for (var i = 0; i < eventPropsArray.length; i++) {
                    this.updateEvent(eventPropsArray[i]);
                }
                this.eventManager.thaw();
            };
            Calendar.prototype.updateEvent = function(eventProps) {
                var eventDef = this.eventManager.getEventDefByUid(eventProps._id);
                var eventInstance;
                var eventDefMutation;
                if (eventDef instanceof SingleEventDef_1.default) {
                    eventInstance = eventDef.buildInstance();
                    eventDefMutation = EventDefMutation_1.default.createFromRawProps(eventInstance, eventProps, null);
                    this.eventManager.mutateEventsWithId(eventDef.id, eventDefMutation);
                }
            };
            Calendar.prototype.getEventSources = function() {
                return this.eventManager.otherSources.slice();
            };
            Calendar.prototype.getEventSourceById = function(id) {
                return this.eventManager.getSourceById(EventSource_1.default.normalizeId(id));
            };
            Calendar.prototype.addEventSource = function(sourceInput) {
                var source = EventSourceParser_1.default.parse(sourceInput, this);
                if (source) {
                    this.eventManager.addSource(source);
                }
            };
            Calendar.prototype.removeEventSources = function(sourceMultiQuery) {
                var eventManager = this.eventManager;
                var sources;
                var i;
                if (sourceMultiQuery == null) {
                    this.eventManager.removeAllSources();
                } else {
                    sources = eventManager.multiQuerySources(sourceMultiQuery);
                    eventManager.freeze();
                    for (i = 0; i < sources.length; i++) {
                        eventManager.removeSource(sources[i]);
                    }
                    eventManager.thaw();
                }
            };
            Calendar.prototype.removeEventSource = function(sourceQuery) {
                var eventManager = this.eventManager;
                var sources = eventManager.querySources(sourceQuery);
                var i;
                eventManager.freeze();
                for (i = 0; i < sources.length; i++) {
                    eventManager.removeSource(sources[i]);
                }
                eventManager.thaw();
            };
            Calendar.prototype.refetchEventSources = function(sourceMultiQuery) {
                var eventManager = this.eventManager;
                var sources = eventManager.multiQuerySources(sourceMultiQuery);
                var i;
                eventManager.freeze();
                for (i = 0; i < sources.length; i++) {
                    eventManager.refetchSource(sources[i]);
                }
                eventManager.thaw();
            };
            Calendar.defaults = options_1.globalDefaults;
            Calendar.englishDefaults = options_1.englishDefaults;
            Calendar.rtlDefaults = options_1.rtlDefaults;
            return Calendar;
        }();
        exports.default = Calendar;
        EmitterMixin_1.default.mixInto(Calendar);
        ListenerMixin_1.default.mixInto(Calendar);
        function filterLegacyEventInstances(legacyEventInstances, legacyQuery) {
            if (legacyQuery == null) {
                return legacyEventInstances;
            } else if ($.isFunction(legacyQuery)) {
                return legacyEventInstances.filter(legacyQuery);
            } else {
                legacyQuery += "";
                return legacyEventInstances.filter(function(legacyEventInstance) {
                    return legacyEventInstance.id == legacyQuery || legacyEventInstance._id === legacyQuery;
                });
            }
        }
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var moment = __webpack_require__(0);
        var util_1 = __webpack_require__(4);
        var UnzonedRange_1 = __webpack_require__(5);
        var DateProfileGenerator = function() {
            function DateProfileGenerator(_view) {
                this._view = _view;
            }
            DateProfileGenerator.prototype.opt = function(name) {
                return this._view.opt(name);
            };
            DateProfileGenerator.prototype.trimHiddenDays = function(unzonedRange) {
                return this._view.trimHiddenDays(unzonedRange);
            };
            DateProfileGenerator.prototype.msToUtcMoment = function(ms, forceAllDay) {
                return this._view.calendar.msToUtcMoment(ms, forceAllDay);
            };
            DateProfileGenerator.prototype.buildPrev = function(currentDateProfile) {
                var prevDate = currentDateProfile.date.clone().startOf(currentDateProfile.currentRangeUnit).subtract(currentDateProfile.dateIncrement);
                return this.build(prevDate, -1);
            };
            DateProfileGenerator.prototype.buildNext = function(currentDateProfile) {
                var nextDate = currentDateProfile.date.clone().startOf(currentDateProfile.currentRangeUnit).add(currentDateProfile.dateIncrement);
                return this.build(nextDate, 1);
            };
            DateProfileGenerator.prototype.build = function(date, direction, forceToValid) {
                if (forceToValid === void 0) {
                    forceToValid = false;
                }
                var isDateAllDay = !date.hasTime();
                var validUnzonedRange;
                var minTime = null;
                var maxTime = null;
                var currentInfo;
                var isRangeAllDay;
                var renderUnzonedRange;
                var activeUnzonedRange;
                var isValid;
                validUnzonedRange = this.buildValidRange();
                validUnzonedRange = this.trimHiddenDays(validUnzonedRange);
                if (forceToValid) {
                    date = this.msToUtcMoment(validUnzonedRange.constrainDate(date), isDateAllDay);
                }
                currentInfo = this.buildCurrentRangeInfo(date, direction);
                isRangeAllDay = /^(year|month|week|day)$/.test(currentInfo.unit);
                renderUnzonedRange = this.buildRenderRange(this.trimHiddenDays(currentInfo.unzonedRange), currentInfo.unit, isRangeAllDay);
                renderUnzonedRange = this.trimHiddenDays(renderUnzonedRange);
                activeUnzonedRange = renderUnzonedRange.clone();
                if (!this.opt("showNonCurrentDates")) {
                    activeUnzonedRange = activeUnzonedRange.intersect(currentInfo.unzonedRange);
                }
                minTime = moment.duration(this.opt("minTime"));
                maxTime = moment.duration(this.opt("maxTime"));
                activeUnzonedRange = this.adjustActiveRange(activeUnzonedRange, minTime, maxTime);
                activeUnzonedRange = activeUnzonedRange.intersect(validUnzonedRange);
                if (activeUnzonedRange) {
                    date = this.msToUtcMoment(activeUnzonedRange.constrainDate(date), isDateAllDay);
                }
                isValid = currentInfo.unzonedRange.intersectsWith(validUnzonedRange);
                return {
                    validUnzonedRange: validUnzonedRange,
                    currentUnzonedRange: currentInfo.unzonedRange,
                    currentRangeUnit: currentInfo.unit,
                    isRangeAllDay: isRangeAllDay,
                    activeUnzonedRange: activeUnzonedRange,
                    renderUnzonedRange: renderUnzonedRange,
                    minTime: minTime,
                    maxTime: maxTime,
                    isValid: isValid,
                    date: date,
                    dateIncrement: this.buildDateIncrement(currentInfo.duration)
                };
            };
            DateProfileGenerator.prototype.buildValidRange = function() {
                return this._view.getUnzonedRangeOption("validRange", this._view.calendar.getNow()) || new UnzonedRange_1.default();
            };
            DateProfileGenerator.prototype.buildCurrentRangeInfo = function(date, direction) {
                var viewSpec = this._view.viewSpec;
                var duration = null;
                var unit = null;
                var unzonedRange = null;
                var dayCount;
                if (viewSpec.duration) {
                    duration = viewSpec.duration;
                    unit = viewSpec.durationUnit;
                    unzonedRange = this.buildRangeFromDuration(date, direction, duration, unit);
                } else if (dayCount = this.opt("dayCount")) {
                    unit = "day";
                    unzonedRange = this.buildRangeFromDayCount(date, direction, dayCount);
                } else if (unzonedRange = this.buildCustomVisibleRange(date)) {
                    unit = util_1.computeGreatestUnit(unzonedRange.getStart(), unzonedRange.getEnd());
                } else {
                    duration = this.getFallbackDuration();
                    unit = util_1.computeGreatestUnit(duration);
                    unzonedRange = this.buildRangeFromDuration(date, direction, duration, unit);
                }
                return {
                    duration: duration,
                    unit: unit,
                    unzonedRange: unzonedRange
                };
            };
            DateProfileGenerator.prototype.getFallbackDuration = function() {
                return moment.duration({
                    days: 1
                });
            };
            DateProfileGenerator.prototype.adjustActiveRange = function(unzonedRange, minTime, maxTime) {
                var start = unzonedRange.getStart();
                var end = unzonedRange.getEnd();
                if (this._view.usesMinMaxTime) {
                    if (minTime < 0) {
                        start.time(0).add(minTime);
                    }
                    if (maxTime > 24 * 60 * 60 * 1e3) {
                        end.time(maxTime - 24 * 60 * 60 * 1e3);
                    }
                }
                return new UnzonedRange_1.default(start, end);
            };
            DateProfileGenerator.prototype.buildRangeFromDuration = function(date, direction, duration, unit) {
                var alignment = this.opt("dateAlignment");
                var dateIncrementInput;
                var dateIncrementDuration;
                var start;
                var end;
                var res;
                if (!alignment) {
                    dateIncrementInput = this.opt("dateIncrement");
                    if (dateIncrementInput) {
                        dateIncrementDuration = moment.duration(dateIncrementInput);
                        if (dateIncrementDuration < duration) {
                            alignment = util_1.computeDurationGreatestUnit(dateIncrementDuration, dateIncrementInput);
                        } else {
                            alignment = unit;
                        }
                    } else {
                        alignment = unit;
                    }
                }
                if (duration.as("days") <= 1) {
                    if (this._view.isHiddenDay(start)) {
                        start = this._view.skipHiddenDays(start, direction);
                        start.startOf("day");
                    }
                }
                function computeRes() {
                    start = date.clone().startOf(alignment);
                    end = start.clone().add(duration);
                    res = new UnzonedRange_1.default(start, end);
                }
                computeRes();
                if (!this.trimHiddenDays(res)) {
                    date = this._view.skipHiddenDays(date, direction);
                    computeRes();
                }
                return res;
            };
            DateProfileGenerator.prototype.buildRangeFromDayCount = function(date, direction, dayCount) {
                var customAlignment = this.opt("dateAlignment");
                var runningCount = 0;
                var start = date.clone();
                var end;
                if (customAlignment) {
                    start.startOf(customAlignment);
                }
                start.startOf("day");
                start = this._view.skipHiddenDays(start, direction);
                end = start.clone();
                do {
                    end.add(1, "day");
                    if (!this._view.isHiddenDay(end)) {
                        runningCount++;
                    }
                } while (runningCount < dayCount);
                return new UnzonedRange_1.default(start, end);
            };
            DateProfileGenerator.prototype.buildCustomVisibleRange = function(date) {
                var visibleUnzonedRange = this._view.getUnzonedRangeOption("visibleRange", this._view.calendar.applyTimezone(date));
                if (visibleUnzonedRange && (visibleUnzonedRange.startMs == null || visibleUnzonedRange.endMs == null)) {
                    return null;
                }
                return visibleUnzonedRange;
            };
            DateProfileGenerator.prototype.buildRenderRange = function(currentUnzonedRange, currentRangeUnit, isRangeAllDay) {
                return currentUnzonedRange.clone();
            };
            DateProfileGenerator.prototype.buildDateIncrement = function(fallback) {
                var dateIncrementInput = this.opt("dateIncrement");
                var customAlignment;
                if (dateIncrementInput) {
                    return moment.duration(dateIncrementInput);
                } else if (customAlignment = this.opt("dateAlignment")) {
                    return moment.duration(1, customAlignment);
                } else if (fallback) {
                    return fallback;
                } else {
                    return moment.duration({
                        days: 1
                    });
                }
            };
            return DateProfileGenerator;
        }();
        exports.default = DateProfileGenerator;
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var tslib_1 = __webpack_require__(2);
        var $ = __webpack_require__(3);
        var moment = __webpack_require__(0);
        var exportHooks = __webpack_require__(16);
        var util_1 = __webpack_require__(4);
        var moment_ext_1 = __webpack_require__(10);
        var ListenerMixin_1 = __webpack_require__(7);
        var HitDragListener_1 = __webpack_require__(22);
        var SingleEventDef_1 = __webpack_require__(13);
        var EventInstanceGroup_1 = __webpack_require__(18);
        var EventSource_1 = __webpack_require__(6);
        var Interaction_1 = __webpack_require__(15);
        var ExternalDropping = function(_super) {
            tslib_1.__extends(ExternalDropping, _super);
            function ExternalDropping() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.isDragging = false;
                return _this;
            }
            ExternalDropping.prototype.end = function() {
                if (this.dragListener) {
                    this.dragListener.endInteraction();
                }
            };
            ExternalDropping.prototype.bindToDocument = function() {
                this.listenTo($(document), {
                    dragstart: this.handleDragStart,
                    sortstart: this.handleDragStart
                });
            };
            ExternalDropping.prototype.unbindFromDocument = function() {
                this.stopListeningTo($(document));
            };
            ExternalDropping.prototype.handleDragStart = function(ev, ui) {
                var el;
                var accept;
                if (this.opt("droppable")) {
                    el = $((ui ? ui.item : null) || ev.target);
                    accept = this.opt("dropAccept");
                    if ($.isFunction(accept) ? accept.call(el[0], el) : el.is(accept)) {
                        if (!this.isDragging) {
                            this.listenToExternalDrag(el, ev, ui);
                        }
                    }
                }
            };
            ExternalDropping.prototype.listenToExternalDrag = function(el, ev, ui) {
                var _this = this;
                var component = this.component;
                var view = this.view;
                var meta = getDraggedElMeta(el);
                var singleEventDef;
                var dragListener = this.dragListener = new HitDragListener_1.default(component, {
                    interactionStart: function() {
                        _this.isDragging = true;
                    },
                    hitOver: function(hit) {
                        var isAllowed = true;
                        var hitFootprint = hit.component.getSafeHitFootprint(hit);
                        var mutatedEventInstanceGroup;
                        if (hitFootprint) {
                            singleEventDef = _this.computeExternalDrop(hitFootprint, meta);
                            if (singleEventDef) {
                                mutatedEventInstanceGroup = new EventInstanceGroup_1.default(singleEventDef.buildInstances());
                                isAllowed = meta.eventProps ? component.isEventInstanceGroupAllowed(mutatedEventInstanceGroup) : component.isExternalInstanceGroupAllowed(mutatedEventInstanceGroup);
                            } else {
                                isAllowed = false;
                            }
                        } else {
                            isAllowed = false;
                        }
                        if (!isAllowed) {
                            singleEventDef = null;
                            util_1.disableCursor();
                        }
                        if (singleEventDef) {
                            component.renderDrag(component.eventRangesToEventFootprints(mutatedEventInstanceGroup.sliceRenderRanges(component.dateProfile.renderUnzonedRange, view.calendar)));
                        }
                    },
                    hitOut: function() {
                        singleEventDef = null;
                    },
                    hitDone: function() {
                        util_1.enableCursor();
                        component.unrenderDrag();
                    },
                    interactionEnd: function(ev) {
                        if (singleEventDef) {
                            view.reportExternalDrop(singleEventDef, Boolean(meta.eventProps), Boolean(meta.stick), el, ev, ui);
                        }
                        _this.isDragging = false;
                        _this.dragListener = null;
                    }
                });
                dragListener.startDrag(ev);
            };
            ExternalDropping.prototype.computeExternalDrop = function(componentFootprint, meta) {
                var calendar = this.view.calendar;
                var start = moment_ext_1.default.utc(componentFootprint.unzonedRange.startMs).stripZone();
                var end;
                var eventDef;
                if (componentFootprint.isAllDay) {
                    if (meta.startTime) {
                        start.time(meta.startTime);
                    } else {
                        start.stripTime();
                    }
                }
                if (meta.duration) {
                    end = start.clone().add(meta.duration);
                }
                start = calendar.applyTimezone(start);
                if (end) {
                    end = calendar.applyTimezone(end);
                }
                eventDef = SingleEventDef_1.default.parse($.extend({}, meta.eventProps, {
                    start: start,
                    end: end
                }), new EventSource_1.default(calendar));
                return eventDef;
            };
            return ExternalDropping;
        }(Interaction_1.default);
        exports.default = ExternalDropping;
        ListenerMixin_1.default.mixInto(ExternalDropping);
        exportHooks.dataAttrPrefix = "";
        function getDraggedElMeta(el) {
            var prefix = exportHooks.dataAttrPrefix;
            var eventProps;
            var startTime;
            var duration;
            var stick;
            if (prefix) {
                prefix += "-";
            }
            eventProps = el.data(prefix + "event") || null;
            if (eventProps) {
                if (typeof eventProps === "object") {
                    eventProps = $.extend({}, eventProps);
                } else {
                    eventProps = {};
                }
                startTime = eventProps.start;
                if (startTime == null) {
                    startTime = eventProps.time;
                }
                duration = eventProps.duration;
                stick = eventProps.stick;
                delete eventProps.start;
                delete eventProps.time;
                delete eventProps.duration;
                delete eventProps.stick;
            }
            if (startTime == null) {
                startTime = el.data(prefix + "start");
            }
            if (startTime == null) {
                startTime = el.data(prefix + "time");
            }
            if (duration == null) {
                duration = el.data(prefix + "duration");
            }
            if (stick == null) {
                stick = el.data(prefix + "stick");
            }
            startTime = startTime != null ? moment.duration(startTime) : null;
            duration = duration != null ? moment.duration(duration) : null;
            stick = Boolean(stick);
            return {
                eventProps: eventProps,
                startTime: startTime,
                duration: duration,
                stick: stick
            };
        }
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var tslib_1 = __webpack_require__(2);
        var $ = __webpack_require__(3);
        var util_1 = __webpack_require__(4);
        var EventDefMutation_1 = __webpack_require__(36);
        var EventDefDateMutation_1 = __webpack_require__(50);
        var HitDragListener_1 = __webpack_require__(22);
        var Interaction_1 = __webpack_require__(15);
        var EventResizing = function(_super) {
            tslib_1.__extends(EventResizing, _super);
            function EventResizing(component, eventPointing) {
                var _this = _super.call(this, component) || this;
                _this.isResizing = false;
                _this.eventPointing = eventPointing;
                return _this;
            }
            EventResizing.prototype.end = function() {
                if (this.dragListener) {
                    this.dragListener.endInteraction();
                }
            };
            EventResizing.prototype.bindToEl = function(el) {
                var component = this.component;
                component.bindSegHandlerToEl(el, "mousedown", this.handleMouseDown.bind(this));
                component.bindSegHandlerToEl(el, "touchstart", this.handleTouchStart.bind(this));
            };
            EventResizing.prototype.handleMouseDown = function(seg, ev) {
                if (this.component.canStartResize(seg, ev)) {
                    this.buildDragListener(seg, $(ev.target).is(".fc-start-resizer")).startInteraction(ev, {
                        distance: 5
                    });
                }
            };
            EventResizing.prototype.handleTouchStart = function(seg, ev) {
                if (this.component.canStartResize(seg, ev)) {
                    this.buildDragListener(seg, $(ev.target).is(".fc-start-resizer")).startInteraction(ev);
                }
            };
            EventResizing.prototype.buildDragListener = function(seg, isStart) {
                var _this = this;
                var component = this.component;
                var view = this.view;
                var calendar = view.calendar;
                var eventManager = calendar.eventManager;
                var el = seg.el;
                var eventDef = seg.footprint.eventDef;
                var eventInstance = seg.footprint.eventInstance;
                var isDragging;
                var resizeMutation;
                var dragListener = this.dragListener = new HitDragListener_1.default(component, {
                    scroll: this.opt("dragScroll"),
                    subjectEl: el,
                    interactionStart: function() {
                        isDragging = false;
                    },
                    dragStart: function(ev) {
                        isDragging = true;
                        _this.eventPointing.handleMouseout(seg, ev);
                        _this.segResizeStart(seg, ev);
                    },
                    hitOver: function(hit, isOrig, origHit) {
                        var isAllowed = true;
                        var origHitFootprint = component.getSafeHitFootprint(origHit);
                        var hitFootprint = component.getSafeHitFootprint(hit);
                        var mutatedEventInstanceGroup;
                        if (origHitFootprint && hitFootprint) {
                            resizeMutation = isStart ? _this.computeEventStartResizeMutation(origHitFootprint, hitFootprint, seg.footprint) : _this.computeEventEndResizeMutation(origHitFootprint, hitFootprint, seg.footprint);
                            if (resizeMutation) {
                                mutatedEventInstanceGroup = eventManager.buildMutatedEventInstanceGroup(eventDef.id, resizeMutation);
                                isAllowed = component.isEventInstanceGroupAllowed(mutatedEventInstanceGroup);
                            } else {
                                isAllowed = false;
                            }
                        } else {
                            isAllowed = false;
                        }
                        if (!isAllowed) {
                            resizeMutation = null;
                            util_1.disableCursor();
                        } else if (resizeMutation.isEmpty()) {
                            resizeMutation = null;
                        }
                        if (resizeMutation) {
                            view.hideEventsWithId(seg.footprint.eventDef.id);
                            view.renderEventResize(component.eventRangesToEventFootprints(mutatedEventInstanceGroup.sliceRenderRanges(component.dateProfile.renderUnzonedRange, calendar)), seg);
                        }
                    },
                    hitOut: function() {
                        resizeMutation = null;
                    },
                    hitDone: function() {
                        view.unrenderEventResize(seg);
                        view.showEventsWithId(seg.footprint.eventDef.id);
                        util_1.enableCursor();
                    },
                    interactionEnd: function(ev) {
                        if (isDragging) {
                            _this.segResizeStop(seg, ev);
                        }
                        if (resizeMutation) {
                            view.reportEventResize(eventInstance, resizeMutation, el, ev);
                        }
                        _this.dragListener = null;
                    }
                });
                return dragListener;
            };
            EventResizing.prototype.segResizeStart = function(seg, ev) {
                this.isResizing = true;
                this.component.publiclyTrigger("eventResizeStart", {
                    context: seg.el[0],
                    args: [ seg.footprint.getEventLegacy(), ev, {}, this.view ]
                });
            };
            EventResizing.prototype.segResizeStop = function(seg, ev) {
                this.isResizing = false;
                this.component.publiclyTrigger("eventResizeStop", {
                    context: seg.el[0],
                    args: [ seg.footprint.getEventLegacy(), ev, {}, this.view ]
                });
            };
            EventResizing.prototype.computeEventStartResizeMutation = function(startFootprint, endFootprint, origEventFootprint) {
                var origRange = origEventFootprint.componentFootprint.unzonedRange;
                var startDelta = this.component.diffDates(endFootprint.unzonedRange.getStart(), startFootprint.unzonedRange.getStart());
                var dateMutation;
                var eventDefMutation;
                if (origRange.getStart().add(startDelta) < origRange.getEnd()) {
                    dateMutation = new EventDefDateMutation_1.default();
                    dateMutation.setStartDelta(startDelta);
                    eventDefMutation = new EventDefMutation_1.default();
                    eventDefMutation.setDateMutation(dateMutation);
                    return eventDefMutation;
                }
                return false;
            };
            EventResizing.prototype.computeEventEndResizeMutation = function(startFootprint, endFootprint, origEventFootprint) {
                var origRange = origEventFootprint.componentFootprint.unzonedRange;
                var endDelta = this.component.diffDates(endFootprint.unzonedRange.getEnd(), startFootprint.unzonedRange.getEnd());
                var dateMutation;
                var eventDefMutation;
                if (origRange.getEnd().add(endDelta) > origRange.getStart()) {
                    dateMutation = new EventDefDateMutation_1.default();
                    dateMutation.setEndDelta(endDelta);
                    eventDefMutation = new EventDefMutation_1.default();
                    eventDefMutation.setDateMutation(dateMutation);
                    return eventDefMutation;
                }
                return false;
            };
            return EventResizing;
        }(Interaction_1.default);
        exports.default = EventResizing;
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var tslib_1 = __webpack_require__(2);
        var util_1 = __webpack_require__(4);
        var EventDefMutation_1 = __webpack_require__(36);
        var EventDefDateMutation_1 = __webpack_require__(50);
        var DragListener_1 = __webpack_require__(54);
        var HitDragListener_1 = __webpack_require__(22);
        var MouseFollower_1 = __webpack_require__(240);
        var Interaction_1 = __webpack_require__(15);
        var EventDragging = function(_super) {
            tslib_1.__extends(EventDragging, _super);
            function EventDragging(component, eventPointing) {
                var _this = _super.call(this, component) || this;
                _this.isDragging = false;
                _this.eventPointing = eventPointing;
                return _this;
            }
            EventDragging.prototype.end = function() {
                if (this.dragListener) {
                    this.dragListener.endInteraction();
                }
            };
            EventDragging.prototype.getSelectionDelay = function() {
                var delay = this.opt("eventLongPressDelay");
                if (delay == null) {
                    delay = this.opt("longPressDelay");
                }
                return delay;
            };
            EventDragging.prototype.bindToEl = function(el) {
                var component = this.component;
                component.bindSegHandlerToEl(el, "mousedown", this.handleMousedown.bind(this));
                component.bindSegHandlerToEl(el, "touchstart", this.handleTouchStart.bind(this));
            };
            EventDragging.prototype.handleMousedown = function(seg, ev) {
                if (this.component.canStartDrag(seg, ev)) {
                    this.buildDragListener(seg).startInteraction(ev, {
                        distance: 5
                    });
                }
            };
            EventDragging.prototype.handleTouchStart = function(seg, ev) {
                var component = this.component;
                var settings = {
                    delay: this.view.isEventDefSelected(seg.footprint.eventDef) ? 0 : this.getSelectionDelay()
                };
                if (component.canStartDrag(seg, ev)) {
                    this.buildDragListener(seg).startInteraction(ev, settings);
                } else if (component.canStartSelection(seg, ev)) {
                    this.buildSelectListener(seg).startInteraction(ev, settings);
                }
            };
            EventDragging.prototype.buildSelectListener = function(seg) {
                var _this = this;
                var view = this.view;
                var eventDef = seg.footprint.eventDef;
                var eventInstance = seg.footprint.eventInstance;
                if (this.dragListener) {
                    return this.dragListener;
                }
                var dragListener = this.dragListener = new DragListener_1.default({
                    dragStart: function(ev) {
                        if (dragListener.isTouch && !view.isEventDefSelected(eventDef) && eventInstance) {
                            view.selectEventInstance(eventInstance);
                        }
                    },
                    interactionEnd: function(ev) {
                        _this.dragListener = null;
                    }
                });
                return dragListener;
            };
            EventDragging.prototype.buildDragListener = function(seg) {
                var _this = this;
                var component = this.component;
                var view = this.view;
                var calendar = view.calendar;
                var eventManager = calendar.eventManager;
                var el = seg.el;
                var eventDef = seg.footprint.eventDef;
                var eventInstance = seg.footprint.eventInstance;
                var isDragging;
                var mouseFollower;
                var eventDefMutation;
                if (this.dragListener) {
                    return this.dragListener;
                }
                var dragListener = this.dragListener = new HitDragListener_1.default(view, {
                    scroll: this.opt("dragScroll"),
                    subjectEl: el,
                    subjectCenter: true,
                    interactionStart: function(ev) {
                        seg.component = component;
                        isDragging = false;
                        mouseFollower = new MouseFollower_1.default(seg.el, {
                            additionalClass: "fc-dragging",
                            parentEl: view.el,
                            opacity: dragListener.isTouch ? null : _this.opt("dragOpacity"),
                            revertDuration: _this.opt("dragRevertDuration"),
                            zIndex: 2
                        });
                        mouseFollower.hide();
                        mouseFollower.start(ev);
                    },
                    dragStart: function(ev) {
                        if (dragListener.isTouch && !view.isEventDefSelected(eventDef) && eventInstance) {
                            view.selectEventInstance(eventInstance);
                        }
                        isDragging = true;
                        _this.eventPointing.handleMouseout(seg, ev);
                        _this.segDragStart(seg, ev);
                        view.hideEventsWithId(seg.footprint.eventDef.id);
                    },
                    hitOver: function(hit, isOrig, origHit) {
                        var isAllowed = true;
                        var origFootprint;
                        var footprint;
                        var mutatedEventInstanceGroup;
                        if (seg.hit) {
                            origHit = seg.hit;
                        }
                        origFootprint = origHit.component.getSafeHitFootprint(origHit);
                        footprint = hit.component.getSafeHitFootprint(hit);
                        if (origFootprint && footprint) {
                            eventDefMutation = _this.computeEventDropMutation(origFootprint, footprint, eventDef);
                            if (eventDefMutation) {
                                mutatedEventInstanceGroup = eventManager.buildMutatedEventInstanceGroup(eventDef.id, eventDefMutation);
                                isAllowed = component.isEventInstanceGroupAllowed(mutatedEventInstanceGroup);
                            } else {
                                isAllowed = false;
                            }
                        } else {
                            isAllowed = false;
                        }
                        if (!isAllowed) {
                            eventDefMutation = null;
                            util_1.disableCursor();
                        }
                        if (eventDefMutation && view.renderDrag(component.eventRangesToEventFootprints(mutatedEventInstanceGroup.sliceRenderRanges(component.dateProfile.renderUnzonedRange, calendar)), seg, dragListener.isTouch)) {
                            mouseFollower.hide();
                        } else {
                            mouseFollower.show();
                        }
                        if (isOrig) {
                            eventDefMutation = null;
                        }
                    },
                    hitOut: function() {
                        view.unrenderDrag(seg);
                        mouseFollower.show();
                        eventDefMutation = null;
                    },
                    hitDone: function() {
                        util_1.enableCursor();
                    },
                    interactionEnd: function(ev) {
                        delete seg.component;
                        mouseFollower.stop(!eventDefMutation, function() {
                            if (isDragging) {
                                view.unrenderDrag(seg);
                                _this.segDragStop(seg, ev);
                            }
                            view.showEventsWithId(seg.footprint.eventDef.id);
                            if (eventDefMutation) {
                                view.reportEventDrop(eventInstance, eventDefMutation, el, ev);
                            }
                        });
                        _this.dragListener = null;
                    }
                });
                return dragListener;
            };
            EventDragging.prototype.segDragStart = function(seg, ev) {
                this.isDragging = true;
                this.component.publiclyTrigger("eventDragStart", {
                    context: seg.el[0],
                    args: [ seg.footprint.getEventLegacy(), ev, {}, this.view ]
                });
            };
            EventDragging.prototype.segDragStop = function(seg, ev) {
                this.isDragging = false;
                this.component.publiclyTrigger("eventDragStop", {
                    context: seg.el[0],
                    args: [ seg.footprint.getEventLegacy(), ev, {}, this.view ]
                });
            };
            EventDragging.prototype.computeEventDropMutation = function(startFootprint, endFootprint, eventDef) {
                var eventDefMutation = new EventDefMutation_1.default();
                eventDefMutation.setDateMutation(this.computeEventDateMutation(startFootprint, endFootprint));
                return eventDefMutation;
            };
            EventDragging.prototype.computeEventDateMutation = function(startFootprint, endFootprint) {
                var date0 = startFootprint.unzonedRange.getStart();
                var date1 = endFootprint.unzonedRange.getStart();
                var clearEnd = false;
                var forceTimed = false;
                var forceAllDay = false;
                var dateDelta;
                var dateMutation;
                if (startFootprint.isAllDay !== endFootprint.isAllDay) {
                    clearEnd = true;
                    if (endFootprint.isAllDay) {
                        forceAllDay = true;
                        date0.stripTime();
                    } else {
                        forceTimed = true;
                    }
                }
                dateDelta = this.component.diffDates(date1, date0);
                dateMutation = new EventDefDateMutation_1.default();
                dateMutation.clearEnd = clearEnd;
                dateMutation.forceTimed = forceTimed;
                dateMutation.forceAllDay = forceAllDay;
                dateMutation.setDateDelta(dateDelta);
                return dateMutation;
            };
            return EventDragging;
        }(Interaction_1.default);
        exports.default = EventDragging;
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var tslib_1 = __webpack_require__(2);
        var util_1 = __webpack_require__(4);
        var HitDragListener_1 = __webpack_require__(22);
        var ComponentFootprint_1 = __webpack_require__(12);
        var UnzonedRange_1 = __webpack_require__(5);
        var Interaction_1 = __webpack_require__(15);
        var DateSelecting = function(_super) {
            tslib_1.__extends(DateSelecting, _super);
            function DateSelecting(component) {
                var _this = _super.call(this, component) || this;
                _this.dragListener = _this.buildDragListener();
                return _this;
            }
            DateSelecting.prototype.end = function() {
                this.dragListener.endInteraction();
            };
            DateSelecting.prototype.getDelay = function() {
                var delay = this.opt("selectLongPressDelay");
                if (delay == null) {
                    delay = this.opt("longPressDelay");
                }
                return delay;
            };
            DateSelecting.prototype.bindToEl = function(el) {
                var _this = this;
                var component = this.component;
                var dragListener = this.dragListener;
                component.bindDateHandlerToEl(el, "mousedown", function(ev) {
                    if (_this.opt("selectable") && !component.shouldIgnoreMouse()) {
                        dragListener.startInteraction(ev, {
                            distance: _this.opt("selectMinDistance")
                        });
                    }
                });
                component.bindDateHandlerToEl(el, "touchstart", function(ev) {
                    if (_this.opt("selectable") && !component.shouldIgnoreTouch()) {
                        dragListener.startInteraction(ev, {
                            delay: _this.getDelay()
                        });
                    }
                });
                util_1.preventSelection(el);
            };
            DateSelecting.prototype.buildDragListener = function() {
                var _this = this;
                var component = this.component;
                var selectionFootprint;
                var dragListener = new HitDragListener_1.default(component, {
                    scroll: this.opt("dragScroll"),
                    interactionStart: function() {
                        selectionFootprint = null;
                    },
                    dragStart: function(ev) {
                        _this.view.unselect(ev);
                    },
                    hitOver: function(hit, isOrig, origHit) {
                        var origHitFootprint;
                        var hitFootprint;
                        if (origHit) {
                            origHitFootprint = component.getSafeHitFootprint(origHit);
                            hitFootprint = component.getSafeHitFootprint(hit);
                            if (origHitFootprint && hitFootprint) {
                                selectionFootprint = _this.computeSelection(origHitFootprint, hitFootprint);
                            } else {
                                selectionFootprint = null;
                            }
                            if (selectionFootprint) {
                                component.renderSelectionFootprint(selectionFootprint);
                            } else if (selectionFootprint === false) {
                                util_1.disableCursor();
                            }
                        }
                    },
                    hitOut: function() {
                        selectionFootprint = null;
                        component.unrenderSelection();
                    },
                    hitDone: function() {
                        util_1.enableCursor();
                    },
                    interactionEnd: function(ev, isCancelled) {
                        if (!isCancelled && selectionFootprint) {
                            _this.view.reportSelection(selectionFootprint, ev);
                        }
                    }
                });
                return dragListener;
            };
            DateSelecting.prototype.computeSelection = function(footprint0, footprint1) {
                var wholeFootprint = this.computeSelectionFootprint(footprint0, footprint1);
                if (wholeFootprint && !this.isSelectionFootprintAllowed(wholeFootprint)) {
                    return false;
                }
                return wholeFootprint;
            };
            DateSelecting.prototype.computeSelectionFootprint = function(footprint0, footprint1) {
                var ms = [ footprint0.unzonedRange.startMs, footprint0.unzonedRange.endMs, footprint1.unzonedRange.startMs, footprint1.unzonedRange.endMs ];
                ms.sort(util_1.compareNumbers);
                return new ComponentFootprint_1.default(new UnzonedRange_1.default(ms[0], ms[3]), footprint0.isAllDay);
            };
            DateSelecting.prototype.isSelectionFootprintAllowed = function(componentFootprint) {
                return this.component.dateProfile.validUnzonedRange.containsRange(componentFootprint.unzonedRange) && this.view.calendar.constraints.isSelectionFootprintAllowed(componentFootprint);
            };
            return DateSelecting;
        }(Interaction_1.default);
        exports.default = DateSelecting;
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var tslib_1 = __webpack_require__(2);
        var moment = __webpack_require__(0);
        var $ = __webpack_require__(3);
        var util_1 = __webpack_require__(4);
        var Scroller_1 = __webpack_require__(39);
        var View_1 = __webpack_require__(41);
        var TimeGrid_1 = __webpack_require__(223);
        var DayGrid_1 = __webpack_require__(61);
        var AGENDA_ALL_DAY_EVENT_LIMIT = 5;
        var AgendaView = function(_super) {
            tslib_1.__extends(AgendaView, _super);
            function AgendaView(calendar, viewSpec) {
                var _this = _super.call(this, calendar, viewSpec) || this;
                _this.usesMinMaxTime = true;
                _this.timeGrid = _this.instantiateTimeGrid();
                _this.addChild(_this.timeGrid);
                if (_this.opt("allDaySlot")) {
                    _this.dayGrid = _this.instantiateDayGrid();
                    _this.addChild(_this.dayGrid);
                }
                _this.scroller = new Scroller_1.default({
                    overflowX: "hidden",
                    overflowY: "auto"
                });
                return _this;
            }
            AgendaView.prototype.instantiateTimeGrid = function() {
                var SubClass = makeTimeGridSubclass(this.timeGridClass);
                return new SubClass(this);
            };
            AgendaView.prototype.instantiateDayGrid = function() {
                var SubClass = makeDayGridSubclass(this.dayGridClass);
                return new SubClass(this);
            };
            AgendaView.prototype.renderSkeleton = function() {
                var timeGridWrapEl;
                var timeGridEl;
                this.el.addClass("fc-agenda-view").html(this.renderSkeletonHtml());
                this.scroller.render();
                timeGridWrapEl = this.scroller.el.addClass("fc-time-grid-container");
                timeGridEl = $('<div class="fc-time-grid" />').appendTo(timeGridWrapEl);
                this.el.find(".fc-body > tr > td").append(timeGridWrapEl);
                this.timeGrid.headContainerEl = this.el.find(".fc-head-container");
                this.timeGrid.setElement(timeGridEl);
                if (this.dayGrid) {
                    this.dayGrid.setElement(this.el.find(".fc-day-grid"));
                    this.dayGrid.bottomCoordPadding = this.dayGrid.el.next("hr").outerHeight();
                }
            };
            AgendaView.prototype.unrenderSkeleton = function() {
                this.timeGrid.removeElement();
                if (this.dayGrid) {
                    this.dayGrid.removeElement();
                }
                this.scroller.destroy();
            };
            AgendaView.prototype.renderSkeletonHtml = function() {
                var theme = this.calendar.theme;
                return "" + '<table class="' + theme.getClass("tableGrid") + '">' + (this.opt("columnHeader") ? '<thead class="fc-head">' + "<tr>" + '<td class="fc-head-container ' + theme.getClass("widgetHeader") + '">&nbsp;</td>' + "</tr>" + "</thead>" : "") + '<tbody class="fc-body">' + "<tr>" + '<td class="' + theme.getClass("widgetContent") + '">' + (this.dayGrid ? '<div class="fc-day-grid"/>' + '<hr class="fc-divider ' + theme.getClass("widgetHeader") + '"/>' : "") + "</td>" + "</tr>" + "</tbody>" + "</table>";
            };
            AgendaView.prototype.axisStyleAttr = function() {
                if (this.axisWidth != null) {
                    return 'style="width:' + this.axisWidth + 'px"';
                }
                return "";
            };
            AgendaView.prototype.getNowIndicatorUnit = function() {
                return this.timeGrid.getNowIndicatorUnit();
            };
            AgendaView.prototype.updateSize = function(totalHeight, isAuto, isResize) {
                var eventLimit;
                var scrollerHeight;
                var scrollbarWidths;
                _super.prototype.updateSize.call(this, totalHeight, isAuto, isResize);
                this.axisWidth = util_1.matchCellWidths(this.el.find(".fc-axis"));
                if (!this.timeGrid.colEls) {
                    if (!isAuto) {
                        scrollerHeight = this.computeScrollerHeight(totalHeight);
                        this.scroller.setHeight(scrollerHeight);
                    }
                    return;
                }
                var noScrollRowEls = this.el.find(".fc-row:not(.fc-scroller *)");
                this.timeGrid.bottomRuleEl.hide();
                this.scroller.clear();
                util_1.uncompensateScroll(noScrollRowEls);
                if (this.dayGrid) {
                    this.dayGrid.removeSegPopover();
                    eventLimit = this.opt("eventLimit");
                    if (eventLimit && typeof eventLimit !== "number") {
                        eventLimit = AGENDA_ALL_DAY_EVENT_LIMIT;
                    }
                    if (eventLimit) {
                        this.dayGrid.limitRows(eventLimit);
                    }
                }
                if (!isAuto) {
                    scrollerHeight = this.computeScrollerHeight(totalHeight);
                    this.scroller.setHeight(scrollerHeight);
                    scrollbarWidths = this.scroller.getScrollbarWidths();
                    if (scrollbarWidths.left || scrollbarWidths.right) {
                        util_1.compensateScroll(noScrollRowEls, scrollbarWidths);
                        scrollerHeight = this.computeScrollerHeight(totalHeight);
                        this.scroller.setHeight(scrollerHeight);
                    }
                    this.scroller.lockOverflow(scrollbarWidths);
                    if (this.timeGrid.getTotalSlatHeight() < scrollerHeight) {
                        this.timeGrid.bottomRuleEl.show();
                    }
                }
            };
            AgendaView.prototype.computeScrollerHeight = function(totalHeight) {
                return totalHeight - util_1.subtractInnerElHeight(this.el, this.scroller.el);
            };
            AgendaView.prototype.computeInitialDateScroll = function() {
                var scrollTime = moment.duration(this.opt("scrollTime"));
                var top = this.timeGrid.computeTimeTop(scrollTime);
                top = Math.ceil(top);
                if (top) {
                    top++;
                }
                return {
                    top: top
                };
            };
            AgendaView.prototype.queryDateScroll = function() {
                return {
                    top: this.scroller.getScrollTop()
                };
            };
            AgendaView.prototype.applyDateScroll = function(scroll) {
                if (scroll.top !== undefined) {
                    this.scroller.setScrollTop(scroll.top);
                }
            };
            AgendaView.prototype.getHitFootprint = function(hit) {
                return hit.component.getHitFootprint(hit);
            };
            AgendaView.prototype.getHitEl = function(hit) {
                return hit.component.getHitEl(hit);
            };
            AgendaView.prototype.executeEventRender = function(eventsPayload) {
                var dayEventsPayload = {};
                var timedEventsPayload = {};
                var id;
                var eventInstanceGroup;
                for (id in eventsPayload) {
                    eventInstanceGroup = eventsPayload[id];
                    if (eventInstanceGroup.getEventDef().isAllDay()) {
                        dayEventsPayload[id] = eventInstanceGroup;
                    } else {
                        timedEventsPayload[id] = eventInstanceGroup;
                    }
                }
                this.timeGrid.executeEventRender(timedEventsPayload);
                if (this.dayGrid) {
                    this.dayGrid.executeEventRender(dayEventsPayload);
                }
            };
            AgendaView.prototype.renderDrag = function(eventFootprints, seg, isTouch) {
                var groups = groupEventFootprintsByAllDay(eventFootprints);
                var renderedHelper = false;
                renderedHelper = this.timeGrid.renderDrag(groups.timed, seg, isTouch);
                if (this.dayGrid) {
                    renderedHelper = this.dayGrid.renderDrag(groups.allDay, seg, isTouch) || renderedHelper;
                }
                return renderedHelper;
            };
            AgendaView.prototype.renderEventResize = function(eventFootprints, seg, isTouch) {
                var groups = groupEventFootprintsByAllDay(eventFootprints);
                this.timeGrid.renderEventResize(groups.timed, seg, isTouch);
                if (this.dayGrid) {
                    this.dayGrid.renderEventResize(groups.allDay, seg, isTouch);
                }
            };
            AgendaView.prototype.renderSelectionFootprint = function(componentFootprint) {
                if (!componentFootprint.isAllDay) {
                    this.timeGrid.renderSelectionFootprint(componentFootprint);
                } else if (this.dayGrid) {
                    this.dayGrid.renderSelectionFootprint(componentFootprint);
                }
            };
            return AgendaView;
        }(View_1.default);
        exports.default = AgendaView;
        AgendaView.prototype.timeGridClass = TimeGrid_1.default;
        AgendaView.prototype.dayGridClass = DayGrid_1.default;
        function makeTimeGridSubclass(SuperClass) {
            return function(_super) {
                tslib_1.__extends(SubClass, _super);
                function SubClass() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                SubClass.prototype.renderHeadIntroHtml = function() {
                    var view = this.view;
                    var calendar = view.calendar;
                    var weekStart = calendar.msToUtcMoment(this.dateProfile.renderUnzonedRange.startMs, true);
                    var weekText;
                    if (this.opt("weekNumbers")) {
                        weekText = weekStart.format(this.opt("smallWeekFormat"));
                        return "" + '<th class="fc-axis fc-week-number ' + calendar.theme.getClass("widgetHeader") + '" ' + view.axisStyleAttr() + ">" + view.buildGotoAnchorHtml({
                            date: weekStart,
                            type: "week",
                            forceOff: this.colCnt > 1
                        }, util_1.htmlEscape(weekText)) + "</th>";
                    } else {
                        return '<th class="fc-axis ' + calendar.theme.getClass("widgetHeader") + '" ' + view.axisStyleAttr() + "></th>";
                    }
                };
                SubClass.prototype.renderBgIntroHtml = function() {
                    var view = this.view;
                    return '<td class="fc-axis ' + view.calendar.theme.getClass("widgetContent") + '" ' + view.axisStyleAttr() + "></td>";
                };
                SubClass.prototype.renderIntroHtml = function() {
                    var view = this.view;
                    return '<td class="fc-axis" ' + view.axisStyleAttr() + "></td>";
                };
                return SubClass;
            }(SuperClass);
        }
        function makeDayGridSubclass(SuperClass) {
            return function(_super) {
                tslib_1.__extends(SubClass, _super);
                function SubClass() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                SubClass.prototype.renderBgIntroHtml = function() {
                    var view = this.view;
                    return "" + '<td class="fc-axis ' + view.calendar.theme.getClass("widgetContent") + '" ' + view.axisStyleAttr() + ">" + "<span>" + view.getAllDayHtml() + "</span>" + "</td>";
                };
                SubClass.prototype.renderIntroHtml = function() {
                    var view = this.view;
                    return '<td class="fc-axis" ' + view.axisStyleAttr() + "></td>";
                };
                return SubClass;
            }(SuperClass);
        }
        function groupEventFootprintsByAllDay(eventFootprints) {
            var allDay = [];
            var timed = [];
            var i;
            for (i = 0; i < eventFootprints.length; i++) {
                if (eventFootprints[i].componentFootprint.isAllDay) {
                    allDay.push(eventFootprints[i]);
                } else {
                    timed.push(eventFootprints[i]);
                }
            }
            return {
                allDay: allDay,
                timed: timed
            };
        }
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var tslib_1 = __webpack_require__(2);
        var $ = __webpack_require__(3);
        var moment = __webpack_require__(0);
        var util_1 = __webpack_require__(4);
        var InteractiveDateComponent_1 = __webpack_require__(40);
        var BusinessHourRenderer_1 = __webpack_require__(56);
        var StandardInteractionsMixin_1 = __webpack_require__(60);
        var DayTableMixin_1 = __webpack_require__(55);
        var CoordCache_1 = __webpack_require__(53);
        var UnzonedRange_1 = __webpack_require__(5);
        var ComponentFootprint_1 = __webpack_require__(12);
        var TimeGridEventRenderer_1 = __webpack_require__(242);
        var TimeGridHelperRenderer_1 = __webpack_require__(243);
        var TimeGridFillRenderer_1 = __webpack_require__(244);
        var AGENDA_STOCK_SUB_DURATIONS = [ {
            hours: 1
        }, {
            minutes: 30
        }, {
            minutes: 15
        }, {
            seconds: 30
        }, {
            seconds: 15
        } ];
        var TimeGrid = function(_super) {
            tslib_1.__extends(TimeGrid, _super);
            function TimeGrid(view) {
                var _this = _super.call(this, view) || this;
                _this.processOptions();
                return _this;
            }
            TimeGrid.prototype.componentFootprintToSegs = function(componentFootprint) {
                var segs = this.sliceRangeByTimes(componentFootprint.unzonedRange);
                var i;
                for (i = 0; i < segs.length; i++) {
                    if (this.isRTL) {
                        segs[i].col = this.daysPerRow - 1 - segs[i].dayIndex;
                    } else {
                        segs[i].col = segs[i].dayIndex;
                    }
                }
                return segs;
            };
            TimeGrid.prototype.sliceRangeByTimes = function(unzonedRange) {
                var segs = [];
                var segRange;
                var dayIndex;
                for (dayIndex = 0; dayIndex < this.daysPerRow; dayIndex++) {
                    segRange = unzonedRange.intersect(this.dayRanges[dayIndex]);
                    if (segRange) {
                        segs.push({
                            startMs: segRange.startMs,
                            endMs: segRange.endMs,
                            isStart: segRange.isStart,
                            isEnd: segRange.isEnd,
                            dayIndex: dayIndex
                        });
                    }
                }
                return segs;
            };
            TimeGrid.prototype.processOptions = function() {
                var slotDuration = this.opt("slotDuration");
                var snapDuration = this.opt("snapDuration");
                var input;
                slotDuration = moment.duration(slotDuration);
                snapDuration = snapDuration ? moment.duration(snapDuration) : slotDuration;
                this.slotDuration = slotDuration;
                this.snapDuration = snapDuration;
                this.snapsPerSlot = slotDuration / snapDuration;
                input = this.opt("slotLabelFormat");
                if ($.isArray(input)) {
                    input = input[input.length - 1];
                }
                this.labelFormat = input || this.opt("smallTimeFormat");
                input = this.opt("slotLabelInterval");
                this.labelInterval = input ? moment.duration(input) : this.computeLabelInterval(slotDuration);
            };
            TimeGrid.prototype.computeLabelInterval = function(slotDuration) {
                var i;
                var labelInterval;
                var slotsPerLabel;
                for (i = AGENDA_STOCK_SUB_DURATIONS.length - 1; i >= 0; i--) {
                    labelInterval = moment.duration(AGENDA_STOCK_SUB_DURATIONS[i]);
                    slotsPerLabel = util_1.divideDurationByDuration(labelInterval, slotDuration);
                    if (util_1.isInt(slotsPerLabel) && slotsPerLabel > 1) {
                        return labelInterval;
                    }
                }
                return moment.duration(slotDuration);
            };
            TimeGrid.prototype.renderDates = function(dateProfile) {
                this.dateProfile = dateProfile;
                this.updateDayTable();
                this.renderSlats();
                this.renderColumns();
            };
            TimeGrid.prototype.unrenderDates = function() {
                this.unrenderColumns();
            };
            TimeGrid.prototype.renderSkeleton = function() {
                var theme = this.view.calendar.theme;
                this.el.html('<div class="fc-bg"></div>' + '<div class="fc-slats"></div>' + '<hr class="fc-divider ' + theme.getClass("widgetHeader") + '" style="display:none" />');
                this.bottomRuleEl = this.el.find("hr");
            };
            TimeGrid.prototype.renderSlats = function() {
                var theme = this.view.calendar.theme;
                this.slatContainerEl = this.el.find("> .fc-slats").html('<table class="' + theme.getClass("tableGrid") + '">' + this.renderSlatRowHtml() + "</table>");
                this.slatEls = this.slatContainerEl.find("tr");
                this.slatCoordCache = new CoordCache_1.default({
                    els: this.slatEls,
                    isVertical: true
                });
            };
            TimeGrid.prototype.renderSlatRowHtml = function() {
                var view = this.view;
                var calendar = view.calendar;
                var theme = calendar.theme;
                var isRTL = this.isRTL;
                var dateProfile = this.dateProfile;
                var html = "";
                var slotTime = moment.duration(+dateProfile.minTime);
                var slotIterator = moment.duration(0);
                var slotDate;
                var isLabeled;
                var axisHtml;
                while (slotTime < dateProfile.maxTime) {
                    slotDate = calendar.msToUtcMoment(dateProfile.renderUnzonedRange.startMs).time(slotTime);
                    isLabeled = util_1.isInt(util_1.divideDurationByDuration(slotIterator, this.labelInterval));
                    axisHtml = '<td class="fc-axis fc-time ' + theme.getClass("widgetContent") + '" ' + view.axisStyleAttr() + ">" + (isLabeled ? "<span>" + util_1.htmlEscape(slotDate.format(this.labelFormat)) + "</span>" : "") + "</td>";
                    html += '<tr data-time="' + slotDate.format("HH:mm:ss") + '"' + (isLabeled ? "" : ' class="fc-minor"') + ">" + (!isRTL ? axisHtml : "") + '<td class="' + theme.getClass("widgetContent") + '"/>' + (isRTL ? axisHtml : "") + "</tr>";
                    slotTime.add(this.slotDuration);
                    slotIterator.add(this.slotDuration);
                }
                return html;
            };
            TimeGrid.prototype.renderColumns = function() {
                var dateProfile = this.dateProfile;
                var theme = this.view.calendar.theme;
                this.dayRanges = this.dayDates.map(function(dayDate) {
                    return new UnzonedRange_1.default(dayDate.clone().add(dateProfile.minTime), dayDate.clone().add(dateProfile.maxTime));
                });
                if (this.headContainerEl) {
                    this.headContainerEl.html(this.renderHeadHtml());
                }
                this.el.find("> .fc-bg").html('<table class="' + theme.getClass("tableGrid") + '">' + this.renderBgTrHtml(0) + "</table>");
                this.colEls = this.el.find(".fc-day, .fc-disabled-day");
                this.colCoordCache = new CoordCache_1.default({
                    els: this.colEls,
                    isHorizontal: true
                });
                this.renderContentSkeleton();
            };
            TimeGrid.prototype.unrenderColumns = function() {
                this.unrenderContentSkeleton();
            };
            TimeGrid.prototype.renderContentSkeleton = function() {
                var cellHtml = "";
                var i;
                var skeletonEl;
                for (i = 0; i < this.colCnt; i++) {
                    cellHtml += "<td>" + '<div class="fc-content-col">' + '<div class="fc-event-container fc-helper-container"></div>' + '<div class="fc-event-container"></div>' + '<div class="fc-highlight-container"></div>' + '<div class="fc-bgevent-container"></div>' + '<div class="fc-business-container"></div>' + "</div>" + "</td>";
                }
                skeletonEl = this.contentSkeletonEl = $('<div class="fc-content-skeleton">' + "<table>" + "<tr>" + cellHtml + "</tr>" + "</table>" + "</div>");
                this.colContainerEls = skeletonEl.find(".fc-content-col");
                this.helperContainerEls = skeletonEl.find(".fc-helper-container");
                this.fgContainerEls = skeletonEl.find(".fc-event-container:not(.fc-helper-container)");
                this.bgContainerEls = skeletonEl.find(".fc-bgevent-container");
                this.highlightContainerEls = skeletonEl.find(".fc-highlight-container");
                this.businessContainerEls = skeletonEl.find(".fc-business-container");
                this.bookendCells(skeletonEl.find("tr"));
                this.el.append(skeletonEl);
            };
            TimeGrid.prototype.unrenderContentSkeleton = function() {
                this.contentSkeletonEl.remove();
                this.contentSkeletonEl = null;
                this.colContainerEls = null;
                this.helperContainerEls = null;
                this.fgContainerEls = null;
                this.bgContainerEls = null;
                this.highlightContainerEls = null;
                this.businessContainerEls = null;
            };
            TimeGrid.prototype.groupSegsByCol = function(segs) {
                var segsByCol = [];
                var i;
                for (i = 0; i < this.colCnt; i++) {
                    segsByCol.push([]);
                }
                for (i = 0; i < segs.length; i++) {
                    segsByCol[segs[i].col].push(segs[i]);
                }
                return segsByCol;
            };
            TimeGrid.prototype.attachSegsByCol = function(segsByCol, containerEls) {
                var col;
                var segs;
                var i;
                for (col = 0; col < this.colCnt; col++) {
                    segs = segsByCol[col];
                    for (i = 0; i < segs.length; i++) {
                        containerEls.eq(col).append(segs[i].el);
                    }
                }
            };
            TimeGrid.prototype.getNowIndicatorUnit = function() {
                return "minute";
            };
            TimeGrid.prototype.renderNowIndicator = function(date) {
                if (!this.colContainerEls) {
                    return;
                }
                var segs = this.componentFootprintToSegs(new ComponentFootprint_1.default(new UnzonedRange_1.default(date, date.valueOf() + 1), false));
                var top = this.computeDateTop(date, date);
                var nodes = [];
                var i;
                for (i = 0; i < segs.length; i++) {
                    nodes.push($('<div class="fc-now-indicator fc-now-indicator-line"></div>').css("top", top).appendTo(this.colContainerEls.eq(segs[i].col))[0]);
                }
                if (segs.length > 0) {
                    nodes.push($('<div class="fc-now-indicator fc-now-indicator-arrow"></div>').css("top", top).appendTo(this.el.find(".fc-content-skeleton"))[0]);
                }
                this.nowIndicatorEls = $(nodes);
            };
            TimeGrid.prototype.unrenderNowIndicator = function() {
                if (this.nowIndicatorEls) {
                    this.nowIndicatorEls.remove();
                    this.nowIndicatorEls = null;
                }
            };
            TimeGrid.prototype.updateSize = function(totalHeight, isAuto, isResize) {
                _super.prototype.updateSize.call(this, totalHeight, isAuto, isResize);
                this.slatCoordCache.build();
                if (isResize) {
                    this.updateSegVerticals([].concat(this.eventRenderer.getSegs(), this.businessSegs || []));
                }
            };
            TimeGrid.prototype.getTotalSlatHeight = function() {
                return this.slatContainerEl.outerHeight();
            };
            TimeGrid.prototype.computeDateTop = function(ms, startOfDayDate) {
                return this.computeTimeTop(moment.duration(ms - startOfDayDate.clone().stripTime()));
            };
            TimeGrid.prototype.computeTimeTop = function(time) {
                var len = this.slatEls.length;
                var dateProfile = this.dateProfile;
                var slatCoverage = (time - dateProfile.minTime) / this.slotDuration;
                var slatIndex;
                var slatRemainder;
                slatCoverage = Math.max(0, slatCoverage);
                slatCoverage = Math.min(len, slatCoverage);
                slatIndex = Math.floor(slatCoverage);
                slatIndex = Math.min(slatIndex, len - 1);
                slatRemainder = slatCoverage - slatIndex;
                return this.slatCoordCache.getTopPosition(slatIndex) + this.slatCoordCache.getHeight(slatIndex) * slatRemainder;
            };
            TimeGrid.prototype.updateSegVerticals = function(segs) {
                this.computeSegVerticals(segs);
                this.assignSegVerticals(segs);
            };
            TimeGrid.prototype.computeSegVerticals = function(segs) {
                var eventMinHeight = this.opt("agendaEventMinHeight");
                var i;
                var seg;
                var dayDate;
                for (i = 0; i < segs.length; i++) {
                    seg = segs[i];
                    dayDate = this.dayDates[seg.dayIndex];
                    seg.top = this.computeDateTop(seg.startMs, dayDate);
                    seg.bottom = Math.max(seg.top + eventMinHeight, this.computeDateTop(seg.endMs, dayDate));
                }
            };
            TimeGrid.prototype.assignSegVerticals = function(segs) {
                var i;
                var seg;
                for (i = 0; i < segs.length; i++) {
                    seg = segs[i];
                    seg.el.css(this.generateSegVerticalCss(seg));
                }
            };
            TimeGrid.prototype.generateSegVerticalCss = function(seg) {
                return {
                    top: seg.top,
                    bottom: -seg.bottom
                };
            };
            TimeGrid.prototype.prepareHits = function() {
                this.colCoordCache.build();
                this.slatCoordCache.build();
            };
            TimeGrid.prototype.releaseHits = function() {
                this.colCoordCache.clear();
            };
            TimeGrid.prototype.queryHit = function(leftOffset, topOffset) {
                var snapsPerSlot = this.snapsPerSlot;
                var colCoordCache = this.colCoordCache;
                var slatCoordCache = this.slatCoordCache;
                if (colCoordCache.isLeftInBounds(leftOffset) && slatCoordCache.isTopInBounds(topOffset)) {
                    var colIndex = colCoordCache.getHorizontalIndex(leftOffset);
                    var slatIndex = slatCoordCache.getVerticalIndex(topOffset);
                    if (colIndex != null && slatIndex != null) {
                        var slatTop = slatCoordCache.getTopOffset(slatIndex);
                        var slatHeight = slatCoordCache.getHeight(slatIndex);
                        var partial = (topOffset - slatTop) / slatHeight;
                        var localSnapIndex = Math.floor(partial * snapsPerSlot);
                        var snapIndex = slatIndex * snapsPerSlot + localSnapIndex;
                        var snapTop = slatTop + localSnapIndex / snapsPerSlot * slatHeight;
                        var snapBottom = slatTop + (localSnapIndex + 1) / snapsPerSlot * slatHeight;
                        return {
                            col: colIndex,
                            snap: snapIndex,
                            component: this,
                            left: colCoordCache.getLeftOffset(colIndex),
                            right: colCoordCache.getRightOffset(colIndex),
                            top: snapTop,
                            bottom: snapBottom
                        };
                    }
                }
            };
            TimeGrid.prototype.getHitFootprint = function(hit) {
                var start = this.getCellDate(0, hit.col);
                var time = this.computeSnapTime(hit.snap);
                var end;
                start.time(time);
                end = start.clone().add(this.snapDuration);
                return new ComponentFootprint_1.default(new UnzonedRange_1.default(start, end), false);
            };
            TimeGrid.prototype.computeSnapTime = function(snapIndex) {
                return moment.duration(this.dateProfile.minTime + this.snapDuration * snapIndex);
            };
            TimeGrid.prototype.getHitEl = function(hit) {
                return this.colEls.eq(hit.col);
            };
            TimeGrid.prototype.renderDrag = function(eventFootprints, seg, isTouch) {
                var i;
                if (seg) {
                    if (eventFootprints.length) {
                        this.helperRenderer.renderEventDraggingFootprints(eventFootprints, seg, isTouch);
                        return true;
                    }
                } else {
                    for (i = 0; i < eventFootprints.length; i++) {
                        this.renderHighlight(eventFootprints[i].componentFootprint);
                    }
                }
            };
            TimeGrid.prototype.unrenderDrag = function() {
                this.unrenderHighlight();
                this.helperRenderer.unrender();
            };
            TimeGrid.prototype.renderEventResize = function(eventFootprints, seg, isTouch) {
                this.helperRenderer.renderEventResizingFootprints(eventFootprints, seg, isTouch);
            };
            TimeGrid.prototype.unrenderEventResize = function() {
                this.helperRenderer.unrender();
            };
            TimeGrid.prototype.renderSelectionFootprint = function(componentFootprint) {
                if (this.opt("selectHelper")) {
                    this.helperRenderer.renderComponentFootprint(componentFootprint);
                } else {
                    this.renderHighlight(componentFootprint);
                }
            };
            TimeGrid.prototype.unrenderSelection = function() {
                this.helperRenderer.unrender();
                this.unrenderHighlight();
            };
            return TimeGrid;
        }(InteractiveDateComponent_1.default);
        exports.default = TimeGrid;
        TimeGrid.prototype.eventRendererClass = TimeGridEventRenderer_1.default;
        TimeGrid.prototype.businessHourRendererClass = BusinessHourRenderer_1.default;
        TimeGrid.prototype.helperRendererClass = TimeGridHelperRenderer_1.default;
        TimeGrid.prototype.fillRendererClass = TimeGridFillRenderer_1.default;
        StandardInteractionsMixin_1.default.mixInto(TimeGrid);
        DayTableMixin_1.default.mixInto(TimeGrid);
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var tslib_1 = __webpack_require__(2);
        var UnzonedRange_1 = __webpack_require__(5);
        var DateProfileGenerator_1 = __webpack_require__(217);
        var BasicViewDateProfileGenerator = function(_super) {
            tslib_1.__extends(BasicViewDateProfileGenerator, _super);
            function BasicViewDateProfileGenerator() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            BasicViewDateProfileGenerator.prototype.buildRenderRange = function(currentUnzonedRange, currentRangeUnit, isRangeAllDay) {
                var renderUnzonedRange = _super.prototype.buildRenderRange.call(this, currentUnzonedRange, currentRangeUnit, isRangeAllDay);
                var start = this.msToUtcMoment(renderUnzonedRange.startMs, isRangeAllDay);
                var end = this.msToUtcMoment(renderUnzonedRange.endMs, isRangeAllDay);
                if (/^(year|month)$/.test(currentRangeUnit)) {
                    start.startOf("week");
                    if (end.weekday()) {
                        end.add(1, "week").startOf("week");
                    }
                }
                return new UnzonedRange_1.default(start, end);
            };
            return BasicViewDateProfileGenerator;
        }(DateProfileGenerator_1.default);
        exports.default = BasicViewDateProfileGenerator;
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var tslib_1 = __webpack_require__(2);
        var moment = __webpack_require__(0);
        var util_1 = __webpack_require__(4);
        var BasicView_1 = __webpack_require__(62);
        var MonthViewDateProfileGenerator_1 = __webpack_require__(249);
        var MonthView = function(_super) {
            tslib_1.__extends(MonthView, _super);
            function MonthView() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            MonthView.prototype.setGridHeight = function(height, isAuto) {
                if (isAuto) {
                    height *= this.dayGrid.rowCnt / 6;
                }
                util_1.distributeHeight(this.dayGrid.rowEls, height, !isAuto);
            };
            MonthView.prototype.isDateInOtherMonth = function(date, dateProfile) {
                return date.month() !== moment.utc(dateProfile.currentUnzonedRange.startMs).month();
            };
            return MonthView;
        }(BasicView_1.default);
        exports.default = MonthView;
        MonthView.prototype.dateProfileGeneratorClass = MonthViewDateProfileGenerator_1.default;
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var tslib_1 = __webpack_require__(2);
        var $ = __webpack_require__(3);
        var util_1 = __webpack_require__(4);
        var UnzonedRange_1 = __webpack_require__(5);
        var View_1 = __webpack_require__(41);
        var Scroller_1 = __webpack_require__(39);
        var ListEventRenderer_1 = __webpack_require__(250);
        var ListEventPointing_1 = __webpack_require__(251);
        var ListView = function(_super) {
            tslib_1.__extends(ListView, _super);
            function ListView(calendar, viewSpec) {
                var _this = _super.call(this, calendar, viewSpec) || this;
                _this.segSelector = ".fc-list-item";
                _this.scroller = new Scroller_1.default({
                    overflowX: "hidden",
                    overflowY: "auto"
                });
                return _this;
            }
            ListView.prototype.renderSkeleton = function() {
                this.el.addClass("fc-list-view " + this.calendar.theme.getClass("listView"));
                this.scroller.render();
                this.scroller.el.appendTo(this.el);
                this.contentEl = this.scroller.scrollEl;
            };
            ListView.prototype.unrenderSkeleton = function() {
                this.scroller.destroy();
            };
            ListView.prototype.updateSize = function(totalHeight, isAuto, isResize) {
                this.scroller.setHeight(this.computeScrollerHeight(totalHeight));
            };
            ListView.prototype.computeScrollerHeight = function(totalHeight) {
                return totalHeight - util_1.subtractInnerElHeight(this.el, this.scroller.el);
            };
            ListView.prototype.renderDates = function(dateProfile) {
                var calendar = this.calendar;
                var dayStart = calendar.msToUtcMoment(dateProfile.renderUnzonedRange.startMs, true);
                var viewEnd = calendar.msToUtcMoment(dateProfile.renderUnzonedRange.endMs, true);
                var dayDates = [];
                var dayRanges = [];
                while (dayStart < viewEnd) {
                    dayDates.push(dayStart.clone());
                    dayRanges.push(new UnzonedRange_1.default(dayStart, dayStart.clone().add(1, "day")));
                    dayStart.add(1, "day");
                }
                this.dayDates = dayDates;
                this.dayRanges = dayRanges;
            };
            ListView.prototype.componentFootprintToSegs = function(footprint) {
                var dayRanges = this.dayRanges;
                var dayIndex;
                var segRange;
                var seg;
                var segs = [];
                for (dayIndex = 0; dayIndex < dayRanges.length; dayIndex++) {
                    segRange = footprint.unzonedRange.intersect(dayRanges[dayIndex]);
                    if (segRange) {
                        seg = {
                            startMs: segRange.startMs,
                            endMs: segRange.endMs,
                            isStart: segRange.isStart,
                            isEnd: segRange.isEnd,
                            dayIndex: dayIndex
                        };
                        segs.push(seg);
                        if (!seg.isEnd && !footprint.isAllDay && dayIndex + 1 < dayRanges.length && footprint.unzonedRange.endMs < dayRanges[dayIndex + 1].startMs + this.nextDayThreshold) {
                            seg.endMs = footprint.unzonedRange.endMs;
                            seg.isEnd = true;
                            break;
                        }
                    }
                }
                return segs;
            };
            ListView.prototype.renderEmptyMessage = function() {
                this.contentEl.html('<div class="fc-list-empty-wrap2">' + '<div class="fc-list-empty-wrap1">' + '<div class="fc-list-empty">' + util_1.htmlEscape(this.opt("noEventsMessage")) + "</div>" + "</div>" + "</div>");
            };
            ListView.prototype.renderSegList = function(allSegs) {
                var segsByDay = this.groupSegsByDay(allSegs);
                var dayIndex;
                var daySegs;
                var i;
                var tableEl = $('<table class="fc-list-table ' + this.calendar.theme.getClass("tableList") + '"><tbody/></table>');
                var tbodyEl = tableEl.find("tbody");
                for (dayIndex = 0; dayIndex < segsByDay.length; dayIndex++) {
                    daySegs = segsByDay[dayIndex];
                    if (daySegs) {
                        tbodyEl.append(this.dayHeaderHtml(this.dayDates[dayIndex]));
                        this.eventRenderer.sortEventSegs(daySegs);
                        for (i = 0; i < daySegs.length; i++) {
                            tbodyEl.append(daySegs[i].el);
                        }
                    }
                }
                this.contentEl.empty().append(tableEl);
            };
            ListView.prototype.groupSegsByDay = function(segs) {
                var segsByDay = [];
                var i;
                var seg;
                for (i = 0; i < segs.length; i++) {
                    seg = segs[i];
                    (segsByDay[seg.dayIndex] || (segsByDay[seg.dayIndex] = [])).push(seg);
                }
                return segsByDay;
            };
            ListView.prototype.dayHeaderHtml = function(dayDate) {
                var mainFormat = this.opt("listDayFormat");
                var altFormat = this.opt("listDayAltFormat");
                return '<tr class="fc-list-heading" data-date="' + dayDate.format("YYYY-MM-DD") + '">' + '<td class="' + this.calendar.theme.getClass("widgetHeader") + '" colspan="3">' + (mainFormat ? this.buildGotoAnchorHtml(dayDate, {
                    class: "fc-list-heading-main"
                }, util_1.htmlEscape(dayDate.format(mainFormat))) : "") + (altFormat ? this.buildGotoAnchorHtml(dayDate, {
                    class: "fc-list-heading-alt"
                }, util_1.htmlEscape(dayDate.format(altFormat))) : "") + "</td>" + "</tr>";
            };
            return ListView;
        }(View_1.default);
        exports.default = ListView;
        ListView.prototype.eventRendererClass = ListEventRenderer_1.default;
        ListView.prototype.eventPointingClass = ListEventPointing_1.default;
    }, , , , , , function(module, exports, __webpack_require__) {
        var $ = __webpack_require__(3);
        var exportHooks = __webpack_require__(16);
        var util_1 = __webpack_require__(4);
        var Calendar_1 = __webpack_require__(216);
        __webpack_require__(10);
        __webpack_require__(47);
        __webpack_require__(252);
        __webpack_require__(253);
        __webpack_require__(255);
        __webpack_require__(256);
        __webpack_require__(257);
        __webpack_require__(258);
        $.fullCalendar = exportHooks;
        $.fn.fullCalendar = function(options) {
            var args = Array.prototype.slice.call(arguments, 1);
            var res = this;
            this.each(function(i, _element) {
                var element = $(_element);
                var calendar = element.data("fullCalendar");
                var singleRes;
                if (typeof options === "string") {
                    if (options === "getCalendar") {
                        if (!i) {
                            res = calendar;
                        }
                    } else if (options === "destroy") {
                        if (calendar) {
                            calendar.destroy();
                            element.removeData("fullCalendar");
                        }
                    } else if (!calendar) {
                        util_1.warn("Attempting to call a FullCalendar method on an element with no calendar.");
                    } else if ($.isFunction(calendar[options])) {
                        singleRes = calendar[options].apply(calendar, args);
                        if (!i) {
                            res = singleRes;
                        }
                        if (options === "destroy") {
                            element.removeData("fullCalendar");
                        }
                    } else {
                        util_1.warn("'" + options + "' is an unknown FullCalendar method.");
                    }
                } else if (!calendar) {
                    calendar = new Calendar_1.default(element, options);
                    element.data("fullCalendar", calendar);
                    calendar.render();
                }
            });
            return res;
        };
        module.exports = exportHooks;
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var tslib_1 = __webpack_require__(2);
        var Model_1 = __webpack_require__(48);
        var Component = function(_super) {
            tslib_1.__extends(Component, _super);
            function Component() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            Component.prototype.setElement = function(el) {
                this.el = el;
                this.bindGlobalHandlers();
                this.renderSkeleton();
                this.set("isInDom", true);
            };
            Component.prototype.removeElement = function() {
                this.unset("isInDom");
                this.unrenderSkeleton();
                this.unbindGlobalHandlers();
                this.el.remove();
            };
            Component.prototype.bindGlobalHandlers = function() {};
            Component.prototype.unbindGlobalHandlers = function() {};
            Component.prototype.renderSkeleton = function() {};
            Component.prototype.unrenderSkeleton = function() {};
            return Component;
        }(Model_1.default);
        exports.default = Component;
    }, function(module, exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var Iterator = function() {
            function Iterator(items) {
                this.items = items || [];
            }
            Iterator.prototype.proxyCall = function(methodName) {
                var args = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    args[_i - 1] = arguments[_i];
                }
                var results = [];
                this.items.forEach(function(item) {
                    results.push(item[methodName].apply(item, args));
                });
                return results;
            };
            return Iterator;
        }();
        exports.default = Iterator;
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var $ = __webpack_require__(3);
        var util_1 = __webpack_require__(4);
        var Toolbar = function() {
            function Toolbar(calendar, toolbarOptions) {
                this.el = null;
                this.viewsWithButtons = [];
                this.calendar = calendar;
                this.toolbarOptions = toolbarOptions;
            }
            Toolbar.prototype.setToolbarOptions = function(newToolbarOptions) {
                this.toolbarOptions = newToolbarOptions;
            };
            Toolbar.prototype.render = function() {
                var sections = this.toolbarOptions.layout;
                var el = this.el;
                if (sections) {
                    if (!el) {
                        el = this.el = $("<div class='fc-toolbar " + this.toolbarOptions.extraClasses + "'/>");
                    } else {
                        el.empty();
                    }
                    el.append(this.renderSection("left")).append(this.renderSection("right")).append(this.renderSection("center")).append('<div class="fc-clear"/>');
                } else {
                    this.removeElement();
                }
            };
            Toolbar.prototype.removeElement = function() {
                if (this.el) {
                    this.el.remove();
                    this.el = null;
                }
            };
            Toolbar.prototype.renderSection = function(position) {
                var _this = this;
                var calendar = this.calendar;
                var theme = calendar.theme;
                var optionsManager = calendar.optionsManager;
                var viewSpecManager = calendar.viewSpecManager;
                var sectionEl = $('<div class="fc-' + position + '"/>');
                var buttonStr = this.toolbarOptions.layout[position];
                var calendarCustomButtons = optionsManager.get("customButtons") || {};
                var calendarButtonTextOverrides = optionsManager.overrides.buttonText || {};
                var calendarButtonText = optionsManager.get("buttonText") || {};
                if (buttonStr) {
                    $.each(buttonStr.split(" "), function(i, buttonGroupStr) {
                        var groupChildren = $();
                        var isOnlyButtons = true;
                        var groupEl;
                        $.each(buttonGroupStr.split(","), function(j, buttonName) {
                            var customButtonProps;
                            var viewSpec;
                            var buttonClick;
                            var buttonIcon;
                            var buttonText;
                            var buttonInnerHtml;
                            var buttonClasses;
                            var buttonEl;
                            if (buttonName === "title") {
                                groupChildren = groupChildren.add($("<h2>&nbsp;</h2>"));
                                isOnlyButtons = false;
                            } else {
                                if (customButtonProps = calendarCustomButtons[buttonName]) {
                                    buttonClick = function(ev) {
                                        if (customButtonProps.click) {
                                            customButtonProps.click.call(buttonEl[0], ev);
                                        }
                                    };
                                    (buttonIcon = theme.getCustomButtonIconClass(customButtonProps)) || (buttonIcon = theme.getIconClass(buttonName)) || (buttonText = customButtonProps.text);
                                } else if (viewSpec = viewSpecManager.getViewSpec(buttonName)) {
                                    _this.viewsWithButtons.push(buttonName);
                                    buttonClick = function() {
                                        calendar.changeView(buttonName);
                                    };
                                    (buttonText = viewSpec.buttonTextOverride) || (buttonIcon = theme.getIconClass(buttonName)) || (buttonText = viewSpec.buttonTextDefault);
                                } else if (calendar[buttonName]) {
                                    buttonClick = function() {
                                        calendar[buttonName]();
                                    };
                                    (buttonText = calendarButtonTextOverrides[buttonName]) || (buttonIcon = theme.getIconClass(buttonName)) || (buttonText = calendarButtonText[buttonName]);
                                }
                                if (buttonClick) {
                                    buttonClasses = [ "fc-" + buttonName + "-button", theme.getClass("button"), theme.getClass("stateDefault") ];
                                    if (buttonText) {
                                        buttonInnerHtml = util_1.htmlEscape(buttonText);
                                    } else if (buttonIcon) {
                                        buttonInnerHtml = "<span class='" + buttonIcon + "'></span>";
                                    }
                                    buttonEl = $('<button type="button" class="' + buttonClasses.join(" ") + '">' + buttonInnerHtml + "</button>").click(function(ev) {
                                        if (!buttonEl.hasClass(theme.getClass("stateDisabled"))) {
                                            buttonClick(ev);
                                            if (buttonEl.hasClass(theme.getClass("stateActive")) || buttonEl.hasClass(theme.getClass("stateDisabled"))) {
                                                buttonEl.removeClass(theme.getClass("stateHover"));
                                            }
                                        }
                                    }).mousedown(function() {
                                        buttonEl.not("." + theme.getClass("stateActive")).not("." + theme.getClass("stateDisabled")).addClass(theme.getClass("stateDown"));
                                    }).mouseup(function() {
                                        buttonEl.removeClass(theme.getClass("stateDown"));
                                    }).hover(function() {
                                        buttonEl.not("." + theme.getClass("stateActive")).not("." + theme.getClass("stateDisabled")).addClass(theme.getClass("stateHover"));
                                    }, function() {
                                        buttonEl.removeClass(theme.getClass("stateHover")).removeClass(theme.getClass("stateDown"));
                                    });
                                    groupChildren = groupChildren.add(buttonEl);
                                }
                            }
                        });
                        if (isOnlyButtons) {
                            groupChildren.first().addClass(theme.getClass("cornerLeft")).end().last().addClass(theme.getClass("cornerRight")).end();
                        }
                        if (groupChildren.length > 1) {
                            groupEl = $("<div/>");
                            if (isOnlyButtons) {
                                groupEl.addClass(theme.getClass("buttonGroup"));
                            }
                            groupEl.append(groupChildren);
                            sectionEl.append(groupEl);
                        } else {
                            sectionEl.append(groupChildren);
                        }
                    });
                }
                return sectionEl;
            };
            Toolbar.prototype.updateTitle = function(text) {
                if (this.el) {
                    this.el.find("h2").text(text);
                }
            };
            Toolbar.prototype.activateButton = function(buttonName) {
                if (this.el) {
                    this.el.find(".fc-" + buttonName + "-button").addClass(this.calendar.theme.getClass("stateActive"));
                }
            };
            Toolbar.prototype.deactivateButton = function(buttonName) {
                if (this.el) {
                    this.el.find(".fc-" + buttonName + "-button").removeClass(this.calendar.theme.getClass("stateActive"));
                }
            };
            Toolbar.prototype.disableButton = function(buttonName) {
                if (this.el) {
                    this.el.find(".fc-" + buttonName + "-button").prop("disabled", true).addClass(this.calendar.theme.getClass("stateDisabled"));
                }
            };
            Toolbar.prototype.enableButton = function(buttonName) {
                if (this.el) {
                    this.el.find(".fc-" + buttonName + "-button").prop("disabled", false).removeClass(this.calendar.theme.getClass("stateDisabled"));
                }
            };
            Toolbar.prototype.getViewsWithButtons = function() {
                return this.viewsWithButtons;
            };
            return Toolbar;
        }();
        exports.default = Toolbar;
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var tslib_1 = __webpack_require__(2);
        var $ = __webpack_require__(3);
        var util_1 = __webpack_require__(4);
        var options_1 = __webpack_require__(31);
        var locale_1 = __webpack_require__(30);
        var Model_1 = __webpack_require__(48);
        var OptionsManager = function(_super) {
            tslib_1.__extends(OptionsManager, _super);
            function OptionsManager(_calendar, overrides) {
                var _this = _super.call(this) || this;
                _this._calendar = _calendar;
                _this.overrides = $.extend({}, overrides);
                _this.dynamicOverrides = {};
                _this.compute();
                return _this;
            }
            OptionsManager.prototype.add = function(newOptionHash) {
                var optionCnt = 0;
                var optionName;
                this.recordOverrides(newOptionHash);
                for (optionName in newOptionHash) {
                    optionCnt++;
                }
                if (optionCnt === 1) {
                    if (optionName === "height" || optionName === "contentHeight" || optionName === "aspectRatio") {
                        this._calendar.updateViewSize(true);
                        return;
                    } else if (optionName === "defaultDate") {
                        return;
                    } else if (optionName === "businessHours") {
                        return;
                    } else if (optionName === "timezone") {
                        this._calendar.view.flash("initialEvents");
                        return;
                    }
                }
                this._calendar.renderHeader();
                this._calendar.renderFooter();
                this._calendar.viewsByType = {};
                this._calendar.reinitView();
            };
            OptionsManager.prototype.compute = function() {
                var locale;
                var localeDefaults;
                var isRTL;
                var dirDefaults;
                var rawOptions;
                locale = util_1.firstDefined(this.dynamicOverrides.locale, this.overrides.locale);
                localeDefaults = locale_1.localeOptionHash[locale];
                if (!localeDefaults) {
                    locale = options_1.globalDefaults.locale;
                    localeDefaults = locale_1.localeOptionHash[locale] || {};
                }
                isRTL = util_1.firstDefined(this.dynamicOverrides.isRTL, this.overrides.isRTL, localeDefaults.isRTL, options_1.globalDefaults.isRTL);
                dirDefaults = isRTL ? options_1.rtlDefaults : {};
                this.dirDefaults = dirDefaults;
                this.localeDefaults = localeDefaults;
                rawOptions = options_1.mergeOptions([ options_1.globalDefaults, dirDefaults, localeDefaults, this.overrides, this.dynamicOverrides ]);
                locale_1.populateInstanceComputableOptions(rawOptions);
                this.reset(rawOptions);
            };
            OptionsManager.prototype.recordOverrides = function(newOptionHash) {
                var optionName;
                for (optionName in newOptionHash) {
                    this.dynamicOverrides[optionName] = newOptionHash[optionName];
                }
                this._calendar.viewSpecManager.clearCache();
                this.compute();
            };
            return OptionsManager;
        }(Model_1.default);
        exports.default = OptionsManager;
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var moment = __webpack_require__(0);
        var $ = __webpack_require__(3);
        var ViewRegistry_1 = __webpack_require__(21);
        var util_1 = __webpack_require__(4);
        var options_1 = __webpack_require__(31);
        var locale_1 = __webpack_require__(30);
        var ViewSpecManager = function() {
            function ViewSpecManager(optionsManager, _calendar) {
                this.optionsManager = optionsManager;
                this._calendar = _calendar;
                this.clearCache();
            }
            ViewSpecManager.prototype.clearCache = function() {
                this.viewSpecCache = {};
            };
            ViewSpecManager.prototype.getViewSpec = function(viewType) {
                var cache = this.viewSpecCache;
                return cache[viewType] || (cache[viewType] = this.buildViewSpec(viewType));
            };
            ViewSpecManager.prototype.getUnitViewSpec = function(unit) {
                var viewTypes;
                var i;
                var spec;
                if ($.inArray(unit, util_1.unitsDesc) !== -1) {
                    viewTypes = this._calendar.header.getViewsWithButtons();
                    $.each(ViewRegistry_1.viewHash, function(viewType) {
                        viewTypes.push(viewType);
                    });
                    for (i = 0; i < viewTypes.length; i++) {
                        spec = this.getViewSpec(viewTypes[i]);
                        if (spec) {
                            if (spec.singleUnit === unit) {
                                return spec;
                            }
                        }
                    }
                }
            };
            ViewSpecManager.prototype.buildViewSpec = function(requestedViewType) {
                var viewOverrides = this.optionsManager.overrides.views || {};
                var specChain = [];
                var defaultsChain = [];
                var overridesChain = [];
                var viewType = requestedViewType;
                var spec;
                var overrides;
                var durationInput;
                var duration;
                var unit;
                while (viewType) {
                    spec = ViewRegistry_1.viewHash[viewType];
                    overrides = viewOverrides[viewType];
                    viewType = null;
                    if (typeof spec === "function") {
                        spec = {
                            class: spec
                        };
                    }
                    if (spec) {
                        specChain.unshift(spec);
                        defaultsChain.unshift(spec.defaults || {});
                        durationInput = durationInput || spec.duration;
                        viewType = viewType || spec.type;
                    }
                    if (overrides) {
                        overridesChain.unshift(overrides);
                        durationInput = durationInput || overrides.duration;
                        viewType = viewType || overrides.type;
                    }
                }
                spec = util_1.mergeProps(specChain);
                spec.type = requestedViewType;
                if (!spec["class"]) {
                    return false;
                }
                durationInput = durationInput || this.optionsManager.dynamicOverrides.duration || this.optionsManager.overrides.duration;
                if (durationInput) {
                    duration = moment.duration(durationInput);
                    if (duration.valueOf()) {
                        unit = util_1.computeDurationGreatestUnit(duration, durationInput);
                        spec.duration = duration;
                        spec.durationUnit = unit;
                        if (duration.as(unit) === 1) {
                            spec.singleUnit = unit;
                            overridesChain.unshift(viewOverrides[unit] || {});
                        }
                    }
                }
                spec.defaults = options_1.mergeOptions(defaultsChain);
                spec.overrides = options_1.mergeOptions(overridesChain);
                this.buildViewSpecOptions(spec);
                this.buildViewSpecButtonText(spec, requestedViewType);
                return spec;
            };
            ViewSpecManager.prototype.buildViewSpecOptions = function(spec) {
                var optionsManager = this.optionsManager;
                spec.options = options_1.mergeOptions([ options_1.globalDefaults, spec.defaults, optionsManager.dirDefaults, optionsManager.localeDefaults, optionsManager.overrides, spec.overrides, optionsManager.dynamicOverrides ]);
                locale_1.populateInstanceComputableOptions(spec.options);
            };
            ViewSpecManager.prototype.buildViewSpecButtonText = function(spec, requestedViewType) {
                var optionsManager = this.optionsManager;
                function queryButtonText(options) {
                    var buttonText = options.buttonText || {};
                    return buttonText[requestedViewType] || (spec.buttonTextKey ? buttonText[spec.buttonTextKey] : null) || (spec.singleUnit ? buttonText[spec.singleUnit] : null);
                }
                spec.buttonTextOverride = queryButtonText(optionsManager.dynamicOverrides) || queryButtonText(optionsManager.overrides) || spec.overrides.buttonText;
                spec.buttonTextDefault = queryButtonText(optionsManager.localeDefaults) || queryButtonText(optionsManager.dirDefaults) || spec.defaults.buttonText || queryButtonText(options_1.globalDefaults) || (spec.duration ? this._calendar.humanizeDuration(spec.duration) : null) || requestedViewType;
            };
            return ViewSpecManager;
        }();
        exports.default = ViewSpecManager;
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var $ = __webpack_require__(3);
        var util_1 = __webpack_require__(4);
        var EventPeriod_1 = __webpack_require__(239);
        var ArrayEventSource_1 = __webpack_require__(52);
        var EventSource_1 = __webpack_require__(6);
        var EventSourceParser_1 = __webpack_require__(37);
        var SingleEventDef_1 = __webpack_require__(13);
        var EventInstanceGroup_1 = __webpack_require__(18);
        var EmitterMixin_1 = __webpack_require__(11);
        var ListenerMixin_1 = __webpack_require__(7);
        var EventManager = function() {
            function EventManager(calendar) {
                this.calendar = calendar;
                this.stickySource = new ArrayEventSource_1.default(calendar);
                this.otherSources = [];
            }
            EventManager.prototype.requestEvents = function(start, end, timezone, force) {
                if (force || !this.currentPeriod || !this.currentPeriod.isWithinRange(start, end) || timezone !== this.currentPeriod.timezone) {
                    this.setPeriod(new EventPeriod_1.default(start, end, timezone));
                }
                return this.currentPeriod.whenReleased();
            };
            EventManager.prototype.addSource = function(eventSource) {
                this.otherSources.push(eventSource);
                if (this.currentPeriod) {
                    this.currentPeriod.requestSource(eventSource);
                }
            };
            EventManager.prototype.removeSource = function(doomedSource) {
                util_1.removeExact(this.otherSources, doomedSource);
                if (this.currentPeriod) {
                    this.currentPeriod.purgeSource(doomedSource);
                }
            };
            EventManager.prototype.removeAllSources = function() {
                this.otherSources = [];
                if (this.currentPeriod) {
                    this.currentPeriod.purgeAllSources();
                }
            };
            EventManager.prototype.refetchSource = function(eventSource) {
                var currentPeriod = this.currentPeriod;
                if (currentPeriod) {
                    currentPeriod.freeze();
                    currentPeriod.purgeSource(eventSource);
                    currentPeriod.requestSource(eventSource);
                    currentPeriod.thaw();
                }
            };
            EventManager.prototype.refetchAllSources = function() {
                var currentPeriod = this.currentPeriod;
                if (currentPeriod) {
                    currentPeriod.freeze();
                    currentPeriod.purgeAllSources();
                    currentPeriod.requestSources(this.getSources());
                    currentPeriod.thaw();
                }
            };
            EventManager.prototype.getSources = function() {
                return [ this.stickySource ].concat(this.otherSources);
            };
            EventManager.prototype.multiQuerySources = function(matchInputs) {
                if (!matchInputs) {
                    matchInputs = [];
                } else if (!$.isArray(matchInputs)) {
                    matchInputs = [ matchInputs ];
                }
                var matchingSources = [];
                var i;
                for (i = 0; i < matchInputs.length; i++) {
                    matchingSources.push.apply(matchingSources, this.querySources(matchInputs[i]));
                }
                return matchingSources;
            };
            EventManager.prototype.querySources = function(matchInput) {
                var sources = this.otherSources;
                var i;
                var source;
                for (i = 0; i < sources.length; i++) {
                    source = sources[i];
                    if (source === matchInput) {
                        return [ source ];
                    }
                }
                source = this.getSourceById(EventSource_1.default.normalizeId(matchInput));
                if (source) {
                    return [ source ];
                }
                matchInput = EventSourceParser_1.default.parse(matchInput, this.calendar);
                if (matchInput) {
                    return $.grep(sources, function(source) {
                        return isSourcesEquivalent(matchInput, source);
                    });
                }
            };
            EventManager.prototype.getSourceById = function(id) {
                return $.grep(this.otherSources, function(source) {
                    return source.id && source.id === id;
                })[0];
            };
            EventManager.prototype.setPeriod = function(eventPeriod) {
                if (this.currentPeriod) {
                    this.unbindPeriod(this.currentPeriod);
                    this.currentPeriod = null;
                }
                this.currentPeriod = eventPeriod;
                this.bindPeriod(eventPeriod);
                eventPeriod.requestSources(this.getSources());
            };
            EventManager.prototype.bindPeriod = function(eventPeriod) {
                this.listenTo(eventPeriod, "release", function(eventsPayload) {
                    this.trigger("release", eventsPayload);
                });
            };
            EventManager.prototype.unbindPeriod = function(eventPeriod) {
                this.stopListeningTo(eventPeriod);
            };
            EventManager.prototype.getEventDefByUid = function(uid) {
                if (this.currentPeriod) {
                    return this.currentPeriod.getEventDefByUid(uid);
                }
            };
            EventManager.prototype.addEventDef = function(eventDef, isSticky) {
                if (isSticky) {
                    this.stickySource.addEventDef(eventDef);
                }
                if (this.currentPeriod) {
                    this.currentPeriod.addEventDef(eventDef);
                }
            };
            EventManager.prototype.removeEventDefsById = function(eventId) {
                this.getSources().forEach(function(eventSource) {
                    eventSource.removeEventDefsById(eventId);
                });
                if (this.currentPeriod) {
                    this.currentPeriod.removeEventDefsById(eventId);
                }
            };
            EventManager.prototype.removeAllEventDefs = function() {
                this.getSources().forEach(function(eventSource) {
                    eventSource.removeAllEventDefs();
                });
                if (this.currentPeriod) {
                    this.currentPeriod.removeAllEventDefs();
                }
            };
            EventManager.prototype.mutateEventsWithId = function(eventDefId, eventDefMutation) {
                var currentPeriod = this.currentPeriod;
                var eventDefs;
                var undoFuncs = [];
                if (currentPeriod) {
                    currentPeriod.freeze();
                    eventDefs = currentPeriod.getEventDefsById(eventDefId);
                    eventDefs.forEach(function(eventDef) {
                        currentPeriod.removeEventDef(eventDef);
                        undoFuncs.push(eventDefMutation.mutateSingle(eventDef));
                        currentPeriod.addEventDef(eventDef);
                    });
                    currentPeriod.thaw();
                    return function() {
                        currentPeriod.freeze();
                        for (var i = 0; i < eventDefs.length; i++) {
                            currentPeriod.removeEventDef(eventDefs[i]);
                            undoFuncs[i]();
                            currentPeriod.addEventDef(eventDefs[i]);
                        }
                        currentPeriod.thaw();
                    };
                }
                return function() {};
            };
            EventManager.prototype.buildMutatedEventInstanceGroup = function(eventDefId, eventDefMutation) {
                var eventDefs = this.getEventDefsById(eventDefId);
                var i;
                var defCopy;
                var allInstances = [];
                for (i = 0; i < eventDefs.length; i++) {
                    defCopy = eventDefs[i].clone();
                    if (defCopy instanceof SingleEventDef_1.default) {
                        eventDefMutation.mutateSingle(defCopy);
                        allInstances.push.apply(allInstances, defCopy.buildInstances());
                    }
                }
                return new EventInstanceGroup_1.default(allInstances);
            };
            EventManager.prototype.freeze = function() {
                if (this.currentPeriod) {
                    this.currentPeriod.freeze();
                }
            };
            EventManager.prototype.thaw = function() {
                if (this.currentPeriod) {
                    this.currentPeriod.thaw();
                }
            };
            EventManager.prototype.getEventDefsById = function(eventDefId) {
                return this.currentPeriod.getEventDefsById(eventDefId);
            };
            EventManager.prototype.getEventInstances = function() {
                return this.currentPeriod.getEventInstances();
            };
            EventManager.prototype.getEventInstancesWithId = function(eventDefId) {
                return this.currentPeriod.getEventInstancesWithId(eventDefId);
            };
            EventManager.prototype.getEventInstancesWithoutId = function(eventDefId) {
                return this.currentPeriod.getEventInstancesWithoutId(eventDefId);
            };
            return EventManager;
        }();
        exports.default = EventManager;
        EmitterMixin_1.default.mixInto(EventManager);
        ListenerMixin_1.default.mixInto(EventManager);
        function isSourcesEquivalent(source0, source1) {
            return source0.getPrimitive() === source1.getPrimitive();
        }
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var $ = __webpack_require__(3);
        var util_1 = __webpack_require__(4);
        var Promise_1 = __webpack_require__(19);
        var EmitterMixin_1 = __webpack_require__(11);
        var UnzonedRange_1 = __webpack_require__(5);
        var EventInstanceGroup_1 = __webpack_require__(18);
        var EventPeriod = function() {
            function EventPeriod(start, end, timezone) {
                this.pendingCnt = 0;
                this.freezeDepth = 0;
                this.stuntedReleaseCnt = 0;
                this.releaseCnt = 0;
                this.start = start;
                this.end = end;
                this.timezone = timezone;
                this.unzonedRange = new UnzonedRange_1.default(start.clone().stripZone(), end.clone().stripZone());
                this.requestsByUid = {};
                this.eventDefsByUid = {};
                this.eventDefsById = {};
                this.eventInstanceGroupsById = {};
            }
            EventPeriod.prototype.isWithinRange = function(start, end) {
                return !start.isBefore(this.start) && !end.isAfter(this.end);
            };
            EventPeriod.prototype.requestSources = function(sources) {
                this.freeze();
                for (var i = 0; i < sources.length; i++) {
                    this.requestSource(sources[i]);
                }
                this.thaw();
            };
            EventPeriod.prototype.requestSource = function(source) {
                var _this = this;
                var request = {
                    source: source,
                    status: "pending",
                    eventDefs: null
                };
                this.requestsByUid[source.uid] = request;
                this.pendingCnt += 1;
                source.fetch(this.start, this.end, this.timezone).then(function(eventDefs) {
                    if (request.status !== "cancelled") {
                        request.status = "completed";
                        request.eventDefs = eventDefs;
                        _this.addEventDefs(eventDefs);
                        _this.pendingCnt--;
                        _this.tryRelease();
                    }
                }, function() {
                    if (request.status !== "cancelled") {
                        request.status = "failed";
                        _this.pendingCnt--;
                        _this.tryRelease();
                    }
                });
            };
            EventPeriod.prototype.purgeSource = function(source) {
                var request = this.requestsByUid[source.uid];
                if (request) {
                    delete this.requestsByUid[source.uid];
                    if (request.status === "pending") {
                        request.status = "cancelled";
                        this.pendingCnt--;
                        this.tryRelease();
                    } else if (request.status === "completed") {
                        request.eventDefs.forEach(this.removeEventDef.bind(this));
                    }
                }
            };
            EventPeriod.prototype.purgeAllSources = function() {
                var requestsByUid = this.requestsByUid;
                var uid;
                var request;
                var completedCnt = 0;
                for (uid in requestsByUid) {
                    request = requestsByUid[uid];
                    if (request.status === "pending") {
                        request.status = "cancelled";
                    } else if (request.status === "completed") {
                        completedCnt++;
                    }
                }
                this.requestsByUid = {};
                this.pendingCnt = 0;
                if (completedCnt) {
                    this.removeAllEventDefs();
                }
            };
            EventPeriod.prototype.getEventDefByUid = function(eventDefUid) {
                return this.eventDefsByUid[eventDefUid];
            };
            EventPeriod.prototype.getEventDefsById = function(eventDefId) {
                var a = this.eventDefsById[eventDefId];
                if (a) {
                    return a.slice();
                }
                return [];
            };
            EventPeriod.prototype.addEventDefs = function(eventDefs) {
                for (var i = 0; i < eventDefs.length; i++) {
                    this.addEventDef(eventDefs[i]);
                }
            };
            EventPeriod.prototype.addEventDef = function(eventDef) {
                var eventDefsById = this.eventDefsById;
                var eventDefId = eventDef.id;
                var eventDefs = eventDefsById[eventDefId] || (eventDefsById[eventDefId] = []);
                var eventInstances = eventDef.buildInstances(this.unzonedRange);
                var i;
                eventDefs.push(eventDef);
                this.eventDefsByUid[eventDef.uid] = eventDef;
                for (i = 0; i < eventInstances.length; i++) {
                    this.addEventInstance(eventInstances[i], eventDefId);
                }
            };
            EventPeriod.prototype.removeEventDefsById = function(eventDefId) {
                var _this = this;
                this.getEventDefsById(eventDefId).forEach(function(eventDef) {
                    _this.removeEventDef(eventDef);
                });
            };
            EventPeriod.prototype.removeAllEventDefs = function() {
                var isEmpty = $.isEmptyObject(this.eventDefsByUid);
                this.eventDefsByUid = {};
                this.eventDefsById = {};
                this.eventInstanceGroupsById = {};
                if (!isEmpty) {
                    this.tryRelease();
                }
            };
            EventPeriod.prototype.removeEventDef = function(eventDef) {
                var eventDefsById = this.eventDefsById;
                var eventDefs = eventDefsById[eventDef.id];
                delete this.eventDefsByUid[eventDef.uid];
                if (eventDefs) {
                    util_1.removeExact(eventDefs, eventDef);
                    if (!eventDefs.length) {
                        delete eventDefsById[eventDef.id];
                    }
                    this.removeEventInstancesForDef(eventDef);
                }
            };
            EventPeriod.prototype.getEventInstances = function() {
                var eventInstanceGroupsById = this.eventInstanceGroupsById;
                var eventInstances = [];
                var id;
                for (id in eventInstanceGroupsById) {
                    eventInstances.push.apply(eventInstances, eventInstanceGroupsById[id].eventInstances);
                }
                return eventInstances;
            };
            EventPeriod.prototype.getEventInstancesWithId = function(eventDefId) {
                var eventInstanceGroup = this.eventInstanceGroupsById[eventDefId];
                if (eventInstanceGroup) {
                    return eventInstanceGroup.eventInstances.slice();
                }
                return [];
            };
            EventPeriod.prototype.getEventInstancesWithoutId = function(eventDefId) {
                var eventInstanceGroupsById = this.eventInstanceGroupsById;
                var matchingInstances = [];
                var id;
                for (id in eventInstanceGroupsById) {
                    if (id !== eventDefId) {
                        matchingInstances.push.apply(matchingInstances, eventInstanceGroupsById[id].eventInstances);
                    }
                }
                return matchingInstances;
            };
            EventPeriod.prototype.addEventInstance = function(eventInstance, eventDefId) {
                var eventInstanceGroupsById = this.eventInstanceGroupsById;
                var eventInstanceGroup = eventInstanceGroupsById[eventDefId] || (eventInstanceGroupsById[eventDefId] = new EventInstanceGroup_1.default());
                eventInstanceGroup.eventInstances.push(eventInstance);
                this.tryRelease();
            };
            EventPeriod.prototype.removeEventInstancesForDef = function(eventDef) {
                var eventInstanceGroupsById = this.eventInstanceGroupsById;
                var eventInstanceGroup = eventInstanceGroupsById[eventDef.id];
                var removeCnt;
                if (eventInstanceGroup) {
                    removeCnt = util_1.removeMatching(eventInstanceGroup.eventInstances, function(currentEventInstance) {
                        return currentEventInstance.def === eventDef;
                    });
                    if (!eventInstanceGroup.eventInstances.length) {
                        delete eventInstanceGroupsById[eventDef.id];
                    }
                    if (removeCnt) {
                        this.tryRelease();
                    }
                }
            };
            EventPeriod.prototype.tryRelease = function() {
                if (!this.pendingCnt) {
                    if (!this.freezeDepth) {
                        this.release();
                    } else {
                        this.stuntedReleaseCnt++;
                    }
                }
            };
            EventPeriod.prototype.release = function() {
                this.releaseCnt++;
                this.trigger("release", this.eventInstanceGroupsById);
            };
            EventPeriod.prototype.whenReleased = function() {
                var _this = this;
                if (this.releaseCnt) {
                    return Promise_1.default.resolve(this.eventInstanceGroupsById);
                } else {
                    return Promise_1.default.construct(function(onResolve) {
                        _this.one("release", onResolve);
                    });
                }
            };
            EventPeriod.prototype.freeze = function() {
                if (!this.freezeDepth++) {
                    this.stuntedReleaseCnt = 0;
                }
            };
            EventPeriod.prototype.thaw = function() {
                if (!--this.freezeDepth && this.stuntedReleaseCnt && !this.pendingCnt) {
                    this.release();
                }
            };
            return EventPeriod;
        }();
        exports.default = EventPeriod;
        EmitterMixin_1.default.mixInto(EventPeriod);
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var $ = __webpack_require__(3);
        var util_1 = __webpack_require__(4);
        var ListenerMixin_1 = __webpack_require__(7);
        var MouseFollower = function() {
            function MouseFollower(sourceEl, options) {
                this.isFollowing = false;
                this.isHidden = false;
                this.isAnimating = false;
                this.options = options = options || {};
                this.sourceEl = sourceEl;
                this.parentEl = options.parentEl ? $(options.parentEl) : sourceEl.parent();
            }
            MouseFollower.prototype.start = function(ev) {
                if (!this.isFollowing) {
                    this.isFollowing = true;
                    this.y0 = util_1.getEvY(ev);
                    this.x0 = util_1.getEvX(ev);
                    this.topDelta = 0;
                    this.leftDelta = 0;
                    if (!this.isHidden) {
                        this.updatePosition();
                    }
                    if (util_1.getEvIsTouch(ev)) {
                        this.listenTo($(document), "touchmove", this.handleMove);
                    } else {
                        this.listenTo($(document), "mousemove", this.handleMove);
                    }
                }
            };
            MouseFollower.prototype.stop = function(shouldRevert, callback) {
                var _this = this;
                var revertDuration = this.options.revertDuration;
                var complete = function() {
                    _this.isAnimating = false;
                    _this.removeElement();
                    _this.top0 = _this.left0 = null;
                    if (callback) {
                        callback();
                    }
                };
                if (this.isFollowing && !this.isAnimating) {
                    this.isFollowing = false;
                    this.stopListeningTo($(document));
                    if (shouldRevert && revertDuration && !this.isHidden) {
                        this.isAnimating = true;
                        this.el.animate({
                            top: this.top0,
                            left: this.left0
                        }, {
                            duration: revertDuration,
                            complete: complete
                        });
                    } else {
                        complete();
                    }
                }
            };
            MouseFollower.prototype.getEl = function() {
                var el = this.el;
                if (!el) {
                    el = this.el = this.sourceEl.clone().addClass(this.options.additionalClass || "").css({
                        position: "absolute",
                        visibility: "",
                        display: this.isHidden ? "none" : "",
                        margin: 0,
                        right: "auto",
                        bottom: "auto",
                        width: this.sourceEl.width(),
                        height: this.sourceEl.height(),
                        opacity: this.options.opacity || "",
                        zIndex: this.options.zIndex
                    });
                    el.addClass("fc-unselectable");
                    el.appendTo(this.parentEl);
                }
                return el;
            };
            MouseFollower.prototype.removeElement = function() {
                if (this.el) {
                    this.el.remove();
                    this.el = null;
                }
            };
            MouseFollower.prototype.updatePosition = function() {
                var sourceOffset;
                var origin;
                this.getEl();
                if (this.top0 == null) {
                    sourceOffset = this.sourceEl.offset();
                    origin = this.el.offsetParent().offset();
                    this.top0 = sourceOffset.top - origin.top;
                    this.left0 = sourceOffset.left - origin.left;
                }
                this.el.css({
                    top: this.top0 + this.topDelta,
                    left: this.left0 + this.leftDelta
                });
            };
            MouseFollower.prototype.handleMove = function(ev) {
                this.topDelta = util_1.getEvY(ev) - this.y0;
                this.leftDelta = util_1.getEvX(ev) - this.x0;
                if (!this.isHidden) {
                    this.updatePosition();
                }
            };
            MouseFollower.prototype.hide = function() {
                if (!this.isHidden) {
                    this.isHidden = true;
                    if (this.el) {
                        this.el.hide();
                    }
                }
            };
            MouseFollower.prototype.show = function() {
                if (this.isHidden) {
                    this.isHidden = false;
                    this.updatePosition();
                    this.getEl().show();
                }
            };
            return MouseFollower;
        }();
        exports.default = MouseFollower;
        ListenerMixin_1.default.mixInto(MouseFollower);
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var tslib_1 = __webpack_require__(2);
        var HitDragListener_1 = __webpack_require__(22);
        var Interaction_1 = __webpack_require__(15);
        var DateClicking = function(_super) {
            tslib_1.__extends(DateClicking, _super);
            function DateClicking(component) {
                var _this = _super.call(this, component) || this;
                _this.dragListener = _this.buildDragListener();
                return _this;
            }
            DateClicking.prototype.end = function() {
                this.dragListener.endInteraction();
            };
            DateClicking.prototype.bindToEl = function(el) {
                var component = this.component;
                var dragListener = this.dragListener;
                component.bindDateHandlerToEl(el, "mousedown", function(ev) {
                    if (!component.shouldIgnoreMouse()) {
                        dragListener.startInteraction(ev);
                    }
                });
                component.bindDateHandlerToEl(el, "touchstart", function(ev) {
                    if (!component.shouldIgnoreTouch()) {
                        dragListener.startInteraction(ev);
                    }
                });
            };
            DateClicking.prototype.buildDragListener = function() {
                var _this = this;
                var component = this.component;
                var dayClickHit;
                var dragListener = new HitDragListener_1.default(component, {
                    scroll: this.opt("dragScroll"),
                    interactionStart: function() {
                        dayClickHit = dragListener.origHit;
                    },
                    hitOver: function(hit, isOrig, origHit) {
                        if (!isOrig) {
                            dayClickHit = null;
                        }
                    },
                    hitOut: function() {
                        dayClickHit = null;
                    },
                    interactionEnd: function(ev, isCancelled) {
                        var componentFootprint;
                        if (!isCancelled && dayClickHit) {
                            componentFootprint = component.getSafeHitFootprint(dayClickHit);
                            if (componentFootprint) {
                                _this.view.triggerDayClick(componentFootprint, component.getHitEl(dayClickHit), ev);
                            }
                        }
                    }
                });
                dragListener.shouldCancelTouchScroll = false;
                dragListener.scrollAlwaysKills = true;
                return dragListener;
            };
            return DateClicking;
        }(Interaction_1.default);
        exports.default = DateClicking;
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var tslib_1 = __webpack_require__(2);
        var util_1 = __webpack_require__(4);
        var EventRenderer_1 = __webpack_require__(42);
        var TimeGridEventRenderer = function(_super) {
            tslib_1.__extends(TimeGridEventRenderer, _super);
            function TimeGridEventRenderer(timeGrid, fillRenderer) {
                var _this = _super.call(this, timeGrid, fillRenderer) || this;
                _this.timeGrid = timeGrid;
                return _this;
            }
            TimeGridEventRenderer.prototype.renderFgSegs = function(segs) {
                this.renderFgSegsIntoContainers(segs, this.timeGrid.fgContainerEls);
            };
            TimeGridEventRenderer.prototype.renderFgSegsIntoContainers = function(segs, containerEls) {
                var segsByCol;
                var col;
                segsByCol = this.timeGrid.groupSegsByCol(segs);
                for (col = 0; col < this.timeGrid.colCnt; col++) {
                    this.updateFgSegCoords(segsByCol[col]);
                }
                this.timeGrid.attachSegsByCol(segsByCol, containerEls);
            };
            TimeGridEventRenderer.prototype.unrenderFgSegs = function() {
                if (this.fgSegs) {
                    this.fgSegs.forEach(function(seg) {
                        seg.el.remove();
                    });
                }
            };
            TimeGridEventRenderer.prototype.computeEventTimeFormat = function() {
                return this.opt("noMeridiemTimeFormat");
            };
            TimeGridEventRenderer.prototype.computeDisplayEventEnd = function() {
                return true;
            };
            TimeGridEventRenderer.prototype.fgSegHtml = function(seg, disableResizing) {
                var view = this.view;
                var calendar = view.calendar;
                var componentFootprint = seg.footprint.componentFootprint;
                var isAllDay = componentFootprint.isAllDay;
                var eventDef = seg.footprint.eventDef;
                var isDraggable = view.isEventDefDraggable(eventDef);
                var isResizableFromStart = !disableResizing && seg.isStart && view.isEventDefResizableFromStart(eventDef);
                var isResizableFromEnd = !disableResizing && seg.isEnd && view.isEventDefResizableFromEnd(eventDef);
                var classes = this.getSegClasses(seg, isDraggable, isResizableFromStart || isResizableFromEnd);
                var skinCss = util_1.cssToStr(this.getSkinCss(eventDef));
                var timeText;
                var fullTimeText;
                var startTimeText;
                classes.unshift("fc-time-grid-event", "fc-v-event");
                if (view.isMultiDayRange(componentFootprint.unzonedRange)) {
                    if (seg.isStart || seg.isEnd) {
                        var zonedStart = calendar.msToMoment(seg.startMs);
                        var zonedEnd = calendar.msToMoment(seg.endMs);
                        timeText = this._getTimeText(zonedStart, zonedEnd, isAllDay);
                        fullTimeText = this._getTimeText(zonedStart, zonedEnd, isAllDay, "LT");
                        startTimeText = this._getTimeText(zonedStart, zonedEnd, isAllDay, null, false);
                    }
                } else {
                    timeText = this.getTimeText(seg.footprint);
                    fullTimeText = this.getTimeText(seg.footprint, "LT");
                    startTimeText = this.getTimeText(seg.footprint, null, false);
                }
                return '<a class="' + classes.join(" ") + '"' + (eventDef.url ? ' href="' + util_1.htmlEscape(eventDef.url) + '"' : "") + (skinCss ? ' style="' + skinCss + '"' : "") + ">" + '<div class="fc-content">' + (timeText ? '<div class="fc-time"' + ' data-start="' + util_1.htmlEscape(startTimeText) + '"' + ' data-full="' + util_1.htmlEscape(fullTimeText) + '"' + ">" + "<span>" + util_1.htmlEscape(timeText) + "</span>" + "</div>" : "") + (eventDef.title ? '<div class="fc-title">' + util_1.htmlEscape(eventDef.title) + "</div>" : "") + "</div>" + '<div class="fc-bg"/>' + (isResizableFromEnd ? '<div class="fc-resizer fc-end-resizer" />' : "") + "</a>";
            };
            TimeGridEventRenderer.prototype.updateFgSegCoords = function(segs) {
                this.timeGrid.computeSegVerticals(segs);
                this.computeFgSegHorizontals(segs);
                this.timeGrid.assignSegVerticals(segs);
                this.assignFgSegHorizontals(segs);
            };
            TimeGridEventRenderer.prototype.computeFgSegHorizontals = function(segs) {
                var levels;
                var level0;
                var i;
                this.sortEventSegs(segs);
                levels = buildSlotSegLevels(segs);
                computeForwardSlotSegs(levels);
                if (level0 = levels[0]) {
                    for (i = 0; i < level0.length; i++) {
                        computeSlotSegPressures(level0[i]);
                    }
                    for (i = 0; i < level0.length; i++) {
                        this.computeFgSegForwardBack(level0[i], 0, 0);
                    }
                }
            };
            TimeGridEventRenderer.prototype.computeFgSegForwardBack = function(seg, seriesBackwardPressure, seriesBackwardCoord) {
                var forwardSegs = seg.forwardSegs;
                var i;
                if (seg.forwardCoord === undefined) {
                    if (!forwardSegs.length) {
                        seg.forwardCoord = 1;
                    } else {
                        this.sortForwardSegs(forwardSegs);
                        this.computeFgSegForwardBack(forwardSegs[0], seriesBackwardPressure + 1, seriesBackwardCoord);
                        seg.forwardCoord = forwardSegs[0].backwardCoord;
                    }
                    seg.backwardCoord = seg.forwardCoord - (seg.forwardCoord - seriesBackwardCoord) / (seriesBackwardPressure + 1);
                    for (i = 0; i < forwardSegs.length; i++) {
                        this.computeFgSegForwardBack(forwardSegs[i], 0, seg.forwardCoord);
                    }
                }
            };
            TimeGridEventRenderer.prototype.sortForwardSegs = function(forwardSegs) {
                forwardSegs.sort(util_1.proxy(this, "compareForwardSegs"));
            };
            TimeGridEventRenderer.prototype.compareForwardSegs = function(seg1, seg2) {
                return seg2.forwardPressure - seg1.forwardPressure || (seg1.backwardCoord || 0) - (seg2.backwardCoord || 0) || this.compareEventSegs(seg1, seg2);
            };
            TimeGridEventRenderer.prototype.assignFgSegHorizontals = function(segs) {
                var i;
                var seg;
                for (i = 0; i < segs.length; i++) {
                    seg = segs[i];
                    seg.el.css(this.generateFgSegHorizontalCss(seg));
                    if (seg.bottom - seg.top < 30) {
                        seg.el.addClass("fc-short");
                    }
                }
            };
            TimeGridEventRenderer.prototype.generateFgSegHorizontalCss = function(seg) {
                var shouldOverlap = this.opt("slotEventOverlap");
                var backwardCoord = seg.backwardCoord;
                var forwardCoord = seg.forwardCoord;
                var props = this.timeGrid.generateSegVerticalCss(seg);
                var isRTL = this.timeGrid.isRTL;
                var left;
                var right;
                if (shouldOverlap) {
                    forwardCoord = Math.min(1, backwardCoord + (forwardCoord - backwardCoord) * 2);
                }
                if (isRTL) {
                    left = 1 - forwardCoord;
                    right = backwardCoord;
                } else {
                    left = backwardCoord;
                    right = 1 - forwardCoord;
                }
                props.zIndex = seg.level + 1;
                props.left = left * 100 + "%";
                props.right = right * 100 + "%";
                if (shouldOverlap && seg.forwardPressure) {
                    props[isRTL ? "marginLeft" : "marginRight"] = 10 * 2;
                }
                return props;
            };
            return TimeGridEventRenderer;
        }(EventRenderer_1.default);
        exports.default = TimeGridEventRenderer;
        function buildSlotSegLevels(segs) {
            var levels = [];
            var i;
            var seg;
            var j;
            for (i = 0; i < segs.length; i++) {
                seg = segs[i];
                for (j = 0; j < levels.length; j++) {
                    if (!computeSlotSegCollisions(seg, levels[j]).length) {
                        break;
                    }
                }
                seg.level = j;
                (levels[j] || (levels[j] = [])).push(seg);
            }
            return levels;
        }
        function computeForwardSlotSegs(levels) {
            var i;
            var level;
            var j;
            var seg;
            var k;
            for (i = 0; i < levels.length; i++) {
                level = levels[i];
                for (j = 0; j < level.length; j++) {
                    seg = level[j];
                    seg.forwardSegs = [];
                    for (k = i + 1; k < levels.length; k++) {
                        computeSlotSegCollisions(seg, levels[k], seg.forwardSegs);
                    }
                }
            }
        }
        function computeSlotSegPressures(seg) {
            var forwardSegs = seg.forwardSegs;
            var forwardPressure = 0;
            var i;
            var forwardSeg;
            if (seg.forwardPressure === undefined) {
                for (i = 0; i < forwardSegs.length; i++) {
                    forwardSeg = forwardSegs[i];
                    computeSlotSegPressures(forwardSeg);
                    forwardPressure = Math.max(forwardPressure, 1 + forwardSeg.forwardPressure);
                }
                seg.forwardPressure = forwardPressure;
            }
        }
        function computeSlotSegCollisions(seg, otherSegs, results) {
            if (results === void 0) {
                results = [];
            }
            for (var i = 0; i < otherSegs.length; i++) {
                if (isSlotSegCollision(seg, otherSegs[i])) {
                    results.push(otherSegs[i]);
                }
            }
            return results;
        }
        function isSlotSegCollision(seg1, seg2) {
            return seg1.bottom > seg2.top && seg1.top < seg2.bottom;
        }
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var tslib_1 = __webpack_require__(2);
        var $ = __webpack_require__(3);
        var HelperRenderer_1 = __webpack_require__(58);
        var TimeGridHelperRenderer = function(_super) {
            tslib_1.__extends(TimeGridHelperRenderer, _super);
            function TimeGridHelperRenderer() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            TimeGridHelperRenderer.prototype.renderSegs = function(segs, sourceSeg) {
                var helperNodes = [];
                var i;
                var seg;
                var sourceEl;
                this.eventRenderer.renderFgSegsIntoContainers(segs, this.component.helperContainerEls);
                for (i = 0; i < segs.length; i++) {
                    seg = segs[i];
                    if (sourceSeg && sourceSeg.col === seg.col) {
                        sourceEl = sourceSeg.el;
                        seg.el.css({
                            left: sourceEl.css("left"),
                            right: sourceEl.css("right"),
                            "margin-left": sourceEl.css("margin-left"),
                            "margin-right": sourceEl.css("margin-right")
                        });
                    }
                    helperNodes.push(seg.el[0]);
                }
                return $(helperNodes);
            };
            return TimeGridHelperRenderer;
        }(HelperRenderer_1.default);
        exports.default = TimeGridHelperRenderer;
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var tslib_1 = __webpack_require__(2);
        var FillRenderer_1 = __webpack_require__(57);
        var TimeGridFillRenderer = function(_super) {
            tslib_1.__extends(TimeGridFillRenderer, _super);
            function TimeGridFillRenderer() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            TimeGridFillRenderer.prototype.attachSegEls = function(type, segs) {
                var timeGrid = this.component;
                var containerEls;
                if (type === "bgEvent") {
                    containerEls = timeGrid.bgContainerEls;
                } else if (type === "businessHours") {
                    containerEls = timeGrid.businessContainerEls;
                } else if (type === "highlight") {
                    containerEls = timeGrid.highlightContainerEls;
                }
                timeGrid.updateSegVerticals(segs);
                timeGrid.attachSegsByCol(timeGrid.groupSegsByCol(segs), containerEls);
                return segs.map(function(seg) {
                    return seg.el[0];
                });
            };
            return TimeGridFillRenderer;
        }(FillRenderer_1.default);
        exports.default = TimeGridFillRenderer;
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var $ = __webpack_require__(3);
        var util_1 = __webpack_require__(4);
        var ListenerMixin_1 = __webpack_require__(7);
        var Popover = function() {
            function Popover(options) {
                this.isHidden = true;
                this.margin = 10;
                this.options = options || {};
            }
            Popover.prototype.show = function() {
                if (this.isHidden) {
                    if (!this.el) {
                        this.render();
                    }
                    this.el.show();
                    this.position();
                    this.isHidden = false;
                    this.trigger("show");
                }
            };
            Popover.prototype.hide = function() {
                if (!this.isHidden) {
                    this.el.hide();
                    this.isHidden = true;
                    this.trigger("hide");
                }
            };
            Popover.prototype.render = function() {
                var _this = this;
                var options = this.options;
                this.el = $('<div class="fc-popover"/>').addClass(options.className || "").css({
                    top: 0,
                    left: 0
                }).append(options.content).appendTo(options.parentEl);
                this.el.on("click", ".fc-close", function() {
                    _this.hide();
                });
                if (options.autoHide) {
                    this.listenTo($(document), "mousedown", this.documentMousedown);
                }
            };
            Popover.prototype.documentMousedown = function(ev) {
                if (this.el && !$(ev.target).closest(this.el).length) {
                    this.hide();
                }
            };
            Popover.prototype.removeElement = function() {
                this.hide();
                if (this.el) {
                    this.el.remove();
                    this.el = null;
                }
                this.stopListeningTo($(document), "mousedown");
            };
            Popover.prototype.position = function() {
                var options = this.options;
                var origin = this.el.offsetParent().offset();
                var width = this.el.outerWidth();
                var height = this.el.outerHeight();
                var windowEl = $(window);
                var viewportEl = util_1.getScrollParent(this.el);
                var viewportTop;
                var viewportLeft;
                var viewportOffset;
                var top;
                var left;
                top = options.top || 0;
                if (options.left !== undefined) {
                    left = options.left;
                } else if (options.right !== undefined) {
                    left = options.right - width;
                } else {
                    left = 0;
                }
                if (viewportEl.is(window) || viewportEl.is(document)) {
                    viewportEl = windowEl;
                    viewportTop = 0;
                    viewportLeft = 0;
                } else {
                    viewportOffset = viewportEl.offset();
                    viewportTop = viewportOffset.top;
                    viewportLeft = viewportOffset.left;
                }
                viewportTop += windowEl.scrollTop();
                viewportLeft += windowEl.scrollLeft();
                if (options.viewportConstrain !== false) {
                    top = Math.min(top, viewportTop + viewportEl.outerHeight() - height - this.margin);
                    top = Math.max(top, viewportTop + this.margin);
                    left = Math.min(left, viewportLeft + viewportEl.outerWidth() - width - this.margin);
                    left = Math.max(left, viewportLeft + this.margin);
                }
                this.el.css({
                    top: top - origin.top,
                    left: left - origin.left
                });
            };
            Popover.prototype.trigger = function(name) {
                if (this.options[name]) {
                    this.options[name].apply(this, Array.prototype.slice.call(arguments, 1));
                }
            };
            return Popover;
        }();
        exports.default = Popover;
        ListenerMixin_1.default.mixInto(Popover);
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var tslib_1 = __webpack_require__(2);
        var $ = __webpack_require__(3);
        var util_1 = __webpack_require__(4);
        var EventRenderer_1 = __webpack_require__(42);
        var DayGridEventRenderer = function(_super) {
            tslib_1.__extends(DayGridEventRenderer, _super);
            function DayGridEventRenderer(dayGrid, fillRenderer) {
                var _this = _super.call(this, dayGrid, fillRenderer) || this;
                _this.dayGrid = dayGrid;
                return _this;
            }
            DayGridEventRenderer.prototype.renderBgRanges = function(eventRanges) {
                eventRanges = $.grep(eventRanges, function(eventRange) {
                    return eventRange.eventDef.isAllDay();
                });
                _super.prototype.renderBgRanges.call(this, eventRanges);
            };
            DayGridEventRenderer.prototype.renderFgSegs = function(segs) {
                var rowStructs = this.rowStructs = this.renderSegRows(segs);
                this.dayGrid.rowEls.each(function(i, rowNode) {
                    $(rowNode).find(".fc-content-skeleton > table").append(rowStructs[i].tbodyEl);
                });
            };
            DayGridEventRenderer.prototype.unrenderFgSegs = function() {
                var rowStructs = this.rowStructs || [];
                var rowStruct;
                while (rowStruct = rowStructs.pop()) {
                    rowStruct.tbodyEl.remove();
                }
                this.rowStructs = null;
            };
            DayGridEventRenderer.prototype.renderSegRows = function(segs) {
                var rowStructs = [];
                var segRows;
                var row;
                segRows = this.groupSegRows(segs);
                for (row = 0; row < segRows.length; row++) {
                    rowStructs.push(this.renderSegRow(row, segRows[row]));
                }
                return rowStructs;
            };
            DayGridEventRenderer.prototype.renderSegRow = function(row, rowSegs) {
                var colCnt = this.dayGrid.colCnt;
                var segLevels = this.buildSegLevels(rowSegs);
                var levelCnt = Math.max(1, segLevels.length);
                var tbody = $("<tbody/>");
                var segMatrix = [];
                var cellMatrix = [];
                var loneCellMatrix = [];
                var i;
                var levelSegs;
                var col;
                var tr;
                var j;
                var seg;
                var td;
                function emptyCellsUntil(endCol) {
                    while (col < endCol) {
                        td = (loneCellMatrix[i - 1] || [])[col];
                        if (td) {
                            td.attr("rowspan", parseInt(td.attr("rowspan") || 1, 10) + 1);
                        } else {
                            td = $("<td/>");
                            tr.append(td);
                        }
                        cellMatrix[i][col] = td;
                        loneCellMatrix[i][col] = td;
                        col++;
                    }
                }
                for (i = 0; i < levelCnt; i++) {
                    levelSegs = segLevels[i];
                    col = 0;
                    tr = $("<tr/>");
                    segMatrix.push([]);
                    cellMatrix.push([]);
                    loneCellMatrix.push([]);
                    if (levelSegs) {
                        for (j = 0; j < levelSegs.length; j++) {
                            seg = levelSegs[j];
                            emptyCellsUntil(seg.leftCol);
                            td = $('<td class="fc-event-container"/>').append(seg.el);
                            if (seg.leftCol !== seg.rightCol) {
                                td.attr("colspan", seg.rightCol - seg.leftCol + 1);
                            } else {
                                loneCellMatrix[i][col] = td;
                            }
                            while (col <= seg.rightCol) {
                                cellMatrix[i][col] = td;
                                segMatrix[i][col] = seg;
                                col++;
                            }
                            tr.append(td);
                        }
                    }
                    emptyCellsUntil(colCnt);
                    this.dayGrid.bookendCells(tr);
                    tbody.append(tr);
                }
                return {
                    row: row,
                    tbodyEl: tbody,
                    cellMatrix: cellMatrix,
                    segMatrix: segMatrix,
                    segLevels: segLevels,
                    segs: rowSegs
                };
            };
            DayGridEventRenderer.prototype.buildSegLevels = function(segs) {
                var levels = [];
                var i;
                var seg;
                var j;
                this.sortEventSegs(segs);
                for (i = 0; i < segs.length; i++) {
                    seg = segs[i];
                    for (j = 0; j < levels.length; j++) {
                        if (!isDaySegCollision(seg, levels[j])) {
                            break;
                        }
                    }
                    seg.level = j;
                    (levels[j] || (levels[j] = [])).push(seg);
                }
                for (j = 0; j < levels.length; j++) {
                    levels[j].sort(compareDaySegCols);
                }
                return levels;
            };
            DayGridEventRenderer.prototype.groupSegRows = function(segs) {
                var segRows = [];
                var i;
                for (i = 0; i < this.dayGrid.rowCnt; i++) {
                    segRows.push([]);
                }
                for (i = 0; i < segs.length; i++) {
                    segRows[segs[i].row].push(segs[i]);
                }
                return segRows;
            };
            DayGridEventRenderer.prototype.computeEventTimeFormat = function() {
                return this.opt("extraSmallTimeFormat");
            };
            DayGridEventRenderer.prototype.computeDisplayEventEnd = function() {
                return this.dayGrid.colCnt === 1;
            };
            DayGridEventRenderer.prototype.fgSegHtml = function(seg, disableResizing) {
                var view = this.view;
                var eventDef = seg.footprint.eventDef;
                var isAllDay = seg.footprint.componentFootprint.isAllDay;
                var isDraggable = view.isEventDefDraggable(eventDef);
                var isResizableFromStart = !disableResizing && isAllDay && seg.isStart && view.isEventDefResizableFromStart(eventDef);
                var isResizableFromEnd = !disableResizing && isAllDay && seg.isEnd && view.isEventDefResizableFromEnd(eventDef);
                var classes = this.getSegClasses(seg, isDraggable, isResizableFromStart || isResizableFromEnd);
                var skinCss = util_1.cssToStr(this.getSkinCss(eventDef));
                var timeHtml = "";
                var timeText;
                var titleHtml;
                classes.unshift("fc-day-grid-event", "fc-h-event");
                if (seg.isStart) {
                    timeText = this.getTimeText(seg.footprint);
                    if (timeText) {
                        timeHtml = '<span class="fc-time">' + util_1.htmlEscape(timeText) + "</span>";
                    }
                }
                titleHtml = '<span class="fc-title">' + (util_1.htmlEscape(eventDef.title || "") || "&nbsp;") + "</span>";
                return '<a class="' + classes.join(" ") + '"' + (eventDef.url ? ' href="' + util_1.htmlEscape(eventDef.url) + '"' : "") + (skinCss ? ' style="' + skinCss + '"' : "") + ">" + '<div class="fc-content">' + (this.dayGrid.isRTL ? titleHtml + " " + timeHtml : timeHtml + " " + titleHtml) + "</div>" + (isResizableFromStart ? '<div class="fc-resizer fc-start-resizer" />' : "") + (isResizableFromEnd ? '<div class="fc-resizer fc-end-resizer" />' : "") + "</a>";
            };
            return DayGridEventRenderer;
        }(EventRenderer_1.default);
        exports.default = DayGridEventRenderer;
        function isDaySegCollision(seg, otherSegs) {
            var i;
            var otherSeg;
            for (i = 0; i < otherSegs.length; i++) {
                otherSeg = otherSegs[i];
                if (otherSeg.leftCol <= seg.rightCol && otherSeg.rightCol >= seg.leftCol) {
                    return true;
                }
            }
            return false;
        }
        function compareDaySegCols(a, b) {
            return a.leftCol - b.leftCol;
        }
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var tslib_1 = __webpack_require__(2);
        var $ = __webpack_require__(3);
        var HelperRenderer_1 = __webpack_require__(58);
        var DayGridHelperRenderer = function(_super) {
            tslib_1.__extends(DayGridHelperRenderer, _super);
            function DayGridHelperRenderer() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            DayGridHelperRenderer.prototype.renderSegs = function(segs, sourceSeg) {
                var helperNodes = [];
                var rowStructs;
                rowStructs = this.eventRenderer.renderSegRows(segs);
                this.component.rowEls.each(function(row, rowNode) {
                    var rowEl = $(rowNode);
                    var skeletonEl = $('<div class="fc-helper-skeleton"><table/></div>');
                    var skeletonTopEl;
                    var skeletonTop;
                    if (sourceSeg && sourceSeg.row === row) {
                        skeletonTop = sourceSeg.el.position().top;
                    } else {
                        skeletonTopEl = rowEl.find(".fc-content-skeleton tbody");
                        if (!skeletonTopEl.length) {
                            skeletonTopEl = rowEl.find(".fc-content-skeleton table");
                        }
                        skeletonTop = skeletonTopEl.position().top;
                    }
                    skeletonEl.css("top", skeletonTop).find("table").append(rowStructs[row].tbodyEl);
                    rowEl.append(skeletonEl);
                    helperNodes.push(skeletonEl[0]);
                });
                return $(helperNodes);
            };
            return DayGridHelperRenderer;
        }(HelperRenderer_1.default);
        exports.default = DayGridHelperRenderer;
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var tslib_1 = __webpack_require__(2);
        var $ = __webpack_require__(3);
        var FillRenderer_1 = __webpack_require__(57);
        var DayGridFillRenderer = function(_super) {
            tslib_1.__extends(DayGridFillRenderer, _super);
            function DayGridFillRenderer() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.fillSegTag = "td";
                return _this;
            }
            DayGridFillRenderer.prototype.attachSegEls = function(type, segs) {
                var nodes = [];
                var i;
                var seg;
                var skeletonEl;
                for (i = 0; i < segs.length; i++) {
                    seg = segs[i];
                    skeletonEl = this.renderFillRow(type, seg);
                    this.component.rowEls.eq(seg.row).append(skeletonEl);
                    nodes.push(skeletonEl[0]);
                }
                return nodes;
            };
            DayGridFillRenderer.prototype.renderFillRow = function(type, seg) {
                var colCnt = this.component.colCnt;
                var startCol = seg.leftCol;
                var endCol = seg.rightCol + 1;
                var className;
                var skeletonEl;
                var trEl;
                if (type === "businessHours") {
                    className = "bgevent";
                } else {
                    className = type.toLowerCase();
                }
                skeletonEl = $('<div class="fc-' + className + '-skeleton">' + "<table><tr/></table>" + "</div>");
                trEl = skeletonEl.find("tr");
                if (startCol > 0) {
                    trEl.append('<td colspan="' + startCol + '"/>');
                }
                trEl.append(seg.el.attr("colspan", endCol - startCol));
                if (endCol < colCnt) {
                    trEl.append('<td colspan="' + (colCnt - endCol) + '"/>');
                }
                this.component.bookendCells(trEl);
                return skeletonEl;
            };
            return DayGridFillRenderer;
        }(FillRenderer_1.default);
        exports.default = DayGridFillRenderer;
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var tslib_1 = __webpack_require__(2);
        var BasicViewDateProfileGenerator_1 = __webpack_require__(224);
        var UnzonedRange_1 = __webpack_require__(5);
        var MonthViewDateProfileGenerator = function(_super) {
            tslib_1.__extends(MonthViewDateProfileGenerator, _super);
            function MonthViewDateProfileGenerator() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            MonthViewDateProfileGenerator.prototype.buildRenderRange = function(currentUnzonedRange, currentRangeUnit, isRangeAllDay) {
                var renderUnzonedRange = _super.prototype.buildRenderRange.call(this, currentUnzonedRange, currentRangeUnit, isRangeAllDay);
                var start = this.msToUtcMoment(renderUnzonedRange.startMs, isRangeAllDay);
                var end = this.msToUtcMoment(renderUnzonedRange.endMs, isRangeAllDay);
                var rowCnt;
                if (this.opt("fixedWeekCount")) {
                    rowCnt = Math.ceil(end.diff(start, "weeks", true));
                    end.add(6 - rowCnt, "weeks");
                }
                return new UnzonedRange_1.default(start, end);
            };
            return MonthViewDateProfileGenerator;
        }(BasicViewDateProfileGenerator_1.default);
        exports.default = MonthViewDateProfileGenerator;
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var tslib_1 = __webpack_require__(2);
        var util_1 = __webpack_require__(4);
        var EventRenderer_1 = __webpack_require__(42);
        var ListEventRenderer = function(_super) {
            tslib_1.__extends(ListEventRenderer, _super);
            function ListEventRenderer() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            ListEventRenderer.prototype.renderFgSegs = function(segs) {
                if (!segs.length) {
                    this.component.renderEmptyMessage();
                } else {
                    this.component.renderSegList(segs);
                }
            };
            ListEventRenderer.prototype.fgSegHtml = function(seg) {
                var view = this.view;
                var calendar = view.calendar;
                var theme = calendar.theme;
                var eventFootprint = seg.footprint;
                var eventDef = eventFootprint.eventDef;
                var componentFootprint = eventFootprint.componentFootprint;
                var url = eventDef.url;
                var classes = [ "fc-list-item" ].concat(this.getClasses(eventDef));
                var bgColor = this.getBgColor(eventDef);
                var timeHtml;
                if (componentFootprint.isAllDay) {
                    timeHtml = view.getAllDayHtml();
                } else if (view.isMultiDayRange(componentFootprint.unzonedRange)) {
                    if (seg.isStart || seg.isEnd) {
                        timeHtml = util_1.htmlEscape(this._getTimeText(calendar.msToMoment(seg.startMs), calendar.msToMoment(seg.endMs), componentFootprint.isAllDay));
                    } else {
                        timeHtml = view.getAllDayHtml();
                    }
                } else {
                    timeHtml = util_1.htmlEscape(this.getTimeText(eventFootprint));
                }
                if (url) {
                    classes.push("fc-has-url");
                }
                return '<tr class="' + classes.join(" ") + '">' + (this.displayEventTime ? '<td class="fc-list-item-time ' + theme.getClass("widgetContent") + '">' + (timeHtml || "") + "</td>" : "") + '<td class="fc-list-item-marker ' + theme.getClass("widgetContent") + '">' + '<span class="fc-event-dot"' + (bgColor ? ' style="background-color:' + bgColor + '"' : "") + "></span>" + "</td>" + '<td class="fc-list-item-title ' + theme.getClass("widgetContent") + '">' + "<a" + (url ? ' href="' + util_1.htmlEscape(url) + '"' : "") + ">" + util_1.htmlEscape(eventDef.title || "") + "</a>" + "</td>" + "</tr>";
            };
            ListEventRenderer.prototype.computeEventTimeFormat = function() {
                return this.opt("mediumTimeFormat");
            };
            return ListEventRenderer;
        }(EventRenderer_1.default);
        exports.default = ListEventRenderer;
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var tslib_1 = __webpack_require__(2);
        var $ = __webpack_require__(3);
        var EventPointing_1 = __webpack_require__(59);
        var ListEventPointing = function(_super) {
            tslib_1.__extends(ListEventPointing, _super);
            function ListEventPointing() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            ListEventPointing.prototype.handleClick = function(seg, ev) {
                var url;
                _super.prototype.handleClick.call(this, seg, ev);
                if (!$(ev.target).closest("a[href]").length) {
                    url = seg.footprint.eventDef.url;
                    if (url && !ev.isDefaultPrevented()) {
                        window.location.href = url;
                    }
                }
            };
            return ListEventPointing;
        }(EventPointing_1.default);
        exports.default = ListEventPointing;
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var EventSourceParser_1 = __webpack_require__(37);
        var ArrayEventSource_1 = __webpack_require__(52);
        var FuncEventSource_1 = __webpack_require__(211);
        var JsonFeedEventSource_1 = __webpack_require__(212);
        EventSourceParser_1.default.registerClass(ArrayEventSource_1.default);
        EventSourceParser_1.default.registerClass(FuncEventSource_1.default);
        EventSourceParser_1.default.registerClass(JsonFeedEventSource_1.default);
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var ThemeRegistry_1 = __webpack_require__(51);
        var StandardTheme_1 = __webpack_require__(209);
        var JqueryUiTheme_1 = __webpack_require__(210);
        var BootstrapTheme_1 = __webpack_require__(254);
        ThemeRegistry_1.defineThemeSystem("standard", StandardTheme_1.default);
        ThemeRegistry_1.defineThemeSystem("jquery-ui", JqueryUiTheme_1.default);
        ThemeRegistry_1.defineThemeSystem("bootstrap3", BootstrapTheme_1.default);
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var tslib_1 = __webpack_require__(2);
        var Theme_1 = __webpack_require__(38);
        var BootstrapTheme = function(_super) {
            tslib_1.__extends(BootstrapTheme, _super);
            function BootstrapTheme() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return BootstrapTheme;
        }(Theme_1.default);
        exports.default = BootstrapTheme;
        BootstrapTheme.prototype.classes = {
            widget: "fc-bootstrap3",
            tableGrid: "table-bordered",
            tableList: "table table-striped",
            buttonGroup: "btn-group",
            button: "btn btn-default",
            stateActive: "active",
            stateDisabled: "disabled",
            today: "alert alert-info",
            popover: "panel panel-default",
            popoverHeader: "panel-heading",
            popoverContent: "panel-body",
            headerRow: "panel-default",
            dayRow: "panel-default",
            listView: "panel panel-default"
        };
        BootstrapTheme.prototype.baseIconClass = "glyphicon";
        BootstrapTheme.prototype.iconClasses = {
            close: "glyphicon-remove",
            prev: "glyphicon-chevron-left",
            next: "glyphicon-chevron-right",
            prevYear: "glyphicon-backward",
            nextYear: "glyphicon-forward"
        };
        BootstrapTheme.prototype.iconOverrideOption = "bootstrapGlyphicons";
        BootstrapTheme.prototype.iconOverrideCustomButtonOption = "bootstrapGlyphicon";
        BootstrapTheme.prototype.iconOverridePrefix = "glyphicon-";
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var ViewRegistry_1 = __webpack_require__(21);
        var BasicView_1 = __webpack_require__(62);
        var MonthView_1 = __webpack_require__(225);
        ViewRegistry_1.defineView("basic", {
            class: BasicView_1.default
        });
        ViewRegistry_1.defineView("basicDay", {
            type: "basic",
            duration: {
                days: 1
            }
        });
        ViewRegistry_1.defineView("basicWeek", {
            type: "basic",
            duration: {
                weeks: 1
            }
        });
        ViewRegistry_1.defineView("month", {
            class: MonthView_1.default,
            duration: {
                months: 1
            },
            defaults: {
                fixedWeekCount: true
            }
        });
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var ViewRegistry_1 = __webpack_require__(21);
        var AgendaView_1 = __webpack_require__(222);
        ViewRegistry_1.defineView("agenda", {
            class: AgendaView_1.default,
            defaults: {
                allDaySlot: true,
                slotDuration: "00:30:00",
                slotEventOverlap: true
            }
        });
        ViewRegistry_1.defineView("agendaDay", {
            type: "agenda",
            duration: {
                days: 1
            }
        });
        ViewRegistry_1.defineView("agendaWeek", {
            type: "agenda",
            duration: {
                weeks: 1
            }
        });
    }, function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var ViewRegistry_1 = __webpack_require__(21);
        var ListView_1 = __webpack_require__(226);
        ViewRegistry_1.defineView("list", {
            class: ListView_1.default,
            buttonTextKey: "list",
            defaults: {
                buttonText: "list",
                listDayFormat: "LL",
                noEventsMessage: "No events to display"
            }
        });
        ViewRegistry_1.defineView("listDay", {
            type: "list",
            duration: {
                days: 1
            },
            defaults: {
                listDayFormat: "dddd"
            }
        });
        ViewRegistry_1.defineView("listWeek", {
            type: "list",
            duration: {
                weeks: 1
            },
            defaults: {
                listDayFormat: "dddd",
                listDayAltFormat: "LL"
            }
        });
        ViewRegistry_1.defineView("listMonth", {
            type: "list",
            duration: {
                month: 1
            },
            defaults: {
                listDayAltFormat: "dddd"
            }
        });
        ViewRegistry_1.defineView("listYear", {
            type: "list",
            duration: {
                year: 1
            },
            defaults: {
                listDayAltFormat: "dddd"
            }
        });
    }, function(module, exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
    } ]);
});

(function() {
    "use strict";
    function a() {}
    function b(a, b) {
        for (var c = a.length; c--; ) if (a[c].listener === b) return c;
        return -1;
    }
    function c(a) {
        return function() {
            return this[a].apply(this, arguments);
        };
    }
    var d = a.prototype, e = this, f = e.EventEmitter;
    d.getListeners = function(a) {
        var b, c, d = this._getEvents();
        if ("object" == typeof a) {
            b = {};
            for (c in d) d.hasOwnProperty(c) && a.test(c) && (b[c] = d[c]);
        } else b = d[a] || (d[a] = []);
        return b;
    }, d.flattenListeners = function(a) {
        var b, c = [];
        for (b = 0; b < a.length; b += 1) c.push(a[b].listener);
        return c;
    }, d.getListenersAsObject = function(a) {
        var b, c = this.getListeners(a);
        return c instanceof Array && (b = {}, b[a] = c), b || c;
    }, d.addListener = function(a, c) {
        var d, e = this.getListenersAsObject(a), f = "object" == typeof c;
        for (d in e) e.hasOwnProperty(d) && -1 === b(e[d], c) && e[d].push(f ? c : {
            listener: c,
            once: !1
        });
        return this;
    }, d.on = c("addListener"), d.addOnceListener = function(a, b) {
        return this.addListener(a, {
            listener: b,
            once: !0
        });
    }, d.once = c("addOnceListener"), d.defineEvent = function(a) {
        return this.getListeners(a), this;
    }, d.defineEvents = function(a) {
        for (var b = 0; b < a.length; b += 1) this.defineEvent(a[b]);
        return this;
    }, d.removeListener = function(a, c) {
        var d, e, f = this.getListenersAsObject(a);
        for (e in f) f.hasOwnProperty(e) && (d = b(f[e], c), -1 !== d && f[e].splice(d, 1));
        return this;
    }, d.off = c("removeListener"), d.addListeners = function(a, b) {
        return this.manipulateListeners(!1, a, b);
    }, d.removeListeners = function(a, b) {
        return this.manipulateListeners(!0, a, b);
    }, d.manipulateListeners = function(a, b, c) {
        var d, e, f = a ? this.removeListener : this.addListener, g = a ? this.removeListeners : this.addListeners;
        if ("object" != typeof b || b instanceof RegExp) for (d = c.length; d--; ) f.call(this, b, c[d]); else for (d in b) b.hasOwnProperty(d) && (e = b[d]) && ("function" == typeof e ? f.call(this, d, e) : g.call(this, d, e));
        return this;
    }, d.removeEvent = function(a) {
        var b, c = typeof a, d = this._getEvents();
        if ("string" === c) delete d[a]; else if ("object" === c) for (b in d) d.hasOwnProperty(b) && a.test(b) && delete d[b]; else delete this._events;
        return this;
    }, d.removeAllListeners = c("removeEvent"), d.emitEvent = function(a, b) {
        var c, d, e, f, g = this.getListenersAsObject(a);
        for (e in g) if (g.hasOwnProperty(e)) for (d = g[e].length; d--; ) c = g[e][d], 
        c.once === !0 && this.removeListener(a, c.listener), f = c.listener.apply(this, b || []), 
        f === this._getOnceReturnValue() && this.removeListener(a, c.listener);
        return this;
    }, d.trigger = c("emitEvent"), d.emit = function(a) {
        var b = Array.prototype.slice.call(arguments, 1);
        return this.emitEvent(a, b);
    }, d.setOnceReturnValue = function(a) {
        return this._onceReturnValue = a, this;
    }, d._getOnceReturnValue = function() {
        return this.hasOwnProperty("_onceReturnValue") ? this._onceReturnValue : !0;
    }, d._getEvents = function() {
        return this._events || (this._events = {});
    }, a.noConflict = function() {
        return e.EventEmitter = f, a;
    }, "function" == typeof define && define.amd ? define(function() {
        return a;
    }) : "object" == typeof module && module.exports ? module.exports = a : this.EventEmitter = a;
}).call(this), function(a) {
    "use strict";
    var b = document.documentElement, c = function() {};
    b.addEventListener ? c = function(a, b, c) {
        a.addEventListener(b, c, !1);
    } : b.attachEvent && (c = function(b, c, d) {
        b[c + d] = d.handleEvent ? function() {
            var b = a.event;
            b.target = b.target || b.srcElement, d.handleEvent.call(d, b);
        } : function() {
            var c = a.event;
            c.target = c.target || c.srcElement, d.call(b, c);
        }, b.attachEvent("on" + c, b[c + d]);
    });
    var d = function() {};
    b.removeEventListener ? d = function(a, b, c) {
        a.removeEventListener(b, c, !1);
    } : b.detachEvent && (d = function(a, b, c) {
        a.detachEvent("on" + b, a[b + c]);
        try {
            delete a[b + c];
        } catch (d) {
            a[b + c] = void 0;
        }
    });
    var e = {
        bind: c,
        unbind: d
    };
    "function" == typeof define && define.amd ? define(e) : a.eventie = e;
}(this), function(a) {
    "use strict";
    function b(a, b) {
        for (var c in b) a[c] = b[c];
        return a;
    }
    function c(a) {
        return "[object Array]" === i.call(a);
    }
    function d(a) {
        var b = [];
        if (c(a)) b = a; else if ("number" == typeof a.length) for (var d = 0, e = a.length; e > d; d++) b.push(a[d]); else b.push(a);
        return b;
    }
    function e(a, c) {
        function e(a, c, g) {
            if (!(this instanceof e)) return new e(a, c);
            "string" == typeof a && (a = document.querySelectorAll(a)), this.elements = d(a), 
            this.options = b({}, this.options), "function" == typeof c ? g = c : b(this.options, c), 
            g && this.on("always", g), this.getImages(), f && (this.jqDeferred = new f.Deferred());
            var h = this;
            setTimeout(function() {
                h.check();
            });
        }
        function i(a) {
            this.img = a;
        }
        e.prototype = new a(), e.prototype.options = {}, e.prototype.getImages = function() {
            this.images = [];
            for (var a = 0, b = this.elements.length; b > a; a++) {
                var c = this.elements[a];
                "IMG" === c.nodeName && this.addImage(c);
                for (var d = c.querySelectorAll("img"), e = 0, f = d.length; f > e; e++) {
                    var g = d[e];
                    this.addImage(g);
                }
            }
        }, e.prototype.addImage = function(a) {
            var b = new i(a);
            this.images.push(b);
        }, e.prototype.check = function() {
            function a(a, e) {
                return b.options.debug && h && g.log("confirm", a, e), b.progress(a), c++, c === d && b.complete(), 
                !0;
            }
            var b = this, c = 0, d = this.images.length;
            if (this.hasAnyBroken = !1, !d) return void this.complete();
            for (var e = 0; d > e; e++) {
                var f = this.images[e];
                f.on("confirm", a), f.check();
            }
        }, e.prototype.progress = function(a) {
            this.hasAnyBroken = this.hasAnyBroken || !a.isLoaded, this.emit("progress", this, a), 
            this.jqDeferred && this.jqDeferred.notify(this, a);
        }, e.prototype.complete = function() {
            var a = this.hasAnyBroken ? "fail" : "done";
            if (this.isComplete = !0, this.emit(a, this), this.emit("always", this), this.jqDeferred) {
                var b = this.hasAnyBroken ? "reject" : "resolve";
                this.jqDeferred[b](this);
            }
        }, f && (f.fn.imagesLoaded = function(a, b) {
            var c = new e(this, a, b);
            return c.jqDeferred.promise(f(this));
        });
        var j = {};
        return i.prototype = new a(), i.prototype.check = function() {
            var a = j[this.img.src];
            if (a) return void this.useCached(a);
            if (j[this.img.src] = this, this.img.complete && void 0 !== this.img.naturalWidth) return void this.confirm(0 !== this.img.naturalWidth, "naturalWidth");
            var b = this.proxyImage = new Image();
            c.bind(b, "load", this), c.bind(b, "error", this), b.src = this.img.src;
        }, i.prototype.useCached = function(a) {
            if (a.isConfirmed) this.confirm(a.isLoaded, "cached was confirmed"); else {
                var b = this;
                a.on("confirm", function(a) {
                    return b.confirm(a.isLoaded, "cache emitted confirmed"), !0;
                });
            }
        }, i.prototype.confirm = function(a, b) {
            this.isConfirmed = !0, this.isLoaded = a, this.emit("confirm", this, b);
        }, i.prototype.handleEvent = function(a) {
            var b = "on" + a.type;
            this[b] && this[b](a);
        }, i.prototype.onload = function() {
            this.confirm(!0, "onload"), this.unbindProxyEvents();
        }, i.prototype.onerror = function() {
            this.confirm(!1, "onerror"), this.unbindProxyEvents();
        }, i.prototype.unbindProxyEvents = function() {
            c.unbind(this.proxyImage, "load", this), c.unbind(this.proxyImage, "error", this);
        }, e;
    }
    var f = a.jQuery, g = a.console, h = "undefined" != typeof g, i = Object.prototype.toString;
    "function" == typeof define && define.amd ? define([ "eventEmitter", "eventie" ], e) : a.imagesLoaded = e(a.EventEmitter, a.eventie);
}(window);

(function(factory) {
    if (typeof define === "function" && define.amd) {
        define([ "jquery" ], factory);
    } else {
        factory(jQuery);
    }
})(function($) {
    $.ui = $.ui || {};
    $.extend($.ui, {
        version: "1.11.4",
        keyCode: {
            BACKSPACE: 8,
            COMMA: 188,
            DELETE: 46,
            DOWN: 40,
            END: 35,
            ENTER: 13,
            ESCAPE: 27,
            HOME: 36,
            LEFT: 37,
            PAGE_DOWN: 34,
            PAGE_UP: 33,
            PERIOD: 190,
            RIGHT: 39,
            SPACE: 32,
            TAB: 9,
            UP: 38
        }
    });
    $.fn.extend({
        scrollParent: function(includeHidden) {
            var position = this.css("position"), excludeStaticParent = position === "absolute", overflowRegex = includeHidden ? /(auto|scroll|hidden)/ : /(auto|scroll)/, scrollParent = this.parents().filter(function() {
                var parent = $(this);
                if (excludeStaticParent && parent.css("position") === "static") {
                    return false;
                }
                return overflowRegex.test(parent.css("overflow") + parent.css("overflow-y") + parent.css("overflow-x"));
            }).eq(0);
            return position === "fixed" || !scrollParent.length ? $(this[0].ownerDocument || document) : scrollParent;
        },
        uniqueId: function() {
            var uuid = 0;
            return function() {
                return this.each(function() {
                    if (!this.id) {
                        this.id = "ui-id-" + ++uuid;
                    }
                });
            };
        }(),
        removeUniqueId: function() {
            return this.each(function() {
                if (/^ui-id-\d+$/.test(this.id)) {
                    $(this).removeAttr("id");
                }
            });
        }
    });
    function focusable(element, isTabIndexNotNaN) {
        var map, mapName, img, nodeName = element.nodeName.toLowerCase();
        if ("area" === nodeName) {
            map = element.parentNode;
            mapName = map.name;
            if (!element.href || !mapName || map.nodeName.toLowerCase() !== "map") {
                return false;
            }
            img = $("img[usemap='#" + mapName + "']")[0];
            return !!img && visible(img);
        }
        return (/^(input|select|textarea|button|object)$/.test(nodeName) ? !element.disabled : "a" === nodeName ? element.href || isTabIndexNotNaN : isTabIndexNotNaN) && visible(element);
    }
    function visible(element) {
        return $.expr.filters.visible(element) && !$(element).parents().addBack().filter(function() {
            return $.css(this, "visibility") === "hidden";
        }).length;
    }
    $.extend($.expr[":"], {
        data: $.expr.createPseudo ? $.expr.createPseudo(function(dataName) {
            return function(elem) {
                return !!$.data(elem, dataName);
            };
        }) : function(elem, i, match) {
            return !!$.data(elem, match[3]);
        },
        focusable: function(element) {
            return focusable(element, !isNaN($.attr(element, "tabindex")));
        },
        tabbable: function(element) {
            var tabIndex = $.attr(element, "tabindex"), isTabIndexNaN = isNaN(tabIndex);
            return (isTabIndexNaN || tabIndex >= 0) && focusable(element, !isTabIndexNaN);
        }
    });
    if (!$("<a>").outerWidth(1).jquery) {
        $.each([ "Width", "Height" ], function(i, name) {
            var side = name === "Width" ? [ "Left", "Right" ] : [ "Top", "Bottom" ], type = name.toLowerCase(), orig = {
                innerWidth: $.fn.innerWidth,
                innerHeight: $.fn.innerHeight,
                outerWidth: $.fn.outerWidth,
                outerHeight: $.fn.outerHeight
            };
            function reduce(elem, size, border, margin) {
                $.each(side, function() {
                    size -= parseFloat($.css(elem, "padding" + this)) || 0;
                    if (border) {
                        size -= parseFloat($.css(elem, "border" + this + "Width")) || 0;
                    }
                    if (margin) {
                        size -= parseFloat($.css(elem, "margin" + this)) || 0;
                    }
                });
                return size;
            }
            $.fn["inner" + name] = function(size) {
                if (size === undefined) {
                    return orig["inner" + name].call(this);
                }
                return this.each(function() {
                    $(this).css(type, reduce(this, size) + "px");
                });
            };
            $.fn["outer" + name] = function(size, margin) {
                if (typeof size !== "number") {
                    return orig["outer" + name].call(this, size);
                }
                return this.each(function() {
                    $(this).css(type, reduce(this, size, true, margin) + "px");
                });
            };
        });
    }
    if (!$.fn.addBack) {
        $.fn.addBack = function(selector) {
            return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
        };
    }
    if ($("<a>").data("a-b", "a").removeData("a-b").data("a-b")) {
        $.fn.removeData = function(removeData) {
            return function(key) {
                if (arguments.length) {
                    return removeData.call(this, $.camelCase(key));
                } else {
                    return removeData.call(this);
                }
            };
        }($.fn.removeData);
    }
    $.ui.ie = !!/msie [\w.]+/.exec(navigator.userAgent.toLowerCase());
    $.fn.extend({
        focus: function(orig) {
            return function(delay, fn) {
                return typeof delay === "number" ? this.each(function() {
                    var elem = this;
                    setTimeout(function() {
                        $(elem).focus();
                        if (fn) {
                            fn.call(elem);
                        }
                    }, delay);
                }) : orig.apply(this, arguments);
            };
        }($.fn.focus),
        disableSelection: function() {
            var eventType = "onselectstart" in document.createElement("div") ? "selectstart" : "mousedown";
            return function() {
                return this.bind(eventType + ".ui-disableSelection", function(event) {
                    event.preventDefault();
                });
            };
        }(),
        enableSelection: function() {
            return this.unbind(".ui-disableSelection");
        },
        zIndex: function(zIndex) {
            if (zIndex !== undefined) {
                return this.css("zIndex", zIndex);
            }
            if (this.length) {
                var elem = $(this[0]), position, value;
                while (elem.length && elem[0] !== document) {
                    position = elem.css("position");
                    if (position === "absolute" || position === "relative" || position === "fixed") {
                        value = parseInt(elem.css("zIndex"), 10);
                        if (!isNaN(value) && value !== 0) {
                            return value;
                        }
                    }
                    elem = elem.parent();
                }
            }
            return 0;
        }
    });
    $.ui.plugin = {
        add: function(module, option, set) {
            var i, proto = $.ui[module].prototype;
            for (i in set) {
                proto.plugins[i] = proto.plugins[i] || [];
                proto.plugins[i].push([ option, set[i] ]);
            }
        },
        call: function(instance, name, args, allowDisconnected) {
            var i, set = instance.plugins[name];
            if (!set) {
                return;
            }
            if (!allowDisconnected && (!instance.element[0].parentNode || instance.element[0].parentNode.nodeType === 11)) {
                return;
            }
            for (i = 0; i < set.length; i++) {
                if (instance.options[set[i][0]]) {
                    set[i][1].apply(instance.element, args);
                }
            }
        }
    };
});

(function(factory) {
    if (typeof define === "function" && define.amd) {
        define([ "jquery" ], factory);
    } else {
        factory(jQuery);
    }
})(function($) {
    var widget_uuid = 0, widget_slice = Array.prototype.slice;
    $.cleanData = function(orig) {
        return function(elems) {
            var events, elem, i;
            for (i = 0; (elem = elems[i]) != null; i++) {
                try {
                    events = $._data(elem, "events");
                    if (events && events.remove) {
                        $(elem).triggerHandler("remove");
                    }
                } catch (e) {}
            }
            orig(elems);
        };
    }($.cleanData);
    $.widget = function(name, base, prototype) {
        var fullName, existingConstructor, constructor, basePrototype, proxiedPrototype = {}, namespace = name.split(".")[0];
        name = name.split(".")[1];
        fullName = namespace + "-" + name;
        if (!prototype) {
            prototype = base;
            base = $.Widget;
        }
        $.expr[":"][fullName.toLowerCase()] = function(elem) {
            return !!$.data(elem, fullName);
        };
        $[namespace] = $[namespace] || {};
        existingConstructor = $[namespace][name];
        constructor = $[namespace][name] = function(options, element) {
            if (!this._createWidget) {
                return new constructor(options, element);
            }
            if (arguments.length) {
                this._createWidget(options, element);
            }
        };
        $.extend(constructor, existingConstructor, {
            version: prototype.version,
            _proto: $.extend({}, prototype),
            _childConstructors: []
        });
        basePrototype = new base();
        basePrototype.options = $.widget.extend({}, basePrototype.options);
        $.each(prototype, function(prop, value) {
            if (!$.isFunction(value)) {
                proxiedPrototype[prop] = value;
                return;
            }
            proxiedPrototype[prop] = function() {
                var _super = function() {
                    return base.prototype[prop].apply(this, arguments);
                }, _superApply = function(args) {
                    return base.prototype[prop].apply(this, args);
                };
                return function() {
                    var __super = this._super, __superApply = this._superApply, returnValue;
                    this._super = _super;
                    this._superApply = _superApply;
                    returnValue = value.apply(this, arguments);
                    this._super = __super;
                    this._superApply = __superApply;
                    return returnValue;
                };
            }();
        });
        constructor.prototype = $.widget.extend(basePrototype, {
            widgetEventPrefix: existingConstructor ? basePrototype.widgetEventPrefix || name : name
        }, proxiedPrototype, {
            constructor: constructor,
            namespace: namespace,
            widgetName: name,
            widgetFullName: fullName
        });
        if (existingConstructor) {
            $.each(existingConstructor._childConstructors, function(i, child) {
                var childPrototype = child.prototype;
                $.widget(childPrototype.namespace + "." + childPrototype.widgetName, constructor, child._proto);
            });
            delete existingConstructor._childConstructors;
        } else {
            base._childConstructors.push(constructor);
        }
        $.widget.bridge(name, constructor);
        return constructor;
    };
    $.widget.extend = function(target) {
        var input = widget_slice.call(arguments, 1), inputIndex = 0, inputLength = input.length, key, value;
        for (;inputIndex < inputLength; inputIndex++) {
            for (key in input[inputIndex]) {
                value = input[inputIndex][key];
                if (input[inputIndex].hasOwnProperty(key) && value !== undefined) {
                    if ($.isPlainObject(value)) {
                        target[key] = $.isPlainObject(target[key]) ? $.widget.extend({}, target[key], value) : $.widget.extend({}, value);
                    } else {
                        target[key] = value;
                    }
                }
            }
        }
        return target;
    };
    $.widget.bridge = function(name, object) {
        var fullName = object.prototype.widgetFullName || name;
        $.fn[name] = function(options) {
            var isMethodCall = typeof options === "string", args = widget_slice.call(arguments, 1), returnValue = this;
            if (isMethodCall) {
                this.each(function() {
                    var methodValue, instance = $.data(this, fullName);
                    if (options === "instance") {
                        returnValue = instance;
                        return false;
                    }
                    if (!instance) {
                        return $.error("cannot call methods on " + name + " prior to initialization; " + "attempted to call method '" + options + "'");
                    }
                    if (!$.isFunction(instance[options]) || options.charAt(0) === "_") {
                        return $.error("no such method '" + options + "' for " + name + " widget instance");
                    }
                    methodValue = instance[options].apply(instance, args);
                    if (methodValue !== instance && methodValue !== undefined) {
                        returnValue = methodValue && methodValue.jquery ? returnValue.pushStack(methodValue.get()) : methodValue;
                        return false;
                    }
                });
            } else {
                if (args.length) {
                    options = $.widget.extend.apply(null, [ options ].concat(args));
                }
                this.each(function() {
                    var instance = $.data(this, fullName);
                    if (instance) {
                        instance.option(options || {});
                        if (instance._init) {
                            instance._init();
                        }
                    } else {
                        $.data(this, fullName, new object(options, this));
                    }
                });
            }
            return returnValue;
        };
    };
    $.Widget = function() {};
    $.Widget._childConstructors = [];
    $.Widget.prototype = {
        widgetName: "widget",
        widgetEventPrefix: "",
        defaultElement: "<div>",
        options: {
            disabled: false,
            create: null
        },
        _createWidget: function(options, element) {
            element = $(element || this.defaultElement || this)[0];
            this.element = $(element);
            this.uuid = widget_uuid++;
            this.eventNamespace = "." + this.widgetName + this.uuid;
            this.bindings = $();
            this.hoverable = $();
            this.focusable = $();
            if (element !== this) {
                $.data(element, this.widgetFullName, this);
                this._on(true, this.element, {
                    remove: function(event) {
                        if (event.target === element) {
                            this.destroy();
                        }
                    }
                });
                this.document = $(element.style ? element.ownerDocument : element.document || element);
                this.window = $(this.document[0].defaultView || this.document[0].parentWindow);
            }
            this.options = $.widget.extend({}, this.options, this._getCreateOptions(), options);
            this._create();
            this._trigger("create", null, this._getCreateEventData());
            this._init();
        },
        _getCreateOptions: $.noop,
        _getCreateEventData: $.noop,
        _create: $.noop,
        _init: $.noop,
        destroy: function() {
            this._destroy();
            this.element.unbind(this.eventNamespace).removeData(this.widgetFullName).removeData($.camelCase(this.widgetFullName));
            this.widget().unbind(this.eventNamespace).removeAttr("aria-disabled").removeClass(this.widgetFullName + "-disabled " + "ui-state-disabled");
            this.bindings.unbind(this.eventNamespace);
            this.hoverable.removeClass("ui-state-hover");
            this.focusable.removeClass("ui-state-focus");
        },
        _destroy: $.noop,
        widget: function() {
            return this.element;
        },
        option: function(key, value) {
            var options = key, parts, curOption, i;
            if (arguments.length === 0) {
                return $.widget.extend({}, this.options);
            }
            if (typeof key === "string") {
                options = {};
                parts = key.split(".");
                key = parts.shift();
                if (parts.length) {
                    curOption = options[key] = $.widget.extend({}, this.options[key]);
                    for (i = 0; i < parts.length - 1; i++) {
                        curOption[parts[i]] = curOption[parts[i]] || {};
                        curOption = curOption[parts[i]];
                    }
                    key = parts.pop();
                    if (arguments.length === 1) {
                        return curOption[key] === undefined ? null : curOption[key];
                    }
                    curOption[key] = value;
                } else {
                    if (arguments.length === 1) {
                        return this.options[key] === undefined ? null : this.options[key];
                    }
                    options[key] = value;
                }
            }
            this._setOptions(options);
            return this;
        },
        _setOptions: function(options) {
            var key;
            for (key in options) {
                this._setOption(key, options[key]);
            }
            return this;
        },
        _setOption: function(key, value) {
            this.options[key] = value;
            if (key === "disabled") {
                this.widget().toggleClass(this.widgetFullName + "-disabled", !!value);
                if (value) {
                    this.hoverable.removeClass("ui-state-hover");
                    this.focusable.removeClass("ui-state-focus");
                }
            }
            return this;
        },
        enable: function() {
            return this._setOptions({
                disabled: false
            });
        },
        disable: function() {
            return this._setOptions({
                disabled: true
            });
        },
        _on: function(suppressDisabledCheck, element, handlers) {
            var delegateElement, instance = this;
            if (typeof suppressDisabledCheck !== "boolean") {
                handlers = element;
                element = suppressDisabledCheck;
                suppressDisabledCheck = false;
            }
            if (!handlers) {
                handlers = element;
                element = this.element;
                delegateElement = this.widget();
            } else {
                element = delegateElement = $(element);
                this.bindings = this.bindings.add(element);
            }
            $.each(handlers, function(event, handler) {
                function handlerProxy() {
                    if (!suppressDisabledCheck && (instance.options.disabled === true || $(this).hasClass("ui-state-disabled"))) {
                        return;
                    }
                    return (typeof handler === "string" ? instance[handler] : handler).apply(instance, arguments);
                }
                if (typeof handler !== "string") {
                    handlerProxy.guid = handler.guid = handler.guid || handlerProxy.guid || $.guid++;
                }
                var match = event.match(/^([\w:-]*)\s*(.*)$/), eventName = match[1] + instance.eventNamespace, selector = match[2];
                if (selector) {
                    delegateElement.delegate(selector, eventName, handlerProxy);
                } else {
                    element.bind(eventName, handlerProxy);
                }
            });
        },
        _off: function(element, eventName) {
            eventName = (eventName || "").split(" ").join(this.eventNamespace + " ") + this.eventNamespace;
            element.unbind(eventName).undelegate(eventName);
            this.bindings = $(this.bindings.not(element).get());
            this.focusable = $(this.focusable.not(element).get());
            this.hoverable = $(this.hoverable.not(element).get());
        },
        _delay: function(handler, delay) {
            function handlerProxy() {
                return (typeof handler === "string" ? instance[handler] : handler).apply(instance, arguments);
            }
            var instance = this;
            return setTimeout(handlerProxy, delay || 0);
        },
        _hoverable: function(element) {
            this.hoverable = this.hoverable.add(element);
            this._on(element, {
                mouseenter: function(event) {
                    $(event.currentTarget).addClass("ui-state-hover");
                },
                mouseleave: function(event) {
                    $(event.currentTarget).removeClass("ui-state-hover");
                }
            });
        },
        _focusable: function(element) {
            this.focusable = this.focusable.add(element);
            this._on(element, {
                focusin: function(event) {
                    $(event.currentTarget).addClass("ui-state-focus");
                },
                focusout: function(event) {
                    $(event.currentTarget).removeClass("ui-state-focus");
                }
            });
        },
        _trigger: function(type, event, data) {
            var prop, orig, callback = this.options[type];
            data = data || {};
            event = $.Event(event);
            event.type = (type === this.widgetEventPrefix ? type : this.widgetEventPrefix + type).toLowerCase();
            event.target = this.element[0];
            orig = event.originalEvent;
            if (orig) {
                for (prop in orig) {
                    if (!(prop in event)) {
                        event[prop] = orig[prop];
                    }
                }
            }
            this.element.trigger(event, data);
            return !($.isFunction(callback) && callback.apply(this.element[0], [ event ].concat(data)) === false || event.isDefaultPrevented());
        }
    };
    $.each({
        show: "fadeIn",
        hide: "fadeOut"
    }, function(method, defaultEffect) {
        $.Widget.prototype["_" + method] = function(element, options, callback) {
            if (typeof options === "string") {
                options = {
                    effect: options
                };
            }
            var hasOptions, effectName = !options ? method : options === true || typeof options === "number" ? defaultEffect : options.effect || defaultEffect;
            options = options || {};
            if (typeof options === "number") {
                options = {
                    duration: options
                };
            }
            hasOptions = !$.isEmptyObject(options);
            options.complete = callback;
            if (options.delay) {
                element.delay(options.delay);
            }
            if (hasOptions && $.effects && $.effects.effect[effectName]) {
                element[method](options);
            } else if (effectName !== method && element[effectName]) {
                element[effectName](options.duration, options.easing, callback);
            } else {
                element.queue(function(next) {
                    $(this)[method]();
                    if (callback) {
                        callback.call(element[0]);
                    }
                    next();
                });
            }
        };
    });
    return $.widget;
});

(function(factory) {
    if (typeof define === "function" && define.amd) {
        define([ "jquery", "./core", "./widget", "./position", "./menu" ], factory);
    } else {
        factory(jQuery);
    }
})(function($) {
    $.widget("ui.autocomplete", {
        version: "1.11.4",
        defaultElement: "<input>",
        options: {
            appendTo: null,
            autoFocus: false,
            delay: 300,
            minLength: 1,
            position: {
                my: "left top",
                at: "left bottom",
                collision: "none"
            },
            source: null,
            change: null,
            close: null,
            focus: null,
            open: null,
            response: null,
            search: null,
            select: null
        },
        requestIndex: 0,
        pending: 0,
        _create: function() {
            var suppressKeyPress, suppressKeyPressRepeat, suppressInput, nodeName = this.element[0].nodeName.toLowerCase(), isTextarea = nodeName === "textarea", isInput = nodeName === "input";
            this.isMultiLine = isTextarea ? true : isInput ? false : this.element.prop("isContentEditable");
            this.valueMethod = this.element[isTextarea || isInput ? "val" : "text"];
            this.isNewMenu = true;
            this.element.addClass("ui-autocomplete-input").attr("autocomplete", "off");
            this._on(this.element, {
                keydown: function(event) {
                    if (this.element.prop("readOnly")) {
                        suppressKeyPress = true;
                        suppressInput = true;
                        suppressKeyPressRepeat = true;
                        return;
                    }
                    suppressKeyPress = false;
                    suppressInput = false;
                    suppressKeyPressRepeat = false;
                    var keyCode = $.ui.keyCode;
                    switch (event.keyCode) {
                      case keyCode.PAGE_UP:
                        suppressKeyPress = true;
                        this._move("previousPage", event);
                        break;

                      case keyCode.PAGE_DOWN:
                        suppressKeyPress = true;
                        this._move("nextPage", event);
                        break;

                      case keyCode.UP:
                        suppressKeyPress = true;
                        this._keyEvent("previous", event);
                        break;

                      case keyCode.DOWN:
                        suppressKeyPress = true;
                        this._keyEvent("next", event);
                        break;

                      case keyCode.ENTER:
                        if (this.menu.active) {
                            suppressKeyPress = true;
                            event.preventDefault();
                            this.menu.select(event);
                        }
                        break;

                      case keyCode.TAB:
                        if (this.menu.active) {
                            this.menu.select(event);
                        }
                        break;

                      case keyCode.ESCAPE:
                        if (this.menu.element.is(":visible")) {
                            if (!this.isMultiLine) {
                                this._value(this.term);
                            }
                            this.close(event);
                            event.preventDefault();
                        }
                        break;

                      default:
                        suppressKeyPressRepeat = true;
                        this._searchTimeout(event);
                        break;
                    }
                },
                keypress: function(event) {
                    if (suppressKeyPress) {
                        suppressKeyPress = false;
                        if (!this.isMultiLine || this.menu.element.is(":visible")) {
                            event.preventDefault();
                        }
                        return;
                    }
                    if (suppressKeyPressRepeat) {
                        return;
                    }
                    var keyCode = $.ui.keyCode;
                    switch (event.keyCode) {
                      case keyCode.PAGE_UP:
                        this._move("previousPage", event);
                        break;

                      case keyCode.PAGE_DOWN:
                        this._move("nextPage", event);
                        break;

                      case keyCode.UP:
                        this._keyEvent("previous", event);
                        break;

                      case keyCode.DOWN:
                        this._keyEvent("next", event);
                        break;
                    }
                },
                input: function(event) {
                    if (suppressInput) {
                        suppressInput = false;
                        event.preventDefault();
                        return;
                    }
                    this._searchTimeout(event);
                },
                focus: function() {
                    this.selectedItem = null;
                    this.previous = this._value();
                },
                blur: function(event) {
                    if (this.cancelBlur) {
                        delete this.cancelBlur;
                        return;
                    }
                    clearTimeout(this.searching);
                    this.close(event);
                    this._change(event);
                }
            });
            this._initSource();
            this.menu = $("<ul>").addClass("ui-autocomplete ui-front").appendTo(this._appendTo()).menu({
                role: null
            }).hide().menu("instance");
            this._on(this.menu.element, {
                mousedown: function(event) {
                    event.preventDefault();
                    this.cancelBlur = true;
                    this._delay(function() {
                        delete this.cancelBlur;
                    });
                    var menuElement = this.menu.element[0];
                    if (!$(event.target).closest(".ui-menu-item").length) {
                        this._delay(function() {
                            var that = this;
                            this.document.one("mousedown", function(event) {
                                if (event.target !== that.element[0] && event.target !== menuElement && !$.contains(menuElement, event.target)) {
                                    that.close();
                                }
                            });
                        });
                    }
                },
                menufocus: function(event, ui) {
                    var label, item;
                    if (this.isNewMenu) {
                        this.isNewMenu = false;
                        if (event.originalEvent && /^mouse/.test(event.originalEvent.type)) {
                            this.menu.blur();
                            this.document.one("mousemove", function() {
                                $(event.target).trigger(event.originalEvent);
                            });
                            return;
                        }
                    }
                    item = ui.item.data("ui-autocomplete-item");
                    if (false !== this._trigger("focus", event, {
                        item: item
                    })) {
                        if (event.originalEvent && /^key/.test(event.originalEvent.type)) {
                            this._value(item.value);
                        }
                    }
                    label = ui.item.attr("aria-label") || item.value;
                    if (label && $.trim(label).length) {
                        this.liveRegion.children().hide();
                        $("<div>").text(label).appendTo(this.liveRegion);
                    }
                },
                menuselect: function(event, ui) {
                    var item = ui.item.data("ui-autocomplete-item"), previous = this.previous;
                    if (this.element[0] !== this.document[0].activeElement) {
                        this.element.focus();
                        this.previous = previous;
                        this._delay(function() {
                            this.previous = previous;
                            this.selectedItem = item;
                        });
                    }
                    if (false !== this._trigger("select", event, {
                        item: item
                    })) {
                        this._value(item.value);
                    }
                    this.term = this._value();
                    this.close(event);
                    this.selectedItem = item;
                }
            });
            this.liveRegion = $("<span>", {
                role: "status",
                "aria-live": "assertive",
                "aria-relevant": "additions"
            }).addClass("ui-helper-hidden-accessible").appendTo(this.document[0].body);
            this._on(this.window, {
                beforeunload: function() {
                    this.element.removeAttr("autocomplete");
                }
            });
        },
        _destroy: function() {
            clearTimeout(this.searching);
            this.element.removeClass("ui-autocomplete-input").removeAttr("autocomplete");
            this.menu.element.remove();
            this.liveRegion.remove();
        },
        _setOption: function(key, value) {
            this._super(key, value);
            if (key === "source") {
                this._initSource();
            }
            if (key === "appendTo") {
                this.menu.element.appendTo(this._appendTo());
            }
            if (key === "disabled" && value && this.xhr) {
                this.xhr.abort();
            }
        },
        _appendTo: function() {
            var element = this.options.appendTo;
            if (element) {
                element = element.jquery || element.nodeType ? $(element) : this.document.find(element).eq(0);
            }
            if (!element || !element[0]) {
                element = this.element.closest(".ui-front");
            }
            if (!element.length) {
                element = this.document[0].body;
            }
            return element;
        },
        _initSource: function() {
            var array, url, that = this;
            if ($.isArray(this.options.source)) {
                array = this.options.source;
                this.source = function(request, response) {
                    response($.ui.autocomplete.filter(array, request.term));
                };
            } else if (typeof this.options.source === "string") {
                url = this.options.source;
                this.source = function(request, response) {
                    if (that.xhr) {
                        that.xhr.abort();
                    }
                    that.xhr = $.ajax({
                        url: url,
                        data: request,
                        dataType: "json",
                        success: function(data) {
                            response(data);
                        },
                        error: function() {
                            response([]);
                        }
                    });
                };
            } else {
                this.source = this.options.source;
            }
        },
        _searchTimeout: function(event) {
            clearTimeout(this.searching);
            this.searching = this._delay(function() {
                var equalValues = this.term === this._value(), menuVisible = this.menu.element.is(":visible"), modifierKey = event.altKey || event.ctrlKey || event.metaKey || event.shiftKey;
                if (!equalValues || equalValues && !menuVisible && !modifierKey) {
                    this.selectedItem = null;
                    this.search(null, event);
                }
            }, this.options.delay);
        },
        search: function(value, event) {
            value = value != null ? value : this._value();
            this.term = this._value();
            if (value.length < this.options.minLength) {
                return this.close(event);
            }
            if (this._trigger("search", event) === false) {
                return;
            }
            return this._search(value);
        },
        _search: function(value) {
            this.pending++;
            this.element.addClass("ui-autocomplete-loading");
            this.cancelSearch = false;
            this.source({
                term: value
            }, this._response());
        },
        _response: function() {
            var index = ++this.requestIndex;
            return $.proxy(function(content) {
                if (index === this.requestIndex) {
                    this.__response(content);
                }
                this.pending--;
                if (!this.pending) {
                    this.element.removeClass("ui-autocomplete-loading");
                }
            }, this);
        },
        __response: function(content) {
            if (content) {
                content = this._normalize(content);
            }
            this._trigger("response", null, {
                content: content
            });
            if (!this.options.disabled && content && content.length && !this.cancelSearch) {
                this._suggest(content);
                this._trigger("open");
            } else {
                this._close();
            }
        },
        close: function(event) {
            this.cancelSearch = true;
            this._close(event);
        },
        _close: function(event) {
            if (this.menu.element.is(":visible")) {
                this.menu.element.hide();
                this.menu.blur();
                this.isNewMenu = true;
                this._trigger("close", event);
            }
        },
        _change: function(event) {
            if (this.previous !== this._value()) {
                this._trigger("change", event, {
                    item: this.selectedItem
                });
            }
        },
        _normalize: function(items) {
            if (items.length && items[0].label && items[0].value) {
                return items;
            }
            return $.map(items, function(item) {
                if (typeof item === "string") {
                    return {
                        label: item,
                        value: item
                    };
                }
                return $.extend({}, item, {
                    label: item.label || item.value,
                    value: item.value || item.label
                });
            });
        },
        _suggest: function(items) {
            var ul = this.menu.element.empty();
            this._renderMenu(ul, items);
            this.isNewMenu = true;
            this.menu.refresh();
            ul.show();
            this._resizeMenu();
            ul.position($.extend({
                of: this.element
            }, this.options.position));
            if (this.options.autoFocus) {
                this.menu.next();
            }
        },
        _resizeMenu: function() {
            var ul = this.menu.element;
            ul.outerWidth(Math.max(ul.width("").outerWidth() + 1, this.element.outerWidth()));
        },
        _renderMenu: function(ul, items) {
            var that = this;
            $.each(items, function(index, item) {
                that._renderItemData(ul, item);
            });
        },
        _renderItemData: function(ul, item) {
            return this._renderItem(ul, item).data("ui-autocomplete-item", item);
        },
        _renderItem: function(ul, item) {
            return $("<li>").text(item.label).appendTo(ul);
        },
        _move: function(direction, event) {
            if (!this.menu.element.is(":visible")) {
                this.search(null, event);
                return;
            }
            if (this.menu.isFirstItem() && /^previous/.test(direction) || this.menu.isLastItem() && /^next/.test(direction)) {
                if (!this.isMultiLine) {
                    this._value(this.term);
                }
                this.menu.blur();
                return;
            }
            this.menu[direction](event);
        },
        widget: function() {
            return this.menu.element;
        },
        _value: function() {
            return this.valueMethod.apply(this.element, arguments);
        },
        _keyEvent: function(keyEvent, event) {
            if (!this.isMultiLine || this.menu.element.is(":visible")) {
                this._move(keyEvent, event);
                event.preventDefault();
            }
        }
    });
    $.extend($.ui.autocomplete, {
        escapeRegex: function(value) {
            return value.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
        },
        filter: function(array, term) {
            var matcher = new RegExp($.ui.autocomplete.escapeRegex(term), "i");
            return $.grep(array, function(value) {
                return matcher.test(value.label || value.value || value);
            });
        }
    });
    $.widget("ui.autocomplete", $.ui.autocomplete, {
        options: {
            messages: {
                noResults: "No search results.",
                results: function(amount) {
                    return amount + (amount > 1 ? " results are" : " result is") + " available, use up and down arrow keys to navigate.";
                }
            }
        },
        __response: function(content) {
            var message;
            this._superApply(arguments);
            if (this.options.disabled || this.cancelSearch) {
                return;
            }
            if (content && content.length) {
                message = this.options.messages.results(content.length);
            } else {
                message = this.options.messages.noResults;
            }
            this.liveRegion.children().hide();
            $("<div>").text(message).appendTo(this.liveRegion);
        }
    });
    return $.ui.autocomplete;
});

(function(factory) {
    if (typeof define === "function" && define.amd) {
        define([ "jquery", "./core" ], factory);
    } else {
        factory(jQuery);
    }
})(function($) {
    $.extend($.ui, {
        datepicker: {
            version: "1.11.4"
        }
    });
    var datepicker_instActive;
    function datepicker_getZindex(elem) {
        var position, value;
        while (elem.length && elem[0] !== document) {
            position = elem.css("position");
            if (position === "absolute" || position === "relative" || position === "fixed") {
                value = parseInt(elem.css("zIndex"), 10);
                if (!isNaN(value) && value !== 0) {
                    return value;
                }
            }
            elem = elem.parent();
        }
        return 0;
    }
    function Datepicker() {
        this._curInst = null;
        this._keyEvent = false;
        this._disabledInputs = [];
        this._datepickerShowing = false;
        this._inDialog = false;
        this._mainDivId = "ui-datepicker-div";
        this._inlineClass = "ui-datepicker-inline";
        this._appendClass = "ui-datepicker-append";
        this._triggerClass = "ui-datepicker-trigger";
        this._dialogClass = "ui-datepicker-dialog";
        this._disableClass = "ui-datepicker-disabled";
        this._unselectableClass = "ui-datepicker-unselectable";
        this._currentClass = "ui-datepicker-current-day";
        this._dayOverClass = "ui-datepicker-days-cell-over";
        this.regional = [];
        this.regional[""] = {
            closeText: "Done",
            prevText: "Prev",
            nextText: "Next",
            currentText: "Today",
            monthNames: [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ],
            monthNamesShort: [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ],
            dayNames: [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ],
            dayNamesShort: [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ],
            dayNamesMin: [ "Su", "Mo", "Tu", "We", "Th", "Fr", "Sa" ],
            weekHeader: "Wk",
            dateFormat: "mm/dd/yy",
            firstDay: 0,
            isRTL: false,
            showMonthAfterYear: false,
            yearSuffix: ""
        };
        this._defaults = {
            showOn: "focus",
            showAnim: "fadeIn",
            showOptions: {},
            defaultDate: null,
            appendText: "",
            buttonText: "...",
            buttonImage: "",
            buttonImageOnly: false,
            hideIfNoPrevNext: false,
            navigationAsDateFormat: false,
            gotoCurrent: false,
            changeMonth: false,
            changeYear: false,
            yearRange: "c-10:c+10",
            showOtherMonths: false,
            selectOtherMonths: false,
            showWeek: false,
            calculateWeek: this.iso8601Week,
            shortYearCutoff: "+10",
            minDate: null,
            maxDate: null,
            duration: "fast",
            beforeShowDay: null,
            beforeShow: null,
            onSelect: null,
            onChangeMonthYear: null,
            onClose: null,
            numberOfMonths: 1,
            showCurrentAtPos: 0,
            stepMonths: 1,
            stepBigMonths: 12,
            altField: "",
            altFormat: "",
            constrainInput: true,
            showButtonPanel: false,
            autoSize: false,
            disabled: false
        };
        $.extend(this._defaults, this.regional[""]);
        this.regional.en = $.extend(true, {}, this.regional[""]);
        this.regional["en-US"] = $.extend(true, {}, this.regional.en);
        this.dpDiv = datepicker_bindHover($("<div id='" + this._mainDivId + "' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>"));
    }
    $.extend(Datepicker.prototype, {
        markerClassName: "hasDatepicker",
        maxRows: 4,
        _widgetDatepicker: function() {
            return this.dpDiv;
        },
        setDefaults: function(settings) {
            datepicker_extendRemove(this._defaults, settings || {});
            return this;
        },
        _attachDatepicker: function(target, settings) {
            var nodeName, inline, inst;
            nodeName = target.nodeName.toLowerCase();
            inline = nodeName === "div" || nodeName === "span";
            if (!target.id) {
                this.uuid += 1;
                target.id = "dp" + this.uuid;
            }
            inst = this._newInst($(target), inline);
            inst.settings = $.extend({}, settings || {});
            if (nodeName === "input") {
                this._connectDatepicker(target, inst);
            } else if (inline) {
                this._inlineDatepicker(target, inst);
            }
        },
        _newInst: function(target, inline) {
            var id = target[0].id.replace(/([^A-Za-z0-9_\-])/g, "\\\\$1");
            return {
                id: id,
                input: target,
                selectedDay: 0,
                selectedMonth: 0,
                selectedYear: 0,
                drawMonth: 0,
                drawYear: 0,
                inline: inline,
                dpDiv: !inline ? this.dpDiv : datepicker_bindHover($("<div class='" + this._inlineClass + " ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>"))
            };
        },
        _connectDatepicker: function(target, inst) {
            var input = $(target);
            inst.append = $([]);
            inst.trigger = $([]);
            if (input.hasClass(this.markerClassName)) {
                return;
            }
            this._attachments(input, inst);
            input.addClass(this.markerClassName).keydown(this._doKeyDown).keypress(this._doKeyPress).keyup(this._doKeyUp);
            this._autoSize(inst);
            $.data(target, "datepicker", inst);
            if (inst.settings.disabled) {
                this._disableDatepicker(target);
            }
        },
        _attachments: function(input, inst) {
            var showOn, buttonText, buttonImage, appendText = this._get(inst, "appendText"), isRTL = this._get(inst, "isRTL");
            if (inst.append) {
                inst.append.remove();
            }
            if (appendText) {
                inst.append = $("<span class='" + this._appendClass + "'>" + appendText + "</span>");
                input[isRTL ? "before" : "after"](inst.append);
            }
            input.unbind("focus", this._showDatepicker);
            if (inst.trigger) {
                inst.trigger.remove();
            }
            showOn = this._get(inst, "showOn");
            if (showOn === "focus" || showOn === "both") {
                input.focus(this._showDatepicker);
            }
            if (showOn === "button" || showOn === "both") {
                buttonText = this._get(inst, "buttonText");
                buttonImage = this._get(inst, "buttonImage");
                inst.trigger = $(this._get(inst, "buttonImageOnly") ? $("<img/>").addClass(this._triggerClass).attr({
                    src: buttonImage,
                    alt: buttonText,
                    title: buttonText
                }) : $("<button type='button'></button>").addClass(this._triggerClass).html(!buttonImage ? buttonText : $("<img/>").attr({
                    src: buttonImage,
                    alt: buttonText,
                    title: buttonText
                })));
                input[isRTL ? "before" : "after"](inst.trigger);
                inst.trigger.click(function() {
                    if ($.datepicker._datepickerShowing && $.datepicker._lastInput === input[0]) {
                        $.datepicker._hideDatepicker();
                    } else if ($.datepicker._datepickerShowing && $.datepicker._lastInput !== input[0]) {
                        $.datepicker._hideDatepicker();
                        $.datepicker._showDatepicker(input[0]);
                    } else {
                        $.datepicker._showDatepicker(input[0]);
                    }
                    return false;
                });
            }
        },
        _autoSize: function(inst) {
            if (this._get(inst, "autoSize") && !inst.inline) {
                var findMax, max, maxI, i, date = new Date(2009, 12 - 1, 20), dateFormat = this._get(inst, "dateFormat");
                if (dateFormat.match(/[DM]/)) {
                    findMax = function(names) {
                        max = 0;
                        maxI = 0;
                        for (i = 0; i < names.length; i++) {
                            if (names[i].length > max) {
                                max = names[i].length;
                                maxI = i;
                            }
                        }
                        return maxI;
                    };
                    date.setMonth(findMax(this._get(inst, dateFormat.match(/MM/) ? "monthNames" : "monthNamesShort")));
                    date.setDate(findMax(this._get(inst, dateFormat.match(/DD/) ? "dayNames" : "dayNamesShort")) + 20 - date.getDay());
                }
                inst.input.attr("size", this._formatDate(inst, date).length);
            }
        },
        _inlineDatepicker: function(target, inst) {
            var divSpan = $(target);
            if (divSpan.hasClass(this.markerClassName)) {
                return;
            }
            divSpan.addClass(this.markerClassName).append(inst.dpDiv);
            $.data(target, "datepicker", inst);
            this._setDate(inst, this._getDefaultDate(inst), true);
            this._updateDatepicker(inst);
            this._updateAlternate(inst);
            if (inst.settings.disabled) {
                this._disableDatepicker(target);
            }
            inst.dpDiv.css("display", "block");
        },
        _dialogDatepicker: function(input, date, onSelect, settings, pos) {
            var id, browserWidth, browserHeight, scrollX, scrollY, inst = this._dialogInst;
            if (!inst) {
                this.uuid += 1;
                id = "dp" + this.uuid;
                this._dialogInput = $("<input type='text' id='" + id + "' style='position: absolute; top: -100px; width: 0px;'/>");
                this._dialogInput.keydown(this._doKeyDown);
                $("body").append(this._dialogInput);
                inst = this._dialogInst = this._newInst(this._dialogInput, false);
                inst.settings = {};
                $.data(this._dialogInput[0], "datepicker", inst);
            }
            datepicker_extendRemove(inst.settings, settings || {});
            date = date && date.constructor === Date ? this._formatDate(inst, date) : date;
            this._dialogInput.val(date);
            this._pos = pos ? pos.length ? pos : [ pos.pageX, pos.pageY ] : null;
            if (!this._pos) {
                browserWidth = document.documentElement.clientWidth;
                browserHeight = document.documentElement.clientHeight;
                scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;
                scrollY = document.documentElement.scrollTop || document.body.scrollTop;
                this._pos = [ browserWidth / 2 - 100 + scrollX, browserHeight / 2 - 150 + scrollY ];
            }
            this._dialogInput.css("left", this._pos[0] + 20 + "px").css("top", this._pos[1] + "px");
            inst.settings.onSelect = onSelect;
            this._inDialog = true;
            this.dpDiv.addClass(this._dialogClass);
            this._showDatepicker(this._dialogInput[0]);
            if ($.blockUI) {
                $.blockUI(this.dpDiv);
            }
            $.data(this._dialogInput[0], "datepicker", inst);
            return this;
        },
        _destroyDatepicker: function(target) {
            var nodeName, $target = $(target), inst = $.data(target, "datepicker");
            if (!$target.hasClass(this.markerClassName)) {
                return;
            }
            nodeName = target.nodeName.toLowerCase();
            $.removeData(target, "datepicker");
            if (nodeName === "input") {
                inst.append.remove();
                inst.trigger.remove();
                $target.removeClass(this.markerClassName).unbind("focus", this._showDatepicker).unbind("keydown", this._doKeyDown).unbind("keypress", this._doKeyPress).unbind("keyup", this._doKeyUp);
            } else if (nodeName === "div" || nodeName === "span") {
                $target.removeClass(this.markerClassName).empty();
            }
            if (datepicker_instActive === inst) {
                datepicker_instActive = null;
            }
        },
        _enableDatepicker: function(target) {
            var nodeName, inline, $target = $(target), inst = $.data(target, "datepicker");
            if (!$target.hasClass(this.markerClassName)) {
                return;
            }
            nodeName = target.nodeName.toLowerCase();
            if (nodeName === "input") {
                target.disabled = false;
                inst.trigger.filter("button").each(function() {
                    this.disabled = false;
                }).end().filter("img").css({
                    opacity: "1.0",
                    cursor: ""
                });
            } else if (nodeName === "div" || nodeName === "span") {
                inline = $target.children("." + this._inlineClass);
                inline.children().removeClass("ui-state-disabled");
                inline.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled", false);
            }
            this._disabledInputs = $.map(this._disabledInputs, function(value) {
                return value === target ? null : value;
            });
        },
        _disableDatepicker: function(target) {
            var nodeName, inline, $target = $(target), inst = $.data(target, "datepicker");
            if (!$target.hasClass(this.markerClassName)) {
                return;
            }
            nodeName = target.nodeName.toLowerCase();
            if (nodeName === "input") {
                target.disabled = true;
                inst.trigger.filter("button").each(function() {
                    this.disabled = true;
                }).end().filter("img").css({
                    opacity: "0.5",
                    cursor: "default"
                });
            } else if (nodeName === "div" || nodeName === "span") {
                inline = $target.children("." + this._inlineClass);
                inline.children().addClass("ui-state-disabled");
                inline.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled", true);
            }
            this._disabledInputs = $.map(this._disabledInputs, function(value) {
                return value === target ? null : value;
            });
            this._disabledInputs[this._disabledInputs.length] = target;
        },
        _isDisabledDatepicker: function(target) {
            if (!target) {
                return false;
            }
            for (var i = 0; i < this._disabledInputs.length; i++) {
                if (this._disabledInputs[i] === target) {
                    return true;
                }
            }
            return false;
        },
        _getInst: function(target) {
            try {
                return $.data(target, "datepicker");
            } catch (err) {
                throw "Missing instance data for this datepicker";
            }
        },
        _optionDatepicker: function(target, name, value) {
            var settings, date, minDate, maxDate, inst = this._getInst(target);
            if (arguments.length === 2 && typeof name === "string") {
                return name === "defaults" ? $.extend({}, $.datepicker._defaults) : inst ? name === "all" ? $.extend({}, inst.settings) : this._get(inst, name) : null;
            }
            settings = name || {};
            if (typeof name === "string") {
                settings = {};
                settings[name] = value;
            }
            if (inst) {
                if (this._curInst === inst) {
                    this._hideDatepicker();
                }
                date = this._getDateDatepicker(target, true);
                minDate = this._getMinMaxDate(inst, "min");
                maxDate = this._getMinMaxDate(inst, "max");
                datepicker_extendRemove(inst.settings, settings);
                if (minDate !== null && settings.dateFormat !== undefined && settings.minDate === undefined) {
                    inst.settings.minDate = this._formatDate(inst, minDate);
                }
                if (maxDate !== null && settings.dateFormat !== undefined && settings.maxDate === undefined) {
                    inst.settings.maxDate = this._formatDate(inst, maxDate);
                }
                if ("disabled" in settings) {
                    if (settings.disabled) {
                        this._disableDatepicker(target);
                    } else {
                        this._enableDatepicker(target);
                    }
                }
                this._attachments($(target), inst);
                this._autoSize(inst);
                this._setDate(inst, date);
                this._updateAlternate(inst);
                this._updateDatepicker(inst);
            }
        },
        _changeDatepicker: function(target, name, value) {
            this._optionDatepicker(target, name, value);
        },
        _refreshDatepicker: function(target) {
            var inst = this._getInst(target);
            if (inst) {
                this._updateDatepicker(inst);
            }
        },
        _setDateDatepicker: function(target, date) {
            var inst = this._getInst(target);
            if (inst) {
                this._setDate(inst, date);
                this._updateDatepicker(inst);
                this._updateAlternate(inst);
            }
        },
        _getDateDatepicker: function(target, noDefault) {
            var inst = this._getInst(target);
            if (inst && !inst.inline) {
                this._setDateFromField(inst, noDefault);
            }
            return inst ? this._getDate(inst) : null;
        },
        _doKeyDown: function(event) {
            var onSelect, dateStr, sel, inst = $.datepicker._getInst(event.target), handled = true, isRTL = inst.dpDiv.is(".ui-datepicker-rtl");
            inst._keyEvent = true;
            if ($.datepicker._datepickerShowing) {
                switch (event.keyCode) {
                  case 9:
                    $.datepicker._hideDatepicker();
                    handled = false;
                    break;

                  case 13:
                    sel = $("td." + $.datepicker._dayOverClass + ":not(." + $.datepicker._currentClass + ")", inst.dpDiv);
                    if (sel[0]) {
                        $.datepicker._selectDay(event.target, inst.selectedMonth, inst.selectedYear, sel[0]);
                    }
                    onSelect = $.datepicker._get(inst, "onSelect");
                    if (onSelect) {
                        dateStr = $.datepicker._formatDate(inst);
                        onSelect.apply(inst.input ? inst.input[0] : null, [ dateStr, inst ]);
                    } else {
                        $.datepicker._hideDatepicker();
                    }
                    return false;

                  case 27:
                    $.datepicker._hideDatepicker();
                    break;

                  case 33:
                    $.datepicker._adjustDate(event.target, event.ctrlKey ? -$.datepicker._get(inst, "stepBigMonths") : -$.datepicker._get(inst, "stepMonths"), "M");
                    break;

                  case 34:
                    $.datepicker._adjustDate(event.target, event.ctrlKey ? +$.datepicker._get(inst, "stepBigMonths") : +$.datepicker._get(inst, "stepMonths"), "M");
                    break;

                  case 35:
                    if (event.ctrlKey || event.metaKey) {
                        $.datepicker._clearDate(event.target);
                    }
                    handled = event.ctrlKey || event.metaKey;
                    break;

                  case 36:
                    if (event.ctrlKey || event.metaKey) {
                        $.datepicker._gotoToday(event.target);
                    }
                    handled = event.ctrlKey || event.metaKey;
                    break;

                  case 37:
                    if (event.ctrlKey || event.metaKey) {
                        $.datepicker._adjustDate(event.target, isRTL ? +1 : -1, "D");
                    }
                    handled = event.ctrlKey || event.metaKey;
                    if (event.originalEvent.altKey) {
                        $.datepicker._adjustDate(event.target, event.ctrlKey ? -$.datepicker._get(inst, "stepBigMonths") : -$.datepicker._get(inst, "stepMonths"), "M");
                    }
                    break;

                  case 38:
                    if (event.ctrlKey || event.metaKey) {
                        $.datepicker._adjustDate(event.target, -7, "D");
                    }
                    handled = event.ctrlKey || event.metaKey;
                    break;

                  case 39:
                    if (event.ctrlKey || event.metaKey) {
                        $.datepicker._adjustDate(event.target, isRTL ? -1 : +1, "D");
                    }
                    handled = event.ctrlKey || event.metaKey;
                    if (event.originalEvent.altKey) {
                        $.datepicker._adjustDate(event.target, event.ctrlKey ? +$.datepicker._get(inst, "stepBigMonths") : +$.datepicker._get(inst, "stepMonths"), "M");
                    }
                    break;

                  case 40:
                    if (event.ctrlKey || event.metaKey) {
                        $.datepicker._adjustDate(event.target, +7, "D");
                    }
                    handled = event.ctrlKey || event.metaKey;
                    break;

                  default:
                    handled = false;
                }
            } else if (event.keyCode === 36 && event.ctrlKey) {
                $.datepicker._showDatepicker(this);
            } else {
                handled = false;
            }
            if (handled) {
                event.preventDefault();
                event.stopPropagation();
            }
        },
        _doKeyPress: function(event) {
            var chars, chr, inst = $.datepicker._getInst(event.target);
            if ($.datepicker._get(inst, "constrainInput")) {
                chars = $.datepicker._possibleChars($.datepicker._get(inst, "dateFormat"));
                chr = String.fromCharCode(event.charCode == null ? event.keyCode : event.charCode);
                return event.ctrlKey || event.metaKey || (chr < " " || !chars || chars.indexOf(chr) > -1);
            }
        },
        _doKeyUp: function(event) {
            var date, inst = $.datepicker._getInst(event.target);
            if (inst.input.val() !== inst.lastVal) {
                try {
                    date = $.datepicker.parseDate($.datepicker._get(inst, "dateFormat"), inst.input ? inst.input.val() : null, $.datepicker._getFormatConfig(inst));
                    if (date) {
                        $.datepicker._setDateFromField(inst);
                        $.datepicker._updateAlternate(inst);
                        $.datepicker._updateDatepicker(inst);
                    }
                } catch (err) {}
            }
            return true;
        },
        _showDatepicker: function(input) {
            input = input.target || input;
            if (input.nodeName.toLowerCase() !== "input") {
                input = $("input", input.parentNode)[0];
            }
            if ($.datepicker._isDisabledDatepicker(input) || $.datepicker._lastInput === input) {
                return;
            }
            var inst, beforeShow, beforeShowSettings, isFixed, offset, showAnim, duration;
            inst = $.datepicker._getInst(input);
            if ($.datepicker._curInst && $.datepicker._curInst !== inst) {
                $.datepicker._curInst.dpDiv.stop(true, true);
                if (inst && $.datepicker._datepickerShowing) {
                    $.datepicker._hideDatepicker($.datepicker._curInst.input[0]);
                }
            }
            beforeShow = $.datepicker._get(inst, "beforeShow");
            beforeShowSettings = beforeShow ? beforeShow.apply(input, [ input, inst ]) : {};
            if (beforeShowSettings === false) {
                return;
            }
            datepicker_extendRemove(inst.settings, beforeShowSettings);
            inst.lastVal = null;
            $.datepicker._lastInput = input;
            $.datepicker._setDateFromField(inst);
            if ($.datepicker._inDialog) {
                input.value = "";
            }
            if (!$.datepicker._pos) {
                $.datepicker._pos = $.datepicker._findPos(input);
                $.datepicker._pos[1] += input.offsetHeight;
            }
            isFixed = false;
            $(input).parents().each(function() {
                isFixed |= $(this).css("position") === "fixed";
                return !isFixed;
            });
            offset = {
                left: $.datepicker._pos[0],
                top: $.datepicker._pos[1]
            };
            $.datepicker._pos = null;
            inst.dpDiv.empty();
            inst.dpDiv.css({
                position: "absolute",
                display: "block",
                top: "-1000px"
            });
            $.datepicker._updateDatepicker(inst);
            offset = $.datepicker._checkOffset(inst, offset, isFixed);
            inst.dpDiv.css({
                position: $.datepicker._inDialog && $.blockUI ? "static" : isFixed ? "fixed" : "absolute",
                display: "none",
                left: offset.left + "px",
                top: offset.top + "px"
            });
            if (!inst.inline) {
                showAnim = $.datepicker._get(inst, "showAnim");
                duration = $.datepicker._get(inst, "duration");
                inst.dpDiv.css("z-index", datepicker_getZindex($(input)) + 1);
                $.datepicker._datepickerShowing = true;
                if ($.effects && $.effects.effect[showAnim]) {
                    inst.dpDiv.show(showAnim, $.datepicker._get(inst, "showOptions"), duration);
                } else {
                    inst.dpDiv[showAnim || "show"](showAnim ? duration : null);
                }
                if ($.datepicker._shouldFocusInput(inst)) {
                    inst.input.focus();
                }
                $.datepicker._curInst = inst;
            }
        },
        _updateDatepicker: function(inst) {
            this.maxRows = 4;
            datepicker_instActive = inst;
            inst.dpDiv.empty().append(this._generateHTML(inst));
            this._attachHandlers(inst);
            var origyearshtml, numMonths = this._getNumberOfMonths(inst), cols = numMonths[1], width = 17, activeCell = inst.dpDiv.find("." + this._dayOverClass + " a");
            if (activeCell.length > 0) {
                datepicker_handleMouseover.apply(activeCell.get(0));
            }
            inst.dpDiv.removeClass("ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4").width("");
            if (cols > 1) {
                inst.dpDiv.addClass("ui-datepicker-multi-" + cols).css("width", width * cols + "em");
            }
            inst.dpDiv[(numMonths[0] !== 1 || numMonths[1] !== 1 ? "add" : "remove") + "Class"]("ui-datepicker-multi");
            inst.dpDiv[(this._get(inst, "isRTL") ? "add" : "remove") + "Class"]("ui-datepicker-rtl");
            if (inst === $.datepicker._curInst && $.datepicker._datepickerShowing && $.datepicker._shouldFocusInput(inst)) {
                inst.input.focus();
            }
            if (inst.yearshtml) {
                origyearshtml = inst.yearshtml;
                setTimeout(function() {
                    if (origyearshtml === inst.yearshtml && inst.yearshtml) {
                        inst.dpDiv.find("select.ui-datepicker-year:first").replaceWith(inst.yearshtml);
                    }
                    origyearshtml = inst.yearshtml = null;
                }, 0);
            }
        },
        _shouldFocusInput: function(inst) {
            return inst.input && inst.input.is(":visible") && !inst.input.is(":disabled") && !inst.input.is(":focus");
        },
        _checkOffset: function(inst, offset, isFixed) {
            var dpWidth = inst.dpDiv.outerWidth(), dpHeight = inst.dpDiv.outerHeight(), inputWidth = inst.input ? inst.input.outerWidth() : 0, inputHeight = inst.input ? inst.input.outerHeight() : 0, viewWidth = document.documentElement.clientWidth + (isFixed ? 0 : $(document).scrollLeft()), viewHeight = document.documentElement.clientHeight + (isFixed ? 0 : $(document).scrollTop());
            offset.left -= this._get(inst, "isRTL") ? dpWidth - inputWidth : 0;
            offset.left -= isFixed && offset.left === inst.input.offset().left ? $(document).scrollLeft() : 0;
            offset.top -= isFixed && offset.top === inst.input.offset().top + inputHeight ? $(document).scrollTop() : 0;
            offset.left -= Math.min(offset.left, offset.left + dpWidth > viewWidth && viewWidth > dpWidth ? Math.abs(offset.left + dpWidth - viewWidth) : 0);
            offset.top -= Math.min(offset.top, offset.top + dpHeight > viewHeight && viewHeight > dpHeight ? Math.abs(dpHeight + inputHeight) : 0);
            return offset;
        },
        _findPos: function(obj) {
            var position, inst = this._getInst(obj), isRTL = this._get(inst, "isRTL");
            while (obj && (obj.type === "hidden" || obj.nodeType !== 1 || $.expr.filters.hidden(obj))) {
                obj = obj[isRTL ? "previousSibling" : "nextSibling"];
            }
            position = $(obj).offset();
            return [ position.left, position.top ];
        },
        _hideDatepicker: function(input) {
            var showAnim, duration, postProcess, onClose, inst = this._curInst;
            if (!inst || input && inst !== $.data(input, "datepicker")) {
                return;
            }
            if (this._datepickerShowing) {
                showAnim = this._get(inst, "showAnim");
                duration = this._get(inst, "duration");
                postProcess = function() {
                    $.datepicker._tidyDialog(inst);
                };
                if ($.effects && ($.effects.effect[showAnim] || $.effects[showAnim])) {
                    inst.dpDiv.hide(showAnim, $.datepicker._get(inst, "showOptions"), duration, postProcess);
                } else {
                    inst.dpDiv[showAnim === "slideDown" ? "slideUp" : showAnim === "fadeIn" ? "fadeOut" : "hide"](showAnim ? duration : null, postProcess);
                }
                if (!showAnim) {
                    postProcess();
                }
                this._datepickerShowing = false;
                onClose = this._get(inst, "onClose");
                if (onClose) {
                    onClose.apply(inst.input ? inst.input[0] : null, [ inst.input ? inst.input.val() : "", inst ]);
                }
                this._lastInput = null;
                if (this._inDialog) {
                    this._dialogInput.css({
                        position: "absolute",
                        left: "0",
                        top: "-100px"
                    });
                    if ($.blockUI) {
                        $.unblockUI();
                        $("body").append(this.dpDiv);
                    }
                }
                this._inDialog = false;
            }
        },
        _tidyDialog: function(inst) {
            inst.dpDiv.removeClass(this._dialogClass).unbind(".ui-datepicker-calendar");
        },
        _checkExternalClick: function(event) {
            if (!$.datepicker._curInst) {
                return;
            }
            var $target = $(event.target), inst = $.datepicker._getInst($target[0]);
            if ($target[0].id !== $.datepicker._mainDivId && $target.parents("#" + $.datepicker._mainDivId).length === 0 && !$target.hasClass($.datepicker.markerClassName) && !$target.closest("." + $.datepicker._triggerClass).length && $.datepicker._datepickerShowing && !($.datepicker._inDialog && $.blockUI) || $target.hasClass($.datepicker.markerClassName) && $.datepicker._curInst !== inst) {
                $.datepicker._hideDatepicker();
            }
        },
        _adjustDate: function(id, offset, period) {
            var target = $(id), inst = this._getInst(target[0]);
            if (this._isDisabledDatepicker(target[0])) {
                return;
            }
            this._adjustInstDate(inst, offset + (period === "M" ? this._get(inst, "showCurrentAtPos") : 0), period);
            this._updateDatepicker(inst);
        },
        _gotoToday: function(id) {
            var date, target = $(id), inst = this._getInst(target[0]);
            if (this._get(inst, "gotoCurrent") && inst.currentDay) {
                inst.selectedDay = inst.currentDay;
                inst.drawMonth = inst.selectedMonth = inst.currentMonth;
                inst.drawYear = inst.selectedYear = inst.currentYear;
            } else {
                date = new Date();
                inst.selectedDay = date.getDate();
                inst.drawMonth = inst.selectedMonth = date.getMonth();
                inst.drawYear = inst.selectedYear = date.getFullYear();
            }
            this._notifyChange(inst);
            this._adjustDate(target);
        },
        _selectMonthYear: function(id, select, period) {
            var target = $(id), inst = this._getInst(target[0]);
            inst["selected" + (period === "M" ? "Month" : "Year")] = inst["draw" + (period === "M" ? "Month" : "Year")] = parseInt(select.options[select.selectedIndex].value, 10);
            this._notifyChange(inst);
            this._adjustDate(target);
        },
        _selectDay: function(id, month, year, td) {
            var inst, target = $(id);
            if ($(td).hasClass(this._unselectableClass) || this._isDisabledDatepicker(target[0])) {
                return;
            }
            inst = this._getInst(target[0]);
            inst.selectedDay = inst.currentDay = $("a", td).html();
            inst.selectedMonth = inst.currentMonth = month;
            inst.selectedYear = inst.currentYear = year;
            this._selectDate(id, this._formatDate(inst, inst.currentDay, inst.currentMonth, inst.currentYear));
        },
        _clearDate: function(id) {
            var target = $(id);
            this._selectDate(target, "");
        },
        _selectDate: function(id, dateStr) {
            var onSelect, target = $(id), inst = this._getInst(target[0]);
            dateStr = dateStr != null ? dateStr : this._formatDate(inst);
            if (inst.input) {
                inst.input.val(dateStr);
            }
            this._updateAlternate(inst);
            onSelect = this._get(inst, "onSelect");
            if (onSelect) {
                onSelect.apply(inst.input ? inst.input[0] : null, [ dateStr, inst ]);
            } else if (inst.input) {
                inst.input.trigger("change");
            }
            if (inst.inline) {
                this._updateDatepicker(inst);
            } else {
                this._hideDatepicker();
                this._lastInput = inst.input[0];
                if (typeof inst.input[0] !== "object") {
                    inst.input.focus();
                }
                this._lastInput = null;
            }
        },
        _updateAlternate: function(inst) {
            var altFormat, date, dateStr, altField = this._get(inst, "altField");
            if (altField) {
                altFormat = this._get(inst, "altFormat") || this._get(inst, "dateFormat");
                date = this._getDate(inst);
                dateStr = this.formatDate(altFormat, date, this._getFormatConfig(inst));
                $(altField).each(function() {
                    $(this).val(dateStr);
                });
            }
        },
        noWeekends: function(date) {
            var day = date.getDay();
            return [ day > 0 && day < 6, "" ];
        },
        iso8601Week: function(date) {
            var time, checkDate = new Date(date.getTime());
            checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7));
            time = checkDate.getTime();
            checkDate.setMonth(0);
            checkDate.setDate(1);
            return Math.floor(Math.round((time - checkDate) / 864e5) / 7) + 1;
        },
        parseDate: function(format, value, settings) {
            if (format == null || value == null) {
                throw "Invalid arguments";
            }
            value = typeof value === "object" ? value.toString() : value + "";
            if (value === "") {
                return null;
            }
            var iFormat, dim, extra, iValue = 0, shortYearCutoffTemp = (settings ? settings.shortYearCutoff : null) || this._defaults.shortYearCutoff, shortYearCutoff = typeof shortYearCutoffTemp !== "string" ? shortYearCutoffTemp : new Date().getFullYear() % 100 + parseInt(shortYearCutoffTemp, 10), dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort, dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames, monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort, monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames, year = -1, month = -1, day = -1, doy = -1, literal = false, date, lookAhead = function(match) {
                var matches = iFormat + 1 < format.length && format.charAt(iFormat + 1) === match;
                if (matches) {
                    iFormat++;
                }
                return matches;
            }, getNumber = function(match) {
                var isDoubled = lookAhead(match), size = match === "@" ? 14 : match === "!" ? 20 : match === "y" && isDoubled ? 4 : match === "o" ? 3 : 2, minSize = match === "y" ? size : 1, digits = new RegExp("^\\d{" + minSize + "," + size + "}"), num = value.substring(iValue).match(digits);
                if (!num) {
                    throw "Missing number at position " + iValue;
                }
                iValue += num[0].length;
                return parseInt(num[0], 10);
            }, getName = function(match, shortNames, longNames) {
                var index = -1, names = $.map(lookAhead(match) ? longNames : shortNames, function(v, k) {
                    return [ [ k, v ] ];
                }).sort(function(a, b) {
                    return -(a[1].length - b[1].length);
                });
                $.each(names, function(i, pair) {
                    var name = pair[1];
                    if (value.substr(iValue, name.length).toLowerCase() === name.toLowerCase()) {
                        index = pair[0];
                        iValue += name.length;
                        return false;
                    }
                });
                if (index !== -1) {
                    return index + 1;
                } else {
                    throw "Unknown name at position " + iValue;
                }
            }, checkLiteral = function() {
                if (value.charAt(iValue) !== format.charAt(iFormat)) {
                    throw "Unexpected literal at position " + iValue;
                }
                iValue++;
            };
            for (iFormat = 0; iFormat < format.length; iFormat++) {
                if (literal) {
                    if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
                        literal = false;
                    } else {
                        checkLiteral();
                    }
                } else {
                    switch (format.charAt(iFormat)) {
                      case "d":
                        day = getNumber("d");
                        break;

                      case "D":
                        getName("D", dayNamesShort, dayNames);
                        break;

                      case "o":
                        doy = getNumber("o");
                        break;

                      case "m":
                        month = getNumber("m");
                        break;

                      case "M":
                        month = getName("M", monthNamesShort, monthNames);
                        break;

                      case "y":
                        year = getNumber("y");
                        break;

                      case "@":
                        date = new Date(getNumber("@"));
                        year = date.getFullYear();
                        month = date.getMonth() + 1;
                        day = date.getDate();
                        break;

                      case "!":
                        date = new Date((getNumber("!") - this._ticksTo1970) / 1e4);
                        year = date.getFullYear();
                        month = date.getMonth() + 1;
                        day = date.getDate();
                        break;

                      case "'":
                        if (lookAhead("'")) {
                            checkLiteral();
                        } else {
                            literal = true;
                        }
                        break;

                      default:
                        checkLiteral();
                    }
                }
            }
            if (iValue < value.length) {
                extra = value.substr(iValue);
                if (!/^\s+/.test(extra)) {
                    throw "Extra/unparsed characters found in date: " + extra;
                }
            }
            if (year === -1) {
                year = new Date().getFullYear();
            } else if (year < 100) {
                year += new Date().getFullYear() - new Date().getFullYear() % 100 + (year <= shortYearCutoff ? 0 : -100);
            }
            if (doy > -1) {
                month = 1;
                day = doy;
                do {
                    dim = this._getDaysInMonth(year, month - 1);
                    if (day <= dim) {
                        break;
                    }
                    month++;
                    day -= dim;
                } while (true);
            }
            date = this._daylightSavingAdjust(new Date(year, month - 1, day));
            if (date.getFullYear() !== year || date.getMonth() + 1 !== month || date.getDate() !== day) {
                throw "Invalid date";
            }
            return date;
        },
        ATOM: "yy-mm-dd",
        COOKIE: "D, dd M yy",
        ISO_8601: "yy-mm-dd",
        RFC_822: "D, d M y",
        RFC_850: "DD, dd-M-y",
        RFC_1036: "D, d M y",
        RFC_1123: "D, d M yy",
        RFC_2822: "D, d M yy",
        RSS: "D, d M y",
        TICKS: "!",
        TIMESTAMP: "@",
        W3C: "yy-mm-dd",
        _ticksTo1970: ((1970 - 1) * 365 + Math.floor(1970 / 4) - Math.floor(1970 / 100) + Math.floor(1970 / 400)) * 24 * 60 * 60 * 1e7,
        formatDate: function(format, date, settings) {
            if (!date) {
                return "";
            }
            var iFormat, dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort, dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames, monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort, monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames, lookAhead = function(match) {
                var matches = iFormat + 1 < format.length && format.charAt(iFormat + 1) === match;
                if (matches) {
                    iFormat++;
                }
                return matches;
            }, formatNumber = function(match, value, len) {
                var num = "" + value;
                if (lookAhead(match)) {
                    while (num.length < len) {
                        num = "0" + num;
                    }
                }
                return num;
            }, formatName = function(match, value, shortNames, longNames) {
                return lookAhead(match) ? longNames[value] : shortNames[value];
            }, output = "", literal = false;
            if (date) {
                for (iFormat = 0; iFormat < format.length; iFormat++) {
                    if (literal) {
                        if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
                            literal = false;
                        } else {
                            output += format.charAt(iFormat);
                        }
                    } else {
                        switch (format.charAt(iFormat)) {
                          case "d":
                            output += formatNumber("d", date.getDate(), 2);
                            break;

                          case "D":
                            output += formatName("D", date.getDay(), dayNamesShort, dayNames);
                            break;

                          case "o":
                            output += formatNumber("o", Math.round((new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime() - new Date(date.getFullYear(), 0, 0).getTime()) / 864e5), 3);
                            break;

                          case "m":
                            output += formatNumber("m", date.getMonth() + 1, 2);
                            break;

                          case "M":
                            output += formatName("M", date.getMonth(), monthNamesShort, monthNames);
                            break;

                          case "y":
                            output += lookAhead("y") ? date.getFullYear() : (date.getYear() % 100 < 10 ? "0" : "") + date.getYear() % 100;
                            break;

                          case "@":
                            output += date.getTime();
                            break;

                          case "!":
                            output += date.getTime() * 1e4 + this._ticksTo1970;
                            break;

                          case "'":
                            if (lookAhead("'")) {
                                output += "'";
                            } else {
                                literal = true;
                            }
                            break;

                          default:
                            output += format.charAt(iFormat);
                        }
                    }
                }
            }
            return output;
        },
        _possibleChars: function(format) {
            var iFormat, chars = "", literal = false, lookAhead = function(match) {
                var matches = iFormat + 1 < format.length && format.charAt(iFormat + 1) === match;
                if (matches) {
                    iFormat++;
                }
                return matches;
            };
            for (iFormat = 0; iFormat < format.length; iFormat++) {
                if (literal) {
                    if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
                        literal = false;
                    } else {
                        chars += format.charAt(iFormat);
                    }
                } else {
                    switch (format.charAt(iFormat)) {
                      case "d":
                      case "m":
                      case "y":
                      case "@":
                        chars += "0123456789";
                        break;

                      case "D":
                      case "M":
                        return null;

                      case "'":
                        if (lookAhead("'")) {
                            chars += "'";
                        } else {
                            literal = true;
                        }
                        break;

                      default:
                        chars += format.charAt(iFormat);
                    }
                }
            }
            return chars;
        },
        _get: function(inst, name) {
            return inst.settings[name] !== undefined ? inst.settings[name] : this._defaults[name];
        },
        _setDateFromField: function(inst, noDefault) {
            if (inst.input.val() === inst.lastVal) {
                return;
            }
            var dateFormat = this._get(inst, "dateFormat"), dates = inst.lastVal = inst.input ? inst.input.val() : null, defaultDate = this._getDefaultDate(inst), date = defaultDate, settings = this._getFormatConfig(inst);
            try {
                date = this.parseDate(dateFormat, dates, settings) || defaultDate;
            } catch (event) {
                dates = noDefault ? "" : dates;
            }
            inst.selectedDay = date.getDate();
            inst.drawMonth = inst.selectedMonth = date.getMonth();
            inst.drawYear = inst.selectedYear = date.getFullYear();
            inst.currentDay = dates ? date.getDate() : 0;
            inst.currentMonth = dates ? date.getMonth() : 0;
            inst.currentYear = dates ? date.getFullYear() : 0;
            this._adjustInstDate(inst);
        },
        _getDefaultDate: function(inst) {
            return this._restrictMinMax(inst, this._determineDate(inst, this._get(inst, "defaultDate"), new Date()));
        },
        _determineDate: function(inst, date, defaultDate) {
            var offsetNumeric = function(offset) {
                var date = new Date();
                date.setDate(date.getDate() + offset);
                return date;
            }, offsetString = function(offset) {
                try {
                    return $.datepicker.parseDate($.datepicker._get(inst, "dateFormat"), offset, $.datepicker._getFormatConfig(inst));
                } catch (e) {}
                var date = (offset.toLowerCase().match(/^c/) ? $.datepicker._getDate(inst) : null) || new Date(), year = date.getFullYear(), month = date.getMonth(), day = date.getDate(), pattern = /([+\-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g, matches = pattern.exec(offset);
                while (matches) {
                    switch (matches[2] || "d") {
                      case "d":
                      case "D":
                        day += parseInt(matches[1], 10);
                        break;

                      case "w":
                      case "W":
                        day += parseInt(matches[1], 10) * 7;
                        break;

                      case "m":
                      case "M":
                        month += parseInt(matches[1], 10);
                        day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
                        break;

                      case "y":
                      case "Y":
                        year += parseInt(matches[1], 10);
                        day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
                        break;
                    }
                    matches = pattern.exec(offset);
                }
                return new Date(year, month, day);
            }, newDate = date == null || date === "" ? defaultDate : typeof date === "string" ? offsetString(date) : typeof date === "number" ? isNaN(date) ? defaultDate : offsetNumeric(date) : new Date(date.getTime());
            newDate = newDate && newDate.toString() === "Invalid Date" ? defaultDate : newDate;
            if (newDate) {
                newDate.setHours(0);
                newDate.setMinutes(0);
                newDate.setSeconds(0);
                newDate.setMilliseconds(0);
            }
            return this._daylightSavingAdjust(newDate);
        },
        _daylightSavingAdjust: function(date) {
            if (!date) {
                return null;
            }
            date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);
            return date;
        },
        _setDate: function(inst, date, noChange) {
            var clear = !date, origMonth = inst.selectedMonth, origYear = inst.selectedYear, newDate = this._restrictMinMax(inst, this._determineDate(inst, date, new Date()));
            inst.selectedDay = inst.currentDay = newDate.getDate();
            inst.drawMonth = inst.selectedMonth = inst.currentMonth = newDate.getMonth();
            inst.drawYear = inst.selectedYear = inst.currentYear = newDate.getFullYear();
            if ((origMonth !== inst.selectedMonth || origYear !== inst.selectedYear) && !noChange) {
                this._notifyChange(inst);
            }
            this._adjustInstDate(inst);
            if (inst.input) {
                inst.input.val(clear ? "" : this._formatDate(inst));
            }
        },
        _getDate: function(inst) {
            var startDate = !inst.currentYear || inst.input && inst.input.val() === "" ? null : this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay));
            return startDate;
        },
        _attachHandlers: function(inst) {
            var stepMonths = this._get(inst, "stepMonths"), id = "#" + inst.id.replace(/\\\\/g, "\\");
            inst.dpDiv.find("[data-handler]").map(function() {
                var handler = {
                    prev: function() {
                        $.datepicker._adjustDate(id, -stepMonths, "M");
                    },
                    next: function() {
                        $.datepicker._adjustDate(id, +stepMonths, "M");
                    },
                    hide: function() {
                        $.datepicker._hideDatepicker();
                    },
                    today: function() {
                        $.datepicker._gotoToday(id);
                    },
                    selectDay: function() {
                        $.datepicker._selectDay(id, +this.getAttribute("data-month"), +this.getAttribute("data-year"), this);
                        return false;
                    },
                    selectMonth: function() {
                        $.datepicker._selectMonthYear(id, this, "M");
                        return false;
                    },
                    selectYear: function() {
                        $.datepicker._selectMonthYear(id, this, "Y");
                        return false;
                    }
                };
                $(this).bind(this.getAttribute("data-event"), handler[this.getAttribute("data-handler")]);
            });
        },
        _generateHTML: function(inst) {
            var maxDraw, prevText, prev, nextText, next, currentText, gotoDate, controls, buttonPanel, firstDay, showWeek, dayNames, dayNamesMin, monthNames, monthNamesShort, beforeShowDay, showOtherMonths, selectOtherMonths, defaultDate, html, dow, row, group, col, selectedDate, cornerClass, calender, thead, day, daysInMonth, leadDays, curRows, numRows, printDate, dRow, tbody, daySettings, otherMonth, unselectable, tempDate = new Date(), today = this._daylightSavingAdjust(new Date(tempDate.getFullYear(), tempDate.getMonth(), tempDate.getDate())), isRTL = this._get(inst, "isRTL"), showButtonPanel = this._get(inst, "showButtonPanel"), hideIfNoPrevNext = this._get(inst, "hideIfNoPrevNext"), navigationAsDateFormat = this._get(inst, "navigationAsDateFormat"), numMonths = this._getNumberOfMonths(inst), showCurrentAtPos = this._get(inst, "showCurrentAtPos"), stepMonths = this._get(inst, "stepMonths"), isMultiMonth = numMonths[0] !== 1 || numMonths[1] !== 1, currentDate = this._daylightSavingAdjust(!inst.currentDay ? new Date(9999, 9, 9) : new Date(inst.currentYear, inst.currentMonth, inst.currentDay)), minDate = this._getMinMaxDate(inst, "min"), maxDate = this._getMinMaxDate(inst, "max"), drawMonth = inst.drawMonth - showCurrentAtPos, drawYear = inst.drawYear;
            if (drawMonth < 0) {
                drawMonth += 12;
                drawYear--;
            }
            if (maxDate) {
                maxDraw = this._daylightSavingAdjust(new Date(maxDate.getFullYear(), maxDate.getMonth() - numMonths[0] * numMonths[1] + 1, maxDate.getDate()));
                maxDraw = minDate && maxDraw < minDate ? minDate : maxDraw;
                while (this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1)) > maxDraw) {
                    drawMonth--;
                    if (drawMonth < 0) {
                        drawMonth = 11;
                        drawYear--;
                    }
                }
            }
            inst.drawMonth = drawMonth;
            inst.drawYear = drawYear;
            prevText = this._get(inst, "prevText");
            prevText = !navigationAsDateFormat ? prevText : this.formatDate(prevText, this._daylightSavingAdjust(new Date(drawYear, drawMonth - stepMonths, 1)), this._getFormatConfig(inst));
            prev = this._canAdjustMonth(inst, -1, drawYear, drawMonth) ? "<a class='ui-datepicker-prev ui-corner-all' data-handler='prev' data-event='click'" + " title='" + prevText + "'><span class='ui-icon ui-icon-circle-triangle-" + (isRTL ? "e" : "w") + "'>" + prevText + "</span></a>" : hideIfNoPrevNext ? "" : "<a class='ui-datepicker-prev ui-corner-all ui-state-disabled' title='" + prevText + "'><span class='ui-icon ui-icon-circle-triangle-" + (isRTL ? "e" : "w") + "'>" + prevText + "</span></a>";
            nextText = this._get(inst, "nextText");
            nextText = !navigationAsDateFormat ? nextText : this.formatDate(nextText, this._daylightSavingAdjust(new Date(drawYear, drawMonth + stepMonths, 1)), this._getFormatConfig(inst));
            next = this._canAdjustMonth(inst, +1, drawYear, drawMonth) ? "<a class='ui-datepicker-next ui-corner-all' data-handler='next' data-event='click'" + " title='" + nextText + "'><span class='ui-icon ui-icon-circle-triangle-" + (isRTL ? "w" : "e") + "'>" + nextText + "</span></a>" : hideIfNoPrevNext ? "" : "<a class='ui-datepicker-next ui-corner-all ui-state-disabled' title='" + nextText + "'><span class='ui-icon ui-icon-circle-triangle-" + (isRTL ? "w" : "e") + "'>" + nextText + "</span></a>";
            currentText = this._get(inst, "currentText");
            gotoDate = this._get(inst, "gotoCurrent") && inst.currentDay ? currentDate : today;
            currentText = !navigationAsDateFormat ? currentText : this.formatDate(currentText, gotoDate, this._getFormatConfig(inst));
            controls = !inst.inline ? "<button type='button' class='ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all' data-handler='hide' data-event='click'>" + this._get(inst, "closeText") + "</button>" : "";
            buttonPanel = showButtonPanel ? "<div class='ui-datepicker-buttonpane ui-widget-content'>" + (isRTL ? controls : "") + (this._isInRange(inst, gotoDate) ? "<button type='button' class='ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all' data-handler='today' data-event='click'" + ">" + currentText + "</button>" : "") + (isRTL ? "" : controls) + "</div>" : "";
            firstDay = parseInt(this._get(inst, "firstDay"), 10);
            firstDay = isNaN(firstDay) ? 0 : firstDay;
            showWeek = this._get(inst, "showWeek");
            dayNames = this._get(inst, "dayNames");
            dayNamesMin = this._get(inst, "dayNamesMin");
            monthNames = this._get(inst, "monthNames");
            monthNamesShort = this._get(inst, "monthNamesShort");
            beforeShowDay = this._get(inst, "beforeShowDay");
            showOtherMonths = this._get(inst, "showOtherMonths");
            selectOtherMonths = this._get(inst, "selectOtherMonths");
            defaultDate = this._getDefaultDate(inst);
            html = "";
            dow;
            for (row = 0; row < numMonths[0]; row++) {
                group = "";
                this.maxRows = 4;
                for (col = 0; col < numMonths[1]; col++) {
                    selectedDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, inst.selectedDay));
                    cornerClass = " ui-corner-all";
                    calender = "";
                    if (isMultiMonth) {
                        calender += "<div class='ui-datepicker-group";
                        if (numMonths[1] > 1) {
                            switch (col) {
                              case 0:
                                calender += " ui-datepicker-group-first";
                                cornerClass = " ui-corner-" + (isRTL ? "right" : "left");
                                break;

                              case numMonths[1] - 1:
                                calender += " ui-datepicker-group-last";
                                cornerClass = " ui-corner-" + (isRTL ? "left" : "right");
                                break;

                              default:
                                calender += " ui-datepicker-group-middle";
                                cornerClass = "";
                                break;
                            }
                        }
                        calender += "'>";
                    }
                    calender += "<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix" + cornerClass + "'>" + (/all|left/.test(cornerClass) && row === 0 ? isRTL ? next : prev : "") + (/all|right/.test(cornerClass) && row === 0 ? isRTL ? prev : next : "") + this._generateMonthYearHeader(inst, drawMonth, drawYear, minDate, maxDate, row > 0 || col > 0, monthNames, monthNamesShort) + "</div><table class='ui-datepicker-calendar'><thead>" + "<tr>";
                    thead = showWeek ? "<th class='ui-datepicker-week-col'>" + this._get(inst, "weekHeader") + "</th>" : "";
                    for (dow = 0; dow < 7; dow++) {
                        day = (dow + firstDay) % 7;
                        thead += "<th scope='col'" + ((dow + firstDay + 6) % 7 >= 5 ? " class='ui-datepicker-week-end'" : "") + ">" + "<span title='" + dayNames[day] + "'>" + dayNamesMin[day] + "</span></th>";
                    }
                    calender += thead + "</tr></thead><tbody>";
                    daysInMonth = this._getDaysInMonth(drawYear, drawMonth);
                    if (drawYear === inst.selectedYear && drawMonth === inst.selectedMonth) {
                        inst.selectedDay = Math.min(inst.selectedDay, daysInMonth);
                    }
                    leadDays = (this._getFirstDayOfMonth(drawYear, drawMonth) - firstDay + 7) % 7;
                    curRows = Math.ceil((leadDays + daysInMonth) / 7);
                    numRows = isMultiMonth ? this.maxRows > curRows ? this.maxRows : curRows : curRows;
                    this.maxRows = numRows;
                    printDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1 - leadDays));
                    for (dRow = 0; dRow < numRows; dRow++) {
                        calender += "<tr>";
                        tbody = !showWeek ? "" : "<td class='ui-datepicker-week-col'>" + this._get(inst, "calculateWeek")(printDate) + "</td>";
                        for (dow = 0; dow < 7; dow++) {
                            daySettings = beforeShowDay ? beforeShowDay.apply(inst.input ? inst.input[0] : null, [ printDate ]) : [ true, "" ];
                            otherMonth = printDate.getMonth() !== drawMonth;
                            unselectable = otherMonth && !selectOtherMonths || !daySettings[0] || minDate && printDate < minDate || maxDate && printDate > maxDate;
                            tbody += "<td class='" + ((dow + firstDay + 6) % 7 >= 5 ? " ui-datepicker-week-end" : "") + (otherMonth ? " ui-datepicker-other-month" : "") + (printDate.getTime() === selectedDate.getTime() && drawMonth === inst.selectedMonth && inst._keyEvent || defaultDate.getTime() === printDate.getTime() && defaultDate.getTime() === selectedDate.getTime() ? " " + this._dayOverClass : "") + (unselectable ? " " + this._unselectableClass + " ui-state-disabled" : "") + (otherMonth && !showOtherMonths ? "" : " " + daySettings[1] + (printDate.getTime() === currentDate.getTime() ? " " + this._currentClass : "") + (printDate.getTime() === today.getTime() ? " ui-datepicker-today" : "")) + "'" + ((!otherMonth || showOtherMonths) && daySettings[2] ? " title='" + daySettings[2].replace(/'/g, "&#39;") + "'" : "") + (unselectable ? "" : " data-handler='selectDay' data-event='click' data-month='" + printDate.getMonth() + "' data-year='" + printDate.getFullYear() + "'") + ">" + (otherMonth && !showOtherMonths ? "&#xa0;" : unselectable ? "<span class='ui-state-default'>" + printDate.getDate() + "</span>" : "<a class='ui-state-default" + (printDate.getTime() === today.getTime() ? " ui-state-highlight" : "") + (printDate.getTime() === currentDate.getTime() ? " ui-state-active" : "") + (otherMonth ? " ui-priority-secondary" : "") + "' href='#'>" + printDate.getDate() + "</a>") + "</td>";
                            printDate.setDate(printDate.getDate() + 1);
                            printDate = this._daylightSavingAdjust(printDate);
                        }
                        calender += tbody + "</tr>";
                    }
                    drawMonth++;
                    if (drawMonth > 11) {
                        drawMonth = 0;
                        drawYear++;
                    }
                    calender += "</tbody></table>" + (isMultiMonth ? "</div>" + (numMonths[0] > 0 && col === numMonths[1] - 1 ? "<div class='ui-datepicker-row-break'></div>" : "") : "");
                    group += calender;
                }
                html += group;
            }
            html += buttonPanel;
            inst._keyEvent = false;
            return html;
        },
        _generateMonthYearHeader: function(inst, drawMonth, drawYear, minDate, maxDate, secondary, monthNames, monthNamesShort) {
            var inMinYear, inMaxYear, month, years, thisYear, determineYear, year, endYear, changeMonth = this._get(inst, "changeMonth"), changeYear = this._get(inst, "changeYear"), showMonthAfterYear = this._get(inst, "showMonthAfterYear"), html = "<div class='ui-datepicker-title'>", monthHtml = "";
            if (secondary || !changeMonth) {
                monthHtml += "<span class='ui-datepicker-month'>" + monthNames[drawMonth] + "</span>";
            } else {
                inMinYear = minDate && minDate.getFullYear() === drawYear;
                inMaxYear = maxDate && maxDate.getFullYear() === drawYear;
                monthHtml += "<select class='ui-datepicker-month' data-handler='selectMonth' data-event='change'>";
                for (month = 0; month < 12; month++) {
                    if ((!inMinYear || month >= minDate.getMonth()) && (!inMaxYear || month <= maxDate.getMonth())) {
                        monthHtml += "<option value='" + month + "'" + (month === drawMonth ? " selected='selected'" : "") + ">" + monthNamesShort[month] + "</option>";
                    }
                }
                monthHtml += "</select>";
            }
            if (!showMonthAfterYear) {
                html += monthHtml + (secondary || !(changeMonth && changeYear) ? "&#xa0;" : "");
            }
            if (!inst.yearshtml) {
                inst.yearshtml = "";
                if (secondary || !changeYear) {
                    html += "<span class='ui-datepicker-year'>" + drawYear + "</span>";
                } else {
                    years = this._get(inst, "yearRange").split(":");
                    thisYear = new Date().getFullYear();
                    determineYear = function(value) {
                        var year = value.match(/c[+\-].*/) ? drawYear + parseInt(value.substring(1), 10) : value.match(/[+\-].*/) ? thisYear + parseInt(value, 10) : parseInt(value, 10);
                        return isNaN(year) ? thisYear : year;
                    };
                    year = determineYear(years[0]);
                    endYear = Math.max(year, determineYear(years[1] || ""));
                    year = minDate ? Math.max(year, minDate.getFullYear()) : year;
                    endYear = maxDate ? Math.min(endYear, maxDate.getFullYear()) : endYear;
                    inst.yearshtml += "<select class='ui-datepicker-year' data-handler='selectYear' data-event='change'>";
                    for (;year <= endYear; year++) {
                        inst.yearshtml += "<option value='" + year + "'" + (year === drawYear ? " selected='selected'" : "") + ">" + year + "</option>";
                    }
                    inst.yearshtml += "</select>";
                    html += inst.yearshtml;
                    inst.yearshtml = null;
                }
            }
            html += this._get(inst, "yearSuffix");
            if (showMonthAfterYear) {
                html += (secondary || !(changeMonth && changeYear) ? "&#xa0;" : "") + monthHtml;
            }
            html += "</div>";
            return html;
        },
        _adjustInstDate: function(inst, offset, period) {
            var year = inst.drawYear + (period === "Y" ? offset : 0), month = inst.drawMonth + (period === "M" ? offset : 0), day = Math.min(inst.selectedDay, this._getDaysInMonth(year, month)) + (period === "D" ? offset : 0), date = this._restrictMinMax(inst, this._daylightSavingAdjust(new Date(year, month, day)));
            inst.selectedDay = date.getDate();
            inst.drawMonth = inst.selectedMonth = date.getMonth();
            inst.drawYear = inst.selectedYear = date.getFullYear();
            if (period === "M" || period === "Y") {
                this._notifyChange(inst);
            }
        },
        _restrictMinMax: function(inst, date) {
            var minDate = this._getMinMaxDate(inst, "min"), maxDate = this._getMinMaxDate(inst, "max"), newDate = minDate && date < minDate ? minDate : date;
            return maxDate && newDate > maxDate ? maxDate : newDate;
        },
        _notifyChange: function(inst) {
            var onChange = this._get(inst, "onChangeMonthYear");
            if (onChange) {
                onChange.apply(inst.input ? inst.input[0] : null, [ inst.selectedYear, inst.selectedMonth + 1, inst ]);
            }
        },
        _getNumberOfMonths: function(inst) {
            var numMonths = this._get(inst, "numberOfMonths");
            return numMonths == null ? [ 1, 1 ] : typeof numMonths === "number" ? [ 1, numMonths ] : numMonths;
        },
        _getMinMaxDate: function(inst, minMax) {
            return this._determineDate(inst, this._get(inst, minMax + "Date"), null);
        },
        _getDaysInMonth: function(year, month) {
            return 32 - this._daylightSavingAdjust(new Date(year, month, 32)).getDate();
        },
        _getFirstDayOfMonth: function(year, month) {
            return new Date(year, month, 1).getDay();
        },
        _canAdjustMonth: function(inst, offset, curYear, curMonth) {
            var numMonths = this._getNumberOfMonths(inst), date = this._daylightSavingAdjust(new Date(curYear, curMonth + (offset < 0 ? offset : numMonths[0] * numMonths[1]), 1));
            if (offset < 0) {
                date.setDate(this._getDaysInMonth(date.getFullYear(), date.getMonth()));
            }
            return this._isInRange(inst, date);
        },
        _isInRange: function(inst, date) {
            var yearSplit, currentYear, minDate = this._getMinMaxDate(inst, "min"), maxDate = this._getMinMaxDate(inst, "max"), minYear = null, maxYear = null, years = this._get(inst, "yearRange");
            if (years) {
                yearSplit = years.split(":");
                currentYear = new Date().getFullYear();
                minYear = parseInt(yearSplit[0], 10);
                maxYear = parseInt(yearSplit[1], 10);
                if (yearSplit[0].match(/[+\-].*/)) {
                    minYear += currentYear;
                }
                if (yearSplit[1].match(/[+\-].*/)) {
                    maxYear += currentYear;
                }
            }
            return (!minDate || date.getTime() >= minDate.getTime()) && (!maxDate || date.getTime() <= maxDate.getTime()) && (!minYear || date.getFullYear() >= minYear) && (!maxYear || date.getFullYear() <= maxYear);
        },
        _getFormatConfig: function(inst) {
            var shortYearCutoff = this._get(inst, "shortYearCutoff");
            shortYearCutoff = typeof shortYearCutoff !== "string" ? shortYearCutoff : new Date().getFullYear() % 100 + parseInt(shortYearCutoff, 10);
            return {
                shortYearCutoff: shortYearCutoff,
                dayNamesShort: this._get(inst, "dayNamesShort"),
                dayNames: this._get(inst, "dayNames"),
                monthNamesShort: this._get(inst, "monthNamesShort"),
                monthNames: this._get(inst, "monthNames")
            };
        },
        _formatDate: function(inst, day, month, year) {
            if (!day) {
                inst.currentDay = inst.selectedDay;
                inst.currentMonth = inst.selectedMonth;
                inst.currentYear = inst.selectedYear;
            }
            var date = day ? typeof day === "object" ? day : this._daylightSavingAdjust(new Date(year, month, day)) : this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay));
            return this.formatDate(this._get(inst, "dateFormat"), date, this._getFormatConfig(inst));
        }
    });
    function datepicker_bindHover(dpDiv) {
        var selector = "button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a";
        return dpDiv.delegate(selector, "mouseout", function() {
            $(this).removeClass("ui-state-hover");
            if (this.className.indexOf("ui-datepicker-prev") !== -1) {
                $(this).removeClass("ui-datepicker-prev-hover");
            }
            if (this.className.indexOf("ui-datepicker-next") !== -1) {
                $(this).removeClass("ui-datepicker-next-hover");
            }
        }).delegate(selector, "mouseover", datepicker_handleMouseover);
    }
    function datepicker_handleMouseover() {
        if (!$.datepicker._isDisabledDatepicker(datepicker_instActive.inline ? datepicker_instActive.dpDiv.parent()[0] : datepicker_instActive.input[0])) {
            $(this).parents(".ui-datepicker-calendar").find("a").removeClass("ui-state-hover");
            $(this).addClass("ui-state-hover");
            if (this.className.indexOf("ui-datepicker-prev") !== -1) {
                $(this).addClass("ui-datepicker-prev-hover");
            }
            if (this.className.indexOf("ui-datepicker-next") !== -1) {
                $(this).addClass("ui-datepicker-next-hover");
            }
        }
    }
    function datepicker_extendRemove(target, props) {
        $.extend(target, props);
        for (var name in props) {
            if (props[name] == null) {
                target[name] = props[name];
            }
        }
        return target;
    }
    $.fn.datepicker = function(options) {
        if (!this.length) {
            return this;
        }
        if (!$.datepicker.initialized) {
            $(document).mousedown($.datepicker._checkExternalClick);
            $.datepicker.initialized = true;
        }
        if ($("#" + $.datepicker._mainDivId).length === 0) {
            $("body").append($.datepicker.dpDiv);
        }
        var otherArgs = Array.prototype.slice.call(arguments, 1);
        if (typeof options === "string" && (options === "isDisabled" || options === "getDate" || options === "widget")) {
            return $.datepicker["_" + options + "Datepicker"].apply($.datepicker, [ this[0] ].concat(otherArgs));
        }
        if (options === "option" && arguments.length === 2 && typeof arguments[1] === "string") {
            return $.datepicker["_" + options + "Datepicker"].apply($.datepicker, [ this[0] ].concat(otherArgs));
        }
        return this.each(function() {
            typeof options === "string" ? $.datepicker["_" + options + "Datepicker"].apply($.datepicker, [ this ].concat(otherArgs)) : $.datepicker._attachDatepicker(this, options);
        });
    };
    $.datepicker = new Datepicker();
    $.datepicker.initialized = false;
    $.datepicker.uuid = new Date().getTime();
    $.datepicker.version = "1.11.4";
    return $.datepicker;
});

(function(factory) {
    if (typeof define === "function" && define.amd) {
        define([ "jquery", "./core", "./widget", "./button", "./draggable", "./mouse", "./position", "./resizable" ], factory);
    } else {
        factory(jQuery);
    }
})(function($) {
    return $.widget("ui.dialog", {
        version: "1.11.4",
        options: {
            appendTo: "body",
            autoOpen: true,
            buttons: [],
            closeOnEscape: true,
            closeText: "Close",
            dialogClass: "",
            draggable: true,
            hide: null,
            height: "auto",
            maxHeight: null,
            maxWidth: null,
            minHeight: 150,
            minWidth: 150,
            modal: false,
            position: {
                my: "center",
                at: "center",
                of: window,
                collision: "fit",
                using: function(pos) {
                    var topOffset = $(this).css(pos).offset().top;
                    if (topOffset < 0) {
                        $(this).css("top", pos.top - topOffset);
                    }
                }
            },
            resizable: true,
            show: null,
            title: null,
            width: 300,
            beforeClose: null,
            close: null,
            drag: null,
            dragStart: null,
            dragStop: null,
            focus: null,
            open: null,
            resize: null,
            resizeStart: null,
            resizeStop: null
        },
        sizeRelatedOptions: {
            buttons: true,
            height: true,
            maxHeight: true,
            maxWidth: true,
            minHeight: true,
            minWidth: true,
            width: true
        },
        resizableRelatedOptions: {
            maxHeight: true,
            maxWidth: true,
            minHeight: true,
            minWidth: true
        },
        _create: function() {
            this.originalCss = {
                display: this.element[0].style.display,
                width: this.element[0].style.width,
                minHeight: this.element[0].style.minHeight,
                maxHeight: this.element[0].style.maxHeight,
                height: this.element[0].style.height
            };
            this.originalPosition = {
                parent: this.element.parent(),
                index: this.element.parent().children().index(this.element)
            };
            this.originalTitle = this.element.attr("title");
            this.options.title = this.options.title || this.originalTitle;
            this._createWrapper();
            this.element.show().removeAttr("title").addClass("ui-dialog-content ui-widget-content").appendTo(this.uiDialog);
            this._createTitlebar();
            this._createButtonPane();
            if (this.options.draggable && $.fn.draggable) {
                this._makeDraggable();
            }
            if (this.options.resizable && $.fn.resizable) {
                this._makeResizable();
            }
            this._isOpen = false;
            this._trackFocus();
        },
        _init: function() {
            if (this.options.autoOpen) {
                this.open();
            }
        },
        _appendTo: function() {
            var element = this.options.appendTo;
            if (element && (element.jquery || element.nodeType)) {
                return $(element);
            }
            return this.document.find(element || "body").eq(0);
        },
        _destroy: function() {
            var next, originalPosition = this.originalPosition;
            this._untrackInstance();
            this._destroyOverlay();
            this.element.removeUniqueId().removeClass("ui-dialog-content ui-widget-content").css(this.originalCss).detach();
            this.uiDialog.stop(true, true).remove();
            if (this.originalTitle) {
                this.element.attr("title", this.originalTitle);
            }
            next = originalPosition.parent.children().eq(originalPosition.index);
            if (next.length && next[0] !== this.element[0]) {
                next.before(this.element);
            } else {
                originalPosition.parent.append(this.element);
            }
        },
        widget: function() {
            return this.uiDialog;
        },
        disable: $.noop,
        enable: $.noop,
        close: function(event) {
            var activeElement, that = this;
            if (!this._isOpen || this._trigger("beforeClose", event) === false) {
                return;
            }
            this._isOpen = false;
            this._focusedElement = null;
            this._destroyOverlay();
            this._untrackInstance();
            if (!this.opener.filter(":focusable").focus().length) {
                try {
                    activeElement = this.document[0].activeElement;
                    if (activeElement && activeElement.nodeName.toLowerCase() !== "body") {
                        $(activeElement).blur();
                    }
                } catch (error) {}
            }
            this._hide(this.uiDialog, this.options.hide, function() {
                that._trigger("close", event);
            });
        },
        isOpen: function() {
            return this._isOpen;
        },
        moveToTop: function() {
            this._moveToTop();
        },
        _moveToTop: function(event, silent) {
            var moved = false, zIndices = this.uiDialog.siblings(".ui-front:visible").map(function() {
                return +$(this).css("z-index");
            }).get(), zIndexMax = Math.max.apply(null, zIndices);
            if (zIndexMax >= +this.uiDialog.css("z-index")) {
                this.uiDialog.css("z-index", zIndexMax + 1);
                moved = true;
            }
            if (moved && !silent) {
                this._trigger("focus", event);
            }
            return moved;
        },
        open: function() {
            var that = this;
            if (this._isOpen) {
                if (this._moveToTop()) {
                    this._focusTabbable();
                }
                return;
            }
            this._isOpen = true;
            this.opener = $(this.document[0].activeElement);
            this._size();
            this._position();
            this._createOverlay();
            this._moveToTop(null, true);
            if (this.overlay) {
                this.overlay.css("z-index", this.uiDialog.css("z-index") - 1);
            }
            this._show(this.uiDialog, this.options.show, function() {
                that._focusTabbable();
                that._trigger("focus");
            });
            this._makeFocusTarget();
            this._trigger("open");
        },
        _focusTabbable: function() {
            var hasFocus = this._focusedElement;
            if (!hasFocus) {
                hasFocus = this.element.find("[autofocus]");
            }
            if (!hasFocus.length) {
                hasFocus = this.element.find(":tabbable");
            }
            if (!hasFocus.length) {
                hasFocus = this.uiDialogButtonPane.find(":tabbable");
            }
            if (!hasFocus.length) {
                hasFocus = this.uiDialogTitlebarClose.filter(":tabbable");
            }
            if (!hasFocus.length) {
                hasFocus = this.uiDialog;
            }
            hasFocus.eq(0).focus();
        },
        _keepFocus: function(event) {
            function checkFocus() {
                var activeElement = this.document[0].activeElement, isActive = this.uiDialog[0] === activeElement || $.contains(this.uiDialog[0], activeElement);
                if (!isActive) {
                    this._focusTabbable();
                }
            }
            event.preventDefault();
            checkFocus.call(this);
            this._delay(checkFocus);
        },
        _createWrapper: function() {
            this.uiDialog = $("<div>").addClass("ui-dialog ui-widget ui-widget-content ui-corner-all ui-front " + this.options.dialogClass).hide().attr({
                tabIndex: -1,
                role: "dialog"
            }).appendTo(this._appendTo());
            this._on(this.uiDialog, {
                keydown: function(event) {
                    if (this.options.closeOnEscape && !event.isDefaultPrevented() && event.keyCode && event.keyCode === $.ui.keyCode.ESCAPE) {
                        event.preventDefault();
                        this.close(event);
                        return;
                    }
                    if (event.keyCode !== $.ui.keyCode.TAB || event.isDefaultPrevented()) {
                        return;
                    }
                    var tabbables = this.uiDialog.find(":tabbable"), first = tabbables.filter(":first"), last = tabbables.filter(":last");
                    if ((event.target === last[0] || event.target === this.uiDialog[0]) && !event.shiftKey) {
                        this._delay(function() {
                            first.focus();
                        });
                        event.preventDefault();
                    } else if ((event.target === first[0] || event.target === this.uiDialog[0]) && event.shiftKey) {
                        this._delay(function() {
                            last.focus();
                        });
                        event.preventDefault();
                    }
                },
                mousedown: function(event) {
                    if (this._moveToTop(event)) {
                        this._focusTabbable();
                    }
                }
            });
            if (!this.element.find("[aria-describedby]").length) {
                this.uiDialog.attr({
                    "aria-describedby": this.element.uniqueId().attr("id")
                });
            }
        },
        _createTitlebar: function() {
            var uiDialogTitle;
            this.uiDialogTitlebar = $("<div>").addClass("ui-dialog-titlebar ui-widget-header ui-corner-all ui-helper-clearfix").prependTo(this.uiDialog);
            this._on(this.uiDialogTitlebar, {
                mousedown: function(event) {
                    if (!$(event.target).closest(".ui-dialog-titlebar-close")) {
                        this.uiDialog.focus();
                    }
                }
            });
            this.uiDialogTitlebarClose = $("<button type='button'></button>").button({
                label: this.options.closeText,
                icons: {
                    primary: "ui-icon-closethick"
                },
                text: false
            }).addClass("ui-dialog-titlebar-close").appendTo(this.uiDialogTitlebar);
            this._on(this.uiDialogTitlebarClose, {
                click: function(event) {
                    event.preventDefault();
                    this.close(event);
                }
            });
            uiDialogTitle = $("<span>").uniqueId().addClass("ui-dialog-title").prependTo(this.uiDialogTitlebar);
            this._title(uiDialogTitle);
            this.uiDialog.attr({
                "aria-labelledby": uiDialogTitle.attr("id")
            });
        },
        _title: function(title) {
            if (!this.options.title) {
                title.html("&#160;");
            }
            title.text(this.options.title);
        },
        _createButtonPane: function() {
            this.uiDialogButtonPane = $("<div>").addClass("ui-dialog-buttonpane ui-widget-content ui-helper-clearfix");
            this.uiButtonSet = $("<div>").addClass("ui-dialog-buttonset").appendTo(this.uiDialogButtonPane);
            this._createButtons();
        },
        _createButtons: function() {
            var that = this, buttons = this.options.buttons;
            this.uiDialogButtonPane.remove();
            this.uiButtonSet.empty();
            if ($.isEmptyObject(buttons) || $.isArray(buttons) && !buttons.length) {
                this.uiDialog.removeClass("ui-dialog-buttons");
                return;
            }
            $.each(buttons, function(name, props) {
                var click, buttonOptions;
                props = $.isFunction(props) ? {
                    click: props,
                    text: name
                } : props;
                props = $.extend({
                    type: "button"
                }, props);
                click = props.click;
                props.click = function() {
                    click.apply(that.element[0], arguments);
                };
                buttonOptions = {
                    icons: props.icons,
                    text: props.showText
                };
                delete props.icons;
                delete props.showText;
                $("<button></button>", props).button(buttonOptions).appendTo(that.uiButtonSet);
            });
            this.uiDialog.addClass("ui-dialog-buttons");
            this.uiDialogButtonPane.appendTo(this.uiDialog);
        },
        _makeDraggable: function() {
            var that = this, options = this.options;
            function filteredUi(ui) {
                return {
                    position: ui.position,
                    offset: ui.offset
                };
            }
            this.uiDialog.draggable({
                cancel: ".ui-dialog-content, .ui-dialog-titlebar-close",
                handle: ".ui-dialog-titlebar",
                containment: "document",
                start: function(event, ui) {
                    $(this).addClass("ui-dialog-dragging");
                    that._blockFrames();
                    that._trigger("dragStart", event, filteredUi(ui));
                },
                drag: function(event, ui) {
                    that._trigger("drag", event, filteredUi(ui));
                },
                stop: function(event, ui) {
                    var left = ui.offset.left - that.document.scrollLeft(), top = ui.offset.top - that.document.scrollTop();
                    options.position = {
                        my: "left top",
                        at: "left" + (left >= 0 ? "+" : "") + left + " " + "top" + (top >= 0 ? "+" : "") + top,
                        of: that.window
                    };
                    $(this).removeClass("ui-dialog-dragging");
                    that._unblockFrames();
                    that._trigger("dragStop", event, filteredUi(ui));
                }
            });
        },
        _makeResizable: function() {
            var that = this, options = this.options, handles = options.resizable, position = this.uiDialog.css("position"), resizeHandles = typeof handles === "string" ? handles : "n,e,s,w,se,sw,ne,nw";
            function filteredUi(ui) {
                return {
                    originalPosition: ui.originalPosition,
                    originalSize: ui.originalSize,
                    position: ui.position,
                    size: ui.size
                };
            }
            this.uiDialog.resizable({
                cancel: ".ui-dialog-content",
                containment: "document",
                alsoResize: this.element,
                maxWidth: options.maxWidth,
                maxHeight: options.maxHeight,
                minWidth: options.minWidth,
                minHeight: this._minHeight(),
                handles: resizeHandles,
                start: function(event, ui) {
                    $(this).addClass("ui-dialog-resizing");
                    that._blockFrames();
                    that._trigger("resizeStart", event, filteredUi(ui));
                },
                resize: function(event, ui) {
                    that._trigger("resize", event, filteredUi(ui));
                },
                stop: function(event, ui) {
                    var offset = that.uiDialog.offset(), left = offset.left - that.document.scrollLeft(), top = offset.top - that.document.scrollTop();
                    options.height = that.uiDialog.height();
                    options.width = that.uiDialog.width();
                    options.position = {
                        my: "left top",
                        at: "left" + (left >= 0 ? "+" : "") + left + " " + "top" + (top >= 0 ? "+" : "") + top,
                        of: that.window
                    };
                    $(this).removeClass("ui-dialog-resizing");
                    that._unblockFrames();
                    that._trigger("resizeStop", event, filteredUi(ui));
                }
            }).css("position", position);
        },
        _trackFocus: function() {
            this._on(this.widget(), {
                focusin: function(event) {
                    this._makeFocusTarget();
                    this._focusedElement = $(event.target);
                }
            });
        },
        _makeFocusTarget: function() {
            this._untrackInstance();
            this._trackingInstances().unshift(this);
        },
        _untrackInstance: function() {
            var instances = this._trackingInstances(), exists = $.inArray(this, instances);
            if (exists !== -1) {
                instances.splice(exists, 1);
            }
        },
        _trackingInstances: function() {
            var instances = this.document.data("ui-dialog-instances");
            if (!instances) {
                instances = [];
                this.document.data("ui-dialog-instances", instances);
            }
            return instances;
        },
        _minHeight: function() {
            var options = this.options;
            return options.height === "auto" ? options.minHeight : Math.min(options.minHeight, options.height);
        },
        _position: function() {
            var isVisible = this.uiDialog.is(":visible");
            if (!isVisible) {
                this.uiDialog.show();
            }
            this.uiDialog.position(this.options.position);
            if (!isVisible) {
                this.uiDialog.hide();
            }
        },
        _setOptions: function(options) {
            var that = this, resize = false, resizableOptions = {};
            $.each(options, function(key, value) {
                that._setOption(key, value);
                if (key in that.sizeRelatedOptions) {
                    resize = true;
                }
                if (key in that.resizableRelatedOptions) {
                    resizableOptions[key] = value;
                }
            });
            if (resize) {
                this._size();
                this._position();
            }
            if (this.uiDialog.is(":data(ui-resizable)")) {
                this.uiDialog.resizable("option", resizableOptions);
            }
        },
        _setOption: function(key, value) {
            var isDraggable, isResizable, uiDialog = this.uiDialog;
            if (key === "dialogClass") {
                uiDialog.removeClass(this.options.dialogClass).addClass(value);
            }
            if (key === "disabled") {
                return;
            }
            this._super(key, value);
            if (key === "appendTo") {
                this.uiDialog.appendTo(this._appendTo());
            }
            if (key === "buttons") {
                this._createButtons();
            }
            if (key === "closeText") {
                this.uiDialogTitlebarClose.button({
                    label: "" + value
                });
            }
            if (key === "draggable") {
                isDraggable = uiDialog.is(":data(ui-draggable)");
                if (isDraggable && !value) {
                    uiDialog.draggable("destroy");
                }
                if (!isDraggable && value) {
                    this._makeDraggable();
                }
            }
            if (key === "position") {
                this._position();
            }
            if (key === "resizable") {
                isResizable = uiDialog.is(":data(ui-resizable)");
                if (isResizable && !value) {
                    uiDialog.resizable("destroy");
                }
                if (isResizable && typeof value === "string") {
                    uiDialog.resizable("option", "handles", value);
                }
                if (!isResizable && value !== false) {
                    this._makeResizable();
                }
            }
            if (key === "title") {
                this._title(this.uiDialogTitlebar.find(".ui-dialog-title"));
            }
        },
        _size: function() {
            var nonContentHeight, minContentHeight, maxContentHeight, options = this.options;
            this.element.show().css({
                width: "auto",
                minHeight: 0,
                maxHeight: "none",
                height: 0
            });
            if (options.minWidth > options.width) {
                options.width = options.minWidth;
            }
            nonContentHeight = this.uiDialog.css({
                height: "auto",
                width: options.width
            }).outerHeight();
            minContentHeight = Math.max(0, options.minHeight - nonContentHeight);
            maxContentHeight = typeof options.maxHeight === "number" ? Math.max(0, options.maxHeight - nonContentHeight) : "none";
            if (options.height === "auto") {
                this.element.css({
                    minHeight: minContentHeight,
                    maxHeight: maxContentHeight,
                    height: "auto"
                });
            } else {
                this.element.height(Math.max(0, options.height - nonContentHeight));
            }
            if (this.uiDialog.is(":data(ui-resizable)")) {
                this.uiDialog.resizable("option", "minHeight", this._minHeight());
            }
        },
        _blockFrames: function() {
            this.iframeBlocks = this.document.find("iframe").map(function() {
                var iframe = $(this);
                return $("<div>").css({
                    position: "absolute",
                    width: iframe.outerWidth(),
                    height: iframe.outerHeight()
                }).appendTo(iframe.parent()).offset(iframe.offset())[0];
            });
        },
        _unblockFrames: function() {
            if (this.iframeBlocks) {
                this.iframeBlocks.remove();
                delete this.iframeBlocks;
            }
        },
        _allowInteraction: function(event) {
            if ($(event.target).closest(".ui-dialog").length) {
                return true;
            }
            return !!$(event.target).closest(".ui-datepicker").length;
        },
        _createOverlay: function() {
            if (!this.options.modal) {
                return;
            }
            var isOpening = true;
            this._delay(function() {
                isOpening = false;
            });
            if (!this.document.data("ui-dialog-overlays")) {
                this._on(this.document, {
                    focusin: function(event) {
                        if (isOpening) {
                            return;
                        }
                        if (!this._allowInteraction(event)) {
                            event.preventDefault();
                            this._trackingInstances()[0]._focusTabbable();
                        }
                    }
                });
            }
            this.overlay = $("<div>").addClass("ui-widget-overlay ui-front").appendTo(this._appendTo());
            this._on(this.overlay, {
                mousedown: "_keepFocus"
            });
            this.document.data("ui-dialog-overlays", (this.document.data("ui-dialog-overlays") || 0) + 1);
        },
        _destroyOverlay: function() {
            if (!this.options.modal) {
                return;
            }
            if (this.overlay) {
                var overlays = this.document.data("ui-dialog-overlays") - 1;
                if (!overlays) {
                    this.document.unbind("focusin").removeData("ui-dialog-overlays");
                } else {
                    this.document.data("ui-dialog-overlays", overlays);
                }
                this.overlay.remove();
                this.overlay = null;
            }
        }
    });
});

(function(factory) {
    if (typeof define === "function" && define.amd) {
        define([ "jquery", "./core", "./widget" ], factory);
    } else {
        factory(jQuery);
    }
})(function($) {
    var lastActive, baseClasses = "ui-button ui-widget ui-state-default ui-corner-all", typeClasses = "ui-button-icons-only ui-button-icon-only ui-button-text-icons ui-button-text-icon-primary ui-button-text-icon-secondary ui-button-text-only", formResetHandler = function() {
        var form = $(this);
        setTimeout(function() {
            form.find(":ui-button").button("refresh");
        }, 1);
    }, radioGroup = function(radio) {
        var name = radio.name, form = radio.form, radios = $([]);
        if (name) {
            name = name.replace(/'/g, "\\'");
            if (form) {
                radios = $(form).find("[name='" + name + "'][type=radio]");
            } else {
                radios = $("[name='" + name + "'][type=radio]", radio.ownerDocument).filter(function() {
                    return !this.form;
                });
            }
        }
        return radios;
    };
    $.widget("ui.button", {
        version: "1.11.4",
        defaultElement: "<button>",
        options: {
            disabled: null,
            text: true,
            label: null,
            icons: {
                primary: null,
                secondary: null
            }
        },
        _create: function() {
            this.element.closest("form").unbind("reset" + this.eventNamespace).bind("reset" + this.eventNamespace, formResetHandler);
            if (typeof this.options.disabled !== "boolean") {
                this.options.disabled = !!this.element.prop("disabled");
            } else {
                this.element.prop("disabled", this.options.disabled);
            }
            this._determineButtonType();
            this.hasTitle = !!this.buttonElement.attr("title");
            var that = this, options = this.options, toggleButton = this.type === "checkbox" || this.type === "radio", activeClass = !toggleButton ? "ui-state-active" : "";
            if (options.label === null) {
                options.label = this.type === "input" ? this.buttonElement.val() : this.buttonElement.html();
            }
            this._hoverable(this.buttonElement);
            this.buttonElement.addClass(baseClasses).attr("role", "button").bind("mouseenter" + this.eventNamespace, function() {
                if (options.disabled) {
                    return;
                }
                if (this === lastActive) {
                    $(this).addClass("ui-state-active");
                }
            }).bind("mouseleave" + this.eventNamespace, function() {
                if (options.disabled) {
                    return;
                }
                $(this).removeClass(activeClass);
            }).bind("click" + this.eventNamespace, function(event) {
                if (options.disabled) {
                    event.preventDefault();
                    event.stopImmediatePropagation();
                }
            });
            this._on({
                focus: function() {
                    this.buttonElement.addClass("ui-state-focus");
                },
                blur: function() {
                    this.buttonElement.removeClass("ui-state-focus");
                }
            });
            if (toggleButton) {
                this.element.bind("change" + this.eventNamespace, function() {
                    that.refresh();
                });
            }
            if (this.type === "checkbox") {
                this.buttonElement.bind("click" + this.eventNamespace, function() {
                    if (options.disabled) {
                        return false;
                    }
                });
            } else if (this.type === "radio") {
                this.buttonElement.bind("click" + this.eventNamespace, function() {
                    if (options.disabled) {
                        return false;
                    }
                    $(this).addClass("ui-state-active");
                    that.buttonElement.attr("aria-pressed", "true");
                    var radio = that.element[0];
                    radioGroup(radio).not(radio).map(function() {
                        return $(this).button("widget")[0];
                    }).removeClass("ui-state-active").attr("aria-pressed", "false");
                });
            } else {
                this.buttonElement.bind("mousedown" + this.eventNamespace, function() {
                    if (options.disabled) {
                        return false;
                    }
                    $(this).addClass("ui-state-active");
                    lastActive = this;
                    that.document.one("mouseup", function() {
                        lastActive = null;
                    });
                }).bind("mouseup" + this.eventNamespace, function() {
                    if (options.disabled) {
                        return false;
                    }
                    $(this).removeClass("ui-state-active");
                }).bind("keydown" + this.eventNamespace, function(event) {
                    if (options.disabled) {
                        return false;
                    }
                    if (event.keyCode === $.ui.keyCode.SPACE || event.keyCode === $.ui.keyCode.ENTER) {
                        $(this).addClass("ui-state-active");
                    }
                }).bind("keyup" + this.eventNamespace + " blur" + this.eventNamespace, function() {
                    $(this).removeClass("ui-state-active");
                });
                if (this.buttonElement.is("a")) {
                    this.buttonElement.keyup(function(event) {
                        if (event.keyCode === $.ui.keyCode.SPACE) {
                            $(this).click();
                        }
                    });
                }
            }
            this._setOption("disabled", options.disabled);
            this._resetButton();
        },
        _determineButtonType: function() {
            var ancestor, labelSelector, checked;
            if (this.element.is("[type=checkbox]")) {
                this.type = "checkbox";
            } else if (this.element.is("[type=radio]")) {
                this.type = "radio";
            } else if (this.element.is("input")) {
                this.type = "input";
            } else {
                this.type = "button";
            }
            if (this.type === "checkbox" || this.type === "radio") {
                ancestor = this.element.parents().last();
                labelSelector = "label[for='" + this.element.attr("id") + "']";
                this.buttonElement = ancestor.find(labelSelector);
                if (!this.buttonElement.length) {
                    ancestor = ancestor.length ? ancestor.siblings() : this.element.siblings();
                    this.buttonElement = ancestor.filter(labelSelector);
                    if (!this.buttonElement.length) {
                        this.buttonElement = ancestor.find(labelSelector);
                    }
                }
                this.element.addClass("ui-helper-hidden-accessible");
                checked = this.element.is(":checked");
                if (checked) {
                    this.buttonElement.addClass("ui-state-active");
                }
                this.buttonElement.prop("aria-pressed", checked);
            } else {
                this.buttonElement = this.element;
            }
        },
        widget: function() {
            return this.buttonElement;
        },
        _destroy: function() {
            this.element.removeClass("ui-helper-hidden-accessible");
            this.buttonElement.removeClass(baseClasses + " ui-state-active " + typeClasses).removeAttr("role").removeAttr("aria-pressed").html(this.buttonElement.find(".ui-button-text").html());
            if (!this.hasTitle) {
                this.buttonElement.removeAttr("title");
            }
        },
        _setOption: function(key, value) {
            this._super(key, value);
            if (key === "disabled") {
                this.widget().toggleClass("ui-state-disabled", !!value);
                this.element.prop("disabled", !!value);
                if (value) {
                    if (this.type === "checkbox" || this.type === "radio") {
                        this.buttonElement.removeClass("ui-state-focus");
                    } else {
                        this.buttonElement.removeClass("ui-state-focus ui-state-active");
                    }
                }
                return;
            }
            this._resetButton();
        },
        refresh: function() {
            var isDisabled = this.element.is("input, button") ? this.element.is(":disabled") : this.element.hasClass("ui-button-disabled");
            if (isDisabled !== this.options.disabled) {
                this._setOption("disabled", isDisabled);
            }
            if (this.type === "radio") {
                radioGroup(this.element[0]).each(function() {
                    if ($(this).is(":checked")) {
                        $(this).button("widget").addClass("ui-state-active").attr("aria-pressed", "true");
                    } else {
                        $(this).button("widget").removeClass("ui-state-active").attr("aria-pressed", "false");
                    }
                });
            } else if (this.type === "checkbox") {
                if (this.element.is(":checked")) {
                    this.buttonElement.addClass("ui-state-active").attr("aria-pressed", "true");
                } else {
                    this.buttonElement.removeClass("ui-state-active").attr("aria-pressed", "false");
                }
            }
        },
        _resetButton: function() {
            if (this.type === "input") {
                if (this.options.label) {
                    this.element.val(this.options.label);
                }
                return;
            }
            var buttonElement = this.buttonElement.removeClass(typeClasses), buttonText = $("<span></span>", this.document[0]).addClass("ui-button-text").html(this.options.label).appendTo(buttonElement.empty()).text(), icons = this.options.icons, multipleIcons = icons.primary && icons.secondary, buttonClasses = [];
            if (icons.primary || icons.secondary) {
                if (this.options.text) {
                    buttonClasses.push("ui-button-text-icon" + (multipleIcons ? "s" : icons.primary ? "-primary" : "-secondary"));
                }
                if (icons.primary) {
                    buttonElement.prepend("<span class='ui-button-icon-primary ui-icon " + icons.primary + "'></span>");
                }
                if (icons.secondary) {
                    buttonElement.append("<span class='ui-button-icon-secondary ui-icon " + icons.secondary + "'></span>");
                }
                if (!this.options.text) {
                    buttonClasses.push(multipleIcons ? "ui-button-icons-only" : "ui-button-icon-only");
                    if (!this.hasTitle) {
                        buttonElement.attr("title", $.trim(buttonText));
                    }
                }
            } else {
                buttonClasses.push("ui-button-text-only");
            }
            buttonElement.addClass(buttonClasses.join(" "));
        }
    });
    $.widget("ui.buttonset", {
        version: "1.11.4",
        options: {
            items: "button, input[type=button], input[type=submit], input[type=reset], input[type=checkbox], input[type=radio], a, :data(ui-button)"
        },
        _create: function() {
            this.element.addClass("ui-buttonset");
        },
        _init: function() {
            this.refresh();
        },
        _setOption: function(key, value) {
            if (key === "disabled") {
                this.buttons.button("option", key, value);
            }
            this._super(key, value);
        },
        refresh: function() {
            var rtl = this.element.css("direction") === "rtl", allButtons = this.element.find(this.options.items), existingButtons = allButtons.filter(":ui-button");
            allButtons.not(":ui-button").button();
            existingButtons.button("refresh");
            this.buttons = allButtons.map(function() {
                return $(this).button("widget")[0];
            }).removeClass("ui-corner-all ui-corner-left ui-corner-right").filter(":first").addClass(rtl ? "ui-corner-right" : "ui-corner-left").end().filter(":last").addClass(rtl ? "ui-corner-left" : "ui-corner-right").end().end();
        },
        _destroy: function() {
            this.element.removeClass("ui-buttonset");
            this.buttons.map(function() {
                return $(this).button("widget")[0];
            }).removeClass("ui-corner-left ui-corner-right").end().button("destroy");
        }
    });
    return $.ui.button;
});

(function(factory) {
    if (typeof define === "function" && define.amd) {
        define([ "jquery" ], factory);
    } else {
        factory(jQuery);
    }
})(function($) {
    (function() {
        $.ui = $.ui || {};
        var cachedScrollbarWidth, supportsOffsetFractions, max = Math.max, abs = Math.abs, round = Math.round, rhorizontal = /left|center|right/, rvertical = /top|center|bottom/, roffset = /[\+\-]\d+(\.[\d]+)?%?/, rposition = /^\w+/, rpercent = /%$/, _position = $.fn.position;
        function getOffsets(offsets, width, height) {
            return [ parseFloat(offsets[0]) * (rpercent.test(offsets[0]) ? width / 100 : 1), parseFloat(offsets[1]) * (rpercent.test(offsets[1]) ? height / 100 : 1) ];
        }
        function parseCss(element, property) {
            return parseInt($.css(element, property), 10) || 0;
        }
        function getDimensions(elem) {
            var raw = elem[0];
            if (raw.nodeType === 9) {
                return {
                    width: elem.width(),
                    height: elem.height(),
                    offset: {
                        top: 0,
                        left: 0
                    }
                };
            }
            if ($.isWindow(raw)) {
                return {
                    width: elem.width(),
                    height: elem.height(),
                    offset: {
                        top: elem.scrollTop(),
                        left: elem.scrollLeft()
                    }
                };
            }
            if (raw.preventDefault) {
                return {
                    width: 0,
                    height: 0,
                    offset: {
                        top: raw.pageY,
                        left: raw.pageX
                    }
                };
            }
            return {
                width: elem.outerWidth(),
                height: elem.outerHeight(),
                offset: elem.offset()
            };
        }
        $.position = {
            scrollbarWidth: function() {
                if (cachedScrollbarWidth !== undefined) {
                    return cachedScrollbarWidth;
                }
                var w1, w2, div = $("<div style='display:block;position:absolute;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>"), innerDiv = div.children()[0];
                $("body").append(div);
                w1 = innerDiv.offsetWidth;
                div.css("overflow", "scroll");
                w2 = innerDiv.offsetWidth;
                if (w1 === w2) {
                    w2 = div[0].clientWidth;
                }
                div.remove();
                return cachedScrollbarWidth = w1 - w2;
            },
            getScrollInfo: function(within) {
                var overflowX = within.isWindow || within.isDocument ? "" : within.element.css("overflow-x"), overflowY = within.isWindow || within.isDocument ? "" : within.element.css("overflow-y"), hasOverflowX = overflowX === "scroll" || overflowX === "auto" && within.width < within.element[0].scrollWidth, hasOverflowY = overflowY === "scroll" || overflowY === "auto" && within.height < within.element[0].scrollHeight;
                return {
                    width: hasOverflowY ? $.position.scrollbarWidth() : 0,
                    height: hasOverflowX ? $.position.scrollbarWidth() : 0
                };
            },
            getWithinInfo: function(element) {
                var withinElement = $(element || window), isWindow = $.isWindow(withinElement[0]), isDocument = !!withinElement[0] && withinElement[0].nodeType === 9;
                return {
                    element: withinElement,
                    isWindow: isWindow,
                    isDocument: isDocument,
                    offset: withinElement.offset() || {
                        left: 0,
                        top: 0
                    },
                    scrollLeft: withinElement.scrollLeft(),
                    scrollTop: withinElement.scrollTop(),
                    width: isWindow || isDocument ? withinElement.width() : withinElement.outerWidth(),
                    height: isWindow || isDocument ? withinElement.height() : withinElement.outerHeight()
                };
            }
        };
        $.fn.position = function(options) {
            if (!options || !options.of) {
                return _position.apply(this, arguments);
            }
            options = $.extend({}, options);
            var atOffset, targetWidth, targetHeight, targetOffset, basePosition, dimensions, target = $(options.of), within = $.position.getWithinInfo(options.within), scrollInfo = $.position.getScrollInfo(within), collision = (options.collision || "flip").split(" "), offsets = {};
            dimensions = getDimensions(target);
            if (target[0].preventDefault) {
                options.at = "left top";
            }
            targetWidth = dimensions.width;
            targetHeight = dimensions.height;
            targetOffset = dimensions.offset;
            basePosition = $.extend({}, targetOffset);
            $.each([ "my", "at" ], function() {
                var pos = (options[this] || "").split(" "), horizontalOffset, verticalOffset;
                if (pos.length === 1) {
                    pos = rhorizontal.test(pos[0]) ? pos.concat([ "center" ]) : rvertical.test(pos[0]) ? [ "center" ].concat(pos) : [ "center", "center" ];
                }
                pos[0] = rhorizontal.test(pos[0]) ? pos[0] : "center";
                pos[1] = rvertical.test(pos[1]) ? pos[1] : "center";
                horizontalOffset = roffset.exec(pos[0]);
                verticalOffset = roffset.exec(pos[1]);
                offsets[this] = [ horizontalOffset ? horizontalOffset[0] : 0, verticalOffset ? verticalOffset[0] : 0 ];
                options[this] = [ rposition.exec(pos[0])[0], rposition.exec(pos[1])[0] ];
            });
            if (collision.length === 1) {
                collision[1] = collision[0];
            }
            if (options.at[0] === "right") {
                basePosition.left += targetWidth;
            } else if (options.at[0] === "center") {
                basePosition.left += targetWidth / 2;
            }
            if (options.at[1] === "bottom") {
                basePosition.top += targetHeight;
            } else if (options.at[1] === "center") {
                basePosition.top += targetHeight / 2;
            }
            atOffset = getOffsets(offsets.at, targetWidth, targetHeight);
            basePosition.left += atOffset[0];
            basePosition.top += atOffset[1];
            return this.each(function() {
                var collisionPosition, using, elem = $(this), elemWidth = elem.outerWidth(), elemHeight = elem.outerHeight(), marginLeft = parseCss(this, "marginLeft"), marginTop = parseCss(this, "marginTop"), collisionWidth = elemWidth + marginLeft + parseCss(this, "marginRight") + scrollInfo.width, collisionHeight = elemHeight + marginTop + parseCss(this, "marginBottom") + scrollInfo.height, position = $.extend({}, basePosition), myOffset = getOffsets(offsets.my, elem.outerWidth(), elem.outerHeight());
                if (options.my[0] === "right") {
                    position.left -= elemWidth;
                } else if (options.my[0] === "center") {
                    position.left -= elemWidth / 2;
                }
                if (options.my[1] === "bottom") {
                    position.top -= elemHeight;
                } else if (options.my[1] === "center") {
                    position.top -= elemHeight / 2;
                }
                position.left += myOffset[0];
                position.top += myOffset[1];
                if (!supportsOffsetFractions) {
                    position.left = round(position.left);
                    position.top = round(position.top);
                }
                collisionPosition = {
                    marginLeft: marginLeft,
                    marginTop: marginTop
                };
                $.each([ "left", "top" ], function(i, dir) {
                    if ($.ui.position[collision[i]]) {
                        $.ui.position[collision[i]][dir](position, {
                            targetWidth: targetWidth,
                            targetHeight: targetHeight,
                            elemWidth: elemWidth,
                            elemHeight: elemHeight,
                            collisionPosition: collisionPosition,
                            collisionWidth: collisionWidth,
                            collisionHeight: collisionHeight,
                            offset: [ atOffset[0] + myOffset[0], atOffset[1] + myOffset[1] ],
                            my: options.my,
                            at: options.at,
                            within: within,
                            elem: elem
                        });
                    }
                });
                if (options.using) {
                    using = function(props) {
                        var left = targetOffset.left - position.left, right = left + targetWidth - elemWidth, top = targetOffset.top - position.top, bottom = top + targetHeight - elemHeight, feedback = {
                            target: {
                                element: target,
                                left: targetOffset.left,
                                top: targetOffset.top,
                                width: targetWidth,
                                height: targetHeight
                            },
                            element: {
                                element: elem,
                                left: position.left,
                                top: position.top,
                                width: elemWidth,
                                height: elemHeight
                            },
                            horizontal: right < 0 ? "left" : left > 0 ? "right" : "center",
                            vertical: bottom < 0 ? "top" : top > 0 ? "bottom" : "middle"
                        };
                        if (targetWidth < elemWidth && abs(left + right) < targetWidth) {
                            feedback.horizontal = "center";
                        }
                        if (targetHeight < elemHeight && abs(top + bottom) < targetHeight) {
                            feedback.vertical = "middle";
                        }
                        if (max(abs(left), abs(right)) > max(abs(top), abs(bottom))) {
                            feedback.important = "horizontal";
                        } else {
                            feedback.important = "vertical";
                        }
                        options.using.call(this, props, feedback);
                    };
                }
                elem.offset($.extend(position, {
                    using: using
                }));
            });
        };
        $.ui.position = {
            fit: {
                left: function(position, data) {
                    var within = data.within, withinOffset = within.isWindow ? within.scrollLeft : within.offset.left, outerWidth = within.width, collisionPosLeft = position.left - data.collisionPosition.marginLeft, overLeft = withinOffset - collisionPosLeft, overRight = collisionPosLeft + data.collisionWidth - outerWidth - withinOffset, newOverRight;
                    if (data.collisionWidth > outerWidth) {
                        if (overLeft > 0 && overRight <= 0) {
                            newOverRight = position.left + overLeft + data.collisionWidth - outerWidth - withinOffset;
                            position.left += overLeft - newOverRight;
                        } else if (overRight > 0 && overLeft <= 0) {
                            position.left = withinOffset;
                        } else {
                            if (overLeft > overRight) {
                                position.left = withinOffset + outerWidth - data.collisionWidth;
                            } else {
                                position.left = withinOffset;
                            }
                        }
                    } else if (overLeft > 0) {
                        position.left += overLeft;
                    } else if (overRight > 0) {
                        position.left -= overRight;
                    } else {
                        position.left = max(position.left - collisionPosLeft, position.left);
                    }
                },
                top: function(position, data) {
                    var within = data.within, withinOffset = within.isWindow ? within.scrollTop : within.offset.top, outerHeight = data.within.height, collisionPosTop = position.top - data.collisionPosition.marginTop, overTop = withinOffset - collisionPosTop, overBottom = collisionPosTop + data.collisionHeight - outerHeight - withinOffset, newOverBottom;
                    if (data.collisionHeight > outerHeight) {
                        if (overTop > 0 && overBottom <= 0) {
                            newOverBottom = position.top + overTop + data.collisionHeight - outerHeight - withinOffset;
                            position.top += overTop - newOverBottom;
                        } else if (overBottom > 0 && overTop <= 0) {
                            position.top = withinOffset;
                        } else {
                            if (overTop > overBottom) {
                                position.top = withinOffset + outerHeight - data.collisionHeight;
                            } else {
                                position.top = withinOffset;
                            }
                        }
                    } else if (overTop > 0) {
                        position.top += overTop;
                    } else if (overBottom > 0) {
                        position.top -= overBottom;
                    } else {
                        position.top = max(position.top - collisionPosTop, position.top);
                    }
                }
            },
            flip: {
                left: function(position, data) {
                    var within = data.within, withinOffset = within.offset.left + within.scrollLeft, outerWidth = within.width, offsetLeft = within.isWindow ? within.scrollLeft : within.offset.left, collisionPosLeft = position.left - data.collisionPosition.marginLeft, overLeft = collisionPosLeft - offsetLeft, overRight = collisionPosLeft + data.collisionWidth - outerWidth - offsetLeft, myOffset = data.my[0] === "left" ? -data.elemWidth : data.my[0] === "right" ? data.elemWidth : 0, atOffset = data.at[0] === "left" ? data.targetWidth : data.at[0] === "right" ? -data.targetWidth : 0, offset = -2 * data.offset[0], newOverRight, newOverLeft;
                    if (overLeft < 0) {
                        newOverRight = position.left + myOffset + atOffset + offset + data.collisionWidth - outerWidth - withinOffset;
                        if (newOverRight < 0 || newOverRight < abs(overLeft)) {
                            position.left += myOffset + atOffset + offset;
                        }
                    } else if (overRight > 0) {
                        newOverLeft = position.left - data.collisionPosition.marginLeft + myOffset + atOffset + offset - offsetLeft;
                        if (newOverLeft > 0 || abs(newOverLeft) < overRight) {
                            position.left += myOffset + atOffset + offset;
                        }
                    }
                },
                top: function(position, data) {
                    var within = data.within, withinOffset = within.offset.top + within.scrollTop, outerHeight = within.height, offsetTop = within.isWindow ? within.scrollTop : within.offset.top, collisionPosTop = position.top - data.collisionPosition.marginTop, overTop = collisionPosTop - offsetTop, overBottom = collisionPosTop + data.collisionHeight - outerHeight - offsetTop, top = data.my[1] === "top", myOffset = top ? -data.elemHeight : data.my[1] === "bottom" ? data.elemHeight : 0, atOffset = data.at[1] === "top" ? data.targetHeight : data.at[1] === "bottom" ? -data.targetHeight : 0, offset = -2 * data.offset[1], newOverTop, newOverBottom;
                    if (overTop < 0) {
                        newOverBottom = position.top + myOffset + atOffset + offset + data.collisionHeight - outerHeight - withinOffset;
                        if (newOverBottom < 0 || newOverBottom < abs(overTop)) {
                            position.top += myOffset + atOffset + offset;
                        }
                    } else if (overBottom > 0) {
                        newOverTop = position.top - data.collisionPosition.marginTop + myOffset + atOffset + offset - offsetTop;
                        if (newOverTop > 0 || abs(newOverTop) < overBottom) {
                            position.top += myOffset + atOffset + offset;
                        }
                    }
                }
            },
            flipfit: {
                left: function() {
                    $.ui.position.flip.left.apply(this, arguments);
                    $.ui.position.fit.left.apply(this, arguments);
                },
                top: function() {
                    $.ui.position.flip.top.apply(this, arguments);
                    $.ui.position.fit.top.apply(this, arguments);
                }
            }
        };
        (function() {
            var testElement, testElementParent, testElementStyle, offsetLeft, i, body = document.getElementsByTagName("body")[0], div = document.createElement("div");
            testElement = document.createElement(body ? "div" : "body");
            testElementStyle = {
                visibility: "hidden",
                width: 0,
                height: 0,
                border: 0,
                margin: 0,
                background: "none"
            };
            if (body) {
                $.extend(testElementStyle, {
                    position: "absolute",
                    left: "-1000px",
                    top: "-1000px"
                });
            }
            for (i in testElementStyle) {
                testElement.style[i] = testElementStyle[i];
            }
            testElement.appendChild(div);
            testElementParent = body || document.documentElement;
            testElementParent.insertBefore(testElement, testElementParent.firstChild);
            div.style.cssText = "position: absolute; left: 10.7432222px;";
            offsetLeft = $(div).offset().left;
            supportsOffsetFractions = offsetLeft > 10 && offsetLeft < 11;
            testElement.innerHTML = "";
            testElementParent.removeChild(testElement);
        })();
    })();
    return $.ui.position;
});

(function(factory) {
    if (typeof define === "function" && define.amd) {
        define([ "jquery", "./core", "./widget", "./position" ], factory);
    } else {
        factory(jQuery);
    }
})(function($) {
    return $.widget("ui.menu", {
        version: "1.11.4",
        defaultElement: "<ul>",
        delay: 300,
        options: {
            icons: {
                submenu: "ui-icon-carat-1-e"
            },
            items: "> *",
            menus: "ul",
            position: {
                my: "left-1 top",
                at: "right top"
            },
            role: "menu",
            blur: null,
            focus: null,
            select: null
        },
        _create: function() {
            this.activeMenu = this.element;
            this.mouseHandled = false;
            this.element.uniqueId().addClass("ui-menu ui-widget ui-widget-content").toggleClass("ui-menu-icons", !!this.element.find(".ui-icon").length).attr({
                role: this.options.role,
                tabIndex: 0
            });
            if (this.options.disabled) {
                this.element.addClass("ui-state-disabled").attr("aria-disabled", "true");
            }
            this._on({
                "mousedown .ui-menu-item": function(event) {
                    event.preventDefault();
                },
                "click .ui-menu-item": function(event) {
                    var target = $(event.target);
                    if (!this.mouseHandled && target.not(".ui-state-disabled").length) {
                        this.select(event);
                        if (!event.isPropagationStopped()) {
                            this.mouseHandled = true;
                        }
                        if (target.has(".ui-menu").length) {
                            this.expand(event);
                        } else if (!this.element.is(":focus") && $(this.document[0].activeElement).closest(".ui-menu").length) {
                            this.element.trigger("focus", [ true ]);
                            if (this.active && this.active.parents(".ui-menu").length === 1) {
                                clearTimeout(this.timer);
                            }
                        }
                    }
                },
                "mouseenter .ui-menu-item": function(event) {
                    if (this.previousFilter) {
                        return;
                    }
                    var target = $(event.currentTarget);
                    target.siblings(".ui-state-active").removeClass("ui-state-active");
                    this.focus(event, target);
                },
                mouseleave: "collapseAll",
                "mouseleave .ui-menu": "collapseAll",
                focus: function(event, keepActiveItem) {
                    var item = this.active || this.element.find(this.options.items).eq(0);
                    if (!keepActiveItem) {
                        this.focus(event, item);
                    }
                },
                blur: function(event) {
                    this._delay(function() {
                        if (!$.contains(this.element[0], this.document[0].activeElement)) {
                            this.collapseAll(event);
                        }
                    });
                },
                keydown: "_keydown"
            });
            this.refresh();
            this._on(this.document, {
                click: function(event) {
                    if (this._closeOnDocumentClick(event)) {
                        this.collapseAll(event);
                    }
                    this.mouseHandled = false;
                }
            });
        },
        _destroy: function() {
            this.element.removeAttr("aria-activedescendant").find(".ui-menu").addBack().removeClass("ui-menu ui-widget ui-widget-content ui-menu-icons ui-front").removeAttr("role").removeAttr("tabIndex").removeAttr("aria-labelledby").removeAttr("aria-expanded").removeAttr("aria-hidden").removeAttr("aria-disabled").removeUniqueId().show();
            this.element.find(".ui-menu-item").removeClass("ui-menu-item").removeAttr("role").removeAttr("aria-disabled").removeUniqueId().removeClass("ui-state-hover").removeAttr("tabIndex").removeAttr("role").removeAttr("aria-haspopup").children().each(function() {
                var elem = $(this);
                if (elem.data("ui-menu-submenu-carat")) {
                    elem.remove();
                }
            });
            this.element.find(".ui-menu-divider").removeClass("ui-menu-divider ui-widget-content");
        },
        _keydown: function(event) {
            var match, prev, character, skip, preventDefault = true;
            switch (event.keyCode) {
              case $.ui.keyCode.PAGE_UP:
                this.previousPage(event);
                break;

              case $.ui.keyCode.PAGE_DOWN:
                this.nextPage(event);
                break;

              case $.ui.keyCode.HOME:
                this._move("first", "first", event);
                break;

              case $.ui.keyCode.END:
                this._move("last", "last", event);
                break;

              case $.ui.keyCode.UP:
                this.previous(event);
                break;

              case $.ui.keyCode.DOWN:
                this.next(event);
                break;

              case $.ui.keyCode.LEFT:
                this.collapse(event);
                break;

              case $.ui.keyCode.RIGHT:
                if (this.active && !this.active.is(".ui-state-disabled")) {
                    this.expand(event);
                }
                break;

              case $.ui.keyCode.ENTER:
              case $.ui.keyCode.SPACE:
                this._activate(event);
                break;

              case $.ui.keyCode.ESCAPE:
                this.collapse(event);
                break;

              default:
                preventDefault = false;
                prev = this.previousFilter || "";
                character = String.fromCharCode(event.keyCode);
                skip = false;
                clearTimeout(this.filterTimer);
                if (character === prev) {
                    skip = true;
                } else {
                    character = prev + character;
                }
                match = this._filterMenuItems(character);
                match = skip && match.index(this.active.next()) !== -1 ? this.active.nextAll(".ui-menu-item") : match;
                if (!match.length) {
                    character = String.fromCharCode(event.keyCode);
                    match = this._filterMenuItems(character);
                }
                if (match.length) {
                    this.focus(event, match);
                    this.previousFilter = character;
                    this.filterTimer = this._delay(function() {
                        delete this.previousFilter;
                    }, 1e3);
                } else {
                    delete this.previousFilter;
                }
            }
            if (preventDefault) {
                event.preventDefault();
            }
        },
        _activate: function(event) {
            if (!this.active.is(".ui-state-disabled")) {
                if (this.active.is("[aria-haspopup='true']")) {
                    this.expand(event);
                } else {
                    this.select(event);
                }
            }
        },
        refresh: function() {
            var menus, items, that = this, icon = this.options.icons.submenu, submenus = this.element.find(this.options.menus);
            this.element.toggleClass("ui-menu-icons", !!this.element.find(".ui-icon").length);
            submenus.filter(":not(.ui-menu)").addClass("ui-menu ui-widget ui-widget-content ui-front").hide().attr({
                role: this.options.role,
                "aria-hidden": "true",
                "aria-expanded": "false"
            }).each(function() {
                var menu = $(this), item = menu.parent(), submenuCarat = $("<span>").addClass("ui-menu-icon ui-icon " + icon).data("ui-menu-submenu-carat", true);
                item.attr("aria-haspopup", "true").prepend(submenuCarat);
                menu.attr("aria-labelledby", item.attr("id"));
            });
            menus = submenus.add(this.element);
            items = menus.find(this.options.items);
            items.not(".ui-menu-item").each(function() {
                var item = $(this);
                if (that._isDivider(item)) {
                    item.addClass("ui-widget-content ui-menu-divider");
                }
            });
            items.not(".ui-menu-item, .ui-menu-divider").addClass("ui-menu-item").uniqueId().attr({
                tabIndex: -1,
                role: this._itemRole()
            });
            items.filter(".ui-state-disabled").attr("aria-disabled", "true");
            if (this.active && !$.contains(this.element[0], this.active[0])) {
                this.blur();
            }
        },
        _itemRole: function() {
            return {
                menu: "menuitem",
                listbox: "option"
            }[this.options.role];
        },
        _setOption: function(key, value) {
            if (key === "icons") {
                this.element.find(".ui-menu-icon").removeClass(this.options.icons.submenu).addClass(value.submenu);
            }
            if (key === "disabled") {
                this.element.toggleClass("ui-state-disabled", !!value).attr("aria-disabled", value);
            }
            this._super(key, value);
        },
        focus: function(event, item) {
            var nested, focused;
            this.blur(event, event && event.type === "focus");
            this._scrollIntoView(item);
            this.active = item.first();
            focused = this.active.addClass("ui-state-focus").removeClass("ui-state-active");
            if (this.options.role) {
                this.element.attr("aria-activedescendant", focused.attr("id"));
            }
            this.active.parent().closest(".ui-menu-item").addClass("ui-state-active");
            if (event && event.type === "keydown") {
                this._close();
            } else {
                this.timer = this._delay(function() {
                    this._close();
                }, this.delay);
            }
            nested = item.children(".ui-menu");
            if (nested.length && event && /^mouse/.test(event.type)) {
                this._startOpening(nested);
            }
            this.activeMenu = item.parent();
            this._trigger("focus", event, {
                item: item
            });
        },
        _scrollIntoView: function(item) {
            var borderTop, paddingTop, offset, scroll, elementHeight, itemHeight;
            if (this._hasScroll()) {
                borderTop = parseFloat($.css(this.activeMenu[0], "borderTopWidth")) || 0;
                paddingTop = parseFloat($.css(this.activeMenu[0], "paddingTop")) || 0;
                offset = item.offset().top - this.activeMenu.offset().top - borderTop - paddingTop;
                scroll = this.activeMenu.scrollTop();
                elementHeight = this.activeMenu.height();
                itemHeight = item.outerHeight();
                if (offset < 0) {
                    this.activeMenu.scrollTop(scroll + offset);
                } else if (offset + itemHeight > elementHeight) {
                    this.activeMenu.scrollTop(scroll + offset - elementHeight + itemHeight);
                }
            }
        },
        blur: function(event, fromFocus) {
            if (!fromFocus) {
                clearTimeout(this.timer);
            }
            if (!this.active) {
                return;
            }
            this.active.removeClass("ui-state-focus");
            this.active = null;
            this._trigger("blur", event, {
                item: this.active
            });
        },
        _startOpening: function(submenu) {
            clearTimeout(this.timer);
            if (submenu.attr("aria-hidden") !== "true") {
                return;
            }
            this.timer = this._delay(function() {
                this._close();
                this._open(submenu);
            }, this.delay);
        },
        _open: function(submenu) {
            var position = $.extend({
                of: this.active
            }, this.options.position);
            clearTimeout(this.timer);
            this.element.find(".ui-menu").not(submenu.parents(".ui-menu")).hide().attr("aria-hidden", "true");
            submenu.show().removeAttr("aria-hidden").attr("aria-expanded", "true").position(position);
        },
        collapseAll: function(event, all) {
            clearTimeout(this.timer);
            this.timer = this._delay(function() {
                var currentMenu = all ? this.element : $(event && event.target).closest(this.element.find(".ui-menu"));
                if (!currentMenu.length) {
                    currentMenu = this.element;
                }
                this._close(currentMenu);
                this.blur(event);
                this.activeMenu = currentMenu;
            }, this.delay);
        },
        _close: function(startMenu) {
            if (!startMenu) {
                startMenu = this.active ? this.active.parent() : this.element;
            }
            startMenu.find(".ui-menu").hide().attr("aria-hidden", "true").attr("aria-expanded", "false").end().find(".ui-state-active").not(".ui-state-focus").removeClass("ui-state-active");
        },
        _closeOnDocumentClick: function(event) {
            return !$(event.target).closest(".ui-menu").length;
        },
        _isDivider: function(item) {
            return !/[^\-\u2014\u2013\s]/.test(item.text());
        },
        collapse: function(event) {
            var newItem = this.active && this.active.parent().closest(".ui-menu-item", this.element);
            if (newItem && newItem.length) {
                this._close();
                this.focus(event, newItem);
            }
        },
        expand: function(event) {
            var newItem = this.active && this.active.children(".ui-menu ").find(this.options.items).first();
            if (newItem && newItem.length) {
                this._open(newItem.parent());
                this._delay(function() {
                    this.focus(event, newItem);
                });
            }
        },
        next: function(event) {
            this._move("next", "first", event);
        },
        previous: function(event) {
            this._move("prev", "last", event);
        },
        isFirstItem: function() {
            return this.active && !this.active.prevAll(".ui-menu-item").length;
        },
        isLastItem: function() {
            return this.active && !this.active.nextAll(".ui-menu-item").length;
        },
        _move: function(direction, filter, event) {
            var next;
            if (this.active) {
                if (direction === "first" || direction === "last") {
                    next = this.active[direction === "first" ? "prevAll" : "nextAll"](".ui-menu-item").eq(-1);
                } else {
                    next = this.active[direction + "All"](".ui-menu-item").eq(0);
                }
            }
            if (!next || !next.length || !this.active) {
                next = this.activeMenu.find(this.options.items)[filter]();
            }
            this.focus(event, next);
        },
        nextPage: function(event) {
            var item, base, height;
            if (!this.active) {
                this.next(event);
                return;
            }
            if (this.isLastItem()) {
                return;
            }
            if (this._hasScroll()) {
                base = this.active.offset().top;
                height = this.element.height();
                this.active.nextAll(".ui-menu-item").each(function() {
                    item = $(this);
                    return item.offset().top - base - height < 0;
                });
                this.focus(event, item);
            } else {
                this.focus(event, this.activeMenu.find(this.options.items)[!this.active ? "first" : "last"]());
            }
        },
        previousPage: function(event) {
            var item, base, height;
            if (!this.active) {
                this.next(event);
                return;
            }
            if (this.isFirstItem()) {
                return;
            }
            if (this._hasScroll()) {
                base = this.active.offset().top;
                height = this.element.height();
                this.active.prevAll(".ui-menu-item").each(function() {
                    item = $(this);
                    return item.offset().top - base + height > 0;
                });
                this.focus(event, item);
            } else {
                this.focus(event, this.activeMenu.find(this.options.items).first());
            }
        },
        _hasScroll: function() {
            return this.element.outerHeight() < this.element.prop("scrollHeight");
        },
        select: function(event) {
            this.active = this.active || $(event.target).closest(".ui-menu-item");
            var ui = {
                item: this.active
            };
            if (!this.active.has(".ui-menu").length) {
                this.collapseAll(event, true);
            }
            this._trigger("select", event, ui);
        },
        _filterMenuItems: function(character) {
            var escapedCharacter = character.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&"), regex = new RegExp("^" + escapedCharacter, "i");
            return this.activeMenu.find(this.options.items).filter(".ui-menu-item").filter(function() {
                return regex.test($.trim($(this).text()));
            });
        }
    });
});

(function($) {
    $.fn.colorPicker = function() {
        if (this.length > 0) buildSelector();
        return this.each(function(i) {
            buildPicker(this);
        });
    };
    var selectorOwner;
    var selectorShowing = false;
    buildPicker = function(element) {
        control = $("<div class='color_picker'>&nbsp;</div>");
        control.css("background-color", $(element).val());
        control.bind("click", toggleSelector);
        $(element).after(control);
        $(element).bind("change", function() {
            selectedValue = toHex($(element).val());
            $(element).next(".color_picker").css("background-color", selectedValue);
        });
        $(element).hide();
    };
    buildSelector = function() {
        selector = $("<div id='color_selector'></div>");
        $.each($.fn.colorPicker.defaultColors, function(i) {
            swatch = $("<div class='color_swatch'>&nbsp;</div>");
            swatch.css("background-color", "#" + this);
            swatch.bind("click", function(e) {
                changeColor($(this).css("background-color"));
            });
            swatch.bind("mouseover", function(e) {
                $(this).css("border-color", "#598FEF");
                $("input#color_value").val(toHex($(this).css("background-color")));
            });
            swatch.bind("mouseout", function(e) {
                $(this).css("border-color", "#000");
                $("input#color_value").val(toHex($(selectorOwner).css("background-color")));
            });
            swatch.appendTo(selector);
        });
        hex_field = $("<label for='color_value'>Hex</label><input type='text' size='8' id='color_value'/>");
        hex_field.bind("keydown", function(event) {
            if (event.keyCode == 13) {
                changeColor($(this).val());
            }
            if (event.keyCode == 27) {
                toggleSelector();
            }
        });
        $("<div id='color_custom'></div>").append(hex_field).appendTo(selector);
        $("body").append(selector);
        selector.hide();
    };
    checkMouse = function(event) {
        var selector = "div#color_selector";
        var selectorParent = $(event.target).parents(selector).length;
        if (event.target == $(selector)[0] || event.target == selectorOwner || selectorParent > 0) return;
        hideSelector();
    };
    hideSelector = function() {
        var selector = $("div#color_selector");
        $(document).unbind("mousedown", checkMouse);
        selector.hide();
        selectorShowing = false;
    };
    showSelector = function() {
        var selector = $("div#color_selector");
        selector.css({
            top: $(selectorOwner).offset().top + $(selectorOwner).outerHeight(),
            left: $(selectorOwner).offset().left
        });
        hexColor = $(selectorOwner).prev("input").val();
        $("input#color_value").val(hexColor);
        selector.show();
        $(document).bind("mousedown", checkMouse);
        selectorShowing = true;
    };
    toggleSelector = function(event) {
        selectorOwner = this;
        selectorShowing ? hideSelector() : showSelector();
    };
    changeColor = function(value) {
        if (selectedValue = toHex(value)) {
            $(selectorOwner).css("background-color", selectedValue);
            $(selectorOwner).prev("input").val(selectedValue).change();
            hideSelector();
        }
    };
    toHex = function(color) {
        if (color.match(/[0-9a-fA-F]{3}$/) || color.match(/[0-9a-fA-F]{6}$/)) {
            color = color.charAt(0) == "#" ? color : "#" + color;
        } else if (color.match(/^rgb\(([0-9]|[1-9][0-9]|[1][0-9]{2}|[2][0-4][0-9]|[2][5][0-5]),[ ]{0,1}([0-9]|[1-9][0-9]|[1][0-9]{2}|[2][0-4][0-9]|[2][5][0-5]),[ ]{0,1}([0-9]|[1-9][0-9]|[1][0-9]{2}|[2][0-4][0-9]|[2][5][0-5])\)$/)) {
            var c = [ parseInt(RegExp.$1), parseInt(RegExp.$2), parseInt(RegExp.$3) ];
            var pad = function(str) {
                if (str.length < 2) {
                    for (var i = 0, len = 2 - str.length; i < len; i++) {
                        str = "0" + str;
                    }
                }
                return str;
            };
            if (c.length == 3) {
                var r = pad(c[0].toString(16)), g = pad(c[1].toString(16)), b = pad(c[2].toString(16));
                color = "#" + r + g + b;
            }
        } else color = false;
        return color;
    };
    $.fn.colorPicker.addColors = function(colorArray) {
        $.fn.colorPicker.defaultColors = $.fn.colorPicker.defaultColors.concat(colorArray);
    };
    $.fn.colorPicker.defaultColors = [ "000000", "993300", "333300", "000080", "333399", "333333", "800000", "FF6600", "808000", "008000", "008080", "0000FF", "666699", "808080", "FF0000", "FF9900", "99CC00", "339966", "33CCCC", "3366FF", "800080", "999999", "FF00FF", "FFCC00", "FFFF00", "00FF00", "00FFFF", "00CCFF", "993366", "C0C0C0", "FF99CC", "FFCC99", "FFFF99", "CCFFFF", "99CCFF", "FFFFFF" ];
})(jQuery);

(function($) {
    "use strict";
    var Freeow;
    Freeow = function(title, message, options) {
        var startStyle, i, u;
        this.options = $.extend({}, $.fn.freeow.defaults, options);
        this.element = $(this.options.template(title, message));
        if (this.options.startStyle) {
            startStyle = this.options.startStyle;
        } else {
            startStyle = this.options.hideStyle;
        }
        this.element.css(startStyle);
        this.element.data("freeow", this);
        for (i = 0, u = this.options.classes.length; i < u; i += 1) {
            this.element.addClass(this.options.classes[i]);
        }
        this.element.click(this.options.onClick);
        this.element.hover(this.options.onHover);
        this.autoHide = false;
    };
    Freeow.prototype = {
        attach: function(container) {
            $(container).prepend(this.element);
            this.show();
        },
        show: function() {
            var opts, self, fn, delay;
            opts = {
                duration: this.showDuration
            };
            if (this.options.autoHide && this.options.autoHideDelay > 0) {
                this.autoHide = true;
                self = this;
                delay = this.options.autoHideDelay;
                fn = function() {
                    if (self.autoHide) {
                        self.hide();
                    }
                };
                opts.complete = function() {
                    setTimeout(fn, delay);
                };
            }
            this.element.animate(this.options.showStyle, opts);
        },
        hide: function() {
            var self = this;
            this.element.animate(this.options.hideStyle, {
                duration: this.options.hideDuration,
                complete: function() {
                    self.destroy();
                }
            });
        },
        destroy: function() {
            this.element.data("freeow", undefined);
            this.element.remove();
        }
    };
    if (typeof $.fn.freeow === "undefined") {
        $.fn.extend({
            freeow: function(title, message, options) {
                return this.each(function() {
                    var f;
                    f = new Freeow(title, message, options);
                    f.attach(this);
                });
            }
        });
        $.fn.freeow.defaults = {
            autoHide: true,
            autoHideDelay: 3e3,
            classes: [],
            startStyle: null,
            showStyle: {
                opacity: 1
            },
            showDuration: 250,
            hideStyle: {
                opacity: 0
            },
            hideDuration: 500,
            onClick: function(event) {
                $(this).data("freeow").hide();
            },
            onHover: function(event) {
                $(this).data("freeow").autoHide = false;
            },
            template: function(title, message) {
                var e;
                e = [ "<div>", '<div class="background">', '<div class="content">', "<h2>" + title + "</h2>", "<p>" + message + "</p>", "</div>", "</div>", '<span class="icon"></span>', '<span class="close"></span>', "</div>" ].join("");
                return e;
            }
        };
    }
})(jQuery);

(function(window, document, undefined) {
    (function(factory) {
        "use strict";
        if (typeof define === "function" && define.amd) {
            define([ "jquery" ], factory);
        } else if (jQuery && !jQuery.fn.qtip) {
            factory(jQuery);
        }
    })(function($) {
        "use strict";
        var TRUE = true, FALSE = false, NULL = null, X = "x", Y = "y", WIDTH = "width", HEIGHT = "height", TOP = "top", LEFT = "left", BOTTOM = "bottom", RIGHT = "right", CENTER = "center", FLIP = "flip", FLIPINVERT = "flipinvert", SHIFT = "shift", QTIP, PROTOTYPE, CORNER, CHECKS, PLUGINS = {}, NAMESPACE = "qtip", ATTR_HAS = "data-hasqtip", ATTR_ID = "data-qtip-id", WIDGET = [ "ui-widget", "ui-tooltip" ], SELECTOR = "." + NAMESPACE, INACTIVE_EVENTS = "click dblclick mousedown mouseup mousemove mouseleave mouseenter".split(" "), CLASS_FIXED = NAMESPACE + "-fixed", CLASS_DEFAULT = NAMESPACE + "-default", CLASS_FOCUS = NAMESPACE + "-focus", CLASS_HOVER = NAMESPACE + "-hover", CLASS_DISABLED = NAMESPACE + "-disabled", replaceSuffix = "_replacedByqTip", oldtitle = "oldtitle", trackingBound, BROWSER = {
            ie: function() {
                for (var v = 4, i = document.createElement("div"); (i.innerHTML = "<!--[if gt IE " + v + "]><i></i><![endif]-->") && i.getElementsByTagName("i")[0]; v += 1) {}
                return v > 4 ? v : NaN;
            }(),
            iOS: parseFloat(("" + (/CPU.*OS ([0-9_]{1,5})|(CPU like).*AppleWebKit.*Mobile/i.exec(navigator.userAgent) || [ 0, "" ])[1]).replace("undefined", "3_2").replace("_", ".").replace("_", "")) || FALSE
        };
        function QTip(target, options, id, attr) {
            this.id = id;
            this.target = target;
            this.tooltip = NULL;
            this.elements = {
                target: target
            };
            this._id = NAMESPACE + "-" + id;
            this.timers = {
                img: {}
            };
            this.options = options;
            this.plugins = {};
            this.cache = {
                event: {},
                target: $(),
                disabled: FALSE,
                attr: attr,
                onTooltip: FALSE,
                lastClass: ""
            };
            this.rendered = this.destroyed = this.disabled = this.waiting = this.hiddenDuringWait = this.positioning = this.triggering = FALSE;
        }
        PROTOTYPE = QTip.prototype;
        PROTOTYPE._when = function(deferreds) {
            return $.when.apply($, deferreds);
        };
        PROTOTYPE.render = function(show) {
            if (this.rendered || this.destroyed) {
                return this;
            }
            var self = this, options = this.options, cache = this.cache, elements = this.elements, text = options.content.text, title = options.content.title, button = options.content.button, posOptions = options.position, namespace = "." + this._id + " ", deferreds = [], tooltip;
            $.attr(this.target[0], "aria-describedby", this._id);
            cache.posClass = this._createPosClass((this.position = {
                my: posOptions.my,
                at: posOptions.at
            }).my);
            this.tooltip = elements.tooltip = tooltip = $("<div/>", {
                id: this._id,
                class: [ NAMESPACE, CLASS_DEFAULT, options.style.classes, cache.posClass ].join(" "),
                width: options.style.width || "",
                height: options.style.height || "",
                tracking: posOptions.target === "mouse" && posOptions.adjust.mouse,
                role: "alert",
                "aria-live": "polite",
                "aria-atomic": FALSE,
                "aria-describedby": this._id + "-content",
                "aria-hidden": TRUE
            }).toggleClass(CLASS_DISABLED, this.disabled).attr(ATTR_ID, this.id).data(NAMESPACE, this).appendTo(posOptions.container).append(elements.content = $("<div />", {
                class: NAMESPACE + "-content",
                id: this._id + "-content",
                "aria-atomic": TRUE
            }));
            this.rendered = -1;
            this.positioning = TRUE;
            if (title) {
                this._createTitle();
                if (!$.isFunction(title)) {
                    deferreds.push(this._updateTitle(title, FALSE));
                }
            }
            if (button) {
                this._createButton();
            }
            if (!$.isFunction(text)) {
                deferreds.push(this._updateContent(text, FALSE));
            }
            this.rendered = TRUE;
            this._setWidget();
            $.each(PLUGINS, function(name) {
                var instance;
                if (this.initialize === "render" && (instance = this(self))) {
                    self.plugins[name] = instance;
                }
            });
            this._unassignEvents();
            this._assignEvents();
            this._when(deferreds).then(function() {
                self._trigger("render");
                self.positioning = FALSE;
                if (!self.hiddenDuringWait && (options.show.ready || show)) {
                    self.toggle(TRUE, cache.event, FALSE);
                }
                self.hiddenDuringWait = FALSE;
            });
            QTIP.api[this.id] = this;
            return this;
        };
        PROTOTYPE.destroy = function(immediate) {
            if (this.destroyed) {
                return this.target;
            }
            function process() {
                if (this.destroyed) {
                    return;
                }
                this.destroyed = TRUE;
                var target = this.target, title = target.attr(oldtitle), timer;
                if (this.rendered) {
                    this.tooltip.stop(1, 0).find("*").remove().end().remove();
                }
                $.each(this.plugins, function(name) {
                    this.destroy && this.destroy();
                });
                for (timer in this.timers) {
                    clearTimeout(this.timers[timer]);
                }
                target.removeData(NAMESPACE).removeAttr(ATTR_ID).removeAttr(ATTR_HAS).removeAttr("aria-describedby");
                if (this.options.suppress && title) {
                    target.attr("title", title).removeAttr(oldtitle);
                }
                this._unassignEvents();
                this.options = this.elements = this.cache = this.timers = this.plugins = this.mouse = NULL;
                delete QTIP.api[this.id];
            }
            if ((immediate !== TRUE || this.triggering === "hide") && this.rendered) {
                this.tooltip.one("tooltiphidden", $.proxy(process, this));
                !this.triggering && this.hide();
            } else {
                process.call(this);
            }
            return this.target;
        };
        function invalidOpt(a) {
            return a === NULL || $.type(a) !== "object";
        }
        function invalidContent(c) {
            return !($.isFunction(c) || c && c.attr || c.length || $.type(c) === "object" && (c.jquery || c.then));
        }
        function sanitizeOptions(opts) {
            var content, text, ajax, once;
            if (invalidOpt(opts)) {
                return FALSE;
            }
            if (invalidOpt(opts.metadata)) {
                opts.metadata = {
                    type: opts.metadata
                };
            }
            if ("content" in opts) {
                content = opts.content;
                if (invalidOpt(content) || content.jquery || content.done) {
                    content = opts.content = {
                        text: text = invalidContent(content) ? FALSE : content
                    };
                } else {
                    text = content.text;
                }
                if ("ajax" in content) {
                    ajax = content.ajax;
                    once = ajax && ajax.once !== FALSE;
                    delete content.ajax;
                    content.text = function(event, api) {
                        var loading = text || $(this).attr(api.options.content.attr) || "Loading...", deferred = $.ajax($.extend({}, ajax, {
                            context: api
                        })).then(ajax.success, NULL, ajax.error).then(function(content) {
                            if (content && once) {
                                api.set("content.text", content);
                            }
                            return content;
                        }, function(xhr, status, error) {
                            if (api.destroyed || xhr.status === 0) {
                                return;
                            }
                            api.set("content.text", status + ": " + error);
                        });
                        return !once ? (api.set("content.text", loading), deferred) : loading;
                    };
                }
                if ("title" in content) {
                    if ($.isPlainObject(content.title)) {
                        content.button = content.title.button;
                        content.title = content.title.text;
                    }
                    if (invalidContent(content.title || FALSE)) {
                        content.title = FALSE;
                    }
                }
            }
            if ("position" in opts && invalidOpt(opts.position)) {
                opts.position = {
                    my: opts.position,
                    at: opts.position
                };
            }
            if ("show" in opts && invalidOpt(opts.show)) {
                opts.show = opts.show.jquery ? {
                    target: opts.show
                } : opts.show === TRUE ? {
                    ready: TRUE
                } : {
                    event: opts.show
                };
            }
            if ("hide" in opts && invalidOpt(opts.hide)) {
                opts.hide = opts.hide.jquery ? {
                    target: opts.hide
                } : {
                    event: opts.hide
                };
            }
            if ("style" in opts && invalidOpt(opts.style)) {
                opts.style = {
                    classes: opts.style
                };
            }
            $.each(PLUGINS, function() {
                this.sanitize && this.sanitize(opts);
            });
            return opts;
        }
        CHECKS = PROTOTYPE.checks = {
            builtin: {
                "^id$": function(obj, o, v, prev) {
                    var id = v === TRUE ? QTIP.nextid : v, new_id = NAMESPACE + "-" + id;
                    if (id !== FALSE && id.length > 0 && !$("#" + new_id).length) {
                        this._id = new_id;
                        if (this.rendered) {
                            this.tooltip[0].id = this._id;
                            this.elements.content[0].id = this._id + "-content";
                            this.elements.title[0].id = this._id + "-title";
                        }
                    } else {
                        obj[o] = prev;
                    }
                },
                "^prerender": function(obj, o, v) {
                    v && !this.rendered && this.render(this.options.show.ready);
                },
                "^content.text$": function(obj, o, v) {
                    this._updateContent(v);
                },
                "^content.attr$": function(obj, o, v, prev) {
                    if (this.options.content.text === this.target.attr(prev)) {
                        this._updateContent(this.target.attr(v));
                    }
                },
                "^content.title$": function(obj, o, v) {
                    if (!v) {
                        return this._removeTitle();
                    }
                    v && !this.elements.title && this._createTitle();
                    this._updateTitle(v);
                },
                "^content.button$": function(obj, o, v) {
                    this._updateButton(v);
                },
                "^content.title.(text|button)$": function(obj, o, v) {
                    this.set("content." + o, v);
                },
                "^position.(my|at)$": function(obj, o, v) {
                    "string" === typeof v && (this.position[o] = obj[o] = new CORNER(v, o === "at"));
                },
                "^position.container$": function(obj, o, v) {
                    this.rendered && this.tooltip.appendTo(v);
                },
                "^show.ready$": function(obj, o, v) {
                    v && (!this.rendered && this.render(TRUE) || this.toggle(TRUE));
                },
                "^style.classes$": function(obj, o, v, p) {
                    this.rendered && this.tooltip.removeClass(p).addClass(v);
                },
                "^style.(width|height)": function(obj, o, v) {
                    this.rendered && this.tooltip.css(o, v);
                },
                "^style.widget|content.title": function() {
                    this.rendered && this._setWidget();
                },
                "^style.def": function(obj, o, v) {
                    this.rendered && this.tooltip.toggleClass(CLASS_DEFAULT, !!v);
                },
                "^events.(render|show|move|hide|focus|blur)$": function(obj, o, v) {
                    this.rendered && this.tooltip[($.isFunction(v) ? "" : "un") + "bind"]("tooltip" + o, v);
                },
                "^(show|hide|position).(event|target|fixed|inactive|leave|distance|viewport|adjust)": function() {
                    if (!this.rendered) {
                        return;
                    }
                    var posOptions = this.options.position;
                    this.tooltip.attr("tracking", posOptions.target === "mouse" && posOptions.adjust.mouse);
                    this._unassignEvents();
                    this._assignEvents();
                }
            }
        };
        function convertNotation(options, notation) {
            var i = 0, obj, option = options, levels = notation.split(".");
            while (option = option[levels[i++]]) {
                if (i < levels.length) {
                    obj = option;
                }
            }
            return [ obj || options, levels.pop() ];
        }
        PROTOTYPE.get = function(notation) {
            if (this.destroyed) {
                return this;
            }
            var o = convertNotation(this.options, notation.toLowerCase()), result = o[0][o[1]];
            return result.precedance ? result.string() : result;
        };
        function setCallback(notation, args) {
            var category, rule, match;
            for (category in this.checks) {
                for (rule in this.checks[category]) {
                    if (match = new RegExp(rule, "i").exec(notation)) {
                        args.push(match);
                        if (category === "builtin" || this.plugins[category]) {
                            this.checks[category][rule].apply(this.plugins[category] || this, args);
                        }
                    }
                }
            }
        }
        var rmove = /^position\.(my|at|adjust|target|container|viewport)|style|content|show\.ready/i, rrender = /^prerender|show\.ready/i;
        PROTOTYPE.set = function(option, value) {
            if (this.destroyed) {
                return this;
            }
            var rendered = this.rendered, reposition = FALSE, options = this.options, checks = this.checks, name;
            if ("string" === typeof option) {
                name = option;
                option = {};
                option[name] = value;
            } else {
                option = $.extend({}, option);
            }
            $.each(option, function(notation, value) {
                if (rendered && rrender.test(notation)) {
                    delete option[notation];
                    return;
                }
                var obj = convertNotation(options, notation.toLowerCase()), previous;
                previous = obj[0][obj[1]];
                obj[0][obj[1]] = value && value.nodeType ? $(value) : value;
                reposition = rmove.test(notation) || reposition;
                option[notation] = [ obj[0], obj[1], value, previous ];
            });
            sanitizeOptions(options);
            this.positioning = TRUE;
            $.each(option, $.proxy(setCallback, this));
            this.positioning = FALSE;
            if (this.rendered && this.tooltip[0].offsetWidth > 0 && reposition) {
                this.reposition(options.position.target === "mouse" ? NULL : this.cache.event);
            }
            return this;
        };
        PROTOTYPE._update = function(content, element, reposition) {
            var self = this, cache = this.cache;
            if (!this.rendered || !content) {
                return FALSE;
            }
            if ($.isFunction(content)) {
                content = content.call(this.elements.target, cache.event, this) || "";
            }
            if ($.isFunction(content.then)) {
                cache.waiting = TRUE;
                return content.then(function(c) {
                    cache.waiting = FALSE;
                    return self._update(c, element);
                }, NULL, function(e) {
                    return self._update(e, element);
                });
            }
            if (content === FALSE || !content && content !== "") {
                return FALSE;
            }
            if (content.jquery && content.length > 0) {
                element.empty().append(content.css({
                    display: "block",
                    visibility: "visible"
                }));
            } else {
                element.html(content);
            }
            return this._waitForContent(element).then(function(images) {
                if (self.rendered && self.tooltip[0].offsetWidth > 0) {
                    self.reposition(cache.event, !images.length);
                }
            });
        };
        PROTOTYPE._waitForContent = function(element) {
            var cache = this.cache;
            cache.waiting = TRUE;
            return ($.fn.imagesLoaded ? element.imagesLoaded() : $.Deferred().resolve([])).done(function() {
                cache.waiting = FALSE;
            }).promise();
        };
        PROTOTYPE._updateContent = function(content, reposition) {
            this._update(content, this.elements.content, reposition);
        };
        PROTOTYPE._updateTitle = function(content, reposition) {
            if (this._update(content, this.elements.title, reposition) === FALSE) {
                this._removeTitle(FALSE);
            }
        };
        PROTOTYPE._createTitle = function() {
            var elements = this.elements, id = this._id + "-title";
            if (elements.titlebar) {
                this._removeTitle();
            }
            elements.titlebar = $("<div />", {
                class: NAMESPACE + "-titlebar " + (this.options.style.widget ? createWidgetClass("header") : "")
            }).append(elements.title = $("<div />", {
                id: id,
                class: NAMESPACE + "-title",
                "aria-atomic": TRUE
            })).insertBefore(elements.content).delegate(".qtip-close", "mousedown keydown mouseup keyup mouseout", function(event) {
                $(this).toggleClass("ui-state-active ui-state-focus", event.type.substr(-4) === "down");
            }).delegate(".qtip-close", "mouseover mouseout", function(event) {
                $(this).toggleClass("ui-state-hover", event.type === "mouseover");
            });
            if (this.options.content.button) {
                this._createButton();
            }
        };
        PROTOTYPE._removeTitle = function(reposition) {
            var elements = this.elements;
            if (elements.title) {
                elements.titlebar.remove();
                elements.titlebar = elements.title = elements.button = NULL;
                if (reposition !== FALSE) {
                    this.reposition();
                }
            }
        };
        PROTOTYPE._createPosClass = function(my) {
            return NAMESPACE + "-pos-" + (my || this.options.position.my).abbrev();
        };
        PROTOTYPE.reposition = function(event, effect) {
            if (!this.rendered || this.positioning || this.destroyed) {
                return this;
            }
            this.positioning = TRUE;
            var cache = this.cache, tooltip = this.tooltip, posOptions = this.options.position, target = posOptions.target, my = posOptions.my, at = posOptions.at, viewport = posOptions.viewport, container = posOptions.container, adjust = posOptions.adjust, method = adjust.method.split(" "), tooltipWidth = tooltip.outerWidth(FALSE), tooltipHeight = tooltip.outerHeight(FALSE), targetWidth = 0, targetHeight = 0, type = tooltip.css("position"), position = {
                left: 0,
                top: 0
            }, visible = tooltip[0].offsetWidth > 0, isScroll = event && event.type === "scroll", win = $(window), doc = container[0].ownerDocument, mouse = this.mouse, pluginCalculations, offset, adjusted, newClass;
            if ($.isArray(target) && target.length === 2) {
                at = {
                    x: LEFT,
                    y: TOP
                };
                position = {
                    left: target[0],
                    top: target[1]
                };
            } else if (target === "mouse") {
                at = {
                    x: LEFT,
                    y: TOP
                };
                if ((!adjust.mouse || this.options.hide.distance) && cache.origin && cache.origin.pageX) {
                    event = cache.origin;
                } else if (!event || event && (event.type === "resize" || event.type === "scroll")) {
                    event = cache.event;
                } else if (mouse && mouse.pageX) {
                    event = mouse;
                }
                if (type !== "static") {
                    position = container.offset();
                }
                if (doc.body.offsetWidth !== (window.innerWidth || doc.documentElement.clientWidth)) {
                    offset = $(document.body).offset();
                }
                position = {
                    left: event.pageX - position.left + (offset && offset.left || 0),
                    top: event.pageY - position.top + (offset && offset.top || 0)
                };
                if (adjust.mouse && isScroll && mouse) {
                    position.left -= (mouse.scrollX || 0) - win.scrollLeft();
                    position.top -= (mouse.scrollY || 0) - win.scrollTop();
                }
            } else {
                if (target === "event") {
                    if (event && event.target && event.type !== "scroll" && event.type !== "resize") {
                        cache.target = $(event.target);
                    } else if (!event.target) {
                        cache.target = this.elements.target;
                    }
                } else if (target !== "event") {
                    cache.target = $(target.jquery ? target : this.elements.target);
                }
                target = cache.target;
                target = $(target).eq(0);
                if (target.length === 0) {
                    return this;
                } else if (target[0] === document || target[0] === window) {
                    targetWidth = BROWSER.iOS ? window.innerWidth : target.width();
                    targetHeight = BROWSER.iOS ? window.innerHeight : target.height();
                    if (target[0] === window) {
                        position = {
                            top: (viewport || target).scrollTop(),
                            left: (viewport || target).scrollLeft()
                        };
                    }
                } else if (PLUGINS.imagemap && target.is("area")) {
                    pluginCalculations = PLUGINS.imagemap(this, target, at, PLUGINS.viewport ? method : FALSE);
                } else if (PLUGINS.svg && target && target[0].ownerSVGElement) {
                    pluginCalculations = PLUGINS.svg(this, target, at, PLUGINS.viewport ? method : FALSE);
                } else {
                    targetWidth = target.outerWidth(FALSE);
                    targetHeight = target.outerHeight(FALSE);
                    position = target.offset();
                }
                if (pluginCalculations) {
                    targetWidth = pluginCalculations.width;
                    targetHeight = pluginCalculations.height;
                    offset = pluginCalculations.offset;
                    position = pluginCalculations.position;
                }
                position = this.reposition.offset(target, position, container);
                if (BROWSER.iOS > 3.1 && BROWSER.iOS < 4.1 || BROWSER.iOS >= 4.3 && BROWSER.iOS < 4.33 || !BROWSER.iOS && type === "fixed") {
                    position.left -= win.scrollLeft();
                    position.top -= win.scrollTop();
                }
                if (!pluginCalculations || pluginCalculations && pluginCalculations.adjustable !== FALSE) {
                    position.left += at.x === RIGHT ? targetWidth : at.x === CENTER ? targetWidth / 2 : 0;
                    position.top += at.y === BOTTOM ? targetHeight : at.y === CENTER ? targetHeight / 2 : 0;
                }
            }
            position.left += adjust.x + (my.x === RIGHT ? -tooltipWidth : my.x === CENTER ? -tooltipWidth / 2 : 0);
            position.top += adjust.y + (my.y === BOTTOM ? -tooltipHeight : my.y === CENTER ? -tooltipHeight / 2 : 0);
            if (PLUGINS.viewport) {
                adjusted = position.adjusted = PLUGINS.viewport(this, position, posOptions, targetWidth, targetHeight, tooltipWidth, tooltipHeight);
                if (offset && adjusted.left) {
                    position.left += offset.left;
                }
                if (offset && adjusted.top) {
                    position.top += offset.top;
                }
                if (adjusted.my) {
                    this.position.my = adjusted.my;
                }
            } else {
                position.adjusted = {
                    left: 0,
                    top: 0
                };
            }
            if (cache.posClass !== (newClass = this._createPosClass(this.position.my))) {
                tooltip.removeClass(cache.posClass).addClass(cache.posClass = newClass);
            }
            if (!this._trigger("move", [ position, viewport.elem || viewport ], event)) {
                return this;
            }
            delete position.adjusted;
            if (effect === FALSE || !visible || isNaN(position.left) || isNaN(position.top) || target === "mouse" || !$.isFunction(posOptions.effect)) {
                tooltip.css(position);
            } else if ($.isFunction(posOptions.effect)) {
                posOptions.effect.call(tooltip, this, $.extend({}, position));
                tooltip.queue(function(next) {
                    $(this).css({
                        opacity: "",
                        height: ""
                    });
                    if (BROWSER.ie) {
                        this.style.removeAttribute("filter");
                    }
                    next();
                });
            }
            this.positioning = FALSE;
            return this;
        };
        PROTOTYPE.reposition.offset = function(elem, pos, container) {
            if (!container[0]) {
                return pos;
            }
            var ownerDocument = $(elem[0].ownerDocument), quirks = !!BROWSER.ie && document.compatMode !== "CSS1Compat", parent = container[0], scrolled, position, parentOffset, overflow;
            function scroll(e, i) {
                pos.left += i * e.scrollLeft();
                pos.top += i * e.scrollTop();
            }
            do {
                if ((position = $.css(parent, "position")) !== "static") {
                    if (position === "fixed") {
                        parentOffset = parent.getBoundingClientRect();
                        scroll(ownerDocument, -1);
                    } else {
                        parentOffset = $(parent).position();
                        parentOffset.left += parseFloat($.css(parent, "borderLeftWidth")) || 0;
                        parentOffset.top += parseFloat($.css(parent, "borderTopWidth")) || 0;
                    }
                    pos.left -= parentOffset.left + (parseFloat($.css(parent, "marginLeft")) || 0);
                    pos.top -= parentOffset.top + (parseFloat($.css(parent, "marginTop")) || 0);
                    if (!scrolled && (overflow = $.css(parent, "overflow")) !== "hidden" && overflow !== "visible") {
                        scrolled = $(parent);
                    }
                }
            } while (parent = parent.offsetParent);
            if (scrolled && (scrolled[0] !== ownerDocument[0] || quirks)) {
                scroll(scrolled, 1);
            }
            return pos;
        };
        var C = (CORNER = PROTOTYPE.reposition.Corner = function(corner, forceY) {
            corner = ("" + corner).replace(/([A-Z])/, " $1").replace(/middle/gi, CENTER).toLowerCase();
            this.x = (corner.match(/left|right/i) || corner.match(/center/) || [ "inherit" ])[0].toLowerCase();
            this.y = (corner.match(/top|bottom|center/i) || [ "inherit" ])[0].toLowerCase();
            this.forceY = !!forceY;
            var f = corner.charAt(0);
            this.precedance = f === "t" || f === "b" ? Y : X;
        }).prototype;
        C.invert = function(z, center) {
            this[z] = this[z] === LEFT ? RIGHT : this[z] === RIGHT ? LEFT : center || this[z];
        };
        C.string = function(join) {
            var x = this.x, y = this.y;
            var result = x !== y ? x === "center" || y !== "center" && (this.precedance === Y || this.forceY) ? [ y, x ] : [ x, y ] : [ x ];
            return join !== false ? result.join(" ") : result;
        };
        C.abbrev = function() {
            var result = this.string(false);
            return result[0].charAt(0) + (result[1] && result[1].charAt(0) || "");
        };
        C.clone = function() {
            return new CORNER(this.string(), this.forceY);
        };
        PROTOTYPE.toggle = function(state, event) {
            var cache = this.cache, options = this.options, tooltip = this.tooltip;
            if (event) {
                if (/over|enter/.test(event.type) && cache.event && /out|leave/.test(cache.event.type) && options.show.target.add(event.target).length === options.show.target.length && tooltip.has(event.relatedTarget).length) {
                    return this;
                }
                cache.event = $.event.fix(event);
            }
            this.waiting && !state && (this.hiddenDuringWait = TRUE);
            if (!this.rendered) {
                return state ? this.render(1) : this;
            } else if (this.destroyed || this.disabled) {
                return this;
            }
            var type = state ? "show" : "hide", opts = this.options[type], otherOpts = this.options[!state ? "show" : "hide"], posOptions = this.options.position, contentOptions = this.options.content, width = this.tooltip.css("width"), visible = this.tooltip.is(":visible"), animate = state || opts.target.length === 1, sameTarget = !event || opts.target.length < 2 || cache.target[0] === event.target, identicalState, allow, showEvent, delay, after;
            if ((typeof state).search("boolean|number")) {
                state = !visible;
            }
            identicalState = !tooltip.is(":animated") && visible === state && sameTarget;
            allow = !identicalState ? !!this._trigger(type, [ 90 ]) : NULL;
            if (this.destroyed) {
                return this;
            }
            if (allow !== FALSE && state) {
                this.focus(event);
            }
            if (!allow || identicalState) {
                return this;
            }
            $.attr(tooltip[0], "aria-hidden", !!!state);
            if (state) {
                this.mouse && (cache.origin = $.event.fix(this.mouse));
                if ($.isFunction(contentOptions.text)) {
                    this._updateContent(contentOptions.text, FALSE);
                }
                if ($.isFunction(contentOptions.title)) {
                    this._updateTitle(contentOptions.title, FALSE);
                }
                if (!trackingBound && posOptions.target === "mouse" && posOptions.adjust.mouse) {
                    $(document).bind("mousemove." + NAMESPACE, this._storeMouse);
                    trackingBound = TRUE;
                }
                if (!width) {
                    tooltip.css("width", tooltip.outerWidth(FALSE));
                }
                this.reposition(event, arguments[2]);
                if (!width) {
                    tooltip.css("width", "");
                }
                if (!!opts.solo) {
                    (typeof opts.solo === "string" ? $(opts.solo) : $(SELECTOR, opts.solo)).not(tooltip).not(opts.target).qtip("hide", $.Event("tooltipsolo"));
                }
            } else {
                clearTimeout(this.timers.show);
                delete cache.origin;
                if (trackingBound && !$(SELECTOR + '[tracking="true"]:visible', opts.solo).not(tooltip).length) {
                    $(document).unbind("mousemove." + NAMESPACE);
                    trackingBound = FALSE;
                }
                this.blur(event);
            }
            after = $.proxy(function() {
                if (state) {
                    if (BROWSER.ie) {
                        tooltip[0].style.removeAttribute("filter");
                    }
                    tooltip.css("overflow", "");
                    if ("string" === typeof opts.autofocus) {
                        $(this.options.show.autofocus, tooltip).focus();
                    }
                    this.options.show.target.trigger("qtip-" + this.id + "-inactive");
                } else {
                    tooltip.css({
                        display: "",
                        visibility: "",
                        opacity: "",
                        left: "",
                        top: ""
                    });
                }
                this._trigger(state ? "visible" : "hidden");
            }, this);
            if (opts.effect === FALSE || animate === FALSE) {
                tooltip[type]();
                after();
            } else if ($.isFunction(opts.effect)) {
                tooltip.stop(1, 1);
                opts.effect.call(tooltip, this);
                tooltip.queue("fx", function(n) {
                    after();
                    n();
                });
            } else {
                tooltip.fadeTo(90, state ? 1 : 0, after);
            }
            if (state) {
                opts.target.trigger("qtip-" + this.id + "-inactive");
            }
            return this;
        };
        PROTOTYPE.show = function(event) {
            return this.toggle(TRUE, event);
        };
        PROTOTYPE.hide = function(event) {
            return this.toggle(FALSE, event);
        };
        PROTOTYPE.focus = function(event) {
            if (!this.rendered || this.destroyed) {
                return this;
            }
            var qtips = $(SELECTOR), tooltip = this.tooltip, curIndex = parseInt(tooltip[0].style.zIndex, 10), newIndex = QTIP.zindex + qtips.length, focusedElem;
            if (!tooltip.hasClass(CLASS_FOCUS)) {
                if (this._trigger("focus", [ newIndex ], event)) {
                    if (curIndex !== newIndex) {
                        qtips.each(function() {
                            if (this.style.zIndex > curIndex) {
                                this.style.zIndex = this.style.zIndex - 1;
                            }
                        });
                        qtips.filter("." + CLASS_FOCUS).qtip("blur", event);
                    }
                    tooltip.addClass(CLASS_FOCUS)[0].style.zIndex = newIndex;
                }
            }
            return this;
        };
        PROTOTYPE.blur = function(event) {
            if (!this.rendered || this.destroyed) {
                return this;
            }
            this.tooltip.removeClass(CLASS_FOCUS);
            this._trigger("blur", [ this.tooltip.css("zIndex") ], event);
            return this;
        };
        PROTOTYPE.disable = function(state) {
            if (this.destroyed) {
                return this;
            }
            if (state === "toggle") {
                state = !(this.rendered ? this.tooltip.hasClass(CLASS_DISABLED) : this.disabled);
            } else if ("boolean" !== typeof state) {
                state = TRUE;
            }
            if (this.rendered) {
                this.tooltip.toggleClass(CLASS_DISABLED, state).attr("aria-disabled", state);
            }
            this.disabled = !!state;
            return this;
        };
        PROTOTYPE.enable = function() {
            return this.disable(FALSE);
        };
        PROTOTYPE._createButton = function() {
            var self = this, elements = this.elements, tooltip = elements.tooltip, button = this.options.content.button, isString = typeof button === "string", close = isString ? button : "Close tooltip";
            if (elements.button) {
                elements.button.remove();
            }
            if (button.jquery) {
                elements.button = button;
            } else {
                elements.button = $("<a />", {
                    class: "qtip-close " + (this.options.style.widget ? "" : NAMESPACE + "-icon"),
                    title: close,
                    "aria-label": close
                }).prepend($("<span />", {
                    class: "ui-icon ui-icon-close",
                    html: "&times;"
                }));
            }
            elements.button.appendTo(elements.titlebar || tooltip).attr("role", "button").click(function(event) {
                if (!tooltip.hasClass(CLASS_DISABLED)) {
                    self.hide(event);
                }
                return FALSE;
            });
        };
        PROTOTYPE._updateButton = function(button) {
            if (!this.rendered) {
                return FALSE;
            }
            var elem = this.elements.button;
            if (button) {
                this._createButton();
            } else {
                elem.remove();
            }
        };
        function createWidgetClass(cls) {
            return WIDGET.concat("").join(cls ? "-" + cls + " " : " ");
        }
        PROTOTYPE._setWidget = function() {
            var on = this.options.style.widget, elements = this.elements, tooltip = elements.tooltip, disabled = tooltip.hasClass(CLASS_DISABLED);
            tooltip.removeClass(CLASS_DISABLED);
            CLASS_DISABLED = on ? "ui-state-disabled" : "qtip-disabled";
            tooltip.toggleClass(CLASS_DISABLED, disabled);
            tooltip.toggleClass("ui-helper-reset " + createWidgetClass(), on).toggleClass(CLASS_DEFAULT, this.options.style.def && !on);
            if (elements.content) {
                elements.content.toggleClass(createWidgetClass("content"), on);
            }
            if (elements.titlebar) {
                elements.titlebar.toggleClass(createWidgetClass("header"), on);
            }
            if (elements.button) {
                elements.button.toggleClass(NAMESPACE + "-icon", !on);
            }
        };
        function delay(callback, duration) {
            if (duration > 0) {
                return setTimeout($.proxy(callback, this), duration);
            } else {
                callback.call(this);
            }
        }
        function showMethod(event) {
            if (this.tooltip.hasClass(CLASS_DISABLED)) {
                return;
            }
            clearTimeout(this.timers.show);
            clearTimeout(this.timers.hide);
            this.timers.show = delay.call(this, function() {
                this.toggle(TRUE, event);
            }, this.options.show.delay);
        }
        function hideMethod(event) {
            if (this.tooltip.hasClass(CLASS_DISABLED) || this.destroyed) {
                return;
            }
            var relatedTarget = $(event.relatedTarget), ontoTooltip = relatedTarget.closest(SELECTOR)[0] === this.tooltip[0], ontoTarget = relatedTarget[0] === this.options.show.target[0];
            clearTimeout(this.timers.show);
            clearTimeout(this.timers.hide);
            if (this !== relatedTarget[0] && (this.options.position.target === "mouse" && ontoTooltip) || this.options.hide.fixed && (/mouse(out|leave|move)/.test(event.type) && (ontoTooltip || ontoTarget))) {
                try {
                    event.preventDefault();
                    event.stopImmediatePropagation();
                } catch (e) {}
                return;
            }
            this.timers.hide = delay.call(this, function() {
                this.toggle(FALSE, event);
            }, this.options.hide.delay, this);
        }
        function inactiveMethod(event) {
            if (this.tooltip.hasClass(CLASS_DISABLED) || !this.options.hide.inactive) {
                return;
            }
            clearTimeout(this.timers.inactive);
            this.timers.inactive = delay.call(this, function() {
                this.hide(event);
            }, this.options.hide.inactive);
        }
        function repositionMethod(event) {
            if (this.rendered && this.tooltip[0].offsetWidth > 0) {
                this.reposition(event);
            }
        }
        PROTOTYPE._storeMouse = function(event) {
            (this.mouse = $.event.fix(event)).type = "mousemove";
            return this;
        };
        PROTOTYPE._bind = function(targets, events, method, suffix, context) {
            if (!targets || !method || !events.length) {
                return;
            }
            var ns = "." + this._id + (suffix ? "-" + suffix : "");
            $(targets).bind((events.split ? events : events.join(ns + " ")) + ns, $.proxy(method, context || this));
            return this;
        };
        PROTOTYPE._unbind = function(targets, suffix) {
            targets && $(targets).unbind("." + this._id + (suffix ? "-" + suffix : ""));
            return this;
        };
        function delegate(selector, events, method) {
            $(document.body).delegate(selector, (events.split ? events : events.join("." + NAMESPACE + " ")) + "." + NAMESPACE, function() {
                var api = QTIP.api[$.attr(this, ATTR_ID)];
                api && !api.disabled && method.apply(api, arguments);
            });
        }
        PROTOTYPE._trigger = function(type, args, event) {
            var callback = $.Event("tooltip" + type);
            callback.originalEvent = event && $.extend({}, event) || this.cache.event || NULL;
            this.triggering = type;
            this.tooltip.trigger(callback, [ this ].concat(args || []));
            this.triggering = FALSE;
            return !callback.isDefaultPrevented();
        };
        PROTOTYPE._bindEvents = function(showEvents, hideEvents, showTargets, hideTargets, showMethod, hideMethod) {
            var similarTargets = showTargets.filter(hideTargets).add(hideTargets.filter(showTargets)), toggleEvents = [];
            if (similarTargets.length) {
                $.each(hideEvents, function(i, type) {
                    var showIndex = $.inArray(type, showEvents);
                    showIndex > -1 && toggleEvents.push(showEvents.splice(showIndex, 1)[0]);
                });
                if (toggleEvents.length) {
                    this._bind(similarTargets, toggleEvents, function(event) {
                        var state = this.rendered ? this.tooltip[0].offsetWidth > 0 : false;
                        (state ? hideMethod : showMethod).call(this, event);
                    });
                    showTargets = showTargets.not(similarTargets);
                    hideTargets = hideTargets.not(similarTargets);
                }
            }
            this._bind(showTargets, showEvents, showMethod);
            this._bind(hideTargets, hideEvents, hideMethod);
        };
        PROTOTYPE._assignInitialEvents = function(event) {
            var options = this.options, showTarget = options.show.target, hideTarget = options.hide.target, showEvents = options.show.event ? $.trim("" + options.show.event).split(" ") : [], hideEvents = options.hide.event ? $.trim("" + options.hide.event).split(" ") : [];
            this._bind(this.elements.target, [ "remove", "removeqtip" ], function(event) {
                this.destroy(true);
            }, "destroy");
            if (/mouse(over|enter)/i.test(options.show.event) && !/mouse(out|leave)/i.test(options.hide.event)) {
                hideEvents.push("mouseleave");
            }
            this._bind(showTarget, "mousemove", function(event) {
                this._storeMouse(event);
                this.cache.onTarget = TRUE;
            });
            function hoverIntent(event) {
                if (this.disabled || this.destroyed) {
                    return FALSE;
                }
                this.cache.event = event && $.event.fix(event);
                this.cache.target = event && $(event.target);
                clearTimeout(this.timers.show);
                this.timers.show = delay.call(this, function() {
                    this.render(typeof event === "object" || options.show.ready);
                }, options.prerender ? 0 : options.show.delay);
            }
            this._bindEvents(showEvents, hideEvents, showTarget, hideTarget, hoverIntent, function() {
                if (!this.timers) {
                    return FALSE;
                }
                clearTimeout(this.timers.show);
            });
            if (options.show.ready || options.prerender) {
                hoverIntent.call(this, event);
            }
        };
        PROTOTYPE._assignEvents = function() {
            var self = this, options = this.options, posOptions = options.position, tooltip = this.tooltip, showTarget = options.show.target, hideTarget = options.hide.target, containerTarget = posOptions.container, viewportTarget = posOptions.viewport, documentTarget = $(document), bodyTarget = $(document.body), windowTarget = $(window), showEvents = options.show.event ? $.trim("" + options.show.event).split(" ") : [], hideEvents = options.hide.event ? $.trim("" + options.hide.event).split(" ") : [];
            $.each(options.events, function(name, callback) {
                self._bind(tooltip, name === "toggle" ? [ "tooltipshow", "tooltiphide" ] : [ "tooltip" + name ], callback, null, tooltip);
            });
            if (/mouse(out|leave)/i.test(options.hide.event) && options.hide.leave === "window") {
                this._bind(documentTarget, [ "mouseout", "blur" ], function(event) {
                    if (!/select|option/.test(event.target.nodeName) && !event.relatedTarget) {
                        this.hide(event);
                    }
                });
            }
            if (options.hide.fixed) {
                hideTarget = hideTarget.add(tooltip.addClass(CLASS_FIXED));
            } else if (/mouse(over|enter)/i.test(options.show.event)) {
                this._bind(hideTarget, "mouseleave", function() {
                    clearTimeout(this.timers.show);
                });
            }
            if (("" + options.hide.event).indexOf("unfocus") > -1) {
                this._bind(containerTarget.closest("html"), [ "mousedown", "touchstart" ], function(event) {
                    var elem = $(event.target), enabled = this.rendered && !this.tooltip.hasClass(CLASS_DISABLED) && this.tooltip[0].offsetWidth > 0, isAncestor = elem.parents(SELECTOR).filter(this.tooltip[0]).length > 0;
                    if (elem[0] !== this.target[0] && elem[0] !== this.tooltip[0] && !isAncestor && !this.target.has(elem[0]).length && enabled) {
                        this.hide(event);
                    }
                });
            }
            if ("number" === typeof options.hide.inactive) {
                this._bind(showTarget, "qtip-" + this.id + "-inactive", inactiveMethod, "inactive");
                this._bind(hideTarget.add(tooltip), QTIP.inactiveEvents, inactiveMethod);
            }
            this._bindEvents(showEvents, hideEvents, showTarget, hideTarget, showMethod, hideMethod);
            this._bind(showTarget.add(tooltip), "mousemove", function(event) {
                if ("number" === typeof options.hide.distance) {
                    var origin = this.cache.origin || {}, limit = this.options.hide.distance, abs = Math.abs;
                    if (abs(event.pageX - origin.pageX) >= limit || abs(event.pageY - origin.pageY) >= limit) {
                        this.hide(event);
                    }
                }
                this._storeMouse(event);
            });
            if (posOptions.target === "mouse") {
                if (posOptions.adjust.mouse) {
                    if (options.hide.event) {
                        this._bind(showTarget, [ "mouseenter", "mouseleave" ], function(event) {
                            if (!this.cache) {
                                return FALSE;
                            }
                            this.cache.onTarget = event.type === "mouseenter";
                        });
                    }
                    this._bind(documentTarget, "mousemove", function(event) {
                        if (this.rendered && this.cache.onTarget && !this.tooltip.hasClass(CLASS_DISABLED) && this.tooltip[0].offsetWidth > 0) {
                            this.reposition(event);
                        }
                    });
                }
            }
            if (posOptions.adjust.resize || viewportTarget.length) {
                this._bind($.event.special.resize ? viewportTarget : windowTarget, "resize", repositionMethod);
            }
            if (posOptions.adjust.scroll) {
                this._bind(windowTarget.add(posOptions.container), "scroll", repositionMethod);
            }
        };
        PROTOTYPE._unassignEvents = function() {
            var options = this.options, showTargets = options.show.target, hideTargets = options.hide.target, targets = $.grep([ this.elements.target[0], this.rendered && this.tooltip[0], options.position.container[0], options.position.viewport[0], options.position.container.closest("html")[0], window, document ], function(i) {
                return typeof i === "object";
            });
            if (showTargets && showTargets.toArray) {
                targets = targets.concat(showTargets.toArray());
            }
            if (hideTargets && hideTargets.toArray) {
                targets = targets.concat(hideTargets.toArray());
            }
            this._unbind(targets)._unbind(targets, "destroy")._unbind(targets, "inactive");
        };
        $(function() {
            delegate(SELECTOR, [ "mouseenter", "mouseleave" ], function(event) {
                var state = event.type === "mouseenter", tooltip = $(event.currentTarget), target = $(event.relatedTarget || event.target), options = this.options;
                if (state) {
                    this.focus(event);
                    tooltip.hasClass(CLASS_FIXED) && !tooltip.hasClass(CLASS_DISABLED) && clearTimeout(this.timers.hide);
                } else {
                    if (options.position.target === "mouse" && options.position.adjust.mouse && options.hide.event && options.show.target && !target.closest(options.show.target[0]).length) {
                        this.hide(event);
                    }
                }
                tooltip.toggleClass(CLASS_HOVER, state);
            });
            delegate("[" + ATTR_ID + "]", INACTIVE_EVENTS, inactiveMethod);
        });
        function init(elem, id, opts) {
            var obj, posOptions, attr, config, title, docBody = $(document.body), newTarget = elem[0] === document ? docBody : elem, metadata = elem.metadata ? elem.metadata(opts.metadata) : NULL, metadata5 = opts.metadata.type === "html5" && metadata ? metadata[opts.metadata.name] : NULL, html5 = elem.data(opts.metadata.name || "qtipopts");
            try {
                html5 = typeof html5 === "string" ? $.parseJSON(html5) : html5;
            } catch (e) {}
            config = $.extend(TRUE, {}, QTIP.defaults, opts, typeof html5 === "object" ? sanitizeOptions(html5) : NULL, sanitizeOptions(metadata5 || metadata));
            posOptions = config.position;
            config.id = id;
            if ("boolean" === typeof config.content.text) {
                attr = elem.attr(config.content.attr);
                if (config.content.attr !== FALSE && attr) {
                    config.content.text = attr;
                } else {
                    return FALSE;
                }
            }
            if (!posOptions.container.length) {
                posOptions.container = docBody;
            }
            if (posOptions.target === FALSE) {
                posOptions.target = newTarget;
            }
            if (config.show.target === FALSE) {
                config.show.target = newTarget;
            }
            if (config.show.solo === TRUE) {
                config.show.solo = posOptions.container.closest("body");
            }
            if (config.hide.target === FALSE) {
                config.hide.target = newTarget;
            }
            if (config.position.viewport === TRUE) {
                config.position.viewport = posOptions.container;
            }
            posOptions.container = posOptions.container.eq(0);
            posOptions.at = new CORNER(posOptions.at, TRUE);
            posOptions.my = new CORNER(posOptions.my);
            if (elem.data(NAMESPACE)) {
                if (config.overwrite) {
                    elem.qtip("destroy", true);
                } else if (config.overwrite === FALSE) {
                    return FALSE;
                }
            }
            elem.attr(ATTR_HAS, id);
            if (config.suppress && (title = elem.attr("title"))) {
                elem.removeAttr("title").attr(oldtitle, title).attr("title", "");
            }
            obj = new QTip(elem, config, id, !!attr);
            elem.data(NAMESPACE, obj);
            return obj;
        }
        QTIP = $.fn.qtip = function(options, notation, newValue) {
            var command = ("" + options).toLowerCase(), returned = NULL, args = $.makeArray(arguments).slice(1), event = args[args.length - 1], opts = this[0] ? $.data(this[0], NAMESPACE) : NULL;
            if (!arguments.length && opts || command === "api") {
                return opts;
            } else if ("string" === typeof options) {
                this.each(function() {
                    var api = $.data(this, NAMESPACE);
                    if (!api) {
                        return TRUE;
                    }
                    if (event && event.timeStamp) {
                        api.cache.event = event;
                    }
                    if (notation && (command === "option" || command === "options")) {
                        if (newValue !== undefined || $.isPlainObject(notation)) {
                            api.set(notation, newValue);
                        } else {
                            returned = api.get(notation);
                            return FALSE;
                        }
                    } else if (api[command]) {
                        api[command].apply(api, args);
                    }
                });
                return returned !== NULL ? returned : this;
            } else if ("object" === typeof options || !arguments.length) {
                opts = sanitizeOptions($.extend(TRUE, {}, options));
                return this.each(function(i) {
                    var api, id;
                    id = $.isArray(opts.id) ? opts.id[i] : opts.id;
                    id = !id || id === FALSE || id.length < 1 || QTIP.api[id] ? QTIP.nextid++ : id;
                    api = init($(this), id, opts);
                    if (api === FALSE) {
                        return TRUE;
                    } else {
                        QTIP.api[id] = api;
                    }
                    $.each(PLUGINS, function() {
                        if (this.initialize === "initialize") {
                            this(api);
                        }
                    });
                    api._assignInitialEvents(event);
                });
            }
        };
        $.qtip = QTip;
        QTIP.api = {};
        $.each({
            attr: function(attr, val) {
                if (this.length) {
                    var self = this[0], title = "title", api = $.data(self, "qtip");
                    if (attr === title && api && "object" === typeof api && api.options.suppress) {
                        if (arguments.length < 2) {
                            return $.attr(self, oldtitle);
                        }
                        if (api && api.options.content.attr === title && api.cache.attr) {
                            api.set("content.text", val);
                        }
                        return this.attr(oldtitle, val);
                    }
                }
                return $.fn["attr" + replaceSuffix].apply(this, arguments);
            },
            clone: function(keepData) {
                var titles = $([]), title = "title", elems = $.fn["clone" + replaceSuffix].apply(this, arguments);
                if (!keepData) {
                    elems.filter("[" + oldtitle + "]").attr("title", function() {
                        return $.attr(this, oldtitle);
                    }).removeAttr(oldtitle);
                }
                return elems;
            }
        }, function(name, func) {
            if (!func || $.fn[name + replaceSuffix]) {
                return TRUE;
            }
            var old = $.fn[name + replaceSuffix] = $.fn[name];
            $.fn[name] = function() {
                return func.apply(this, arguments) || old.apply(this, arguments);
            };
        });
        if (!$.ui) {
            $["cleanData" + replaceSuffix] = $.cleanData;
            $.cleanData = function(elems) {
                for (var i = 0, elem; (elem = $(elems[i])).length; i++) {
                    if (elem.attr(ATTR_HAS)) {
                        try {
                            elem.triggerHandler("removeqtip");
                        } catch (e) {}
                    }
                }
                $["cleanData" + replaceSuffix].apply(this, arguments);
            };
        }
        QTIP.version = "2.2.1";
        QTIP.nextid = 0;
        QTIP.inactiveEvents = INACTIVE_EVENTS;
        QTIP.zindex = 15e3;
        QTIP.defaults = {
            prerender: FALSE,
            id: FALSE,
            overwrite: TRUE,
            suppress: TRUE,
            content: {
                text: TRUE,
                attr: "title",
                title: FALSE,
                button: FALSE
            },
            position: {
                my: "top left",
                at: "bottom right",
                target: FALSE,
                container: FALSE,
                viewport: FALSE,
                adjust: {
                    x: 0,
                    y: 0,
                    mouse: TRUE,
                    scroll: TRUE,
                    resize: TRUE,
                    method: "flipinvert flipinvert"
                },
                effect: function(api, pos, viewport) {
                    $(this).animate(pos, {
                        duration: 200,
                        queue: FALSE
                    });
                }
            },
            show: {
                target: FALSE,
                event: "mouseenter",
                effect: TRUE,
                delay: 90,
                solo: FALSE,
                ready: FALSE,
                autofocus: FALSE
            },
            hide: {
                target: FALSE,
                event: "mouseleave",
                effect: TRUE,
                delay: 0,
                fixed: FALSE,
                inactive: FALSE,
                leave: "window",
                distance: FALSE
            },
            style: {
                classes: "",
                widget: FALSE,
                width: FALSE,
                height: FALSE,
                def: TRUE
            },
            events: {
                render: NULL,
                move: NULL,
                show: NULL,
                hide: NULL,
                toggle: NULL,
                visible: NULL,
                hidden: NULL,
                focus: NULL,
                blur: NULL
            }
        };
        var TIP, TIPNS = ".qtip-tip", MARGIN = "margin", BORDER = "border", COLOR = "color", BG_COLOR = "background-color", TRANSPARENT = "transparent", IMPORTANT = " !important", HASCANVAS = !!document.createElement("canvas").getContext, INVALID = /rgba?\(0, 0, 0(, 0)?\)|transparent|#123456/i;
        function camel(s) {
            return s.charAt(0).toUpperCase() + s.slice(1);
        }
        var cssProps = {}, cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];
        function vendorCss(elem, prop) {
            var ucProp = prop.charAt(0).toUpperCase() + prop.slice(1), props = (prop + " " + cssPrefixes.join(ucProp + " ") + ucProp).split(" "), cur, val, i = 0;
            if (cssProps[prop]) {
                return elem.css(cssProps[prop]);
            }
            while (cur = props[i++]) {
                if ((val = elem.css(cur)) !== undefined) {
                    return cssProps[prop] = cur, val;
                }
            }
        }
        function intCss(elem, prop) {
            return Math.ceil(parseFloat(vendorCss(elem, prop)));
        }
        if (!HASCANVAS) {
            var createVML = function(tag, props, style) {
                return "<qtipvml:" + tag + ' xmlns="urn:schemas-microsoft.com:vml" class="qtip-vml" ' + (props || "") + ' style="behavior: url(#default#VML); ' + (style || "") + '" />';
            };
        } else {
            var PIXEL_RATIO = window.devicePixelRatio || 1, BACKING_STORE_RATIO = function() {
                var context = document.createElement("canvas").getContext("2d");
                return context.backingStorePixelRatio || context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio || 1;
            }(), SCALE = PIXEL_RATIO / BACKING_STORE_RATIO;
        }
        function Tip(qtip, options) {
            this._ns = "tip";
            this.options = options;
            this.offset = options.offset;
            this.size = [ options.width, options.height ];
            this.init(this.qtip = qtip);
        }
        $.extend(Tip.prototype, {
            init: function(qtip) {
                var context, tip;
                tip = this.element = qtip.elements.tip = $("<div />", {
                    class: NAMESPACE + "-tip"
                }).prependTo(qtip.tooltip);
                if (HASCANVAS) {
                    context = $("<canvas />").appendTo(this.element)[0].getContext("2d");
                    context.lineJoin = "miter";
                    context.miterLimit = 1e5;
                    context.save();
                } else {
                    context = createVML("shape", 'coordorigin="0,0"', "position:absolute;");
                    this.element.html(context + context);
                    qtip._bind($("*", tip).add(tip), [ "click", "mousedown" ], function(event) {
                        event.stopPropagation();
                    }, this._ns);
                }
                qtip._bind(qtip.tooltip, "tooltipmove", this.reposition, this._ns, this);
                this.create();
            },
            _swapDimensions: function() {
                this.size[0] = this.options.height;
                this.size[1] = this.options.width;
            },
            _resetDimensions: function() {
                this.size[0] = this.options.width;
                this.size[1] = this.options.height;
            },
            _useTitle: function(corner) {
                var titlebar = this.qtip.elements.titlebar;
                return titlebar && (corner.y === TOP || corner.y === CENTER && this.element.position().top + this.size[1] / 2 + this.options.offset < titlebar.outerHeight(TRUE));
            },
            _parseCorner: function(corner) {
                var my = this.qtip.options.position.my;
                if (corner === FALSE || my === FALSE) {
                    corner = FALSE;
                } else if (corner === TRUE) {
                    corner = new CORNER(my.string());
                } else if (!corner.string) {
                    corner = new CORNER(corner);
                    corner.fixed = TRUE;
                }
                return corner;
            },
            _parseWidth: function(corner, side, use) {
                var elements = this.qtip.elements, prop = BORDER + camel(side) + "Width";
                return (use ? intCss(use, prop) : intCss(elements.content, prop) || intCss(this._useTitle(corner) && elements.titlebar || elements.content, prop) || intCss(elements.tooltip, prop)) || 0;
            },
            _parseRadius: function(corner) {
                var elements = this.qtip.elements, prop = BORDER + camel(corner.y) + camel(corner.x) + "Radius";
                return BROWSER.ie < 9 ? 0 : intCss(this._useTitle(corner) && elements.titlebar || elements.content, prop) || intCss(elements.tooltip, prop) || 0;
            },
            _invalidColour: function(elem, prop, compare) {
                var val = elem.css(prop);
                return !val || compare && val === elem.css(compare) || INVALID.test(val) ? FALSE : val;
            },
            _parseColours: function(corner) {
                var elements = this.qtip.elements, tip = this.element.css("cssText", ""), borderSide = BORDER + camel(corner[corner.precedance]) + camel(COLOR), colorElem = this._useTitle(corner) && elements.titlebar || elements.content, css = this._invalidColour, color = [];
                color[0] = css(tip, BG_COLOR) || css(colorElem, BG_COLOR) || css(elements.content, BG_COLOR) || css(elements.tooltip, BG_COLOR) || tip.css(BG_COLOR);
                color[1] = css(tip, borderSide, COLOR) || css(colorElem, borderSide, COLOR) || css(elements.content, borderSide, COLOR) || css(elements.tooltip, borderSide, COLOR) || elements.tooltip.css(borderSide);
                $("*", tip).add(tip).css("cssText", BG_COLOR + ":" + TRANSPARENT + IMPORTANT + ";" + BORDER + ":0" + IMPORTANT + ";");
                return color;
            },
            _calculateSize: function(corner) {
                var y = corner.precedance === Y, width = this.options["width"], height = this.options["height"], isCenter = corner.abbrev() === "c", base = (y ? width : height) * (isCenter ? .5 : 1), pow = Math.pow, round = Math.round, bigHyp, ratio, result, smallHyp = Math.sqrt(pow(base, 2) + pow(height, 2)), hyp = [ this.border / base * smallHyp, this.border / height * smallHyp ];
                hyp[2] = Math.sqrt(pow(hyp[0], 2) - pow(this.border, 2));
                hyp[3] = Math.sqrt(pow(hyp[1], 2) - pow(this.border, 2));
                bigHyp = smallHyp + hyp[2] + hyp[3] + (isCenter ? 0 : hyp[0]);
                ratio = bigHyp / smallHyp;
                result = [ round(ratio * width), round(ratio * height) ];
                return y ? result : result.reverse();
            },
            _calculateTip: function(corner, size, scale) {
                scale = scale || 1;
                size = size || this.size;
                var width = size[0] * scale, height = size[1] * scale, width2 = Math.ceil(width / 2), height2 = Math.ceil(height / 2), tips = {
                    br: [ 0, 0, width, height, width, 0 ],
                    bl: [ 0, 0, width, 0, 0, height ],
                    tr: [ 0, height, width, 0, width, height ],
                    tl: [ 0, 0, 0, height, width, height ],
                    tc: [ 0, height, width2, 0, width, height ],
                    bc: [ 0, 0, width, 0, width2, height ],
                    rc: [ 0, 0, width, height2, 0, height ],
                    lc: [ width, 0, width, height, 0, height2 ]
                };
                tips.lt = tips.br;
                tips.rt = tips.bl;
                tips.lb = tips.tr;
                tips.rb = tips.tl;
                return tips[corner.abbrev()];
            },
            _drawCoords: function(context, coords) {
                context.beginPath();
                context.moveTo(coords[0], coords[1]);
                context.lineTo(coords[2], coords[3]);
                context.lineTo(coords[4], coords[5]);
                context.closePath();
            },
            create: function() {
                var c = this.corner = (HASCANVAS || BROWSER.ie) && this._parseCorner(this.options.corner);
                if (this.enabled = !!this.corner && this.corner.abbrev() !== "c") {
                    this.qtip.cache.corner = c.clone();
                    this.update();
                }
                this.element.toggle(this.enabled);
                return this.corner;
            },
            update: function(corner, position) {
                if (!this.enabled) {
                    return this;
                }
                var elements = this.qtip.elements, tip = this.element, inner = tip.children(), options = this.options, curSize = this.size, mimic = options.mimic, round = Math.round, color, precedance, context, coords, bigCoords, translate, newSize, border, BACKING_STORE_RATIO;
                if (!corner) {
                    corner = this.qtip.cache.corner || this.corner;
                }
                if (mimic === FALSE) {
                    mimic = corner;
                } else {
                    mimic = new CORNER(mimic);
                    mimic.precedance = corner.precedance;
                    if (mimic.x === "inherit") {
                        mimic.x = corner.x;
                    } else if (mimic.y === "inherit") {
                        mimic.y = corner.y;
                    } else if (mimic.x === mimic.y) {
                        mimic[corner.precedance] = corner[corner.precedance];
                    }
                }
                precedance = mimic.precedance;
                if (corner.precedance === X) {
                    this._swapDimensions();
                } else {
                    this._resetDimensions();
                }
                color = this.color = this._parseColours(corner);
                if (color[1] !== TRANSPARENT) {
                    border = this.border = this._parseWidth(corner, corner[corner.precedance]);
                    if (options.border && border < 1 && !INVALID.test(color[1])) {
                        color[0] = color[1];
                    }
                    this.border = border = options.border !== TRUE ? options.border : border;
                } else {
                    this.border = border = 0;
                }
                newSize = this.size = this._calculateSize(corner);
                tip.css({
                    width: newSize[0],
                    height: newSize[1],
                    lineHeight: newSize[1] + "px"
                });
                if (corner.precedance === Y) {
                    translate = [ round(mimic.x === LEFT ? border : mimic.x === RIGHT ? newSize[0] - curSize[0] - border : (newSize[0] - curSize[0]) / 2), round(mimic.y === TOP ? newSize[1] - curSize[1] : 0) ];
                } else {
                    translate = [ round(mimic.x === LEFT ? newSize[0] - curSize[0] : 0), round(mimic.y === TOP ? border : mimic.y === BOTTOM ? newSize[1] - curSize[1] - border : (newSize[1] - curSize[1]) / 2) ];
                }
                if (HASCANVAS) {
                    context = inner[0].getContext("2d");
                    context.restore();
                    context.save();
                    context.clearRect(0, 0, 6e3, 6e3);
                    coords = this._calculateTip(mimic, curSize, SCALE);
                    bigCoords = this._calculateTip(mimic, this.size, SCALE);
                    inner.attr(WIDTH, newSize[0] * SCALE).attr(HEIGHT, newSize[1] * SCALE);
                    inner.css(WIDTH, newSize[0]).css(HEIGHT, newSize[1]);
                    this._drawCoords(context, bigCoords);
                    context.fillStyle = color[1];
                    context.fill();
                    context.translate(translate[0] * SCALE, translate[1] * SCALE);
                    this._drawCoords(context, coords);
                    context.fillStyle = color[0];
                    context.fill();
                } else {
                    coords = this._calculateTip(mimic);
                    coords = "m" + coords[0] + "," + coords[1] + " l" + coords[2] + "," + coords[3] + " " + coords[4] + "," + coords[5] + " xe";
                    translate[2] = border && /^(r|b)/i.test(corner.string()) ? BROWSER.ie === 8 ? 2 : 1 : 0;
                    inner.css({
                        coordsize: newSize[0] + border + " " + (newSize[1] + border),
                        antialias: "" + (mimic.string().indexOf(CENTER) > -1),
                        left: translate[0] - translate[2] * Number(precedance === X),
                        top: translate[1] - translate[2] * Number(precedance === Y),
                        width: newSize[0] + border,
                        height: newSize[1] + border
                    }).each(function(i) {
                        var $this = $(this);
                        $this[$this.prop ? "prop" : "attr"]({
                            coordsize: newSize[0] + border + " " + (newSize[1] + border),
                            path: coords,
                            fillcolor: color[0],
                            filled: !!i,
                            stroked: !i
                        }).toggle(!!(border || i));
                        !i && $this.html(createVML("stroke", 'weight="' + border * 2 + 'px" color="' + color[1] + '" miterlimit="1000" joinstyle="miter"'));
                    });
                }
                window.opera && setTimeout(function() {
                    elements.tip.css({
                        display: "inline-block",
                        visibility: "visible"
                    });
                }, 1);
                if (position !== FALSE) {
                    this.calculate(corner, newSize);
                }
            },
            calculate: function(corner, size) {
                if (!this.enabled) {
                    return FALSE;
                }
                var self = this, elements = this.qtip.elements, tip = this.element, userOffset = this.options.offset, isWidget = elements.tooltip.hasClass("ui-widget"), position = {}, precedance, corners;
                corner = corner || this.corner;
                precedance = corner.precedance;
                size = size || this._calculateSize(corner);
                corners = [ corner.x, corner.y ];
                if (precedance === X) {
                    corners.reverse();
                }
                $.each(corners, function(i, side) {
                    var b, bc, br;
                    if (side === CENTER) {
                        b = precedance === Y ? LEFT : TOP;
                        position[b] = "50%";
                        position[MARGIN + "-" + b] = -Math.round(size[precedance === Y ? 0 : 1] / 2) + userOffset;
                    } else {
                        b = self._parseWidth(corner, side, elements.tooltip);
                        bc = self._parseWidth(corner, side, elements.content);
                        br = self._parseRadius(corner);
                        position[side] = Math.max(-self.border, i ? bc : userOffset + (br > b ? br : -b));
                    }
                });
                position[corner[precedance]] -= size[precedance === X ? 0 : 1];
                tip.css({
                    margin: "",
                    top: "",
                    bottom: "",
                    left: "",
                    right: ""
                }).css(position);
                return position;
            },
            reposition: function(event, api, pos, viewport) {
                if (!this.enabled) {
                    return;
                }
                var cache = api.cache, newCorner = this.corner.clone(), adjust = pos.adjusted, method = api.options.position.adjust.method.split(" "), horizontal = method[0], vertical = method[1] || method[0], shift = {
                    left: FALSE,
                    top: FALSE,
                    x: 0,
                    y: 0
                }, offset, css = {}, props;
                function shiftflip(direction, precedance, popposite, side, opposite) {
                    if (direction === SHIFT && newCorner.precedance === precedance && adjust[side] && newCorner[popposite] !== CENTER) {
                        newCorner.precedance = newCorner.precedance === X ? Y : X;
                    } else if (direction !== SHIFT && adjust[side]) {
                        newCorner[precedance] = newCorner[precedance] === CENTER ? adjust[side] > 0 ? side : opposite : newCorner[precedance] === side ? opposite : side;
                    }
                }
                function shiftonly(xy, side, opposite) {
                    if (newCorner[xy] === CENTER) {
                        css[MARGIN + "-" + side] = shift[xy] = offset[MARGIN + "-" + side] - adjust[side];
                    } else {
                        props = offset[opposite] !== undefined ? [ adjust[side], -offset[side] ] : [ -adjust[side], offset[side] ];
                        if ((shift[xy] = Math.max(props[0], props[1])) > props[0]) {
                            pos[side] -= adjust[side];
                            shift[side] = FALSE;
                        }
                        css[offset[opposite] !== undefined ? opposite : side] = shift[xy];
                    }
                }
                if (this.corner.fixed !== TRUE) {
                    shiftflip(horizontal, X, Y, LEFT, RIGHT);
                    shiftflip(vertical, Y, X, TOP, BOTTOM);
                    if (newCorner.string() !== cache.corner.string() || cache.cornerTop !== adjust.top || cache.cornerLeft !== adjust.left) {
                        this.update(newCorner, FALSE);
                    }
                }
                offset = this.calculate(newCorner);
                if (offset.right !== undefined) {
                    offset.left = -offset.right;
                }
                if (offset.bottom !== undefined) {
                    offset.top = -offset.bottom;
                }
                offset.user = this.offset;
                if (shift.left = horizontal === SHIFT && !!adjust.left) {
                    shiftonly(X, LEFT, RIGHT);
                }
                if (shift.top = vertical === SHIFT && !!adjust.top) {
                    shiftonly(Y, TOP, BOTTOM);
                }
                this.element.css(css).toggle(!(shift.x && shift.y || newCorner.x === CENTER && shift.y || newCorner.y === CENTER && shift.x));
                pos.left -= offset.left.charAt ? offset.user : horizontal !== SHIFT || shift.top || !shift.left && !shift.top ? offset.left + this.border : 0;
                pos.top -= offset.top.charAt ? offset.user : vertical !== SHIFT || shift.left || !shift.left && !shift.top ? offset.top + this.border : 0;
                cache.cornerLeft = adjust.left;
                cache.cornerTop = adjust.top;
                cache.corner = newCorner.clone();
            },
            destroy: function() {
                this.qtip._unbind(this.qtip.tooltip, this._ns);
                if (this.qtip.elements.tip) {
                    this.qtip.elements.tip.find("*").remove().end().remove();
                }
            }
        });
        TIP = PLUGINS.tip = function(api) {
            return new Tip(api, api.options.style.tip);
        };
        TIP.initialize = "render";
        TIP.sanitize = function(options) {
            if (options.style && "tip" in options.style) {
                var opts = options.style.tip;
                if (typeof opts !== "object") {
                    opts = options.style.tip = {
                        corner: opts
                    };
                }
                if (!/string|boolean/i.test(typeof opts.corner)) {
                    opts.corner = TRUE;
                }
            }
        };
        CHECKS.tip = {
            "^position.my|style.tip.(corner|mimic|border)$": function() {
                this.create();
                this.qtip.reposition();
            },
            "^style.tip.(height|width)$": function(obj) {
                this.size = [ obj.width, obj.height ];
                this.update();
                this.qtip.reposition();
            },
            "^content.title|style.(classes|widget)$": function() {
                this.update();
            }
        };
        $.extend(TRUE, QTIP.defaults, {
            style: {
                tip: {
                    corner: TRUE,
                    mimic: FALSE,
                    width: 6,
                    height: 6,
                    border: TRUE,
                    offset: 0
                }
            }
        });
        PLUGINS.viewport = function(api, position, posOptions, targetWidth, targetHeight, elemWidth, elemHeight) {
            var target = posOptions.target, tooltip = api.elements.tooltip, my = posOptions.my, at = posOptions.at, adjust = posOptions.adjust, method = adjust.method.split(" "), methodX = method[0], methodY = method[1] || method[0], viewport = posOptions.viewport, container = posOptions.container, cache = api.cache, adjusted = {
                left: 0,
                top: 0
            }, fixed, newMy, containerOffset, containerStatic, viewportWidth, viewportHeight, viewportScroll, viewportOffset;
            if (!viewport.jquery || target[0] === window || target[0] === document.body || adjust.method === "none") {
                return adjusted;
            }
            containerOffset = container.offset() || adjusted;
            containerStatic = container.css("position") === "static";
            fixed = tooltip.css("position") === "fixed";
            viewportWidth = viewport[0] === window ? viewport.width() : viewport.outerWidth(FALSE);
            viewportHeight = viewport[0] === window ? viewport.height() : viewport.outerHeight(FALSE);
            viewportScroll = {
                left: fixed ? 0 : viewport.scrollLeft(),
                top: fixed ? 0 : viewport.scrollTop()
            };
            viewportOffset = viewport.offset() || adjusted;
            function calculate(side, otherSide, type, adjust, side1, side2, lengthName, targetLength, elemLength) {
                var initialPos = position[side1], mySide = my[side], atSide = at[side], isShift = type === SHIFT, myLength = mySide === side1 ? elemLength : mySide === side2 ? -elemLength : -elemLength / 2, atLength = atSide === side1 ? targetLength : atSide === side2 ? -targetLength : -targetLength / 2, sideOffset = viewportScroll[side1] + viewportOffset[side1] - (containerStatic ? 0 : containerOffset[side1]), overflow1 = sideOffset - initialPos, overflow2 = initialPos + elemLength - (lengthName === WIDTH ? viewportWidth : viewportHeight) - sideOffset, offset = myLength - (my.precedance === side || mySide === my[otherSide] ? atLength : 0) - (atSide === CENTER ? targetLength / 2 : 0);
                if (isShift) {
                    offset = (mySide === side1 ? 1 : -1) * myLength;
                    position[side1] += overflow1 > 0 ? overflow1 : overflow2 > 0 ? -overflow2 : 0;
                    position[side1] = Math.max(-containerOffset[side1] + viewportOffset[side1], initialPos - offset, Math.min(Math.max(-containerOffset[side1] + viewportOffset[side1] + (lengthName === WIDTH ? viewportWidth : viewportHeight), initialPos + offset), position[side1], mySide === "center" ? initialPos - myLength : 1e9));
                } else {
                    adjust *= type === FLIPINVERT ? 2 : 0;
                    if (overflow1 > 0 && (mySide !== side1 || overflow2 > 0)) {
                        position[side1] -= offset + adjust;
                        newMy.invert(side, side1);
                    } else if (overflow2 > 0 && (mySide !== side2 || overflow1 > 0)) {
                        position[side1] -= (mySide === CENTER ? -offset : offset) + adjust;
                        newMy.invert(side, side2);
                    }
                    if (position[side1] < viewportScroll && -position[side1] > overflow2) {
                        position[side1] = initialPos;
                        newMy = my.clone();
                    }
                }
                return position[side1] - initialPos;
            }
            if (methodX !== "shift" || methodY !== "shift") {
                newMy = my.clone();
            }
            adjusted = {
                left: methodX !== "none" ? calculate(X, Y, methodX, adjust.x, LEFT, RIGHT, WIDTH, targetWidth, elemWidth) : 0,
                top: methodY !== "none" ? calculate(Y, X, methodY, adjust.y, TOP, BOTTOM, HEIGHT, targetHeight, elemHeight) : 0,
                my: newMy
            };
            return adjusted;
        };
    });
})(window, document);

$.fn.serializeObject = function() {
    var o = {};
    var a = this.find(":input").serializeArray();
    $.each(a, function() {
        if (this.value == "true") {
            this.value = true;
        } else if (this.value == "false") {
            this.value = false;
        } else if (this.value === undefined) {
            this.value = "";
        }
        if (o[this.name] !== undefined) {
            if (!o[this.name].push) {
                o[this.name] = [ o[this.name] ];
            }
            o[this.name].push(this.value);
        } else {
            o[this.name] = this.value;
        }
    });
    return o;
};

(function(factory) {
    if (typeof exports === "object" && exports && typeof module === "object" && module && module.exports === exports) {
        factory(require("jquery"));
    } else if (typeof define === "function" && define.amd) {
        define([ "jquery" ], factory);
    } else {
        factory(jQuery);
    }
})(function($) {
    var _baseDate = _generateBaseDate();
    var _ONE_DAY = 86400;
    var _lang = {
        am: "am",
        pm: "pm",
        AM: "AM",
        PM: "PM",
        decimal: ".",
        mins: "mins",
        hr: "hr",
        hrs: "hrs"
    };
    var methods = {
        init: function(options) {
            return this.each(function() {
                var self = $(this);
                var attributeOptions = [];
                for (var key in $.fn.timepicker.defaults) {
                    if (self.data(key)) {
                        attributeOptions[key] = self.data(key);
                    }
                }
                var settings = $.extend({}, $.fn.timepicker.defaults, attributeOptions, options);
                if (settings.lang) {
                    _lang = $.extend(_lang, settings.lang);
                }
                settings = _parseSettings(settings);
                self.data("timepicker-settings", settings);
                self.addClass("ui-timepicker-input");
                if (settings.useSelect) {
                    _render(self);
                } else {
                    self.prop("autocomplete", "off");
                    self.on("click.timepicker focus.timepicker", methods.show);
                    self.on("change.timepicker", _formatValue);
                    self.on("keydown.timepicker", _keydownhandler);
                    self.on("keyup.timepicker", _keyuphandler);
                    _formatValue.call(self.get(0));
                }
            });
        },
        show: function(e) {
            var self = $(this);
            var settings = self.data("timepicker-settings");
            if (e) {
                if (!settings.showOnFocus) {
                    return true;
                }
                e.preventDefault();
            }
            if (settings.useSelect) {
                self.data("timepicker-list").focus();
                return;
            }
            if (_hideKeyboard(self)) {
                self.blur();
            }
            var list = self.data("timepicker-list");
            if (self.prop("readonly")) {
                return;
            }
            if (!list || list.length === 0 || typeof settings.durationTime === "function") {
                _render(self);
                list = self.data("timepicker-list");
            }
            if (_isVisible(list)) {
                return;
            }
            methods.hide();
            list.show();
            var listOffset = {};
            if (settings.orientation == "rtl") {
                listOffset.left = self.offset().left + self.outerWidth() - list.outerWidth() + parseInt(list.css("marginLeft").replace("px", ""), 10);
            } else {
                listOffset.left = self.offset().left + parseInt(list.css("marginLeft").replace("px", ""), 10);
            }
            if (self.offset().top + self.outerHeight(true) + list.outerHeight() > $(window).height() + $(window).scrollTop()) {
                list.addClass("ui-timepicker-positioned-top");
                listOffset.top = self.offset().top - list.outerHeight() + parseInt(list.css("marginTop").replace("px", ""), 10);
            } else {
                list.removeClass("ui-timepicker-positioned-top");
                listOffset.top = self.offset().top + self.outerHeight() + parseInt(list.css("marginTop").replace("px", ""), 10);
            }
            list.offset(listOffset);
            var selected = list.find(".ui-timepicker-selected");
            if (!selected.length) {
                if (_getTimeValue(self)) {
                    selected = _findRow(self, list, _time2int(_getTimeValue(self)));
                } else if (settings.scrollDefault) {
                    selected = _findRow(self, list, settings.scrollDefault);
                }
            }
            if (selected && selected.length) {
                var topOffset = list.scrollTop() + selected.position().top - selected.outerHeight();
                list.scrollTop(topOffset);
            } else {
                list.scrollTop(0);
            }
            $(document).on("touchstart.ui-timepicker mousedown.ui-timepicker", _closeHandler);
            if (settings.closeOnWindowScroll) {
                $(document).on("scroll.ui-timepicker", _closeHandler);
            }
            self.trigger("showTimepicker");
            return this;
        },
        hide: function(e) {
            var self = $(this);
            var settings = self.data("timepicker-settings");
            if (settings && settings.useSelect) {
                self.blur();
            }
            $(".ui-timepicker-wrapper").each(function() {
                var list = $(this);
                if (!_isVisible(list)) {
                    return;
                }
                var self = list.data("timepicker-input");
                var settings = self.data("timepicker-settings");
                if (settings && settings.selectOnBlur) {
                    _selectValue(self);
                }
                list.hide();
                self.trigger("hideTimepicker");
            });
            return this;
        },
        option: function(key, value) {
            return this.each(function() {
                var self = $(this);
                var settings = self.data("timepicker-settings");
                var list = self.data("timepicker-list");
                if (typeof key == "object") {
                    settings = $.extend(settings, key);
                } else if (typeof key == "string" && typeof value != "undefined") {
                    settings[key] = value;
                } else if (typeof key == "string") {
                    return settings[key];
                }
                settings = _parseSettings(settings);
                self.data("timepicker-settings", settings);
                if (list) {
                    list.remove();
                    self.data("timepicker-list", false);
                }
                if (settings.useSelect) {
                    _render(self);
                }
            });
        },
        getSecondsFromMidnight: function() {
            return _time2int(_getTimeValue(this));
        },
        getTime: function(relative_date) {
            var self = this;
            var time_string = _getTimeValue(self);
            if (!time_string) {
                return null;
            }
            if (!relative_date) {
                relative_date = new Date();
            }
            var offset = _time2int(time_string);
            var time = new Date(relative_date);
            time.setHours(offset / 3600);
            time.setMinutes(offset % 3600 / 60);
            time.setSeconds(offset % 60);
            time.setMilliseconds(0);
            return time;
        },
        setTime: function(value) {
            var self = this;
            var settings = self.data("timepicker-settings");
            if (settings.forceRoundTime) {
                var prettyTime = _roundAndFormatTime(value, settings);
            } else {
                var prettyTime = _int2time(_time2int(value), settings.timeFormat);
            }
            _setTimeValue(self, prettyTime);
            if (self.data("timepicker-list")) {
                _setSelected(self, self.data("timepicker-list"));
            }
            return this;
        },
        remove: function() {
            var self = this;
            if (!self.hasClass("ui-timepicker-input")) {
                return;
            }
            var settings = self.data("timepicker-settings");
            self.removeAttr("autocomplete", "off");
            self.removeClass("ui-timepicker-input");
            self.removeData("timepicker-settings");
            self.off(".timepicker");
            if (self.data("timepicker-list")) {
                self.data("timepicker-list").remove();
            }
            if (settings.useSelect) {
                self.show();
            }
            self.removeData("timepicker-list");
            return this;
        }
    };
    function _isVisible(elem) {
        var el = elem[0];
        return el.offsetWidth > 0 && el.offsetHeight > 0;
    }
    function _parseSettings(settings) {
        if (settings.minTime) {
            settings.minTime = _time2int(settings.minTime);
        }
        if (settings.maxTime) {
            settings.maxTime = _time2int(settings.maxTime);
        }
        if (settings.durationTime && typeof settings.durationTime !== "function") {
            settings.durationTime = _time2int(settings.durationTime);
        }
        if (settings.scrollDefault == "now") {
            settings.scrollDefault = _time2int(new Date());
        } else if (settings.scrollDefault) {
            settings.scrollDefault = _time2int(settings.scrollDefault);
        } else if (settings.minTime) {
            settings.scrollDefault = settings.minTime;
        }
        if (settings.scrollDefault) {
            settings.scrollDefault = _roundTime(settings.scrollDefault, settings);
        }
        if ($.type(settings.timeFormat) === "string" && settings.timeFormat.match(/[gh]/)) {
            settings._twelveHourTime = true;
        }
        if (settings.disableTimeRanges.length > 0) {
            for (var i in settings.disableTimeRanges) {
                settings.disableTimeRanges[i] = [ _time2int(settings.disableTimeRanges[i][0]), _time2int(settings.disableTimeRanges[i][1]) ];
            }
            settings.disableTimeRanges = settings.disableTimeRanges.sort(function(a, b) {
                return a[0] - b[0];
            });
            for (var i = settings.disableTimeRanges.length - 1; i > 0; i--) {
                if (settings.disableTimeRanges[i][0] <= settings.disableTimeRanges[i - 1][1]) {
                    settings.disableTimeRanges[i - 1] = [ Math.min(settings.disableTimeRanges[i][0], settings.disableTimeRanges[i - 1][0]), Math.max(settings.disableTimeRanges[i][1], settings.disableTimeRanges[i - 1][1]) ];
                    settings.disableTimeRanges.splice(i, 1);
                }
            }
        }
        return settings;
    }
    function _render(self) {
        var settings = self.data("timepicker-settings");
        var list = self.data("timepicker-list");
        if (list && list.length) {
            list.remove();
            self.data("timepicker-list", false);
        }
        if (settings.useSelect) {
            list = $("<select />", {
                class: "ui-timepicker-select"
            });
            var wrapped_list = list;
        } else {
            list = $("<ul />", {
                class: "ui-timepicker-list"
            });
            var wrapped_list = $("<div />", {
                class: "ui-timepicker-wrapper",
                tabindex: -1
            });
            wrapped_list.css({
                display: "none",
                position: "absolute"
            }).append(list);
        }
        if (settings.noneOption) {
            if (settings.noneOption === true) {
                settings.noneOption = settings.useSelect ? "Time..." : "None";
            }
            if ($.isArray(settings.noneOption)) {
                for (var i in settings.noneOption) {
                    if (parseInt(i, 10) == i) {
                        var noneElement = _generateNoneElement(settings.noneOption[i], settings.useSelect);
                        list.append(noneElement);
                    }
                }
            } else {
                var noneElement = _generateNoneElement(settings.noneOption, settings.useSelect);
                list.append(noneElement);
            }
        }
        if (settings.className) {
            wrapped_list.addClass(settings.className);
        }
        if ((settings.minTime !== null || settings.durationTime !== null) && settings.showDuration) {
            wrapped_list.addClass("ui-timepicker-with-duration");
            wrapped_list.addClass("ui-timepicker-step-" + settings.step);
        }
        var durStart = settings.minTime;
        if (typeof settings.durationTime === "function") {
            durStart = _time2int(settings.durationTime());
        } else if (settings.durationTime !== null) {
            durStart = settings.durationTime;
        }
        var start = settings.minTime !== null ? settings.minTime : 0;
        var end = settings.maxTime !== null ? settings.maxTime : start + _ONE_DAY - 1;
        if (end <= start) {
            end += _ONE_DAY;
        }
        if (end === _ONE_DAY - 1 && $.type(settings.timeFormat) === "string" && settings.timeFormat.indexOf("H") !== -1) {
            end = _ONE_DAY;
        }
        var dr = settings.disableTimeRanges;
        var drCur = 0;
        var drLen = dr.length;
        for (var i = start; i <= end; i += settings.step * 60) {
            var timeInt = i;
            var timeString = _int2time(timeInt, settings.timeFormat);
            if (settings.useSelect) {
                var row = $("<option />", {
                    value: timeString
                });
                row.text(timeString);
            } else {
                var row = $("<li />");
                row.data("time", timeInt <= 86400 ? timeInt : timeInt % 86400);
                row.text(timeString);
            }
            if ((settings.minTime !== null || settings.durationTime !== null) && settings.showDuration) {
                var durationString = _int2duration(i - durStart, settings.step);
                if (settings.useSelect) {
                    row.text(row.text() + " (" + durationString + ")");
                } else {
                    var duration = $("<span />", {
                        class: "ui-timepicker-duration"
                    });
                    duration.text(" (" + durationString + ")");
                    row.append(duration);
                }
            }
            if (drCur < drLen) {
                if (timeInt >= dr[drCur][1]) {
                    drCur += 1;
                }
                if (dr[drCur] && timeInt >= dr[drCur][0] && timeInt < dr[drCur][1]) {
                    if (settings.useSelect) {
                        row.prop("disabled", true);
                    } else {
                        row.addClass("ui-timepicker-disabled");
                    }
                }
            }
            list.append(row);
        }
        wrapped_list.data("timepicker-input", self);
        self.data("timepicker-list", wrapped_list);
        if (settings.useSelect) {
            if (self.val()) {
                list.val(_roundAndFormatTime(self.val(), settings));
            }
            list.on("focus", function() {
                $(this).data("timepicker-input").trigger("showTimepicker");
            });
            list.on("blur", function() {
                $(this).data("timepicker-input").trigger("hideTimepicker");
            });
            list.on("change", function() {
                _setTimeValue(self, $(this).val(), "select");
            });
            _setTimeValue(self, list.val());
            self.hide().after(list);
        } else {
            var appendTo = settings.appendTo;
            if (typeof appendTo === "string") {
                appendTo = $(appendTo);
            } else if (typeof appendTo === "function") {
                appendTo = appendTo(self);
            }
            appendTo.append(wrapped_list);
            _setSelected(self, list);
            list.on("mousedown", "li", function(e) {
                self.off("focus.timepicker");
                self.on("focus.timepicker-ie-hack", function() {
                    self.off("focus.timepicker-ie-hack");
                    self.on("focus.timepicker", methods.show);
                });
                if (!_hideKeyboard(self)) {
                    self[0].focus();
                }
                list.find("li").removeClass("ui-timepicker-selected");
                $(this).addClass("ui-timepicker-selected");
                if (_selectValue(self)) {
                    self.trigger("hideTimepicker");
                    wrapped_list.hide();
                }
            });
        }
    }
    function _generateNoneElement(optionValue, useSelect) {
        var label, className, value;
        if (typeof optionValue == "object") {
            label = optionValue.label;
            className = optionValue.className;
            value = optionValue.value;
        } else if (typeof optionValue == "string") {
            label = optionValue;
        } else {
            $.error("Invalid noneOption value");
        }
        if (useSelect) {
            return $("<option />", {
                value: value,
                class: className,
                text: label
            });
        } else {
            return $("<li />", {
                class: className,
                text: label
            }).data("time", value);
        }
    }
    function _roundTime(seconds, settings) {
        if (!$.isNumeric(seconds)) {
            seconds = _time2int(seconds);
        }
        if (seconds === null) {
            return null;
        } else {
            var offset = seconds % (settings.step * 60);
            if (offset >= settings.step * 30) {
                seconds += settings.step * 60 - offset;
            } else {
                seconds -= offset;
            }
            return seconds;
        }
    }
    function _roundAndFormatTime(seconds, settings) {
        seconds = _roundTime(seconds, settings);
        if (seconds !== null) {
            return _int2time(seconds, settings.timeFormat);
        }
    }
    function _generateBaseDate() {
        return new Date(1970, 1, 1, 0, 0, 0);
    }
    function _closeHandler(e) {
        var target = $(e.target);
        var input = target.closest(".ui-timepicker-input");
        if (input.length === 0 && target.closest(".ui-timepicker-wrapper").length === 0) {
            methods.hide();
            $(document).unbind(".ui-timepicker");
        }
    }
    function _hideKeyboard(self) {
        var settings = self.data("timepicker-settings");
        return (window.navigator.msMaxTouchPoints || "ontouchstart" in document) && settings.disableTouchKeyboard;
    }
    function _findRow(self, list, value) {
        if (!value && value !== 0) {
            return false;
        }
        var settings = self.data("timepicker-settings");
        var out = false;
        var halfStep = settings.step * 30;
        list.find("li").each(function(i, obj) {
            var jObj = $(obj);
            if (typeof jObj.data("time") != "number") {
                return;
            }
            var offset = jObj.data("time") - value;
            if (Math.abs(offset) < halfStep || offset == halfStep) {
                out = jObj;
                return false;
            }
        });
        return out;
    }
    function _setSelected(self, list) {
        list.find("li").removeClass("ui-timepicker-selected");
        var timeValue = _time2int(_getTimeValue(self), self.data("timepicker-settings"));
        if (timeValue === null) {
            return;
        }
        var selected = _findRow(self, list, timeValue);
        if (selected) {
            var topDelta = selected.offset().top - list.offset().top;
            if (topDelta + selected.outerHeight() > list.outerHeight() || topDelta < 0) {
                list.scrollTop(list.scrollTop() + selected.position().top - selected.outerHeight());
            }
            selected.addClass("ui-timepicker-selected");
        }
    }
    function _formatValue(e, origin) {
        if (this.value === "" || origin == "timepicker") {
            return;
        }
        var self = $(this);
        var list = self.data("timepicker-list");
        if (self.is(":focus") && (!e || e.type != "change")) {
            return;
        }
        var seconds = _time2int(this.value);
        if (seconds === null) {
            self.trigger("timeFormatError");
            return;
        }
        var settings = self.data("timepicker-settings");
        var rangeError = false;
        if (settings.minTime !== null && seconds < settings.minTime) {
            rangeError = true;
        } else if (settings.maxTime !== null && seconds > settings.maxTime) {
            rangeError = true;
        }
        $.each(settings.disableTimeRanges, function() {
            if (seconds >= this[0] && seconds < this[1]) {
                rangeError = true;
                return false;
            }
        });
        if (settings.forceRoundTime) {
            var offset = seconds % (settings.step * 60);
            if (offset >= settings.step * 30) {
                seconds += settings.step * 60 - offset;
            } else {
                seconds -= offset;
            }
        }
        var prettyTime = _int2time(seconds, settings.timeFormat);
        if (rangeError) {
            if (_setTimeValue(self, prettyTime, "error")) {
                self.trigger("timeRangeError");
            }
        } else {
            _setTimeValue(self, prettyTime);
        }
    }
    function _getTimeValue(self) {
        if (self.is("input")) {
            return self.val();
        } else {
            return self.data("ui-timepicker-value");
        }
    }
    function _setTimeValue(self, value, source) {
        if (self.is("input")) {
            self.val(value);
            var settings = self.data("timepicker-settings");
            if (settings.useSelect && source != "select") {
                self.data("timepicker-list").val(_roundAndFormatTime(value, settings));
            }
        }
        if (self.data("ui-timepicker-value") != value) {
            self.data("ui-timepicker-value", value);
            if (source == "select") {
                self.trigger("selectTime").trigger("changeTime").trigger("change", "timepicker");
            } else if (source != "error") {
                self.trigger("changeTime");
            }
            return true;
        } else {
            self.trigger("selectTime");
            return false;
        }
    }
    function _keydownhandler(e) {
        var self = $(this);
        var list = self.data("timepicker-list");
        if (!list || !_isVisible(list)) {
            if (e.keyCode == 40) {
                methods.show.call(self.get(0));
                list = self.data("timepicker-list");
                if (!_hideKeyboard(self)) {
                    self.focus();
                }
            } else {
                return true;
            }
        }
        switch (e.keyCode) {
          case 13:
            if (_selectValue(self)) {
                methods.hide.apply(this);
            }
            e.preventDefault();
            return false;

          case 38:
            var selected = list.find(".ui-timepicker-selected");
            if (!selected.length) {
                list.find("li").each(function(i, obj) {
                    if ($(obj).position().top > 0) {
                        selected = $(obj);
                        return false;
                    }
                });
                selected.addClass("ui-timepicker-selected");
            } else if (!selected.is(":first-child")) {
                selected.removeClass("ui-timepicker-selected");
                selected.prev().addClass("ui-timepicker-selected");
                if (selected.prev().position().top < selected.outerHeight()) {
                    list.scrollTop(list.scrollTop() - selected.outerHeight());
                }
            }
            return false;

          case 40:
            selected = list.find(".ui-timepicker-selected");
            if (selected.length === 0) {
                list.find("li").each(function(i, obj) {
                    if ($(obj).position().top > 0) {
                        selected = $(obj);
                        return false;
                    }
                });
                selected.addClass("ui-timepicker-selected");
            } else if (!selected.is(":last-child")) {
                selected.removeClass("ui-timepicker-selected");
                selected.next().addClass("ui-timepicker-selected");
                if (selected.next().position().top + 2 * selected.outerHeight() > list.outerHeight()) {
                    list.scrollTop(list.scrollTop() + selected.outerHeight());
                }
            }
            return false;

          case 27:
            list.find("li").removeClass("ui-timepicker-selected");
            methods.hide();
            break;

          case 9:
            methods.hide();
            break;

          default:
            return true;
        }
    }
    function _keyuphandler(e) {
        var self = $(this);
        var list = self.data("timepicker-list");
        if (!list || !_isVisible(list)) {
            return true;
        }
        if (!self.data("timepicker-settings").typeaheadHighlight) {
            list.find("li").removeClass("ui-timepicker-selected");
            return true;
        }
        switch (e.keyCode) {
          case 96:
          case 97:
          case 98:
          case 99:
          case 100:
          case 101:
          case 102:
          case 103:
          case 104:
          case 105:
          case 48:
          case 49:
          case 50:
          case 51:
          case 52:
          case 53:
          case 54:
          case 55:
          case 56:
          case 57:
          case 65:
          case 77:
          case 80:
          case 186:
          case 8:
          case 46:
            _setSelected(self, list);
            break;

          default:
            return;
        }
    }
    function _selectValue(self) {
        var settings = self.data("timepicker-settings");
        var list = self.data("timepicker-list");
        var timeValue = null;
        var cursor = list.find(".ui-timepicker-selected");
        if (cursor.hasClass("ui-timepicker-disabled")) {
            return false;
        }
        if (cursor.length) {
            timeValue = cursor.data("time");
        }
        if (timeValue !== null) {
            if (typeof timeValue == "string") {
                self.val(timeValue);
                self.trigger("selectTime").trigger("changeTime").trigger("change", "timepicker");
            } else {
                var timeString = _int2time(timeValue, settings.timeFormat);
                _setTimeValue(self, timeString, "select");
            }
        }
        return true;
    }
    function _int2duration(seconds, step) {
        seconds = Math.abs(seconds);
        var minutes = Math.round(seconds / 60), duration = [], hours, mins;
        if (minutes < 60) {
            duration = [ minutes, _lang.mins ];
        } else {
            hours = Math.floor(minutes / 60);
            mins = minutes % 60;
            if (step == 30 && mins == 30) {
                hours += _lang.decimal + 5;
            }
            duration.push(hours);
            duration.push(hours == 1 ? _lang.hr : _lang.hrs);
            if (step != 30 && mins) {
                duration.push(mins);
                duration.push(_lang.mins);
            }
        }
        return duration.join(" ");
    }
    function _int2time(seconds, format) {
        if (seconds === null) {
            return;
        }
        var time = new Date(_baseDate.valueOf() + seconds * 1e3);
        if (isNaN(time.getTime())) {
            return;
        }
        if ($.type(format) === "function") {
            return format(time);
        }
        var output = "";
        var hour, code;
        for (var i = 0; i < format.length; i++) {
            code = format.charAt(i);
            switch (code) {
              case "a":
                output += time.getHours() > 11 ? _lang.pm : _lang.am;
                break;

              case "A":
                output += time.getHours() > 11 ? _lang.pm.toUpperCase() : _lang.am.toUpperCase();
                break;

              case "g":
                hour = time.getHours() % 12;
                output += hour === 0 ? "12" : hour;
                break;

              case "G":
                output += time.getHours();
                break;

              case "h":
                hour = time.getHours() % 12;
                if (hour !== 0 && hour < 10) {
                    hour = "0" + hour;
                }
                output += hour === 0 ? "12" : hour;
                break;

              case "H":
                hour = time.getHours();
                if (seconds === _ONE_DAY) hour = 24;
                output += hour > 9 ? hour : "0" + hour;
                break;

              case "i":
                var minutes = time.getMinutes();
                output += minutes > 9 ? minutes : "0" + minutes;
                break;

              case "s":
                seconds = time.getSeconds();
                output += seconds > 9 ? seconds : "0" + seconds;
                break;

              case "\\":
                i++;
                output += format.charAt(i);
                break;

              default:
                output += code;
            }
        }
        return output;
    }
    function _time2int(timeString, settings) {
        if (timeString === "") return null;
        if (!timeString || timeString + 0 == timeString) return timeString;
        if (typeof timeString == "object") {
            return timeString.getHours() * 3600 + timeString.getMinutes() * 60 + timeString.getSeconds();
        }
        timeString = timeString.toLowerCase();
        if (timeString.slice(-1) == "a" || timeString.slice(-1) == "p") {
            timeString += "m";
        }
        var pattern = new RegExp("^([0-2]?[0-9])\\W?([0-5][0-9])?\\W?([0-5][0-9])?\\s*(" + _lang.am + "|" + _lang.pm + ")?$");
        var time = timeString.match(pattern);
        if (!time) {
            return null;
        }
        var hour = parseInt(time[1] * 1, 10);
        var ampm = time[4];
        var hours = hour;
        if (hour <= 12 && ampm) {
            if (hour == 12) {
                hours = time[4] == _lang.pm ? 12 : 0;
            } else {
                hours = hour + (time[4] == _lang.pm ? 12 : 0);
            }
        }
        var minutes = time[2] * 1 || 0;
        var seconds = time[3] * 1 || 0;
        var timeInt = hours * 3600 + minutes * 60 + seconds;
        if (!ampm && settings && settings._twelveHourTime && settings.scrollDefault) {
            var delta = timeInt - settings.scrollDefault;
            if (delta < 0 && delta >= _ONE_DAY / -2) {
                timeInt = (timeInt + _ONE_DAY / 2) % _ONE_DAY;
            }
        }
        return timeInt;
    }
    function _pad2(n) {
        return ("0" + n).slice(-2);
    }
    $.fn.timepicker = function(method) {
        if (!this.length) return this;
        if (methods[method]) {
            if (!this.hasClass("ui-timepicker-input")) {
                return this;
            }
            return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
        } else if (typeof method === "object" || !method) {
            return methods.init.apply(this, arguments);
        } else {
            $.error("Method " + method + " does not exist on jQuery.timepicker");
        }
    };
    $.fn.timepicker.defaults = {
        className: null,
        minTime: null,
        maxTime: null,
        durationTime: null,
        step: 30,
        showDuration: false,
        showOnFocus: true,
        timeFormat: "g:ia",
        scrollDefault: null,
        selectOnBlur: false,
        disableTouchKeyboard: false,
        forceRoundTime: false,
        appendTo: "body",
        orientation: "ltr",
        disableTimeRanges: [],
        closeOnWindowScroll: false,
        typeaheadHighlight: true,
        noneOption: false
    };
});

(function(root) {
    var serverSide = typeof module !== "undefined" && module.exports;
    var getnlp = function() {
        if (!getnlp._nlp) {
            if (serverSide) {
                getnlp._nlp = require("./nlp");
            } else if (!(getnlp._nlp = root._RRuleNLP)) {
                throw new Error("You need to include rrule/nlp.js for fromText/toText to work.");
            }
        }
        return getnlp._nlp;
    };
    var dateutil = {
        MONTH_DAYS: [ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ],
        ONE_DAY: 1e3 * 60 * 60 * 24,
        MAXYEAR: 9999,
        ORDINAL_BASE: new Date(1970, 0, 1),
        PY_WEEKDAYS: [ 6, 0, 1, 2, 3, 4, 5 ],
        getYearDay: function(date) {
            var dateNoTime = new Date(date.getFullYear(), date.getMonth(), date.getDate());
            return Math.ceil((dateNoTime - new Date(date.getFullYear(), 0, 1)) / dateutil.ONE_DAY) + 1;
        },
        isLeapYear: function(year) {
            if (year instanceof Date) {
                year = year.getFullYear();
            }
            return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
        },
        tzOffset: function(date) {
            return date.getTimezoneOffset() * 60 * 1e3;
        },
        daysBetween: function(date1, date2) {
            var date1_ms = date1.getTime() - dateutil.tzOffset(date1);
            var date2_ms = date2.getTime() - dateutil.tzOffset(date2);
            var difference_ms = Math.abs(date1_ms - date2_ms);
            return Math.round(difference_ms / dateutil.ONE_DAY);
        },
        toOrdinal: function(date) {
            return dateutil.daysBetween(date, dateutil.ORDINAL_BASE);
        },
        fromOrdinal: function(ordinal) {
            var millisecsFromBase = ordinal * dateutil.ONE_DAY;
            return new Date(dateutil.ORDINAL_BASE.getTime() - dateutil.tzOffset(dateutil.ORDINAL_BASE) + millisecsFromBase + dateutil.tzOffset(new Date(millisecsFromBase)));
        },
        monthRange: function(year, month) {
            var date = new Date(year, month, 1);
            return [ dateutil.getWeekday(date), dateutil.getMonthDays(date) ];
        },
        getMonthDays: function(date) {
            var month = date.getMonth();
            return month == 1 && dateutil.isLeapYear(date) ? 29 : dateutil.MONTH_DAYS[month];
        },
        getWeekday: function(date) {
            return dateutil.PY_WEEKDAYS[date.getDay()];
        },
        combine: function(date, time) {
            time = time || date;
            return new Date(date.getFullYear(), date.getMonth(), date.getDate(), time.getHours(), time.getMinutes(), time.getSeconds());
        },
        clone: function(date) {
            var dolly = new Date(date.getTime());
            dolly.setMilliseconds(0);
            return dolly;
        },
        cloneDates: function(dates) {
            var clones = [];
            for (var i = 0; i < dates.length; i++) {
                clones.push(dateutil.clone(dates[i]));
            }
            return clones;
        },
        sort: function(dates) {
            dates.sort(function(a, b) {
                return a.getTime() - b.getTime();
            });
        },
        timeToUntilString: function(time, onlyDate) {
            var date = new Date(time);
            var compsUsed, comp, comps = [ date.getUTCFullYear(), date.getUTCMonth() + 1, date.getUTCDate(), "T", date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), "Z" ];
            compsUsed = comps.length;
            if (onlyDate) {
                compsUsed = 3;
            }
            comps = comps.slice(0, compsUsed);
            for (var i = 0; i < compsUsed; i++) {
                comp = comps[i];
                if (!/[TZ]/.test(comp) && comp < 10) {
                    comps[i] = "0" + String(comp);
                }
            }
            return comps.join("");
        },
        untilStringToDate: function(until) {
            var re = /^(\d{4})(\d{2})(\d{2})(T(\d{2})(\d{2})(\d{2})Z)?$/;
            var bits = re.exec(until);
            if (!bits) {
                throw new Error("Invalid UNTIL value: " + until);
            }
            return new Date(Date.UTC(bits[1], bits[2] - 1, bits[3], bits[5] || 0, bits[6] || 0, bits[7] || 0));
        },
        hasOnlyDate: function(until) {
            return !/T/.test(until);
        }
    };
    dateutil.Time = function(hour, minute, second) {
        this.hour = hour;
        this.minute = minute;
        this.second = second;
    };
    dateutil.Time.prototype = {
        getHours: function() {
            return this.hour;
        },
        getMinutes: function() {
            return this.minute;
        },
        getSeconds: function() {
            return this.second;
        },
        getTime: function() {
            return (this.hour * 60 * 60 + this.minute * 60 + this.second) * 1e3;
        }
    };
    var range = function(start, end) {
        if (arguments.length === 1) {
            end = start;
            start = 0;
        }
        var rang = [];
        for (var i = start; i < end; i++) {
            rang.push(i);
        }
        return rang;
    };
    var repeat = function(value, times) {
        var i = 0, array = [];
        if (value instanceof Array) {
            for (;i < times; i++) {
                array[i] = [].concat(value);
            }
        } else {
            for (;i < times; i++) {
                array[i] = value;
            }
        }
        return array;
    };
    var pymod = function(a, b) {
        var r = a % b;
        return r * b < 0 ? r + b : r;
    };
    var divmod = function(a, b) {
        return {
            div: Math.floor(a / b),
            mod: pymod(a, b)
        };
    };
    var plb = function(obj) {
        return obj instanceof Array && obj.length == 0 ? false : Boolean(obj);
    };
    var contains = function(arr, val) {
        return arr.indexOf(val) != -1;
    };
    var M365MASK = [].concat(repeat(1, 31), repeat(2, 28), repeat(3, 31), repeat(4, 30), repeat(5, 31), repeat(6, 30), repeat(7, 31), repeat(8, 31), repeat(9, 30), repeat(10, 31), repeat(11, 30), repeat(12, 31), repeat(1, 7));
    var M366MASK = [].concat(repeat(1, 31), repeat(2, 29), repeat(3, 31), repeat(4, 30), repeat(5, 31), repeat(6, 30), repeat(7, 31), repeat(8, 31), repeat(9, 30), repeat(10, 31), repeat(11, 30), repeat(12, 31), repeat(1, 7));
    var M28 = range(1, 29), M29 = range(1, 30), M30 = range(1, 31), M31 = range(1, 32);
    var MDAY366MASK = [].concat(M31, M29, M31, M30, M31, M30, M31, M31, M30, M31, M30, M31, M31.slice(0, 7));
    var MDAY365MASK = [].concat(M31, M28, M31, M30, M31, M30, M31, M31, M30, M31, M30, M31, M31.slice(0, 7));
    M28 = range(-28, 0);
    M29 = range(-29, 0);
    M30 = range(-30, 0);
    M31 = range(-31, 0);
    var NMDAY366MASK = [].concat(M31, M29, M31, M30, M31, M30, M31, M31, M30, M31, M30, M31, M31.slice(0, 7));
    var NMDAY365MASK = [].concat(M31, M28, M31, M30, M31, M30, M31, M31, M30, M31, M30, M31, M31.slice(0, 7));
    var M366RANGE = [ 0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366 ];
    var M365RANGE = [ 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365 ];
    var WDAYMASK = function() {
        for (var wdaymask = [], i = 0; i < 55; i++) {
            wdaymask = wdaymask.concat(range(7));
        }
        return wdaymask;
    }();
    var Weekday = function(weekday, n) {
        if (n === 0) {
            throw new Error("Can't create weekday with n == 0");
        }
        this.weekday = weekday;
        this.n = n;
    };
    Weekday.prototype = {
        nth: function(n) {
            return this.n == n ? this : new Weekday(this.weekday, n);
        },
        equals: function(other) {
            return this.weekday == other.weekday && this.n == other.n;
        },
        toString: function() {
            var s = [ "MO", "TU", "WE", "TH", "FR", "SA", "SU" ][this.weekday];
            if (this.n) {
                s = (this.n > 0 ? "+" : "") + String(this.n) + s;
            }
            return s;
        },
        getJsWeekday: function() {
            return this.weekday == 6 ? 0 : this.weekday + 1;
        }
    };
    var RRule = function(options, noCache) {
        this._string = null;
        options = options || {};
        this._cache = noCache ? null : {
            all: false,
            before: [],
            after: [],
            between: []
        };
        this.origOptions = {};
        var invalid = [], keys = Object.keys(options), defaultKeys = Object.keys(RRule.DEFAULT_OPTIONS);
        keys.forEach(function(key) {
            this.origOptions[key] = options[key];
            if (!contains(defaultKeys, key)) invalid.push(key);
        }, this);
        if (invalid.length) {
            throw new Error("Invalid options: " + invalid.join(", "));
        }
        if (!RRule.FREQUENCIES[options.freq] && options.byeaster === null) {
            throw new Error("Invalid frequency: " + String(options.freq));
        }
        defaultKeys.forEach(function(key) {
            if (!contains(keys, key)) options[key] = RRule.DEFAULT_OPTIONS[key];
        });
        var opts = this.options = options;
        if (opts.byeaster !== null) {
            opts.freq = RRule.YEARLY;
        }
        if (!opts.dtstart) {
            opts.dtstart = new Date();
            opts.dtstart.setMilliseconds(0);
        }
        if (opts.wkst === null) {
            opts.wkst = RRule.MO.weekday;
        } else if (typeof opts.wkst == "number") {} else {
            opts.wkst = opts.wkst.weekday;
        }
        if (opts.bysetpos !== null) {
            if (typeof opts.bysetpos == "number") {
                opts.bysetpos = [ opts.bysetpos ];
            }
            for (var i = 0; i < opts.bysetpos.length; i++) {
                var v = opts.bysetpos[i];
                if (v == 0 || !(-366 <= v && v <= 366)) {
                    throw new Error("bysetpos must be between 1 and 366," + " or between -366 and -1");
                }
            }
        }
        if (!(plb(opts.byweekno) || plb(opts.byyearday) || plb(opts.bymonthday) || opts.byweekday !== null || opts.byeaster !== null)) {
            switch (opts.freq) {
              case RRule.YEARLY:
                if (!opts.bymonth) {
                    opts.bymonth = opts.dtstart.getMonth() + 1;
                }
                opts.bymonthday = opts.dtstart.getDate();
                break;

              case RRule.MONTHLY:
                opts.bymonthday = opts.dtstart.getDate();
                break;

              case RRule.WEEKLY:
                opts.byweekday = dateutil.getWeekday(opts.dtstart);
                break;
            }
        }
        if (opts.bymonth !== null && !(opts.bymonth instanceof Array)) {
            opts.bymonth = [ opts.bymonth ];
        }
        if (opts.byyearday !== null && !(opts.byyearday instanceof Array)) {
            opts.byyearday = [ opts.byyearday ];
        }
        if (opts.bymonthday === null) {
            opts.bymonthday = [];
            opts.bynmonthday = [];
        } else if (opts.bymonthday instanceof Array) {
            var bymonthday = [], bynmonthday = [];
            for (i = 0; i < opts.bymonthday.length; i++) {
                var v = opts.bymonthday[i];
                if (v > 0) {
                    bymonthday.push(v);
                } else if (v < 0) {
                    bynmonthday.push(v);
                }
            }
            opts.bymonthday = bymonthday;
            opts.bynmonthday = bynmonthday;
        } else {
            if (opts.bymonthday < 0) {
                opts.bynmonthday = [ opts.bymonthday ];
                opts.bymonthday = [];
            } else {
                opts.bynmonthday = [];
                opts.bymonthday = [ opts.bymonthday ];
            }
        }
        if (opts.byweekno !== null && !(opts.byweekno instanceof Array)) {
            opts.byweekno = [ opts.byweekno ];
        }
        if (opts.byweekday === null) {
            opts.bynweekday = null;
        } else if (typeof opts.byweekday == "number") {
            opts.byweekday = [ opts.byweekday ];
            opts.bynweekday = null;
        } else if (opts.byweekday instanceof Weekday) {
            if (!opts.byweekday.n || opts.freq > RRule.MONTHLY) {
                opts.byweekday = [ opts.byweekday.weekday ];
                opts.bynweekday = null;
            } else {
                opts.bynweekday = [ [ opts.byweekday.weekday, opts.byweekday.n ] ];
                opts.byweekday = null;
            }
        } else {
            var byweekday = [], bynweekday = [];
            for (i = 0; i < opts.byweekday.length; i++) {
                var wday = opts.byweekday[i];
                if (typeof wday == "number") {
                    byweekday.push(wday);
                } else if (!wday.n || opts.freq > RRule.MONTHLY) {
                    byweekday.push(wday.weekday);
                } else {
                    bynweekday.push([ wday.weekday, wday.n ]);
                }
            }
            opts.byweekday = plb(byweekday) ? byweekday : null;
            opts.bynweekday = plb(bynweekday) ? bynweekday : null;
        }
        if (opts.byhour === null) {
            opts.byhour = opts.freq < RRule.HOURLY ? [ opts.dtstart.getHours() ] : null;
        } else if (typeof opts.byhour == "number") {
            opts.byhour = [ opts.byhour ];
        }
        if (opts.byminute === null) {
            opts.byminute = opts.freq < RRule.MINUTELY ? [ opts.dtstart.getMinutes() ] : null;
        } else if (typeof opts.byminute == "number") {
            opts.byminute = [ opts.byminute ];
        }
        if (opts.bysecond === null) {
            opts.bysecond = opts.freq < RRule.SECONDLY ? [ opts.dtstart.getSeconds() ] : null;
        } else if (typeof opts.bysecond == "number") {
            opts.bysecond = [ opts.bysecond ];
        }
        if (opts.freq >= RRule.HOURLY) {
            this.timeset = null;
        } else {
            this.timeset = [];
            for (i = 0; i < opts.byhour.length; i++) {
                var hour = opts.byhour[i];
                for (var j = 0; j < opts.byminute.length; j++) {
                    var minute = opts.byminute[j];
                    for (var k = 0; k < opts.bysecond.length; k++) {
                        var second = opts.bysecond[k];
                        this.timeset.push(new dateutil.Time(hour, minute, second));
                    }
                }
            }
            dateutil.sort(this.timeset);
        }
    };
    RRule.FREQUENCIES = [ "YEARLY", "MONTHLY", "WEEKLY", "DAILY", "HOURLY", "MINUTELY", "SECONDLY" ];
    RRule.YEARLY = 0;
    RRule.MONTHLY = 1;
    RRule.WEEKLY = 2;
    RRule.DAILY = 3;
    RRule.HOURLY = 4;
    RRule.MINUTELY = 5;
    RRule.SECONDLY = 6;
    RRule.MO = new Weekday(0);
    RRule.TU = new Weekday(1);
    RRule.WE = new Weekday(2);
    RRule.TH = new Weekday(3);
    RRule.FR = new Weekday(4);
    RRule.SA = new Weekday(5);
    RRule.SU = new Weekday(6);
    RRule.DEFAULT_OPTIONS = {
        freq: null,
        dtstart: null,
        interval: 1,
        wkst: RRule.MO,
        count: null,
        until: null,
        onlydate: false,
        bysetpos: null,
        bymonth: null,
        bymonthday: null,
        byyearday: null,
        byweekno: null,
        byweekday: null,
        byhour: null,
        byminute: null,
        bysecond: null,
        byeaster: null
    };
    RRule.parseText = function(text, language) {
        return getnlp().parseText(text, language);
    };
    RRule.fromText = function(text, language) {
        return getnlp().fromText(text, language);
    };
    RRule.optionsToString = function(options) {
        var key, keys, defaultKeys, value, strValues, onlyDate, pairs = [];
        keys = Object.keys(options);
        defaultKeys = Object.keys(RRule.DEFAULT_OPTIONS);
        onlyDate = options.onlydate;
        for (var i = 0; i < keys.length; i++) {
            if (!contains(defaultKeys, keys[i])) continue;
            key = keys[i].toUpperCase();
            value = options[keys[i]];
            strValues = [];
            if (value === null || value instanceof Array && !value.length) {
                continue;
            }
            switch (key) {
              case "FREQ":
                value = RRule.FREQUENCIES[options.freq];
                break;

              case "WKST":
                value = value.toString();
                break;

              case "BYWEEKDAY":
                key = "BYDAY";
                if (!(value instanceof Array)) {
                    value = [ value ];
                }
                for (var wday, j = 0; j < value.length; j++) {
                    wday = value[j];
                    if (wday instanceof Weekday) {} else if (wday instanceof Array) {
                        wday = new Weekday(wday[0], wday[1]);
                    } else {
                        wday = new Weekday(wday);
                    }
                    strValues[j] = wday.toString();
                }
                value = strValues;
                break;

              case "DTSTART":
              case "UNTIL":
                value = dateutil.timeToUntilString(value, onlyDate);
                break;

              case "ONLYDATE":
                continue;
                break;

              default:
                if (value instanceof Array) {
                    for (var j = 0; j < value.length; j++) {
                        strValues[j] = String(value[j]);
                    }
                    value = strValues;
                } else {
                    value = String(value);
                }
            }
            pairs.push([ key, value ]);
        }
        var strings = [];
        for (var i = 0; i < pairs.length; i++) {
            var attr = pairs[i];
            strings.push(attr[0] + "=" + attr[1].toString());
        }
        return strings.join(";");
    };
    RRule.prototype = {
        all: function(iterator) {
            if (iterator) {
                return this._iter(new CallbackIterResult("all", {}, iterator));
            } else {
                var result = this._cacheGet("all");
                if (result === false) {
                    result = this._iter(new IterResult("all", {}));
                    this._cacheAdd("all", result);
                }
                return result;
            }
        },
        between: function(after, before, inc, iterator) {
            var args = {
                before: before,
                after: after,
                inc: inc
            };
            if (iterator) {
                return this._iter(new CallbackIterResult("between", args, iterator));
            } else {
                var result = this._cacheGet("between", args);
                if (result === false) {
                    result = this._iter(new IterResult("between", args));
                    this._cacheAdd("between", result, args);
                }
                return result;
            }
        },
        before: function(dt, inc) {
            var args = {
                dt: dt,
                inc: inc
            }, result = this._cacheGet("before", args);
            if (result === false) {
                result = this._iter(new IterResult("before", args));
                this._cacheAdd("before", result, args);
            }
            return result;
        },
        after: function(dt, inc) {
            var args = {
                dt: dt,
                inc: inc
            }, result = this._cacheGet("after", args);
            if (result === false) {
                result = this._iter(new IterResult("after", args));
                this._cacheAdd("after", result, args);
            }
            return result;
        },
        count: function() {
            return this.all().length;
        },
        toString: function() {
            return RRule.optionsToString(this.origOptions);
        },
        toText: function(gettext, language) {
            return getnlp().toText(this, gettext, language);
        },
        isFullyConvertibleToText: function() {
            return getnlp().isFullyConvertible(this);
        },
        _cacheAdd: function(what, value, args) {
            if (!this._cache) return;
            if (value) {
                value = value instanceof Date ? dateutil.clone(value) : dateutil.cloneDates(value);
            }
            if (what == "all") {
                this._cache.all = value;
            } else {
                args._value = value;
                this._cache[what].push(args);
            }
        },
        _cacheGet: function(what, args) {
            if (!this._cache) {
                return false;
            }
            var cached = false;
            if (what == "all") {
                cached = this._cache.all;
            } else {
                loopItems: for (var item, i = 0; i < this._cache[what].length; i++) {
                    item = this._cache[what][i];
                    for (var k in args) {
                        if (args.hasOwnProperty(k) && String(args[k]) != String(item[k])) {
                            continue loopItems;
                        }
                    }
                    cached = item._value;
                    break;
                }
            }
            if (!cached && this._cache.all) {
                var iterResult = new IterResult(what, args);
                for (var i = 0; i < this._cache.all.length; i++) {
                    if (!iterResult.accept(this._cache.all[i])) {
                        break;
                    }
                }
                cached = iterResult.getValue();
                this._cacheAdd(what, cached, args);
            }
            return cached instanceof Array ? dateutil.cloneDates(cached) : cached instanceof Date ? dateutil.clone(cached) : cached;
        },
        clone: function() {
            return new RRule(this.origOptions);
        },
        _iter: function(iterResult) {
            var dtstart = this.options.dtstart;
            var year = dtstart.getFullYear(), month = dtstart.getMonth() + 1, day = dtstart.getDate(), hour = dtstart.getHours(), minute = dtstart.getMinutes(), second = dtstart.getSeconds(), weekday = dateutil.getWeekday(dtstart), yearday = dateutil.getYearDay(dtstart);
            var freq = this.options.freq, interval = this.options.interval, wkst = this.options.wkst, until = this.options.until, bymonth = this.options.bymonth, byweekno = this.options.byweekno, byyearday = this.options.byyearday, byweekday = this.options.byweekday, byeaster = this.options.byeaster, bymonthday = this.options.bymonthday, bynmonthday = this.options.bynmonthday, bysetpos = this.options.bysetpos, byhour = this.options.byhour, byminute = this.options.byminute, bysecond = this.options.bysecond;
            var ii = new Iterinfo(this);
            ii.rebuild(year, month);
            var getdayset = {};
            getdayset[RRule.YEARLY] = ii.ydayset;
            getdayset[RRule.MONTHLY] = ii.mdayset;
            getdayset[RRule.WEEKLY] = ii.wdayset;
            getdayset[RRule.DAILY] = ii.ddayset;
            getdayset[RRule.HOURLY] = ii.ddayset;
            getdayset[RRule.MINUTELY] = ii.ddayset;
            getdayset[RRule.SECONDLY] = ii.ddayset;
            getdayset = getdayset[freq];
            var timeset;
            if (freq < RRule.HOURLY) {
                timeset = this.timeset;
            } else {
                var gettimeset = {};
                gettimeset[RRule.HOURLY] = ii.htimeset;
                gettimeset[RRule.MINUTELY] = ii.mtimeset;
                gettimeset[RRule.SECONDLY] = ii.stimeset;
                gettimeset = gettimeset[freq];
                if (freq >= RRule.HOURLY && plb(byhour) && !contains(byhour, hour) || freq >= RRule.MINUTELY && plb(byminute) && !contains(byminute, minute) || freq >= RRule.SECONDLY && plb(bysecond) && !contains(bysecond, minute)) {
                    timeset = [];
                } else {
                    timeset = gettimeset.call(ii, hour, minute, second);
                }
            }
            var filtered, total = 0, count = this.options.count;
            var iterNo = 0;
            var i, j, k, dm, div, mod, tmp, pos, dayset, start, end, fixday;
            while (true) {
                tmp = getdayset.call(ii, year, month, day);
                dayset = tmp[0];
                start = tmp[1];
                end = tmp[2];
                filtered = false;
                for (j = start; j < end; j++) {
                    i = dayset[j];
                    if (plb(bymonth) && !contains(bymonth, ii.mmask[i]) || plb(byweekno) && !ii.wnomask[i] || plb(byweekday) && !contains(byweekday, ii.wdaymask[i]) || plb(ii.nwdaymask) && !ii.nwdaymask[i] || byeaster !== null && !contains(ii.eastermask, i) || (plb(bymonthday) || plb(bynmonthday)) && !contains(bymonthday, ii.mdaymask[i]) && !contains(bynmonthday, ii.nmdaymask[i]) || plb(byyearday) && (i < ii.yearlen && !contains(byyearday, i + 1) && !contains(byyearday, -ii.yearlen + i) || i >= ii.yearlen && !contains(byyearday, i + 1 - ii.yearlen) && !contains(byyearday, -ii.nextyearlen + i - ii.yearlen))) {
                        dayset[i] = null;
                        filtered = true;
                    }
                }
                if (plb(bysetpos) && plb(timeset)) {
                    var daypos, timepos, poslist = [];
                    for (i, j = 0; j < bysetpos.length; j++) {
                        var pos = bysetpos[j];
                        if (pos < 0) {
                            daypos = Math.floor(pos / timeset.length);
                            timepos = pymod(pos, timeset.length);
                        } else {
                            daypos = Math.floor((pos - 1) / timeset.length);
                            timepos = pymod(pos - 1, timeset.length);
                        }
                        try {
                            tmp = [];
                            for (k = start; k < end; k++) {
                                var val = dayset[k];
                                if (val === null) {
                                    continue;
                                }
                                tmp.push(val);
                            }
                            if (daypos < 0) {
                                i = tmp.slice(daypos)[0];
                            } else {
                                i = tmp[daypos];
                            }
                            var time = timeset[timepos];
                            var date = dateutil.fromOrdinal(ii.yearordinal + i);
                            var res = dateutil.combine(date, time);
                            if (!contains(poslist, res)) {
                                poslist.push(res);
                            }
                        } catch (e) {}
                    }
                    dateutil.sort(poslist);
                    for (j = 0; j < poslist.length; j++) {
                        var res = poslist[j];
                        if (until && res > until) {
                            this._len = total;
                            return iterResult.getValue();
                        } else if (res >= dtstart) {
                            ++total;
                            if (!iterResult.accept(res)) {
                                return iterResult.getValue();
                            }
                            if (count) {
                                --count;
                                if (!count) {
                                    this._len = total;
                                    return iterResult.getValue();
                                }
                            }
                        }
                    }
                } else {
                    for (j = start; j < end; j++) {
                        i = dayset[j];
                        if (i !== null) {
                            var date = dateutil.fromOrdinal(ii.yearordinal + i);
                            for (k = 0; k < timeset.length; k++) {
                                var time = timeset[k];
                                var res = dateutil.combine(date, time);
                                if (until && res > until) {
                                    this._len = total;
                                    return iterResult.getValue();
                                } else if (res >= dtstart) {
                                    ++total;
                                    if (!iterResult.accept(res)) {
                                        return iterResult.getValue();
                                    }
                                    if (count) {
                                        --count;
                                        if (!count) {
                                            this._len = total;
                                            return iterResult.getValue();
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                fixday = false;
                if (freq == RRule.YEARLY) {
                    year += interval;
                    if (year > dateutil.MAXYEAR) {
                        this._len = total;
                        return iterResult.getValue();
                    }
                    ii.rebuild(year, month);
                } else if (freq == RRule.MONTHLY) {
                    month += interval;
                    if (month > 12) {
                        div = Math.floor(month / 12);
                        mod = pymod(month, 12);
                        month = mod;
                        year += div;
                        if (month == 0) {
                            month = 12;
                            --year;
                        }
                        if (year > dateutil.MAXYEAR) {
                            this._len = total;
                            return iterResult.getValue();
                        }
                    }
                    ii.rebuild(year, month);
                } else if (freq == RRule.WEEKLY) {
                    if (wkst > weekday) {
                        day += -(weekday + 1 + (6 - wkst)) + interval * 7;
                    } else {
                        day += -(weekday - wkst) + interval * 7;
                    }
                    weekday = wkst;
                    fixday = true;
                } else if (freq == RRule.DAILY) {
                    day += interval;
                    fixday = true;
                } else if (freq == RRule.HOURLY) {
                    if (filtered) {
                        hour += Math.floor((23 - hour) / interval) * interval;
                    }
                    while (true) {
                        hour += interval;
                        dm = divmod(hour, 24);
                        div = dm.div;
                        mod = dm.mod;
                        if (div) {
                            hour = mod;
                            day += div;
                            fixday = true;
                        }
                        if (!plb(byhour) || contains(byhour, hour)) {
                            break;
                        }
                    }
                    timeset = gettimeset.call(ii, hour, minute, second);
                } else if (freq == RRule.MINUTELY) {
                    if (filtered) {
                        minute += Math.floor((1439 - (hour * 60 + minute)) / interval) * interval;
                    }
                    while (true) {
                        minute += interval;
                        dm = divmod(minute, 60);
                        div = dm.div;
                        mod = dm.mod;
                        if (div) {
                            minute = mod;
                            hour += div;
                            dm = divmod(hour, 24);
                            div = dm.div;
                            mod = dm.mod;
                            if (div) {
                                hour = mod;
                                day += div;
                                fixday = true;
                                filtered = false;
                            }
                        }
                        if ((!plb(byhour) || contains(byhour, hour)) && (!plb(byminute) || contains(byminute, minute))) {
                            break;
                        }
                    }
                    timeset = gettimeset.call(ii, hour, minute, second);
                } else if (freq == RRule.SECONDLY) {
                    if (filtered) {
                        second += Math.floor((86399 - (hour * 3600 + minute * 60 + second)) / interval) * interval;
                    }
                    while (true) {
                        second += interval;
                        dm = divmod(second, 60);
                        div = dm.div;
                        mod = dm.mod;
                        if (div) {
                            second = mod;
                            minute += div;
                            dm = divmod(minute, 60);
                            div = dm.div;
                            mod = dm.mod;
                            if (div) {
                                minute = mod;
                                hour += div;
                                dm = divmod(hour, 24);
                                div = dm.div;
                                mod = dm.mod;
                                if (div) {
                                    hour = mod;
                                    day += div;
                                    fixday = true;
                                }
                            }
                        }
                        if ((!plb(byhour) || contains(byhour, hour)) && (!plb(byminute) || contains(byminute, minute)) && (!plb(bysecond) || contains(bysecond, second))) {
                            break;
                        }
                    }
                    timeset = gettimeset.call(ii, hour, minute, second);
                }
                if (fixday && day > 28) {
                    var daysinmonth = dateutil.monthRange(year, month - 1)[1];
                    if (day > daysinmonth) {
                        while (day > daysinmonth) {
                            day -= daysinmonth;
                            ++month;
                            if (month == 13) {
                                month = 1;
                                ++year;
                                if (year > dateutil.MAXYEAR) {
                                    this._len = total;
                                    return iterResult.getValue();
                                }
                            }
                            daysinmonth = dateutil.monthRange(year, month - 1)[1];
                        }
                        ii.rebuild(year, month);
                    }
                }
            }
        }
    };
    RRule.parseString = function(rfcString) {
        rfcString = rfcString.replace(/^\s+|\s+$/, "");
        if (!rfcString.length) {
            return null;
        }
        var i, j, key, value, attr, attrs = rfcString.split(";"), options = {};
        for (i = 0; i < attrs.length; i++) {
            attr = attrs[i].split("=");
            key = attr[0];
            value = attr[1];
            switch (key) {
              case "FREQ":
                options.freq = RRule[value];
                break;

              case "WKST":
                options.wkst = RRule[value];
                break;

              case "COUNT":
              case "INTERVAL":
              case "BYSETPOS":
              case "BYMONTH":
              case "BYMONTHDAY":
              case "BYYEARDAY":
              case "BYWEEKNO":
              case "BYHOUR":
              case "BYMINUTE":
              case "BYSECOND":
                if (value.indexOf(",") != -1) {
                    value = value.split(",");
                    for (j = 0; j < value.length; j++) {
                        if (/^[+-]?\d+$/.test(value[j])) {
                            value[j] = Number(value[j]);
                        }
                    }
                } else if (/^[+-]?\d+$/.test(value)) {
                    value = Number(value);
                }
                key = key.toLowerCase();
                options[key] = value;
                break;

              case "BYDAY":
                var n, wday, day, days = value.split(",");
                options.byweekday = [];
                for (j = 0; j < days.length; j++) {
                    day = days[j];
                    if (day.length == 2) {
                        wday = RRule[day];
                        options.byweekday.push(wday);
                    } else {
                        day = day.match(/^([+-]?\d)([A-Z]{2})$/);
                        n = Number(day[1]);
                        wday = day[2];
                        wday = RRule[wday].weekday;
                        options.byweekday.push(new Weekday(wday, n));
                    }
                }
                break;

              case "DTSTART":
                options.dtstart = dateutil.untilStringToDate(value);
                options.onlydate = dateutil.hasOnlyDate(value);
                break;

              case "UNTIL":
                options.until = dateutil.untilStringToDate(value);
                options.onlydate = dateutil.hasOnlyDate(value);
                break;

              case "BYEASTER":
                options.byeaster = Number(value);
                break;

              default:
                throw new Error("Unknown RRULE property '" + key + "'");
            }
        }
        return options;
    };
    RRule.fromString = function(string) {
        return new RRule(RRule.parseString(string));
    };
    var Iterinfo = function(rrule) {
        this.rrule = rrule;
        this.lastyear = null;
        this.lastmonth = null;
        this.yearlen = null;
        this.nextyearlen = null;
        this.yearordinal = null;
        this.yearweekday = null;
        this.mmask = null;
        this.mrange = null;
        this.mdaymask = null;
        this.nmdaymask = null;
        this.wdaymask = null;
        this.wnomask = null;
        this.nwdaymask = null;
        this.eastermask = null;
    };
    Iterinfo.prototype.easter = function(y, offset) {
        offset = offset || 0;
        var a = y % 19, b = Math.floor(y / 100), c = y % 100, d = Math.floor(b / 4), e = b % 4, f = Math.floor((b + 8) / 25), g = Math.floor((b - f + 1) / 3), h = Math.floor(19 * a + b - d - g + 15) % 30, i = Math.floor(c / 4), k = c % 4, l = Math.floor(32 + 2 * e + 2 * i - h - k) % 7, m = Math.floor((a + 11 * h + 22 * l) / 451), month = Math.floor((h + l - 7 * m + 114) / 31), day = (h + l - 7 * m + 114) % 31 + 1, date = Date.UTC(y, month - 1, day + offset), yearStart = Date.UTC(y, 0, 1);
        return [ Math.ceil((date - yearStart) / (1e3 * 60 * 60 * 24)) ];
    };
    Iterinfo.prototype.rebuild = function(year, month) {
        var rr = this.rrule;
        if (year != this.lastyear) {
            this.yearlen = dateutil.isLeapYear(year) ? 366 : 365;
            this.nextyearlen = dateutil.isLeapYear(year + 1) ? 366 : 365;
            var firstyday = new Date(year, 0, 1);
            this.yearordinal = dateutil.toOrdinal(firstyday);
            this.yearweekday = dateutil.getWeekday(firstyday);
            var wday = dateutil.getWeekday(new Date(year, 0, 1));
            if (this.yearlen == 365) {
                this.mmask = [].concat(M365MASK);
                this.mdaymask = [].concat(MDAY365MASK);
                this.nmdaymask = [].concat(NMDAY365MASK);
                this.wdaymask = WDAYMASK.slice(wday);
                this.mrange = [].concat(M365RANGE);
            } else {
                this.mmask = [].concat(M366MASK);
                this.mdaymask = [].concat(MDAY366MASK);
                this.nmdaymask = [].concat(NMDAY366MASK);
                this.wdaymask = WDAYMASK.slice(wday);
                this.mrange = [].concat(M366RANGE);
            }
            if (!plb(rr.options.byweekno)) {
                this.wnomask = null;
            } else {
                this.wnomask = repeat(0, this.yearlen + 7);
                var no1wkst, firstwkst, wyearlen;
                no1wkst = firstwkst = pymod(7 - this.yearweekday + rr.options.wkst, 7);
                if (no1wkst >= 4) {
                    no1wkst = 0;
                    wyearlen = this.yearlen + pymod(this.yearweekday - rr.options.wkst, 7);
                } else {
                    wyearlen = this.yearlen - no1wkst;
                }
                var div = Math.floor(wyearlen / 7);
                var mod = pymod(wyearlen, 7);
                var numweeks = Math.floor(div + mod / 4);
                for (var n, i, j = 0; j < rr.options.byweekno.length; j++) {
                    n = rr.options.byweekno[j];
                    if (n < 0) {
                        n += numweeks + 1;
                    }
                    if (!(0 < n && n <= numweeks)) {
                        continue;
                    }
                    if (n > 1) {
                        i = no1wkst + (n - 1) * 7;
                        if (no1wkst != firstwkst) {
                            i -= 7 - firstwkst;
                        }
                    } else {
                        i = no1wkst;
                    }
                    for (var k = 0; k < 7; k++) {
                        this.wnomask[i] = 1;
                        i++;
                        if (this.wdaymask[i] == rr.options.wkst) {
                            break;
                        }
                    }
                }
                if (contains(rr.options.byweekno, 1)) {
                    var i = no1wkst + numweeks * 7;
                    if (no1wkst != firstwkst) {
                        i -= 7 - firstwkst;
                    }
                    if (i < this.yearlen) {
                        for (var j = 0; j < 7; j++) {
                            this.wnomask[i] = 1;
                            i += 1;
                            if (this.wdaymask[i] == rr.options.wkst) {
                                break;
                            }
                        }
                    }
                }
                if (no1wkst) {
                    var lnumweeks;
                    if (!contains(rr.options.byweekno, -1)) {
                        var lyearweekday = dateutil.getWeekday(new Date(year - 1, 0, 1));
                        var lno1wkst = pymod(7 - lyearweekday + rr.options.wkst, 7);
                        var lyearlen = dateutil.isLeapYear(year - 1) ? 366 : 365;
                        if (lno1wkst >= 4) {
                            lno1wkst = 0;
                            lnumweeks = Math.floor(52 + pymod(lyearlen + pymod(lyearweekday - rr.options.wkst, 7), 7) / 4);
                        } else {
                            lnumweeks = Math.floor(52 + pymod(this.yearlen - no1wkst, 7) / 4);
                        }
                    } else {
                        lnumweeks = -1;
                    }
                    if (contains(rr.options.byweekno, lnumweeks)) {
                        for (var i = 0; i < no1wkst; i++) {
                            this.wnomask[i] = 1;
                        }
                    }
                }
            }
        }
        if (plb(rr.options.bynweekday) && (month != this.lastmonth || year != this.lastyear)) {
            var ranges = [];
            if (rr.options.freq == RRule.YEARLY) {
                if (plb(rr.options.bymonth)) {
                    for (j = 0; j < rr.options.bymonth.length; j++) {
                        month = rr.options.bymonth[j];
                        ranges.push(this.mrange.slice(month - 1, month + 1));
                    }
                } else {
                    ranges = [ [ 0, this.yearlen ] ];
                }
            } else if (rr.options.freq == RRule.MONTHLY) {
                ranges = [ this.mrange.slice(month - 1, month + 1) ];
            }
            if (plb(ranges)) {
                this.nwdaymask = repeat(0, this.yearlen);
                for (var j = 0; j < ranges.length; j++) {
                    var rang = ranges[j];
                    var first = rang[0], last = rang[1];
                    last -= 1;
                    for (var k = 0; k < rr.options.bynweekday.length; k++) {
                        var wday = rr.options.bynweekday[k][0], n = rr.options.bynweekday[k][1];
                        if (n < 0) {
                            i = last + (n + 1) * 7;
                            i -= pymod(this.wdaymask[i] - wday, 7);
                        } else {
                            i = first + (n - 1) * 7;
                            i += pymod(7 - this.wdaymask[i] + wday, 7);
                        }
                        if (first <= i && i <= last) {
                            this.nwdaymask[i] = 1;
                        }
                    }
                }
            }
            this.lastyear = year;
            this.lastmonth = month;
        }
        if (rr.options.byeaster !== null) {
            this.eastermask = this.easter(year, rr.options.byeaster);
        }
    };
    Iterinfo.prototype.ydayset = function(year, month, day) {
        return [ range(this.yearlen), 0, this.yearlen ];
    };
    Iterinfo.prototype.mdayset = function(year, month, day) {
        var set = repeat(null, this.yearlen);
        var start = this.mrange[month - 1];
        var end = this.mrange[month];
        for (var i = start; i < end; i++) {
            set[i] = i;
        }
        return [ set, start, end ];
    };
    Iterinfo.prototype.wdayset = function(year, month, day) {
        var set = repeat(null, this.yearlen + 7);
        var i = dateutil.toOrdinal(new Date(year, month - 1, day)) - this.yearordinal;
        var start = i;
        for (var j = 0; j < 7; j++) {
            set[i] = i;
            ++i;
            if (this.wdaymask[i] == this.rrule.options.wkst) {
                break;
            }
        }
        return [ set, start, i ];
    };
    Iterinfo.prototype.ddayset = function(year, month, day) {
        var set = repeat(null, this.yearlen);
        var i = dateutil.toOrdinal(new Date(year, month - 1, day)) - this.yearordinal;
        set[i] = i;
        return [ set, i, i + 1 ];
    };
    Iterinfo.prototype.htimeset = function(hour, minute, second) {
        var set = [], rr = this.rrule;
        for (var i = 0; i < rr.options.byminute.length; i++) {
            minute = rr.options.byminute[i];
            for (var j = 0; j < rr.options.bysecond.length; j++) {
                second = rr.options.bysecond[j];
                set.push(new dateutil.Time(hour, minute, second));
            }
        }
        dateutil.sort(set);
        return set;
    };
    Iterinfo.prototype.mtimeset = function(hour, minute, second) {
        var set = [], rr = this.rrule;
        for (var j = 0; j < rr.options.bysecond.length; j++) {
            second = rr.options.bysecond[j];
            set.push(new dateutil.Time(hour, minute, second));
        }
        dateutil.sort(set);
        return set;
    };
    Iterinfo.prototype.stimeset = function(hour, minute, second) {
        return [ new dateutil.Time(hour, minute, second) ];
    };
    var IterResult = function(method, args) {
        this.init(method, args);
    };
    IterResult.prototype = {
        init: function(method, args) {
            this.method = method;
            this.args = args;
            this._result = [];
            this.minDate = null;
            this.maxDate = null;
            if (method == "between") {
                this.maxDate = args.inc ? args.before : new Date(args.before.getTime() - 1);
                this.minDate = args.inc ? args.after : new Date(args.after.getTime() + 1);
            } else if (method == "before") {
                this.maxDate = args.inc ? args.dt : new Date(args.dt.getTime() - 1);
            } else if (method == "after") {
                this.minDate = args.inc ? args.dt : new Date(args.dt.getTime() + 1);
            }
        },
        accept: function(date) {
            var tooEarly = this.minDate && date < this.minDate, tooLate = this.maxDate && date > this.maxDate;
            if (this.method == "between") {
                if (tooEarly) return true;
                if (tooLate) return false;
            } else if (this.method == "before") {
                if (tooLate) return false;
            } else if (this.method == "after") {
                if (tooEarly) return true;
                this.add(date);
                return false;
            }
            return this.add(date);
        },
        add: function(date) {
            this._result.push(date);
            return true;
        },
        getValue: function() {
            switch (this.method) {
              case "all":
              case "between":
                return this._result;

              case "before":
              case "after":
                return this._result.length ? this._result[this._result.length - 1] : null;
            }
        }
    };
    var CallbackIterResult = function(method, args, iterator) {
        var allowedMethods = [ "all", "between" ];
        if (!contains(allowedMethods, method)) {
            throw new Error('Invalid method "' + method + '". Only all and between works with iterator.');
        }
        this.add = function(date) {
            if (iterator(date, this._result.length)) {
                this._result.push(date);
                return true;
            }
            return false;
        };
        this.init(method, args);
    };
    CallbackIterResult.prototype = IterResult.prototype;
    if (serverSide) {
        module.exports = {
            RRule: RRule
        };
    }
    if (typeof ender === "undefined") {
        root["RRule"] = RRule;
    }
    if (typeof define === "function" && define.amd) {
        define("rrule", [], function() {
            return RRule;
        });
    }
})(this);

(function(root) {
    var serverSide = typeof module !== "undefined" && module.exports;
    var RRule;
    if (serverSide) {
        RRule = require("./rrule").RRule;
    } else if (root.RRule) {
        RRule = root.RRule;
    } else if (typeof require !== "undefined") {
        if (!RRule) {
            RRule = require("rrule");
        }
    } else {
        throw new Error("rrule.js is required for rrule/nlp.js to work");
    }
    var contains = function(arr, val) {
        return arr.indexOf(val) != -1;
    };
    var ToText = function(rrule, gettext, language) {
        this.gettext = gettext || function(id) {
            return id;
        };
        this.language = language || ENGLISH;
        this.text = "";
        this.rrule = rrule;
        this.freq = rrule.options.freq;
        this.options = rrule.options;
        this.origOptions = rrule.origOptions;
        if (this.origOptions.bymonthday) {
            var bymonthday = [].concat(this.options.bymonthday);
            var bynmonthday = [].concat(this.options.bynmonthday);
            bymonthday.sort();
            bynmonthday.sort();
            bynmonthday.reverse();
            this.bymonthday = bymonthday.concat(bynmonthday);
            if (!this.bymonthday.length) {
                this.bymonthday = null;
            }
        }
        if (this.origOptions.byweekday) {
            var byweekday = !(this.origOptions.byweekday instanceof Array) ? [ this.origOptions.byweekday ] : this.origOptions.byweekday;
            var days = String(byweekday);
            this.byweekday = {
                allWeeks: byweekday.filter(function(weekday) {
                    return !Boolean(weekday.n);
                }),
                someWeeks: byweekday.filter(function(weekday) {
                    return Boolean(weekday.n);
                }),
                isWeekdays: days.indexOf("MO") != -1 && days.indexOf("TU") != -1 && days.indexOf("WE") != -1 && days.indexOf("TH") != -1 && days.indexOf("FR") != -1 && days.indexOf("SA") == -1 && days.indexOf("SU") == -1
            };
            var sortWeekDays = function(a, b) {
                return a.weekday - b.weekday;
            };
            this.byweekday.allWeeks.sort(sortWeekDays);
            this.byweekday.someWeeks.sort(sortWeekDays);
            if (!this.byweekday.allWeeks.length) {
                this.byweekday.allWeeks = null;
            }
            if (!this.byweekday.someWeeks.length) {
                this.byweekday.someWeeks = null;
            }
        } else {
            this.byweekday = null;
        }
    };
    ToText.IMPLEMENTED = [];
    var common = [ "count", "until", "interval", "byweekday", "bymonthday", "bymonth" ];
    ToText.IMPLEMENTED[RRule.DAILY] = common;
    ToText.IMPLEMENTED[RRule.WEEKLY] = common;
    ToText.IMPLEMENTED[RRule.MONTHLY] = common;
    ToText.IMPLEMENTED[RRule.YEARLY] = [ "byweekno", "byyearday" ].concat(common);
    ToText.isFullyConvertible = function(rrule) {
        var canConvert = true;
        if (!(rrule.options.freq in ToText.IMPLEMENTED)) {
            return false;
        }
        if (rrule.origOptions.until && rrule.origOptions.count) {
            return false;
        }
        for (var key in rrule.origOptions) {
            if (contains([ "dtstart", "wkst", "freq" ], key)) {
                return true;
            }
            if (!contains(ToText.IMPLEMENTED[rrule.options.freq], key)) {
                canConvert = false;
                return false;
            }
        }
        return canConvert;
    };
    ToText.prototype = {
        isFullyConvertible: function() {
            return ToText.isFullyConvertible(this.rrule);
        },
        toString: function() {
            var gettext = this.gettext;
            if (!(this.options.freq in ToText.IMPLEMENTED)) {
                return gettext("RRule error: Unable to fully convert this rrule to text");
            }
            this.text = [ gettext("every") ];
            this[RRule.FREQUENCIES[this.options.freq]]();
            if (this.options.until) {
                this.add(gettext("until"));
                var until = this.options.until;
                this.add(this.language.monthNames[until.getMonth()]).add(until.getDate() + ",").add(until.getFullYear());
            } else if (this.options.count) {
                this.add(gettext("for")).add(this.options.count).add(this.plural(this.options.count) ? gettext("times") : gettext("time"));
            }
            if (!this.isFullyConvertible()) {
                this.add(gettext("(~ approximate)"));
            }
            return this.text.join("");
        },
        DAILY: function() {
            var gettext = this.gettext;
            if (this.options.interval != 1) {
                this.add(this.options.interval);
            }
            if (this.byweekday && this.byweekday.isWeekdays) {
                this.add(this.plural(this.options.interval) ? gettext("weekdays") : gettext("weekday"));
            } else {
                this.add(this.plural(this.options.interval) ? gettext("days") : gettext("day"));
            }
            if (this.origOptions.bymonth) {
                this.add(gettext("in"));
                this._bymonth();
            }
            if (this.bymonthday) {
                this._bymonthday();
            } else if (this.byweekday) {
                this._byweekday();
            }
        },
        WEEKLY: function() {
            var gettext = this.gettext;
            if (this.options.interval != 1) {
                this.add(this.options.interval).add(this.plural(this.options.interval) ? gettext("weeks") : gettext("week"));
            }
            if (this.byweekday && this.byweekday.isWeekdays) {
                if (this.options.interval == 1) {
                    this.add(this.plural(this.options.interval) ? gettext("weekdays") : gettext("weekday"));
                } else {
                    this.add(gettext("on")).add(gettext("weekdays"));
                }
            } else {
                if (this.options.interval == 1) {
                    this.add(gettext("week"));
                }
                if (this.origOptions.bymonth) {
                    this.add(gettext("in"));
                    this._bymonth();
                }
                if (this.bymonthday) {
                    this._bymonthday();
                } else if (this.byweekday) {
                    this._byweekday();
                }
            }
        },
        MONTHLY: function() {
            var gettext = this.gettext;
            if (this.origOptions.bymonth) {
                if (this.options.interval != 1) {
                    this.add(this.options.interval).add(gettext("months"));
                    if (this.plural(this.options.interval)) {
                        this.add(gettext("in"));
                    }
                } else {}
                this._bymonth();
            } else {
                if (this.options.interval != 1) {
                    this.add(this.options.interval);
                }
                this.add(this.plural(this.options.interval) ? gettext("months") : gettext("month"));
            }
            if (this.bymonthday) {
                this._bymonthday();
            } else if (this.byweekday && this.byweekday.isWeekdays) {
                this.add(gettext("on")).add(gettext("weekdays"));
            } else if (this.byweekday) {
                this._byweekday();
            }
        },
        YEARLY: function() {
            var gettext = this.gettext;
            if (this.origOptions.bymonth) {
                if (this.options.interval != 1) {
                    this.add(this.options.interval);
                    this.add(gettext("years"));
                } else {}
                this._bymonth();
            } else {
                if (this.options.interval != 1) {
                    this.add(this.options.interval);
                }
                this.add(this.plural(this.options.interval) ? gettext("years") : gettext("year"));
            }
            if (this.bymonthday) {
                this._bymonthday();
            } else if (this.byweekday) {
                this._byweekday();
            }
            if (this.options.byyearday) {
                this.add(gettext("on the")).add(this.list(this.options.byyearday, this.nth, gettext("and"))).add(gettext("day"));
            }
            if (this.options.byweekno) {
                this.add(gettext("in")).add(this.plural(this.options.byweekno.length) ? gettext("weeks") : gettext("week")).add(this.list(this.options.byweekno, null, gettext("and")));
            }
        },
        _bymonthday: function() {
            var gettext = this.gettext;
            if (this.byweekday && this.byweekday.allWeeks) {
                this.add(gettext("on")).add(this.list(this.byweekday.allWeeks, this.weekdaytext, gettext("or"))).add(gettext("the")).add(this.list(this.bymonthday, this.nth, gettext("or")));
            } else {
                this.add(gettext("on the")).add(this.list(this.bymonthday, this.nth, gettext("and")));
            }
        },
        _byweekday: function() {
            var gettext = this.gettext;
            if (this.byweekday.allWeeks && !this.byweekday.isWeekdays) {
                this.add(gettext("on")).add(this.list(this.byweekday.allWeeks, this.weekdaytext));
            }
            if (this.byweekday.someWeeks) {
                if (this.byweekday.allWeeks) {
                    this.add(gettext("and"));
                }
                this.add(gettext("on the")).add(this.list(this.byweekday.someWeeks, this.weekdaytext, gettext("and")));
            }
        },
        _bymonth: function() {
            this.add(this.list(this.options.bymonth, this.monthtext, this.gettext("and")));
        },
        nth: function(n) {
            var nth, npos, gettext = this.gettext;
            if (n == -1) {
                return gettext("last");
            }
            npos = Math.abs(n);
            switch (npos) {
              case 1:
              case 21:
              case 31:
                nth = npos + gettext("st");
                break;

              case 2:
              case 22:
                nth = npos + gettext("nd");
                break;

              case 3:
              case 23:
                nth = npos + gettext("rd");
                break;

              default:
                nth = npos + gettext("th");
            }
            return n < 0 ? nth + " " + gettext("last") : nth;
        },
        monthtext: function(m) {
            return this.language.monthNames[m - 1];
        },
        weekdaytext: function(wday) {
            return (wday.n ? this.nth(wday.n) + " " : "") + this.language.dayNames[wday.getJsWeekday()];
        },
        plural: function(n) {
            return n % 100 != 1;
        },
        add: function(s) {
            this.text.push(" ");
            this.text.push(s);
            return this;
        },
        list: function(arr, callback, finalDelim, delim) {
            var delimJoin = function(array, delimiter, finalDelimiter) {
                var list = "";
                for (var i = 0; i < array.length; i++) {
                    if (i != 0) {
                        if (i == array.length - 1) {
                            list += " " + finalDelimiter + " ";
                        } else {
                            list += delimiter + " ";
                        }
                    }
                    list += array[i];
                }
                return list;
            };
            delim = delim || ",";
            callback = callback || function(o) {
                return o;
            };
            var self = this;
            var realCallback = function(arg) {
                return callback.call(self, arg);
            };
            if (finalDelim) {
                return delimJoin(arr.map(realCallback), delim, finalDelim);
            } else {
                return arr.map(realCallback).join(delim + " ");
            }
        }
    };
    var fromText = function(text, language) {
        return new RRule(parseText(text, language));
    };
    var parseText = function(text, language) {
        var ttr = new Parser((language || ENGLISH).tokens);
        if (!ttr.start(text)) {
            return null;
        }
        var options = {};
        S();
        return options;
        function S() {
            ttr.expect("every");
            var n;
            if (n = ttr.accept("number")) options.interval = parseInt(n[0]);
            if (ttr.isDone()) throw new Error("Unexpected end");
            switch (ttr.symbol) {
              case "day(s)":
                options.freq = RRule.DAILY;
                if (ttr.nextSymbol()) {
                    ON();
                    F();
                }
                break;

              case "weekday(s)":
                options.freq = RRule.WEEKLY;
                options.byweekday = [ RRule.MO, RRule.TU, RRule.WE, RRule.TH, RRule.FR ];
                ttr.nextSymbol();
                F();
                break;

              case "week(s)":
                options.freq = RRule.WEEKLY;
                if (ttr.nextSymbol()) {
                    ON();
                    F();
                }
                break;

              case "month(s)":
                options.freq = RRule.MONTHLY;
                if (ttr.nextSymbol()) {
                    ON();
                    F();
                }
                break;

              case "year(s)":
                options.freq = RRule.YEARLY;
                if (ttr.nextSymbol()) {
                    ON();
                    F();
                }
                break;

              case "monday":
              case "tuesday":
              case "wednesday":
              case "thursday":
              case "friday":
              case "saturday":
              case "sunday":
                options.freq = RRule.WEEKLY;
                options.byweekday = [ RRule[ttr.symbol.substr(0, 2).toUpperCase()] ];
                if (!ttr.nextSymbol()) return;
                while (ttr.accept("comma")) {
                    if (ttr.isDone()) throw new Error("Unexpected end");
                    var wkd;
                    if (!(wkd = decodeWKD())) {
                        throw new Error("Unexpected symbol " + ttr.symbol + ", expected weekday");
                    }
                    options.byweekday.push(RRule[wkd]);
                    ttr.nextSymbol();
                }
                MDAYs();
                F();
                break;

              case "january":
              case "february":
              case "march":
              case "april":
              case "may":
              case "june":
              case "july":
              case "august":
              case "september":
              case "october":
              case "november":
              case "december":
                options.freq = RRule.YEARLY;
                options.bymonth = [ decodeM() ];
                if (!ttr.nextSymbol()) return;
                while (ttr.accept("comma")) {
                    if (ttr.isDone()) throw new Error("Unexpected end");
                    var m;
                    if (!(m = decodeM())) {
                        throw new Error("Unexpected symbol " + ttr.symbol + ", expected month");
                    }
                    options.bymonth.push(m);
                    ttr.nextSymbol();
                }
                ON();
                F();
                break;

              default:
                throw new Error("Unknown symbol");
            }
        }
        function ON() {
            var on = ttr.accept("on");
            var the = ttr.accept("the");
            if (!(on || the)) {
                return;
            }
            do {
                var nth, wkd, m;
                if (nth = decodeNTH()) {
                    if (wkd = decodeWKD()) {
                        ttr.nextSymbol();
                        if (!options.byweekday) {
                            options.byweekday = [];
                        }
                        options.byweekday.push(RRule[wkd].nth(nth));
                    } else {
                        if (!options.bymonthday) {
                            options.bymonthday = [];
                        }
                        options.bymonthday.push(nth);
                        ttr.accept("day(s)");
                    }
                } else if (wkd = decodeWKD()) {
                    ttr.nextSymbol();
                    if (!options.byweekday) options.byweekday = [];
                    options.byweekday.push(RRule[wkd]);
                } else if (ttr.symbol == "weekday(s)") {
                    ttr.nextSymbol();
                    if (!options.byweekday) options.byweekday = [];
                    options.byweekday.push(RRule.MO);
                    options.byweekday.push(RRule.TU);
                    options.byweekday.push(RRule.WE);
                    options.byweekday.push(RRule.TH);
                    options.byweekday.push(RRule.FR);
                } else if (ttr.symbol == "week(s)") {
                    ttr.nextSymbol();
                    var n;
                    if (!(n = ttr.accept("number"))) {
                        throw new Error("Unexpected symbol " + ttr.symbol + ", expected week number");
                    }
                    options.byweekno = [ n[0] ];
                    while (ttr.accept("comma")) {
                        if (!(n = ttr.accept("number"))) {
                            throw new Error("Unexpected symbol " + ttr.symbol + "; expected monthday");
                        }
                        options.byweekno.push(n[0]);
                    }
                } else if (m = decodeM()) {
                    ttr.nextSymbol();
                    if (!options.bymonth) options.bymonth = [];
                    options.bymonth.push(m);
                } else {
                    return;
                }
            } while (ttr.accept("comma") || ttr.accept("the") || ttr.accept("on"));
        }
        function decodeM() {
            switch (ttr.symbol) {
              case "january":
                return 1;

              case "february":
                return 2;

              case "march":
                return 3;

              case "april":
                return 4;

              case "may":
                return 5;

              case "june":
                return 6;

              case "july":
                return 7;

              case "august":
                return 8;

              case "september":
                return 9;

              case "october":
                return 10;

              case "november":
                return 11;

              case "december":
                return 12;

              default:
                return false;
            }
        }
        function decodeWKD() {
            switch (ttr.symbol) {
              case "monday":
              case "tuesday":
              case "wednesday":
              case "thursday":
              case "friday":
              case "saturday":
              case "sunday":
                return ttr.symbol.substr(0, 2).toUpperCase();
                break;

              default:
                return false;
            }
        }
        function decodeNTH() {
            switch (ttr.symbol) {
              case "last":
                ttr.nextSymbol();
                return -1;

              case "first":
                ttr.nextSymbol();
                return 1;

              case "second":
                ttr.nextSymbol();
                return ttr.accept("last") ? -2 : 2;

              case "third":
                ttr.nextSymbol();
                return ttr.accept("last") ? -3 : 3;

              case "nth":
                var v = parseInt(ttr.value[1]);
                if (v < -366 || v > 366) throw new Error("Nth out of range: " + v);
                ttr.nextSymbol();
                return ttr.accept("last") ? -v : v;

              default:
                return false;
            }
        }
        function MDAYs() {
            ttr.accept("on");
            ttr.accept("the");
            var nth;
            if (!(nth = decodeNTH())) {
                return;
            }
            options.bymonthday = [ nth ];
            ttr.nextSymbol();
            while (ttr.accept("comma")) {
                if (!(nth = decodeNTH())) {
                    throw new Error("Unexpected symbol " + ttr.symbol + "; expected monthday");
                }
                options.bymonthday.push(nth);
                ttr.nextSymbol();
            }
        }
        function F() {
            if (ttr.symbol == "until") {
                var date = Date.parse(ttr.text);
                if (!date) {
                    throw new Error("Cannot parse until date:" + ttr.text);
                }
                options.until = new Date(date);
            } else if (ttr.accept("for")) {
                options.count = ttr.value[0];
                ttr.expect("number");
            }
        }
    };
    var Parser = function(rules) {
        this.rules = rules;
    };
    Parser.prototype.start = function(text) {
        this.text = text;
        this.done = false;
        return this.nextSymbol();
    };
    Parser.prototype.isDone = function() {
        return this.done && this.symbol == null;
    };
    Parser.prototype.nextSymbol = function() {
        var p = this, best, bestSymbol;
        this.symbol = null;
        this.value = null;
        do {
            if (this.done) {
                return false;
            }
            best = null;
            var match, rule;
            for (var name in this.rules) {
                rule = this.rules[name];
                if (match = rule.exec(p.text)) {
                    if (best == null || match[0].length > best[0].length) {
                        best = match;
                        bestSymbol = name;
                    }
                }
            }
            if (best != null) {
                this.text = this.text.substr(best[0].length);
                if (this.text == "") {
                    this.done = true;
                }
            }
            if (best == null) {
                this.done = true;
                this.symbol = null;
                this.value = null;
                return;
            }
        } while (bestSymbol == "SKIP");
        this.symbol = bestSymbol;
        this.value = best;
        return true;
    };
    Parser.prototype.accept = function(name) {
        if (this.symbol == name) {
            if (this.value) {
                var v = this.value;
                this.nextSymbol();
                return v;
            }
            this.nextSymbol();
            return true;
        }
        return false;
    };
    Parser.prototype.expect = function(name) {
        if (this.accept(name)) {
            return true;
        }
        throw new Error("expected " + name + " but found " + this.symbol);
    };
    var ENGLISH = {
        dayNames: [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ],
        monthNames: [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ],
        tokens: {
            SKIP: /^[ \r\n\t]+|^\.$/,
            number: /^[1-9][0-9]*/,
            numberAsText: /^(one|two|three)/i,
            every: /^every/i,
            "day(s)": /^days?/i,
            "weekday(s)": /^weekdays?/i,
            "week(s)": /^weeks?/i,
            "month(s)": /^months?/i,
            "year(s)": /^years?/i,
            on: /^(on|in)/i,
            the: /^the/i,
            first: /^first/i,
            second: /^second/i,
            third: /^third/i,
            nth: /^([1-9][0-9]*)(\.|th|nd|rd|st)/i,
            last: /^last/i,
            for: /^for/i,
            "time(s)": /^times?/i,
            until: /^(un)?til/i,
            monday: /^mo(n(day)?)?/i,
            tuesday: /^tu(e(s(day)?)?)?/i,
            wednesday: /^we(d(n(esday)?)?)?/i,
            thursday: /^th(u(r(sday)?)?)?/i,
            friday: /^fr(i(day)?)?/i,
            saturday: /^sa(t(urday)?)?/i,
            sunday: /^su(n(day)?)?/i,
            january: /^jan(uary)?/i,
            february: /^feb(ruary)?/i,
            march: /^mar(ch)?/i,
            april: /^apr(il)?/i,
            may: /^may/i,
            june: /^june?/i,
            july: /^july?/i,
            august: /^aug(ust)?/i,
            september: /^sep(t(ember)?)?/i,
            october: /^oct(ober)?/i,
            november: /^nov(ember)?/i,
            december: /^dec(ember)?/i,
            comma: /^(,\s*|(and|or)\s*)+/i
        }
    };
    var nlp = {
        fromText: fromText,
        parseText: parseText,
        isFullyConvertible: ToText.isFullyConvertible,
        toText: function(rrule, gettext, language) {
            return new ToText(rrule, gettext, language).toString();
        }
    };
    if (serverSide) {
        module.exports = nlp;
    } else {
        root["_RRuleNLP"] = nlp;
    }
    if (typeof define === "function" && define.amd) {
        define("rrule", [], function() {
            return RRule;
        });
    }
})(this);

+function($) {
    "use strict";
    var Tab = function(element) {
        this.element = $(element);
    };
    Tab.VERSION = "3.3.7";
    Tab.TRANSITION_DURATION = 150;
    Tab.prototype.show = function() {
        var $this = this.element;
        var $ul = $this.closest("ul:not(.dropdown-menu)");
        var selector = $this.data("target");
        if (!selector) {
            selector = $this.attr("href");
            selector = selector && selector.replace(/.*(?=#[^\s]*$)/, "");
        }
        if ($this.parent("li").hasClass("active")) return;
        var $previous = $ul.find(".active:last a");
        var hideEvent = $.Event("hide.bs.tab", {
            relatedTarget: $this[0]
        });
        var showEvent = $.Event("show.bs.tab", {
            relatedTarget: $previous[0]
        });
        $previous.trigger(hideEvent);
        $this.trigger(showEvent);
        if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) return;
        var $target = $(selector);
        this.activate($this.closest("li"), $ul);
        this.activate($target, $target.parent(), function() {
            $previous.trigger({
                type: "hidden.bs.tab",
                relatedTarget: $this[0]
            });
            $this.trigger({
                type: "shown.bs.tab",
                relatedTarget: $previous[0]
            });
        });
    };
    Tab.prototype.activate = function(element, container, callback) {
        var $active = container.find("> .active");
        var transition = callback && $.support.transition && ($active.length && $active.hasClass("fade") || !!container.find("> .fade").length);
        function next() {
            $active.removeClass("active").find("> .dropdown-menu > .active").removeClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded", false);
            element.addClass("active").find('[data-toggle="tab"]').attr("aria-expanded", true);
            if (transition) {
                element[0].offsetWidth;
                element.addClass("in");
            } else {
                element.removeClass("fade");
            }
            if (element.parent(".dropdown-menu").length) {
                element.closest("li.dropdown").addClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded", true);
            }
            callback && callback();
        }
        $active.length && transition ? $active.one("bsTransitionEnd", next).emulateTransitionEnd(Tab.TRANSITION_DURATION) : next();
        $active.removeClass("in");
    };
    function Plugin(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.tab");
            if (!data) $this.data("bs.tab", data = new Tab(this));
            if (typeof option == "string") data[option]();
        });
    }
    var old = $.fn.tab;
    $.fn.tab = Plugin;
    $.fn.tab.Constructor = Tab;
    $.fn.tab.noConflict = function() {
        $.fn.tab = old;
        return this;
    };
    var clickHandler = function(e) {
        e.preventDefault();
        Plugin.call($(this), "show");
    };
    $(document).on("click.bs.tab.data-api", '[data-toggle="tab"]', clickHandler).on("click.bs.tab.data-api", '[data-toggle="pill"]', clickHandler);
}(jQuery);

var dustbase = {};

var event_details_popup;

$(document).ready(function() {
    setTranslations(translations);
    dust.helpers.i18n = function i18n(chunk, context, bodies, params) {
        var i18n_params = {};
        var i18n_name = params.name;
        var i18n_type = params.type;
        delete params.name;
        delete params.type;
        for (var key in params) {
            if (params.hasOwnProperty(key)) {
                var param_name = "%" + key;
                i18n_params[param_name] = dust.helpers.tap(params[key], chunk, context);
            }
        }
        return chunk.write(t(i18n_type, i18n_name, i18n_params));
    };
    set_default_datepicker_options();
    dustbase = dust.makeBase({
        default_calendar_color: AgenDAVConf.default_calendar_color,
        base_url: AgenDAVConf.base_url,
        base_app_url: AgenDAVConf.base_app_url,
        csrf_token_name: csrf_id,
        csrf_token_value: csrf_value,
        enable_calendar_sharing: AgenDAVConf.enable_calendar_sharing,
        numbers1to31: [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 ]
    });
    set_default_colorpicker_options();
    keep_session_active();
    handle_expired_session();
    var fullcalendar_views = {
        month: "month",
        week: "agendaWeek",
        day: "agendaDay",
        list: "customizable_list"
    };
    $("#calendar_view").fullCalendar({
        selectable: true,
        editable: true,
        timezone: AgenDAVUserPrefs.timezone,
        firstDay: AgenDAVUserPrefs.weekstart,
        timeFormat: AgenDAVDateAndTime.fullCalendarFormat[AgenDAVUserPrefs.time_format],
        fixedWeekCount: false,
        weekNumbers: AgenDAVUserPrefs.show_week_nb,
        weekNumberCalculation: "ISO",
        weekNumbersWithinDays: true,
        height: calendar_height(),
        windowResize: function(view) {
            var new_height = calendar_height();
            $(this).fullCalendar("option", "height", new_height);
        },
        views: {
            customizable_list: {
                type: "list",
                duration: {
                    days: parseInt(AgenDAVUserPrefs.list_days)
                },
                listDayAltFormat: "dddd"
            }
        },
        header: {
            right: "month,agendaWeek,agendaDay customizable_list",
            center: "title",
            left: "today prev,next"
        },
        navLinks: true,
        defaultView: fullcalendar_views[AgenDAVUserPrefs.default_view],
        theme: true,
        slotLabelFormat: AgenDAVDateAndTime.fullCalendarFormat[AgenDAVUserPrefs.time_format],
        slotMinutes: 30,
        firstHour: 8,
        nowIndicator: AgenDAVUserPrefs.show_now_indicator,
        defaultTimedEventDuration: "01:00:00",
        defaultAllDayEventDuration: {
            days: 1
        },
        eventLimit: true,
        allDayDefault: false,
        loading: function(bool) {
            loading(bool);
        },
        eventRender: event_render_callback,
        eventClick: event_click_callback,
        select: slots_drag_callback,
        selectHelper: false,
        eventResize: event_resize_callback,
        eventDrop: event_drop_callback
    });
    event_details_popup = $("#event_details").qtip({
        id: "event_details",
        prerender: false,
        content: {
            text: ".",
            title: {
                button: true
            }
        },
        position: {
            my: "bottom center",
            at: "top center",
            target: "mouse",
            viewport: $("#calendar_view"),
            adjust: {
                mouse: false,
                scroll: false
            }
        },
        style: {
            classes: "view_event_details qtip-bootstrap qtip-shadow",
            tip: true
        },
        show: {
            target: $("#calendar_view"),
            event: false,
            solo: $("#calendar_view"),
            effect: false
        },
        hide: {
            fixed: true,
            event: "unfocus",
            effect: false
        },
        events: {
            show: function(event, api) {
                $(this).find(".remove").off("click").on("click", function(e) {
                    var event_id = $(this).data("event-id");
                    event_delete(event_id);
                    event_details_popup.hide();
                    e.preventDefault();
                }).end().find(".modify").off("click").on("click", function(e) {
                    var event_id = $(this).data("event-id");
                    modify_event_handler(event_id);
                    event_details_popup.hide();
                    e.preventDefault();
                });
                $(window).on("keydown.tooltipevents", function(e) {
                    if (e.keyCode === $.ui.keyCode.ESCAPE) {
                        api.hide(e);
                    }
                });
            },
            hide: function(event, api) {
                $(window).off("keydown.tooltipevents");
            }
        }
    }).qtip("api");
    $('<button id="button-refresh" class="btn btn-default">' + '<i class="fa fa-refresh"></i> ' + t("labels", "refresh") + "</button>").appendTo("#calendar_view div.fc-right").on("click", function() {
        update_calendar_list(true);
    }).before('<span class="fc-header-space">');
    render_template("datepicker_button", {}, function(out) {
        $("#calendar_view .fc-center").append(out);
        $("#datepicker_fullcalendar").datepicker({
            changeYear: true,
            closeText: t("labels", "cancel"),
            onSelect: function(date, text) {
                var d = $("#datepicker_fullcalendar").datepicker("getDate");
                $("#calendar_view").fullCalendar("gotoDate", d);
            }
        }).prev().on("click", function() {
            var current_date = $("#calendar_view").fullCalendar("getDate").toDate();
            $("#datepicker_fullcalendar").datepicker("setDate", current_date);
            $("#datepicker_fullcalendar").datepicker("show");
        });
    });
    $("#calendar_view").fullCalendar("renderEvent", {
        title: "Little portal",
        start: "1985-02-15T00:00:00Z",
        end: "1985-02-15T23:59:59Z",
        allDay: true,
        editable: false,
        color: "#E78AEF"
    }, true);
    $("div.calendar_list").on("click", "i.cfg", function(e) {
        e.stopPropagation();
        var calentry = $(this).parent();
        calendar_modify_dialog($(calentry[0]).data());
    }).on("click", "li.available_calendar", function(e) {
        toggle_calendar($(this));
    });
    update_calendar_list(true);
    $("#sidebar").on("click", "#toggle_all_shared_calendars", function(e) {
        var shared_cals = $("#shared_calendar_list").find("ul").children();
        if ($(this).hasClass("hide_all")) {
            $.map(shared_cals, function(e, i) {
                hide_calendar($(e));
            });
            $(this).removeClass("hide_all").addClass("show_all").find("i").removeClass("fa-eye-slash").addClass("fa-eye");
        } else {
            $.map(shared_cals, function(e, i) {
                show_calendar($(e));
            });
            $(this).removeClass("show_all").addClass("hide_all").find("i").removeClass("fa-eye").addClass("fa-eye-slash");
        }
    });
    $("#calendar_add").on("click", calendar_create_dialog);
    $("#shortcut_add_event").on("click", function() {
        var start = $("#calendar_view").fullCalendar("getDate");
        var data = {
            start: start,
            allDay: false,
            view: "month"
        };
        $("#calendar_view").fullCalendar("unselect");
        open_event_edit_dialog(data);
    });
    setup_print_tweaks();
});

var calendar_height = function calendar_height() {
    var offset = $("#calendar_view").offset();
    return $(window).height() - Math.ceil(offset.top) - 30;
};

var show_error = function show_error(title, message) {
    loading(false);
    $("#popup").freeow(title, message, {
        classes: [ "popup_error" ],
        autoHide: true,
        showStyle: {
            opacity: 1,
            left: 0
        },
        hideStyle: {
            opacity: 0,
            left: "400px"
        }
    });
};

var show_success = function show_success(title, message) {
    $("#popup").freeow(title, message, {
        classes: [ "popup_success" ],
        autoHide: true,
        autoHideDelay: 2e3,
        showStyle: {
            opacity: 1,
            left: 0
        },
        hideStyle: {
            opacity: 0,
            left: "400px"
        }
    });
};

var send_form = function send_form(params) {
    var url;
    var formObj = params.form_object;
    var data = params.data;
    var successFunc = params.success || function() {};
    var exceptionFunc = params.exception || function() {};
    var errorFunc = params.error || function(message) {
        show_error(t("messages", "error_oops"), message);
    };
    if (formObj instanceof jQuery) {
        url = $(formObj).attr("action");
        if (!check_required_fields(formObj)) {
            loading(false);
            show_error(t("messages", "error_empty_fields"), "");
            return;
        }
    } else {
        url = formObj.url;
        data = formObj.data;
    }
    loading(true);
    var sendform_ajax_req = $.ajax({
        url: url,
        cache: false,
        type: "POST",
        data: data,
        dataType: "json"
    });
    sendform_ajax_req.then(function() {
        loading(false);
    });
    sendform_ajax_req.fail(function(jqXHR, textStatus, errorThrown) {
        if (jqXHR.getResponseHeader("content-type").indexOf("json") === -1) {
            console.log(jqXHR.responseText);
            show_error(t("messages", "error_interfacefailure"), t("messages", "error_oops"));
            errorFunc("");
            return;
        }
        var data = $.parseJSON(jqXHR.responseText);
        if (data.result === "EXCEPTION") {
            exceptionFunc(data.message);
        }
        if (data.result === "ERROR") {
            errorFunc(data.message);
        }
    });
    sendform_ajax_req.done(function(data, textStatus, jqXHR) {
        if (data.result !== "SUCCESS") {
            show_error(t("messages", "internal_server_error"), "");
            errorFunc("");
            return;
        }
        successFunc(data.message);
    });
};

var show_dialog = function show_dialog(params) {
    var template = params.template;
    var data = params.data;
    var title = params.title;
    var buttons = params.buttons;
    var divname = params.divname;
    var width = params.width;
    var pre_func = params.pre_func;
    render_template(template, data, function(out) {
        $("body").append(out);
        $("#" + divname).dialog({
            autoOpen: true,
            buttons: buttons,
            title: title,
            minWidth: width,
            modal: true,
            open: function(event, ui) {
                if (pre_func !== undefined) {
                    pre_func();
                }
                $("#" + divname).dialog("option", "position", "center");
                var buttons = $(event.target).parent().find(".ui-dialog-buttonset").children();
                add_button_icons(buttons);
            },
            close: function(ev, ui) {
                $(this).remove();
            }
        });
    });
};

var destroy_dialog = function destroy_dialog(name) {
    $(name).dialog("close");
    $(name).dialog("destroy");
    $(name).remove();
};

var set_default_datepicker_options = function set_default_datepicker_options() {
    $.datepicker.setDefaults({
        constrainInput: true
    });
    $.datepicker.setDefaults({
        dateFormat: AgenDAVDateAndTime.datepickerFormat[AgenDAVUserPrefs.date_format]
    });
};

var set_mindate = function set_mindate(mindate, datepickers) {
    var desired_date = mindate;
    if (moment.isMoment(mindate)) {
        desired_date = mindate.toDate();
    }
    $.each(datepickers, function(i, element) {
        element.datepicker("option", "minDate", desired_date);
    });
};

var open_event_edit_dialog = "hui"
//var open_event_edit_dialog = function open_event_edit_dialog(event) {
//    var is_new = false;
//    var title = t("labels", "editevent");
//    if (event.id === undefined) {
//        is_new = true;
//    }
//    event = jQuery.extend(true, {}, event);
//    if (event.start != undefined && !(event.start instanceof moment)) {
//        event.start = moment(event.start);
//    }
//    if (event.end != undefined && !(event.end instanceof moment)) {
//        event.end = moment(event.end);
//   }
//    if (is_new) {
//        title = t("labels", "createevent");
//        if (event.view == "month") 
//           event.start = AgenDAVDateAndTime.approxNearest(event.start);
//           event.end = AgenDAVDateAndTime.approxNearest(event.end).add(1, "hours");
//        }
//    }
//    if (!is_new && event.allDay === true) {
//        var adapted_end = moment(event.end);
//        adapted_end.subtract(1, "days");
//        event.end = adapted_end;
//    }
//    event.end = AgenDAVDateAndTime.endDate(event);
//    if (event.allDay === true) {
//        event.start = AgenDAVDateAndTime.approxNearest(event.start);
//        event.end = AgenDAVDateAndTime.approxNearest(event.end).add(1, "hours");
//    }
//    if (event.calendar === undefined) {
//        event.calendar = AgenDAVUserPrefs.default_calendar;
//    }
//    if (event.rrule !== undefined && event.recurrence_id !== undefined) {
//        event.fixed_calendar = true;
//        event.fixed_repeat_rule = true;
//   }
//    $.extend(event, {
//        applyid: "event_edit_form",
//        frm: {
//            action: AgenDAVConf.base_app_url + "events/save",
//            method: "post"
//        },
//        calendars: calendar_list(),
//        start_date: AgenDAVDateAndTime.extractDate(event.start),
//        start_time: AgenDAVDateAndTime.extractTime(event.start),
//        end_date: AgenDAVDateAndTime.extractDate(event.end),
//        end_time: AgenDAVDateAndTime.extractTime(event.end),
//        yearly: RRule.YEARLY,
//        monthly: RRule.MONTHLY,
//        weekly: RRule.WEEKLY,
//       daily: RRule.DAILY
//    });
//    console.log(event);
//    var button_save = {
//        text: t("labels", "save"),
//        class: "addicon btn-icon-event-edit",
//        click: function() {
//            var event_fields = $("#event_edit_form").serializeObject();
//            event_fields.timezone = AgenDAVUserPrefs.timezone;
//           send_form({
//                form_object: $("#event_edit_form"),
//               data: event_fields,
//                success: function(affected_calendars) {
//                    var total = affected_calendars.length;
//                    for (var i = 0; i < total; i++) {
//                        reload_event_source(affected_calendars[i]);
//                    }
//                    destroy_dialog("#event_edit_dialog");
//                },
//                exception: function(error) {
//                    show_error(t("messages", "error_invalidinput"), error);
//                }
//            });
//        }
//    };
//    var button_cancel = {
//        text: t("labels", "cancel"),
//        class: "addicon btn-icon-cancel",
//        click: function() {
//            destroy_dialog("#event_edit_dialog");
//        }
//    };
//    var buttons = [ button_save, button_cancel ];
//    show_dialog({
//        template: "event_edit_dialog",
//       data: event,
//        title: title,
//        buttons: buttons,
//        divname: "event_edit_dialog",
//        width: 550,
//       pre_func: function() {
//            $("#event_edit_dialog").find("input.summary").focus();
//            handle_date_and_time("#event_edit_dialog", event);
//            AgenDAVRepeat.handleForm($("#tabs-recurrence"));
//            if (event.rrule !== undefined && event.rrule !== "") {
//                AgenDAVRepeat.setRepeatRuleOnForm(event.rrule, $("#tabs-recurrence"));
//            }
//            reminders_manager();
//        }
//    });
//};

var handle_date_and_time = function handle_date_and_time(where, data) {
    var $start_time = $(where).find("input.start_time");
    var $end_time = $(where).find("input.end_time");
    var $start_date = $(where).find("input.start_date");
    var $end_date = $(where).find("input.end_date");
    var $repeat_until = $("#repeat_until");
    var $allday = $(where).find("input.allday");
    $start_time.timepicker(AgenDAVDateAndTime.timepickerSettings[AgenDAVUserPrefs.time_format]);
    $end_time.timepicker(AgenDAVDateAndTime.timepickerSettings[AgenDAVUserPrefs.time_format]);
    $start_date.datepicker({
        onSelect: function(dateText, inst) {
            set_mindate($(this).datepicker("getDate"), [ $end_date, $repeat_until ]);
            generate_iso8601_values($(where));
        }
    });
    $end_date.datepicker();
    $repeat_until.datepicker();
    set_mindate(data.start_date, [ $end_date, $repeat_until ]);
    $(where).on("change", "input.allday", function() {
        if ($(this).prop("checked")) {
            $start_time.prop("required", false);
            $end_time.prop("required", false);
            $start_time.hide();
            $end_time.hide();
        } else {
            $start_time.prop("required", true);
            $end_time.prop("required", true);
            $start_time.show();
            $end_time.show();
        }
        generate_iso8601_values($(where));
    });
    $allday.trigger("change");
    $(where).on("change", "input.start_time", function(event) {
        var start = AgenDAVDateAndTime.getMoment($("#start").val(), AgenDAVUserPrefs.timezone);
        var duration = $end_time.data("duration");
        var new_end = start.add(duration, "minutes");
        $end_date.val(AgenDAVDateAndTime.extractDate(new_end));
        $end_time.val(AgenDAVDateAndTime.extractTime(new_end));
        generate_iso8601_values($(where));
    }).on("change", "input.end_time", function(event) {
        $end_time.data("duration", calculate_event_duration());
    });
    $("input.date, input.time").on("change", function(event) {
        generate_iso8601_values($(where));
    });
    $(where).on("change", "input.start_time, input.allday", function(event) {
        AgenDAVRepeat.regenerate();
    });
    generate_iso8601_values($(where));
    $end_time.data("duration", calculate_event_duration());
};

var calculate_event_duration = function calculate_event_duration() {
    var start = AgenDAVDateAndTime.getMoment($("#start").val(), AgenDAVUserPrefs.timezone);
    var end = AgenDAVDateAndTime.getMoment($("#end").val(), AgenDAVUserPrefs.timezone);
    var result = end.diff(start, "minutes");
    if (result < 0) {
        result *= -1;
    }
    return result;
};

var calendar_create_dialog = function calendar_create_dialog() {
    var form_url = AgenDAVConf.base_app_url + "calendars";
    var title = t("labels", "newcalendar");
    var data = {
        applyid: "calendar_create_form",
        frm: {
            action: form_url,
            method: "post"
        }
    };
    var buttons = [ {
        text: t("labels", "create"),
        class: "addicon btn-icon-calendar-add",
        click: function() {
            var calendar_data = $("#calendar_create_form").serialize();
            send_form({
                form_object: $("#calendar_create_form"),
                data: calendar_data,
                success: function(data) {
                    update_calendar_list(false);
                    destroy_dialog("#calendar_create_dialog");
                },
                exception: function(data) {
                    show_error(t("messages", "error_invalidinput"), data);
                }
            });
        }
    }, {
        text: t("labels", "cancel"),
        class: "addicon btn-icon-cancel",
        click: function() {
            destroy_dialog("#calendar_create_dialog");
        }
    } ];
    show_dialog({
        template: "calendar_create_dialog",
        data: data,
        title: title,
        buttons: buttons,
        divname: "calendar_create_dialog",
        width: 400,
        pre_func: function() {
            $("input.pick_color").colorPicker();
        }
    });
};

var calendar_modify_dialog = function calendar_modify_dialog(calendar_obj) {
    var form_url = AgenDAVConf.base_app_url + "calendars/save";
    var title = t("labels", "modifycalendar");
    var data = calendar_obj;
    $.extend(data, {
        applyid: "calendar_modify_form",
        frm: {
            action: form_url,
            method: "post"
        }
    });
    if (AgenDAVConf.show_public_caldav_url === true) {
        data.public_url = AgenDAVConf.caldav_public_base_url + data.url;
    }
    var buttons_and_actions = [ {
        text: t("labels", "deletecalendar"),
        class: "addicon btn-icon-calendar-delete",
        click: function() {
            calendar_delete_dialog(calendar_obj);
        }
    }, {
        text: t("labels", "save"),
        class: "addicon btn-icon-calendar-edit",
        click: function() {
            var calendar_data = $("#calendar_modify_form").serialize();
            send_form({
                form_object: $("#calendar_modify_form"),
                data: calendar_data,
                success: function(data) {
                    destroy_dialog("#calendar_modify_dialog");
                    update_calendar_list(false);
                },
                exception: function(data) {
                    show_error(t("messages", "error_invalidinput"), data);
                }
            });
        }
    }, {
        text: t("labels", "cancel"),
        class: "addicon btn-icon-cancel",
        click: function() {
            destroy_dialog("#calendar_modify_dialog");
        }
    } ];
    if (data.is_shared === true) {
        buttons_and_actions.splice(0, 1);
    }
    show_dialog({
        template: "calendar_modify_dialog",
        data: data,
        title: title,
        buttons: buttons_and_actions,
        divname: "calendar_modify_dialog",
        width: 500,
        pre_func: function() {
            $("input.pick_color").colorPicker();
            if (AgenDAVConf.enable_calendar_sharing === true && data.is_shared !== true) {
                shares_manager();
            }
        }
    });
};

var calendar_delete_dialog = function calendar_delete_dialog(calendar_obj) {
    destroy_dialog("#calendar_modify_dialog");
    var form_url = AgenDAVConf.base_app_url + "calendars/delete";
    var title = t("labels", "deletecalendar");
    var data = calendar_obj;
    $.extend(data, {
        applyid: "calendar_delete_form",
        frm: {
            action: form_url,
            method: "post"
        }
    });
    var buttons = [ {
        text: t("labels", "yes"),
        class: "addicon btn-icon-calendar-delete",
        click: function() {
            var fake_form = {
                url: AgenDAVConf.base_app_url + "calendars/delete",
                data: $("#calendar_delete_form").serializeObject()
            };
            destroy_dialog("#calendar_delete_dialog");
            send_form({
                form_object: fake_form,
                success: function(removed_calendar) {
                    $(".calendar_list li.available_calendar").each(function(index) {
                        var thiscal = $(this).data();
                        if (thiscal.calendar == removed_calendar) {
                            $("#calendar_view").fullCalendar("removeEventSource", thiscal.eventsource);
                            $(this).remove();
                            return false;
                        }
                    });
                },
                exception: function(data) {
                    show_error(t("messages", "error_caldelete"), data);
                }
            });
        }
    }, {
        text: t("labels", "cancel"),
        class: "addicon btn-icon-cancel",
        click: function() {
            destroy_dialog("#calendar_delete_dialog");
        }
    } ];
    show_dialog({
        template: "calendar_delete_dialog",
        data: data,
        title: title,
        buttons: buttons,
        divname: "calendar_delete_dialog",
        width: 500
    });
};

var update_calendar_list = function update_calendar_list(maskbody) {
    if (maskbody) {
        loading(true);
    }
    var updcalendar_ajax_req = $.ajax({
        url: AgenDAVConf.base_app_url + "calendars",
        cache: false,
        dataType: "json"
    });
    updcalendar_ajax_req.then(function() {
        if (maskbody) {
            loading(false);
        }
    });
    updcalendar_ajax_req.fail(function(jqXHR, textStatus, errorThrown) {
        var message = errorThrown;
        if (jqXHR.status === undefined || jqXHR.status != 401) {
            message = jqXHR.responseJSON.message;
            show_error(t("messages", "error_loading_calendar_list"), message);
        }
    });
    updcalendar_ajax_req.done(function(data, textStatus, jqXHR) {
        var was_hidden = {};
        $(".calendar_list li.available_calendar").each(function(index) {
            var data = $(this).data();
            $("#calendar_view").fullCalendar("removeEventSource", data.eventsource);
            if ($(this).hasClass("hidden_calendar")) {
                was_hidden[data.calendar] = true;
            }
            $(this).remove();
        });
        var count = 0, count_shared = 0, own_calendars = document.createDocumentFragment(), shared_calendars = document.createDocumentFragment(), collected_event_sources = [];
        var calendars = data.data;
        $.each(calendars, function(key, calendar) {
            if (AgenDAVUserPrefs.hidden_calendars[calendar.calendar] !== undefined) {
                return true;
            }
            count++;
            if (calendar.color === undefined || calendar.color === null) {
                calendar.color = AgenDAVConf.default_calendar_color;
            } else {
                calendar.color = calendar.color.substr(0, 7);
            }
            calendar.fg = fg_for_bg(calendar.color);
            var li = generate_calendar_entry(calendar);
            if (calendar.calendar === AgenDAVUserPrefs.default_calendar) {
                li.addClass("default_calendar");
            }
            if (was_hidden[calendar.calendar]) {
                li.addClass("hidden_calendar");
            } else {
                collected_event_sources.push($(li).data().eventsource);
            }
            if (calendar.is_shared === true) {
                count_shared++;
                shared_calendars.appendChild(li[0]);
            } else {
                own_calendars.appendChild(li[0]);
            }
        });
        if (count === 0) {
            var last_calendar_count = $("#calendar_view").data("calendar-count");
            if (last_calendar_count === undefined) {
                $("#calendar_view").data("calendar-count", 0);
                setTimeout(function() {
                    update_calendar_list(false);
                }, 1);
                return;
            }
            show_error(t("messages", "notice_no_calendars"), "");
            $("#shortcut_add_event").attr("disabled", "disabled");
            return;
        }
        $("#calendar_view").data("calendar-count", count);
        $("#own_calendar_list ul")[0].appendChild(own_calendars);
        if (count_shared === 0) {
            $("#shared_calendar_list").hide();
        } else {
            $("#shared_calendar_list ul")[0].appendChild(shared_calendars);
            $("#shared_calendar_list").show();
        }
        while (count--) {
            $("#calendar_view").fullCalendar("addEventSource", collected_event_sources[count]);
        }
        $("#shortcut_add_event").removeAttr("disabled");
    });
};

var generate_event_source = function generate_event_source(calendar) {
    var ajax_options = {
        url: AgenDAVConf.base_app_url + "events#" + calendar,
        cache: false,
        data: {
            calendar: calendar
        },
        error: function(jqXHR, textStatus, errorThrown) {
            show_error(t("messages", "error_interfacefailure"), t("messages", "error_loadevents", {
                "%cal": calendar
            }));
        }
    };
    return ajax_options;
};

var keep_session_active = function keep_session_active() {
    var sessrefresh_ajax_req = $.ajax({
        url: AgenDAVConf.base_app_url + "keepalive",
        cache: false,
        method: "GET"
    });
    sessrefresh_ajax_req.done(function(data, textStatus, jqXHR) {
        setTimeout(function() {
            keep_session_active();
        }, 6e4);
    });
};

var add_button_icons = function add_button_icons(buttons) {
    buttons.filter("button.addicon").removeClass("addicon").removeClass("ui-button-text-only").addClass("ui-button-text-icon-primary").each(function(k, v) {
        var classes = $(v).attr("class").split(" ");
        $.each(classes, function(i, j) {
            if (j.match(/^btn-icon-/)) {
                $(v).prepend('<span class="ui-button-icon-primary ui-icon ' + j + '"></span>');
                $(v).removeClass(j);
                return false;
            }
        });
    });
};

var generate_calendar_entry = function generate_calendar_entry(data) {
    var eventsource = generate_event_source(data.calendar);
    eventsource.color = data.color;
    eventsource.textColor = data.fg;
    if (data.is_shared === true && data.writable === false) {
        eventsource.editable = false;
    }
    data.eventsource = eventsource;
    var $out;
    render_template("calendar_list_entry", data, function(out) {
        $out = $(out);
        $out.data(data);
        $out.disableSelection();
    });
    return $out;
};

var get_calendar_data = function get_calendar_data(calendar_url) {
    var matches = $(".calendar_list").find('[data-calendar-url="' + calendar_url + '"]');
    if (matches.length == 1) {
        return $(matches[0]).data();
    }
};

var get_calendar_displayname = function get_calendar_displayname(calendar_url) {
    var data = get_calendar_data(calendar_url);
    if (data === undefined || data.displayname === undefined) {
        return "(?)";
    } else {
        return data.displayname;
    }
};

var get_event_data = function get_event_data(id) {
    var data = $("#calendar_view").fullCalendar("clientEvents", id);
    if (data.length === 0) {
        return undefined;
    }
    return data[0];
};

var load_base_event_for = function load_base_event_for(instance, success, fail) {
    var search = $.getJSON(AgenDAVConf.base_app_url + "eventbase", {
        calendar: instance.calendar,
        timezone: AgenDAVUserPrefs.timezone,
        uid: instance.uid
    });
    search.done(function(event_data) {
        success(event_data);
    });
    search.fail(fail);
};

var reload_event_source = function reload_event_source(cal) {
    var eventsource;
    $(".calendar_list li.available_calendar").each(function(index) {
        var thiscal = $(this).data();
        if (thiscal.calendar == cal) {
            eventsource = thiscal.eventsource;
            return false;
        }
    });
    if (eventsource !== undefined) {
        $("#calendar_view").fullCalendar("removeEventSource", eventsource);
        $("#calendar_view").fullCalendar("addEventSource", eventsource);
    } else {
        show_error(t("messages", "error_interfacefailure"), t("messages", "error_calendarnotfound", {
            "%calendar": cal
        }));
    }
};

var fg_for_bg = function fg_for_bg(color) {
    var colr = parseInt(color.substr(1), 16);
    var is_dark = (colr >>> 16) + (colr >>> 8 & 255) + (colr & 255) < 500;
    return is_dark ? "#ffffff" : "#000000";
};

var session_expired = function session_expired() {
    $(".ui-dialog-content").dialog("close");
    show_error(t("messages", "error_sessexpired"), t("messages", "error_loginagain"));
    setTimeout(function() {
        window.location = AgenDAVConf.base_url;
    }, 2e3);
};

var shares_manager = function shares_manager() {
    var shares_list = $("#shares");
    shares_manager_no_entries_placeholder();
    shares_list.on("click", ".remove", function(event) {
        $(this).closest(".share").remove();
        shares_manager_no_entries_placeholder();
    });
    $("#new_share").on("click", function(event) {
        var filter = $("#calendar_share_filter");
        if (filter.length === 0) {
            render_template("calendar_share_row", {
                new: "1"
            }, function(out) {
                $("#shares").append(out);
                shares_manager_no_entries_placeholder();
                shares_manager_enable_autocomplete();
                $("#calendar_share_filter").focus();
            });
            return;
        }
        filter.focus();
    });
};

var shares_manager_no_entries_placeholder = function shares_manager_no_entries_placeholder() {
    var shares = $("#shares");
    if (shares.find(".share").length === 0) {
        $("#no_shares").show();
    } else {
        $("#no_shares").hide();
    }
};

var shares_manager_enable_autocomplete = function shares_manager_enable_autocomplete() {
    var user_autocomplete_cache = {}, lastXhr;
    $("#calendar_share_filter").autocomplete({
        minLength: 3,
        source: function(request, response) {
            var term = request.term;
            if (term in user_autocomplete_cache) {
                response(user_autocomplete_cache[term]);
                return;
            }
            lastXhr = $.getJSON(AgenDAVConf.base_app_url + "principals", request, function(data, status, xhr) {
                user_autocomplete_cache[term] = data;
                if (xhr === lastXhr) {
                    response(data);
                }
            });
        },
        select: function(event, ui) {
            var permissions = $("#calendar_share_add_rw").val();
            render_template("calendar_share_row", {
                with: ui.item.url,
                displayname: ui.item.url,
                rw: permissions
            }, function(out) {
                $("#calendar_share_add_row").before(out);
                $("#calendar_share_filter").val("").focus();
            });
            return false;
        }
    });
    $("#calendar_share_filter").data("ui-autocomplete")._renderItem = function(ul, item) {
        var text = '<a><i class="fa fa-user"></i> ' + item.displayname;
        if (item.email !== null) {
            text += ' <span style="font-style: italic">&lt;' + item.email + "&gt;</span>";
        }
        text += "</a>";
        return $("<li></li>").data("item.autocomplete", item).append(text).appendTo(ul);
    };
};

var reminders_manager = function reminders_manager() {
    var manager = $("#reminders");
    reminders_manager_no_entries_placeholder();
    manager.on("click", ".remove", function(event) {
        $(this).closest(".reminder").remove();
        reminders_manager_no_entries_placeholder();
    });
    manager.parent().on("click", "#new_reminder", function(event) {
        render_template("reminder_row", {}, function(out) {
            $("#reminders").append(out);
            reminders_manager_no_entries_placeholder();
        });
    });
};

var reminders_manager_no_entries_placeholder = function reminders_manager_no_entries_placeholder() {
    var manager = $("#reminders");
    if (manager.find(".reminder").length === 0) {
        $("#no_reminders").show();
    } else {
        $("#no_reminders").hide();
    }
};

var event_render_callback = function event_render_callback(event, element) {
    var icons = [];
    if (event.rrule !== undefined) {
        icons.push("fa-repeat");
    }
    if (event.reminders !== undefined && event.reminders.length > 0) {
        icons.push("fa-bell-o");
    }
    if (icons.length !== 0) {
        var icon_html = $('<span class="fc-event-icons"></span>');
        $.each(icons, function(n, i) {
            icon_html.append('<i class="fa ' + i + '"></i>');
        });
        element.find(".fc-title").after(icon_html);
    }
};

var event_click_callback = function event_click_callback(event, jsEvent, view) {
    var caldata = get_calendar_data(event.calendar);
    if (caldata === undefined) {
        show_error(t("messages", "error_interfacefailure"), t("messages", "error_calendarnotfound", {
            "%calendar": event.calendar
        }));
        return;
    }
    var event_data = $.extend({}, event, {
        caldata: caldata
    });
    if (caldata.is_shared === true && caldata.writable === false) {
        event_data.disable_actions = true;
    }
    if (event_data.rrule !== undefined) {
        var rrule = RRule.fromString(event_data.rrule);
        event_data.rrule_explained = AgenDAVRepeat.explainRRule(rrule);
    }
    event_data.readable_dates = AgenDAVDateAndTime.formatEventDates(event_data);
    render_template("event_details_popup", event_data, function(out) {
        event_details_popup.set({
            "content.text": out,
            "content.title": event_data.title
        }).reposition(jsEvent).show(jsEvent);
    });
};

var slots_drag_callback = function slots_drag_callback(start, end, jsEvent, view) {
    var pass_allday = false;
    if (view.name != "month" && !start.hasTime()) {
        pass_allday = true;
    }
    if (view.name == "month" || pass_allday === true) {
        end.subtract(1, "day");
    }
    var data = {
        start: start,
        end: end,
        allDay: pass_allday,
        view: view.name
    };
    $("#calendar_view").fullCalendar("unselect");
    open_event_edit_dialog(data);
};

var event_resize_callback = function event_resize_callback(event, delta, revertFunc, jsEvent, ui, view) {
    var allDay = !event.start.hasTime();
    event_alter("resize", event, delta, allDay, revertFunc, jsEvent, ui, view);
};

var event_drop_callback = function event_drop_callback(event, delta, revertFunc, jsEvent, ui, view) {
    var allDay = !event.start.hasTime();
    event_alter("drop", event, delta, allDay, revertFunc, jsEvent, ui, view);
};

var event_alter = function event_alter(alterType, event, delta, allDay, revertFunc, jsEvent, ui, view) {
    var fake_form = {
        url: AgenDAVConf.base_app_url + "events/" + alterType,
        data: {
            uid: event.uid,
            calendar: event.calendar,
            etag: event.etag,
            delta: delta.asMinutes(),
            allday: allDay,
            was_allday: event.orig_allday,
            timezone: AgenDAVUserPrefs.timezone
        }
    };
    if (event.rrule !== undefined) {
        fake_form.data.recurrence_id = event.recurrence_id;
    }
    fake_form.data[csrf_id] = get_csrf_token();
    send_form({
        form_object: fake_form,
        success: function(data) {
            var is_recurrent = event.rrule !== undefined;
            updateEvents(event.id, is_recurrent, {
                etag: data.etag
            });
            updateEvents(event.id, false, {
                orig_allday: event.allDay
            });
            if (is_recurrent) {
                updateEvents(event.id, true, {
                    has_exceptions: true
                });
                updateEvents(event.id, false, {
                    is_exception: true
                });
            }
        },
        exception: function(data) {
            show_error(t("messages", "error_modfailed"), data);
            revertFunc();
        },
        error: function() {
            revertFunc();
        }
    });
};

var event_delete = function event_delete(event_id) {
    var data = get_event_data(event_id);
    if (data === undefined) {
        show_error(t("messages", "error_interfacefailure"), t("messages", "error_current_event_not_loaded"));
        return;
    }
    if (data.rrule === undefined) {
        event_delete_proceed(data);
        return;
    }
    event_delete_recurrent_dialog(data);
};

var event_delete_proceed = function event_delete_proceed(data, recurrence_id) {
    var remove_all_instances = false;
    if (typeof recurrence_id === "undefined") {
        recurrence_id = null;
        remove_all_instances = true;
    }
    var remove_params = {
        calendar: data.calendar,
        uid: data.uid,
        href: data.href,
        etag: data.etag,
        recurrence_id: recurrence_id
    };
    remove_params[csrf_id] = get_csrf_token();
    send_form({
        form_object: {
            url: AgenDAVConf.base_app_url + "events/delete",
            data: remove_params
        },
        success: function(rdata) {
            var etag = rdata.etag;
            removeEvents(data.id, remove_all_instances, etag);
        },
        exception: function(rdata) {
            show_error(t("messages", "error_event_not_deleted"), rdata);
        }
    });
};

var event_delete_recurrent_dialog = function event_delete_recurrent_dialog(data) {
    var button_only_this_repetition = {
        text: t("labels", "delete_only_this_repetition"),
        class: "addicon btn-icon-event-delete",
        click: function() {
            event_delete_proceed(data, data.recurrence_id);
            destroy_dialog("#event_delete_dialog");
        }
    };
    var button_all_repetitions = {
        text: t("labels", "delete_all_repetitions"),
        class: "addicon btn-icon-event-delete",
        click: function() {
            event_delete_proceed(data);
            destroy_dialog("#event_delete_dialog");
        }
    };
    var buttons = [ button_only_this_repetition, button_all_repetitions ];
    data.applyid = "event_delete_form";
    show_dialog({
        template: "event_delete_recurrent_dialog",
        data: data,
        title: t("labels", "deleteevent"),
        buttons: buttons,
        divname: "event_delete_dialog",
        width: 400
    });
};

var modify_event_handler = function modify_event_handler(event_id) {
    var current_event = get_event_data(event_id);
    if (current_event === undefined) {
        show_error(t("messages", "error_interfacefailure"), t("messages", "error_current_event_not_loaded"));
        return;
    }
    if (current_event.rrule === undefined) {
        open_event_edit_dialog(current_event);
        return;
    }
    open_event_modify_recurrent_dialog(current_event);
};

var open_event_modify_recurrent_dialog = function open_event_modify_recurrent_dialog(event) {
    var button_only_this_repetition = {
        text: t("labels", "edit_only_this_repetition"),
        class: "addicon btn-icon-event-edit",
        click: function() {
            destroy_dialog("#event_edit_recurrent_dialog");
            open_event_edit_dialog(event);
        }
    };
    var button_all_repetitions = {
        text: t("labels", "edit_all_repetitions"),
        class: "addicon btn-icon-event-edit",
        click: function() {
            destroy_dialog("#event_edit_recurrent_dialog");
            load_base_event_for(event, function(base) {
                open_event_edit_dialog(base);
            }, function(jqXHR, textStatus) {
                show_error(t("messages", "error_interfacefailure"), textStatus);
            });
        }
    };
    var buttons = [ button_only_this_repetition, button_all_repetitions ];
    show_dialog({
        template: "event_edit_recurrent_dialog",
        data: event,
        title: t("labels", "editevent"),
        buttons: buttons,
        divname: "event_edit_recurrent_dialog",
        width: 400
    });
};

var show_calendar = function show_calendar(calendar_obj) {
    $("#calendar_view").fullCalendar("addEventSource", calendar_obj.data().eventsource);
    calendar_obj.removeClass("hidden_calendar");
};

var hide_calendar = function hide_calendar(calendar_obj) {
    $("#calendar_view").fullCalendar("removeEventSource", calendar_obj.data().eventsource);
    calendar_obj.addClass("hidden_calendar");
};

var toggle_calendar = function toggle_calendar(calendar_obj) {
    if (calendar_obj.hasClass("hidden_calendar")) {
        show_calendar(calendar_obj);
    } else {
        hide_calendar(calendar_obj);
    }
};

var get_csrf_token = function get_csrf_token() {
    return csrf_value;
};

var loading = function loading(status) {
    var $loading = $("#loading");
    var $refresh = $("#button-refresh");
    if (status === false) {
        $refresh.removeAttr("disabled");
        $loading.hide();
    } else {
        $refresh.attr("disabled", "disabled");
        $loading.show();
    }
};

var beforePrint = function beforePrint() {
    $("#calendar_view").addClass("printing");
    $("#calendar_view").fullCalendar("render");
};

var afterPrint = function afterPrint() {
    $("#calendar_view").removeClass("printing");
    $("#calendar_view").fullCalendar("render");
};

var setup_print_tweaks = function setup_print_tweaks() {
    if (window.matchMedia) {
        var mediaQueryList = window.matchMedia("print");
        mediaQueryList.addListener(function(mql) {
            if (mql.matches) {
                beforePrint();
            } else {
                afterPrint();
            }
        });
    }
    window.onbeforeprint = beforePrint;
    window.onafterprint = afterPrint;
};

var calendar_list = function calendar_list() {
    var calendars = $("div.calendar_list li.available_calendar");
    var total = calendars.length;
    var result = [];
    for (var i = 0; i < total; i++) {
        result.push($(calendars[i]).data());
    }
    return result;
};

var render_template = function render(template_name, template_data, callback) {
    dust.render(template_name, dustbase.push(template_data), function(err, out) {
        if (err !== null) {
            show_error(t("messages", "error_interfacefailure"), err.message);
            return;
        }
        callback(out);
    });
};

var check_required_fields = function check_required_fields(form) {
    var result = true;
    form.find("input:required").each(function() {
        if ($(this).val() === "") {
            $(this).parent().addClass("has-error");
            $(this).focus();
            result = false;
            return true;
        }
        $(this).parent().removeClass("has-error");
    });
    return result;
};

var generate_iso8601_values = function generate_iso8601_values(element) {
    var matches = $(element).find("div.generate-iso8601");
    $.each(matches, function(index, div) {
        var datepicker = $(div).find("input.date");
        var timepicker = $(div).find("input.time");
        if (datepicker.val() === "") {
            $(div).find("input.generated").val("");
            return true;
        }
        var ignore_time = false;
        var ignore_time_data = $(div).data("only-date-if-checked");
        if (ignore_time_data !== undefined) {
            ignore_time = $(ignore_time_data + ":checked").length === 1;
        }
        $(div).find("input.generated").val(AgenDAVDateAndTime.convertISO8601(datepicker, timepicker, ignore_time, AgenDAVUserPrefs.timezone));
    });
};

var setTranslations = function setTranslations(data) {
    AgenDAVConf.i18n = data;
    set_default_datepicker_options();
    AgenDAVRepeat.language = AgenDAVRepeat.generateLanguage();
};

var t = function t(domain, key, params) {
    var full_key = domain + "." + key;
    var result = AgenDAVConf.i18n[full_key];
    if (result === undefined) {
        return full_key;
    }
    for (var i in params) {
        result = result.replace(i, params[i]);
    }
    return result;
};

var rrule_gettext = function rrule_gettext(key) {
    return t("rrule", key);
};

var updateEvents = function updateEvents(id, is_recurrent, new_properties) {
    var filter = generateIdFilter(id, is_recurrent);
    var events = $("#calendar_view").fullCalendar("clientEvents", filter);
    for (var i = 0; i < events.length; i++) {
        for (var property in new_properties) {
            events[i][property] = new_properties[property];
        }
    }
    $("#calendar_view").fullCalendar("updateEvents", events);
    return events.length;
};

var removeEvents = function removeEvents(id, wildcard, etag) {
    var filter = generateIdFilter(id, wildcard);
    $("#calendar_view").fullCalendar("removeEvents", filter);
    if (wildcard === false && typeof etag !== "undefined") {
        updateEvents(id, true, {
            etag: etag
        });
    }
};

var generateIdFilter = function generateIdFilter(id, wildcard) {
    var result = id;
    if (wildcard === true) {
        var parts = id.split("@");
        var match_id = parts[0];
        result = function(event) {
            if (event.id === undefined) {
                return false;
            }
            return event.id === id || event.id.substring(0, match_id.length + 1) == match_id + "@";
        };
    }
    return result;
};

var handle_expired_session = function handle_expired_session() {
    $(document).ajaxError(function(event, jqxhr, settings, thrownError) {
        if (jqxhr.status !== undefined && jqxhr.status == 401) {
            session_expired();
        }
    });
};

var AgenDAVDateAndTime = AgenDAVDateAndTime || {};

AgenDAVDateAndTime.fullCalendarFormat = {
    "24": "H:mm",
    "12": "h(:mm)a"
};

AgenDAVDateAndTime.momentFormat = {
    "24": "HH:mm",
    "12": "hh:mm A",
    ymd: "YYYY-MM-DD",
    dmy: "DD/MM/YYYY",
    mdy: "MM/DD/YYYY"
};

AgenDAVDateAndTime.datepickerFormat = {
    ymd: "yy-mm-dd",
    dmy: "dd/mm/yy",
    mdy: "mm/dd/yy"
};

AgenDAVDateAndTime.timepickerSettings = {
    "12": {
        timeFormat: "h:i A",
        step: 30,
        maxTime: "11:30 PM"
    },
    "24": {
        timeFormat: "H:i",
        step: 30,
        maxTime: "23:30"
    }
};

AgenDAVDateAndTime.extractTime = function extractTime(dateobj) {
    return moment(dateobj).format(AgenDAVDateAndTime.momentFormat[AgenDAVUserPrefs.time_format]);
};

AgenDAVDateAndTime.extractDate = function extractDate(dateobj) {
    return moment(dateobj).format(AgenDAVDateAndTime.momentFormat[AgenDAVUserPrefs.date_format]);
};

AgenDAVDateAndTime.approxNearest = function approxNearest(dt) {
    var now = moment();
    var minutes = Math.ceil(now.minutes() / 15) * 15;
    var result = moment(dt).hours(now.hours()).minutes(0).seconds(0).add(minutes, "minutes");
    return result;
};

AgenDAVDateAndTime.endDate = function endDate(event) {
    if (event.end === undefined || event.end === null || event.start.diff(event.end) === 0) {
        if (event.allDay === true) {
            return moment(event.start);
        }
        return moment(event.start).add(1, "hours");
    }
    return moment(event.end);
};

AgenDAVDateAndTime.formatEventDates = function formatEventDates(event_data) {
    var result = "";
    var start = moment(event_data.start);
    var end = moment(event_data.end);
    if (event_data.end === null) {
        var unit = event_data.allDay ? "days" : "hours";
        end = moment(event_data.start);
        end.add(1, unit);
    }
    if (event_data.allDay === true) {
        end.subtract(1, "days");
        result = start.format("LL");
        if (!start.isSame(end, "day")) {
            result += " - " + end.format("LL");
        }
        return result;
    }
    result = start.format("LL") + " " + this.extractTime(start);
    var end_string = end.format("LL") + " " + this.extractTime(end);
    if (start.isSame(end, "day")) {
        end_string = this.extractTime(end);
    }
    result += " - " + end_string;
    return result;
};

AgenDAVDateAndTime.convertISO8601 = function convertISO8601(datepicker, timepicker, allday, timezone) {
    var result = datepicker.datepicker("getDate");
    if (timepicker.length === 0 || allday === true) {
        return moment(result).format("YYYY-MM-DDT00:00:00.000") + "Z";
    }
    result = timepicker.timepicker("getTime", result);
    return moment.tz(moment(result).format("YYYY-MM-DDTHH:mm:ss.000"), timezone).toISOString();
};

AgenDAVDateAndTime.getMoment = function getMoment(iso8601string, timezone) {
    return moment.tz(iso8601string, timezone);
};

var AgenDAVRepeat = AgenDAVRepeat || {};

AgenDAVRepeat.handleForm = function handleForm($form) {
    var $fixed_repeat_rule = $("#fixed_repeat_rule");
    var $repeat_frequency = $("#repeat_frequency");
    var $repeat_ends = $("#repeat_ends");
    if ($fixed_repeat_rule.val() == "true") {
        $form.find("select, input").attr("disabled", "disabled");
        var original_rrule = RRule.fromString($("#rrule_original").val());
        $("#fixed_repeat_rule_explanation").html(AgenDAVRepeat.explainRRule(original_rrule));
        return;
    }
    $form.on("change", "input,select.secondary", function(e) {
        AgenDAVRepeat.regenerate();
    });
    $repeat_frequency.on("change", function() {
        var new_frequency = $(this).val();
        var frequency = parseInt(new_frequency);
        if (frequency === -1 || new_frequency === "keep-original") {
            $form.find(".container_repeat_options").hide();
        } else {
            $form.find(".container_repeat_options").show();
            AgenDAVRepeat.showAllowedFieldsByFrequency(frequency);
        }
        $repeat_ends.trigger("change");
    });
    $repeat_ends.on("change", function() {
        var container_repeat_ends_options = $form.find("div.container_repeat_ends_options");
        var ends = $(this).val();
        if (ends === "never") {
            container_repeat_ends_options.hide();
        }
        if (ends === "after") {
            container_repeat_ends_options.show();
            $form.find("div.container_repeat_count").show();
            $form.find("div.container_repeat_until").hide();
            $form.find("input.repeat_until").val("");
        }
        if (ends === "date") {
            container_repeat_ends_options.show();
            $form.find("div.container_repeat_count").hide();
            $form.find("div.container_repeat_until").show();
            $form.find("input.repeat_count").val("");
        }
        generate_iso8601_values($form);
        var new_rrule = AgenDAVRepeat.generateRRule($form.find("input,select").serializeArray());
        if (new_rrule === null) {
            $("#rrule").val("");
            $("#repeat_explanation").html("");
            return;
        }
        $("#rrule").val(new_rrule.toString());
        $("#repeat_explanation").html(AgenDAVRepeat.explainRRule(new_rrule));
    });
    AgenDAVRepeat.regenerate();
};

AgenDAVRepeat.regenerate = function regenerate() {
    $("#repeat_frequency").trigger("change");
};

AgenDAVRepeat.generateRRule = function generateRRule(data) {
    var frequency = -1;
    var options = {};
    var ends;
    var by_day = [];
    var keep_original_rrule = false;
    $.each(data, function(i, field) {
        var value = field.value;
        if (value === "" || value === "-") {
            return true;
        }
        if (field.name === "repeat_frequency") {
            if (value === "keep-original") {
                keep_original_rrule = true;
                return false;
            }
            value = parseInt(value);
            if (value === -1) {
                return false;
            }
            frequency = value;
            options.freq = value;
        }
        if (field.name === "repeat_by_day" && AgenDAVRepeat.shouldConsider(frequency, field.name)) {
            by_day.push(AgenDAVRepeat.getRRuleJsByDay(value));
        }
        if (field.name === "repeat_by_month_day" && AgenDAVRepeat.shouldConsider(frequency, field.name)) {
            options.bymonthday = value;
        }
        if (field.name === "repeat_interval" && value !== "1") {
            options.interval = value;
        }
        if (field.name === "repeat_ends") {
            ends = field.value;
        }
        if (field.name === "repeat_count" && ends === "after") {
            options.count = value;
        }
        if (field.name === "repeat_until_date" && ends === "date") {
            var is_all_day = $("input.allday").is(":checked");
            options.until = AgenDAVRepeat.generateUntilDate(is_all_day);
            options.onlydate = is_all_day;
        }
    });
    if (by_day.length > 0) {
        options.byweekday = by_day;
    }
    if (keep_original_rrule === true) {
        var rrule_original = RRule.fromString($("#rrule_original").val());
        return rrule_original;
    }
    if (options.freq === undefined) {
        return null;
    }
    return new RRule(options);
};

AgenDAVRepeat.getRRuleJsByDay = function getRRuleJsByDay(day) {
    if (day === "sunday") {
        return RRule.SU;
    }
    if (day === "monday") {
        return RRule.MO;
    }
    if (day === "tuesday") {
        return RRule.TU;
    }
    if (day === "wednesday") {
        return RRule.WE;
    }
    if (day === "thursday") {
        return RRule.TH;
    }
    if (day === "friday") {
        return RRule.FR;
    }
    if (day === "saturday") {
        return RRule.SA;
    }
};

AgenDAVRepeat.getLabelForByDay = function gettLabelForByDay(day) {
    var days = [ "monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday" ];
    return days[day];
};

AgenDAVRepeat.explainRRule = function explainRRule(rrule) {
    return rrule.toText(rrule_gettext, AgenDAVRepeat.language);
};

AgenDAVRepeat.generateLanguage = function generateLanguage() {
    return {
        dayNames: [ AgenDAVConf.i18n["labels.sunday"], AgenDAVConf.i18n["labels.monday"], AgenDAVConf.i18n["labels.tuesday"], AgenDAVConf.i18n["labels.wednesday"], AgenDAVConf.i18n["labels.thursday"], AgenDAVConf.i18n["labels.friday"], AgenDAVConf.i18n["labels.saturday"] ],
        monthNames: [ AgenDAVConf.i18n["labels.january"], AgenDAVConf.i18n["labels.february"], AgenDAVConf.i18n["labels.march"], AgenDAVConf.i18n["labels.april"], AgenDAVConf.i18n["labels.may"], AgenDAVConf.i18n["labels.june"], AgenDAVConf.i18n["labels.july"], AgenDAVConf.i18n["labels.august"], AgenDAVConf.i18n["labels.september"], AgenDAVConf.i18n["labels.october"], AgenDAVConf.i18n["labels.november"], AgenDAVConf.i18n["labels.december"] ]
    };
};

AgenDAVRepeat.allOptionalFields = [ "repeat_by_day", "repeat_by_month_day" ];

AgenDAVRepeat.getFieldsForFrequency = function getFieldsForFrequency(frequency) {
    if (frequency === RRule.DAILY) {
        return [ "repeat_by_day" ];
    }
    if (frequency === RRule.WEEKLY) {
        return [ "repeat_by_day" ];
    }
    if (frequency === RRule.MONTHLY) {
        return [ "repeat_by_month_day" ];
    }
    if (frequency === RRule.YEARLY) {
        return [];
    }
};

AgenDAVRepeat.showAllowedFieldsByFrequency = function showAllowedFieldsByFrequency(frequency) {
    var total_fields = AgenDAVRepeat.allOptionalFields.length;
    for (var i = 0; i < total_fields; i++) {
        var current_field = AgenDAVRepeat.allOptionalFields[i];
        if (AgenDAVRepeat.shouldConsider(frequency, current_field)) {
            $(".container_" + current_field).show();
        } else {
            $(".container_" + current_field).hide();
        }
    }
};

AgenDAVRepeat.shouldConsider = function shouldConsider(frequency, field) {
    var allowed = AgenDAVRepeat.getFieldsForFrequency(frequency);
    if (allowed.indexOf(field) === -1) {
        return false;
    }
    return true;
};

AgenDAVRepeat.setRepeatRuleOnForm = function setRepeatRuleOnForm(rrule, form) {
    var rrulejs = RRule.fromString(rrule);
    for (var param in rrulejs.origOptions) {
        var value = rrulejs.options[param];
        if (param === "freq") {
            $("#repeat_frequency").val(value);
            continue;
        }
        if (param === "interval") {
            $("#repeat_interval").val(value);
            continue;
        }
        if (param === "count") {
            $("#repeat_count").val(value);
            $("#repeat_ends").val("after");
            continue;
        }
        if (param === "until") {
            $("#repeat_until").datepicker("setDate", value);
            $("#repeat_ends").val("date");
            continue;
        }
        if (param === "bymonthday") {
            $("#repeat_by_month_day").val(value);
            continue;
        }
        if (param === "byweekday") {
            if (value === null) {
                value = rrulejs.origOptions[param];
            }
            for (var i = 0; i < value.length; i++) {
                var label = AgenDAVRepeat.getLabelForByDay(value[i]);
                form.find(".container_repeat_by_day [value=" + label + "]").prop("checked", true);
            }
            continue;
        }
        if (param === "onlydate") {
            continue;
        }
        console.log("Ooops, property " + param + " not supported");
    }
    AgenDAVRepeat.regenerate();
    var generated_rrule = RRule.fromString($("#rrule").val());
    var generated_description = generated_rrule.toText();
    var original_description = rrulejs.toText();
    if (generated_description !== original_description) {
        $("#repeat_frequency").prepend('<option value="keep-original">' + t("labels", "keep_rrule") + "</option>");
        $("#repeat_warning_rrule_unreproducible").show();
        $("#repeat_frequency").val("keep-original");
        AgenDAVRepeat.regenerate();
    }
};

AgenDAVRepeat.generateUntilDate = function generateUntilDate(is_allday) {
    if ($("#repeats_frequency").val() === "-1" || $("#repeat_ends").val() !== "date") {
        return false;
    }
    var until_date = $("#repeat_until").datepicker("getDate");
    if (until_date === null) {
        return false;
    }
    var result = moment(until_date);
    if (is_allday === false) {
        var start = moment($("#start").val());
        result.set("hour", start.get("hour"));
        result.set("minute", start.get("minute"));
        result.set("second", start.get("second"));
    }
    return result.toDate();
};

(function(dust) {
    dust.register("calendar_basic_form_part", body_0);
    function body_0(chk, ctx) {
        return chk.x(ctx.get([ "calendar" ], false), ctx, {
            block: body_1
        }, {}).w('<input type="hidden" name="is_shared"value="').x(ctx.get([ "is_shared" ], false), ctx, {
            else: body_2,
            block: body_3
        }, {}).w('" /><input type="hidden" name="is_owned"value="').x(ctx.get([ "is_owned" ], false), ctx, {
            else: body_4,
            block: body_5
        }, {}).w('" />').p("form_element_start", ctx, ctx, {
            for: "displayname",
            label: "displayname"
        }).w('<input required autofocus name="displayname" type="text" size="25" maxlength="255" value="').x(ctx.get([ "displayname" ], false), ctx, {
            block: body_6
        }, {}).w('" class="displayname form-control" />').p("form_element_end", ctx, ctx, {}).p("form_element_start", ctx, ctx, {
            for: "color",
            label: "color"
        }).w('<input name="calendar_color"value="').x(ctx.get([ "color" ], false), ctx, {
            else: body_7,
            block: body_8
        }, {}).w('" class="calendar_color pick_color form-control" maxlength="7" size="7" />').p("form_element_end", ctx, ctx, {}).x(ctx.get([ "public_url" ], false), ctx, {
            block: body_9
        }, {});
    }
    body_0.__dustBody = !0;
    function body_1(chk, ctx) {
        return chk.w('<input type="hidden" name="calendar" value="').f(ctx.get([ "calendar" ], false), ctx, "h").w('" />');
    }
    body_1.__dustBody = !0;
    function body_2(chk, ctx) {
        return chk.w("false");
    }
    body_2.__dustBody = !0;
    function body_3(chk, ctx) {
        return chk.w("true");
    }
    body_3.__dustBody = !0;
    function body_4(chk, ctx) {
        return chk.w("false");
    }
    body_4.__dustBody = !0;
    function body_5(chk, ctx) {
        return chk.w("true");
    }
    body_5.__dustBody = !0;
    function body_6(chk, ctx) {
        return chk.f(ctx.get([ "displayname" ], false), ctx, "h");
    }
    body_6.__dustBody = !0;
    function body_7(chk, ctx) {
        return chk.f(ctx.get([ "default_calendar_color" ], false), ctx, "h");
    }
    body_7.__dustBody = !0;
    function body_8(chk, ctx) {
        return chk.f(ctx.get([ "color" ], false), ctx, "h");
    }
    body_8.__dustBody = !0;
    function body_9(chk, ctx) {
        return chk.w('<div class="public_url_container"><i class="fa fa-lg fa-link"></i> <a href="').f(ctx.get([ "public_url" ], false), ctx, "h").w('">').h("i18n", ctx, {}, {
            type: "labels",
            name: "publicurl"
        }, "h").w("</p></a></div>");
    }
    body_9.__dustBody = !0;
    return body_0;
})(dust);

(function(dust) {
    dust.register("calendar_create_dialog", body_0);
    function body_0(chk, ctx) {
        return chk.w('<div id="calendar_create_dialog">').p("form_open", ctx, ctx, {
            applyclass: "form-horizontal",
            applyid: "calendar_create_form"
        }).p("calendar_basic_form_part", ctx, ctx, {}).p("form_close", ctx, ctx, {}).w("</div>");
    }
    body_0.__dustBody = !0;
    return body_0;
})(dust);

(function(dust) {
    dust.register("calendar_delete_dialog", body_0);
    function body_0(chk, ctx) {
        return chk.w('<div id="calendar_delete_dialog">').p("form_open", ctx, ctx, {}).w('<input type="hidden" name="calendar" value="').f(ctx.get([ "calendar" ], false), ctx, "h").w('" /><p>').h("i18n", ctx, {}, {
            type: "messages",
            name: "info_confirmcaldelete"
        }, "h").w('</p><p><div class="calendar_color" style="background-color: ').f(ctx.get([ "color" ], false), ctx, "h").w(';"></div> ').f(ctx.get([ "displayname" ], false), ctx, "h").w("</p><p>").h("i18n", ctx, {}, {
            type: "messages",
            name: "info_permanentremoval"
        }, "h").w("</p>").p("form_close", ctx, ctx, {}).w("</div>");
    }
    body_0.__dustBody = !0;
    return body_0;
})(dust);

(function(dust) {
    dust.register("calendar_list_entry", body_0);
    function body_0(chk, ctx) {
        return chk.w('<li data-calendar-url="').f(ctx.get([ "url" ], false), ctx, "h").w('" class="available_calendar').x(ctx.get([ "default_calendar" ], false), ctx, {
            block: body_1
        }, {}).w('"><i class="calendar_color fa fa-lg fa-square fa-li" style="color: ').x(ctx.get([ "color" ], false), ctx, {
            else: body_2,
            block: body_3
        }, {}).w('"></i><span class="icons">').x(ctx.get([ "is_shared" ], false), ctx, {
            block: body_4
        }, {}).x(ctx.get([ "is_owned" ], false), ctx, {
            block: body_6
        }, {}).w('</span><span class="text"').nx(ctx.get([ "is_owned" ], false), ctx, {
            block: body_8
        }, {}).w(">").f(ctx.get([ "displayname" ], false), ctx, "h").w('</span><i title="').h("i18n", ctx, {}, {
            type: "labels",
            name: "modifycalendar"
        }, "h").w('" class="cfg pseudobutton fa fa-cogs"></i></li>');
    }
    body_0.__dustBody = !0;
    function body_1(chk, ctx) {
        return chk.w(" default_calendar");
    }
    body_1.__dustBody = !0;
    function body_2(chk, ctx) {
        return chk.f(ctx.get([ "default_calendar_color" ], false), ctx, "h");
    }
    body_2.__dustBody = !0;
    function body_3(chk, ctx) {
        return chk.f(ctx.get([ "color" ], false), ctx, "h");
    }
    body_3.__dustBody = !0;
    function body_4(chk, ctx) {
        return chk.nx(ctx.get([ "writable" ], false), ctx, {
            block: body_5
        }, {});
    }
    body_4.__dustBody = !0;
    function body_5(chk, ctx) {
        return chk.w('<i title="').h("i18n", ctx, {}, {
            type: "labels",
            name: "readonly"
        }, "h").w('" class="fa fa-lock"></i>');
    }
    body_5.__dustBody = !0;
    function body_6(chk, ctx) {
        return chk.h("gt", ctx, {
            block: body_7
        }, {
            key: ctx.getPath(false, [ "shares", "length" ]),
            value: 0
        }, "h");
    }
    body_6.__dustBody = !0;
    function body_7(chk, ctx) {
        return chk.w('<i title="').h("i18n", ctx, {}, {
            type: "labels",
            name: "currentlysharing"
        }, "h").w('" class="fa fa-share"></i>');
    }
    body_7.__dustBody = !0;
    function body_8(chk, ctx) {
        return chk.w('title="').h("i18n", ctx, {}, {
            type: "messages",
            name: "info_sharedby",
            user: body_9
        }, "h").w('"');
    }
    body_8.__dustBody = !0;
    function body_9(chk, ctx) {
        return chk.f(ctx.get([ "owner" ], false), ctx, "h");
    }
    body_9.__dustBody = !0;
    return body_0;
})(dust);

(function(dust) {
    dust.register("calendar_modify_dialog", body_0);
    function body_0(chk, ctx) {
        return chk.w('<div id="calendar_modify_dialog">').p("form_open", ctx, ctx, {
            applyclass: "form-horizontal",
            applyid: "calendar_modify_form"
        }).w('<ul class="nav nav-tabs" role="tablist"><li role="presentation" class="active"><a role="tab" href="#tabs-general" data-toggle="tab"><i class="tab-icon fa fa-tag"></i>').h("i18n", ctx, {}, {
            type: "labels",
            name: "generaloptions"
        }, "h").w("</a></li>").x(ctx.get([ "enable_calendar_sharing" ], false), ctx, {
            block: body_1
        }, {}).w('</ul><div class="tab-content"><div role="tabpanel" id="tabs-general" class="tab-pane active">').nx(ctx.get([ "is_owned" ], false), ctx, {
            block: body_3
        }, {}).p("calendar_basic_form_part", ctx, ctx, {}).w("</div>").x(ctx.get([ "enable_calendar_sharing" ], false), ctx, {
            block: body_7
        }, {}).w("</div><!-- tab-content -->").p("form_close", ctx, ctx, {}).w("</div>");
    }
    body_0.__dustBody = !0;
    function body_1(chk, ctx) {
        return chk.nx(ctx.get([ "is_shared" ], false), ctx, {
            block: body_2
        }, {});
    }
    body_1.__dustBody = !0;
    function body_2(chk, ctx) {
        return chk.w('<li role="presentation"><a role="tab" href="#tabs-share" data-toggle="tab"><i class="tab-icon fa fa-group"></i>').h("i18n", ctx, {}, {
            type: "labels",
            name: "shareoptions"
        }, "h").w("</a></li>");
    }
    body_2.__dustBody = !0;
    function body_3(chk, ctx) {
        return chk.w('<div class="share_info ui-corner-all">').h("i18n", ctx, {}, {
            type: "messages",
            name: "info_sharedby",
            user: body_4
        }, "h").w(" ").h("eq", ctx, {
            block: body_5
        }, {
            key: body_6,
            value: "0"
        }, "h").w("</div>");
    }
    body_3.__dustBody = !0;
    function body_4(chk, ctx) {
        return chk.f(ctx.get([ "owner" ], false), ctx, "h");
    }
    body_4.__dustBody = !0;
    function body_5(chk, ctx) {
        return chk.w("(").h("i18n", ctx, {}, {
            type: "labels",
            name: "readonly"
        }, "h").w(")");
    }
    body_5.__dustBody = !0;
    function body_6(chk, ctx) {
        return chk.f(ctx.get([ "rw" ], false), ctx, "h");
    }
    body_6.__dustBody = !0;
    function body_7(chk, ctx) {
        return chk.nx(ctx.get([ "is_shared" ], false), ctx, {
            block: body_8
        }, {});
    }
    body_7.__dustBody = !0;
    function body_8(chk, ctx) {
        return chk.w('<div role="tabpanel" id="tabs-share" class="tab-pane">').p("calendar_share_table", ctx, ctx, {}).w("</div>");
    }
    body_8.__dustBody = !0;
    return body_0;
})(dust);

(function(dust) {
    dust.register("calendar_share_access_options", body_0);
    function body_0(chk, ctx) {
        return chk.w(' <option value="0"').h("eq", ctx, {
            block: body_1
        }, {
            key: body_2,
            value: "0"
        }, "h").w(">").h("i18n", ctx, {}, {
            type: "labels",
            name: "readonly"
        }, "h").w('</option><option value="1"').h("eq", ctx, {
            block: body_3
        }, {
            key: body_4,
            value: "1"
        }, "h").w(">").h("i18n", ctx, {}, {
            type: "labels",
            name: "readandwrite"
        }, "h").w("</option>");
    }
    body_0.__dustBody = !0;
    function body_1(chk, ctx) {
        return chk.w(' selected="true"');
    }
    body_1.__dustBody = !0;
    function body_2(chk, ctx) {
        return chk.f(ctx.get([ "rw" ], false), ctx, "h");
    }
    body_2.__dustBody = !0;
    function body_3(chk, ctx) {
        return chk.w(' selected="true"');
    }
    body_3.__dustBody = !0;
    function body_4(chk, ctx) {
        return chk.f(ctx.get([ "rw" ], false), ctx, "h");
    }
    body_4.__dustBody = !0;
    return body_0;
})(dust);

(function(dust) {
    dust.register("calendar_share_row", body_0);
    function body_0(chk, ctx) {
        return chk.w('<div class="form-group row share"').x(ctx.get([ "new" ], false), ctx, {
            block: body_1
        }, {}).w('><div class="col-md-12"><div class="col-md-6">').nx(ctx.get([ "new" ], false), ctx, {
            block: body_2
        }, {}).x(ctx.get([ "new" ], false), ctx, {
            block: body_4
        }, {}).w('</div><div class="col-md-4">').nx(ctx.get([ "new" ], false), ctx, {
            block: body_5
        }, {}).x(ctx.get([ "new" ], false), ctx, {
            block: body_6
        }, {}).p("calendar_share_access_options", ctx, ctx, {}).w('</select></div><div class="col-md-2"><p class="form-control-static"><a href="javascript:void(0)" class="remove"><i class="fa fa-remove fa-fw"></i></a></p></div></div></div>');
    }
    body_0.__dustBody = !0;
    function body_1(chk, ctx) {
        return chk.w(' id="calendar_share_add_row"');
    }
    body_1.__dustBody = !0;
    function body_2(chk, ctx) {
        return chk.w('<input type="hidden" name="shares[with][]" value="').f(ctx.get([ "with" ], false), ctx, "h").w('" /><p class="form-control-static"><span class="username" title="').f(ctx.get([ "with" ], false), ctx, "h").w('">').f(ctx.get([ "displayname" ], false), ctx, "h").w("</span>").x(ctx.get([ "email" ], false), ctx, {
            block: body_3
        }, {}).w("</p>");
    }
    body_2.__dustBody = !0;
    function body_3(chk, ctx) {
        return chk.w("<em> &lt;").f(ctx.get([ "email" ], false), ctx, "h").w("&gt;</em>");
    }
    body_3.__dustBody = !0;
    function body_4(chk, ctx) {
        return chk.w('<input name="filter" class="form-control" id="calendar_share_filter" value="" maxlength="255" size="10" />');
    }
    body_4.__dustBody = !0;
    function body_5(chk, ctx) {
        return chk.w('<select name="shares[rw][]" class="form-control">');
    }
    body_5.__dustBody = !0;
    function body_6(chk, ctx) {
        return chk.w('<select name="new_rw" class="form-control" id="calendar_share_add_rw">');
    }
    body_6.__dustBody = !0;
    return body_0;
})(dust);

(function(dust) {
    dust.register("calendar_share_table", body_0);
    function body_0(chk, ctx) {
        return chk.w('<p id="no_shares" class="text-center">').h("i18n", ctx, {}, {
            type: "messages",
            name: "info_notshared"
        }, "h").w('</p><div id="shares">').s(ctx.get([ "shares" ], false), ctx, {
            block: body_1
        }, {}).w('</div><div class="text-right"><a href="javascript:void(0)" id="new_share"><i class="fa fa-plus"></i> ').h("i18n", ctx, {}, {
            type: "labels",
            name: "add_share"
        }, "h").w("</a></div>");
    }
    body_0.__dustBody = !0;
    function body_1(chk, ctx) {
        return chk.p("calendar_share_row", ctx, ctx, {});
    }
    body_1.__dustBody = !0;
    return body_0;
})(dust);

(function(dust) {
    dust.register("datepicker_button", body_0);
    function body_0(chk, ctx) {
        return chk.w('<i class="btn fa fa-calendar" title="').h("i18n", ctx, {}, {
            type: "labels",
            name: "choose_date"
        }, "h").w('"></i><input type="text" style="width: 0;height: 0;border:0;" id="datepicker_fullcalendar" />');
    }
    body_0.__dustBody = !0;
    return body_0;
})(dust);

(function(dust) {
    dust.register("event_basic_form_part", body_0);
    function body_0(chk, ctx) {
        return chk.x(ctx.get([ "uid" ], false), ctx, {
            block: body_1
        }, {}).p("form_element_start", ctx, ctx, {
            for: "summary",
            label: "summary"
        }).w('<input required name="summary" type="text" size="25" maxlength="255" value="').f(ctx.get([ "title" ], false), ctx, "h").w('" class="summary form-control" />').p("form_element_end", ctx, ctx, {}).p("form_element_start", ctx, ctx, {
            for: "location",
            label: "location"
        }).w('<input name="location" type="text" size="25" maxlength="255" value="').f(ctx.get([ "location" ], false), ctx, "h").w('" class="location form-control" />').p("form_element_end", ctx, ctx, {}).p("form_element_start", ctx, ctx, {
            for: "calendar",
            label: "calendar"
        }).w('<select name="calendar" class="form-control"').x(ctx.get([ "fixed_calendar" ], false), ctx, {
            block: body_4
        }, {}).w(">").s(ctx.get([ "calendars" ], false), ctx, {
            block: body_5
        }, {
            current_calendar: ctx.get([ "calendar" ], false)
        }).w("</select>").p("form_element_end", ctx, ctx, {}).w('<div class="generate-iso8601" data-only-date-if-checked="input.allday"><input class="generated" type="hidden" name="start" id="start" />').p("form_element_start", ctx, ctx, {
            for: "start_date",
            label: "startdate"
        }).w('<div class="row"><div class="col-sm-4"><input required name="start_date" type="text" size="15" maxlength="10" value="').f(ctx.get([ "start_date" ], false), ctx, "h").w('"class="start_date date form-control" /></div><div class="col-sm-3"><input required name="start_time" type="text" size="15" maxlength="10" value="').f(ctx.get([ "start_time" ], false), ctx, "h").w('" class="start_time time form-control" /></div></div>').p("form_element_end", ctx, ctx, {}).w('</div><div class="generate-iso8601" data-only-date-if-checked="input.allday"><input class="generated" type="hidden" name="end" id="end">').p("form_element_start", ctx, ctx, {
            for: "end_date",
            label: "enddate"
        }).w('<div class="row"><div class="col-sm-4"><input required name="end_date" type="text" size="15" maxlength="10" value="').f(ctx.get([ "end_date" ], false), ctx, "h").w('" class="end_date date form-control" /></div><div class="col-sm-3"><input required name="end_time" type="text" size="15" maxlength="10" value="').f(ctx.get([ "end_time" ], false), ctx, "h").w('" class="time end_time time form-control" /></div></div>').p("form_element_end", ctx, ctx, {}).w("</div>").p("form_element_start", ctx, ctx, {
            for: "allday",
            label: "alldayform"
        }).w('<div class="checkbox"><label><input type="checkbox" name="allday" class="allday" value="true" ').x(ctx.get([ "allDay" ], false), ctx, {
            block: body_9
        }, {}).w(" /></label></div>").p("form_element_end", ctx, ctx, {}).p("form_element_start", ctx, ctx, {
            for: "description",
            label: "description"
        }).w('<textarea name="description" class="form-control" rows="4">').f(ctx.get([ "description" ], false), ctx, "h").w("</textarea>").p("form_element_end", ctx, ctx, {});
    }
    body_0.__dustBody = !0;
    function body_1(chk, ctx) {
        return chk.w('<input type="hidden" name="modification" value="true" /><input type="hidden" name="uid" value="').f(ctx.get([ "uid" ], false), ctx, "h").w('" /><input type="hidden" name="href" value="').f(ctx.get([ "href" ], false), ctx, "h").w('" /><input type="hidden" name="etag" value="').f(ctx.get([ "etag" ], false), ctx, "h").w('" /><input type="hidden" name="original_calendar" value="').f(ctx.get([ "calendar" ], false), ctx, "h").w('" />').x(ctx.get([ "recurrence_id" ], false), ctx, {
            block: body_2
        }, {}).x(ctx.get([ "fixed_calendar" ], false), ctx, {
            block: body_3
        }, {});
    }
    body_1.__dustBody = !0;
    function body_2(chk, ctx) {
        return chk.w('<input type="hidden" name="recurrence_id" value="').f(ctx.get([ "recurrence_id" ], false), ctx, "h").w('" />');
    }
    body_2.__dustBody = !0;
    function body_3(chk, ctx) {
        return chk.w('<input type="hidden" name="calendar" value="').f(ctx.get([ "calendar" ], false), ctx, "h").w('" />');
    }
    body_3.__dustBody = !0;
    function body_4(chk, ctx) {
        return chk.w(' disabled="disabled"');
    }
    body_4.__dustBody = !0;
    function body_5(chk, ctx) {
        return chk.w('<option value="').f(ctx.get([ "url" ], false), ctx, "h").w('"').h("eq", ctx, {
            block: body_6
        }, {
            key: body_7,
            value: body_8
        }, "h").w(">").f(ctx.get([ "displayname" ], false), ctx, "h").w("</option>");
    }
    body_5.__dustBody = !0;
    function body_6(chk, ctx) {
        return chk.w(' selected="selected"');
    }
    body_6.__dustBody = !0;
    function body_7(chk, ctx) {
        return chk.f(ctx.get([ "calendar" ], false), ctx, "h");
    }
    body_7.__dustBody = !0;
    function body_8(chk, ctx) {
        return chk.f(ctx.get([ "current_calendar" ], false), ctx, "h");
    }
    body_8.__dustBody = !0;
    function body_9(chk, ctx) {
        return chk.w('checked="checked"');
    }
    body_9.__dustBody = !0;
    return body_0;
})(dust);

(function(dust) {
    dust.register("event_delete_recurrent_dialog", body_0);
    function body_0(chk, ctx) {
        return chk.w('<div id="event_delete_dialog">').x(ctx.get([ "first_instance" ], false), ctx, {
            else: body_1,
            block: body_2
        }, {}).w("</div>");
    }
    body_0.__dustBody = !0;
    function body_1(chk, ctx) {
        return chk.w("<p>").h("i18n", ctx, {}, {
            type: "messages",
            name: "info_delete_recurrent_event"
        }, "h").w("</p>");
    }
    body_1.__dustBody = !0;
    function body_2(chk, ctx) {
        return chk.w("<p>").h("i18n", ctx, {}, {
            type: "messages",
            name: "info_delete_recurrent_event_first_instance"
        }, "h").w("</p>");
    }
    body_2.__dustBody = !0;
    return body_0;
})(dust);

(function(dust) {
    dust.register("event_details_popup", body_0);
    function body_0(chk, ctx) {
        return chk.w('<p class="start_and_finish">').f(ctx.get([ "readable_dates" ], false), ctx, "h").w('</p><dl class="dl-horizontal"><dt>').h("i18n", ctx, {}, {
            type: "labels",
            name: "calendar"
        }, "h").w('</dt><dd><i class="calendar_color fa fa-lg fa-square" style="color: ').f(ctx.getPath(false, [ "caldata", "color" ]), ctx, "h").w('"></i>').f(ctx.getPath(false, [ "caldata", "displayname" ]), ctx, "h").w("</dd>").x(ctx.get([ "location" ], false), ctx, {
            block: body_1
        }, {}).x(ctx.get([ "description" ], false), ctx, {
            block: body_2
        }, {}).x(ctx.get([ "rrule" ], false), ctx, {
            block: body_3
        }, {}).s(ctx.get([ "reminders" ], false), ctx, {
            block: body_4
        }, {}).w("</dl>").nx(ctx.get([ "disable_actions" ], false), ctx, {
            block: body_5
        }, {});
    }
    body_0.__dustBody = !0;
    function body_1(chk, ctx) {
        return chk.w("<dt>").h("i18n", ctx, {}, {
            type: "labels",
            name: "location"
        }, "h").w("</dt><dd>").f(ctx.get([ "location" ], false), ctx, "h").w("</dd>");
    }
    body_1.__dustBody = !0;
    function body_2(chk, ctx) {
        return chk.w("<dt>").h("i18n", ctx, {}, {
            type: "labels",
            name: "description"
        }, "h").w("</dt><dd>").f(ctx.get([ "description" ], false), ctx, "h").w("</dd>");
    }
    body_2.__dustBody = !0;
    function body_3(chk, ctx) {
        return chk.w("<dt>").h("i18n", ctx, {}, {
            type: "labels",
            name: "repeat"
        }, "h").w("</dt><dd>").f(ctx.get([ "rrule_explained" ], false), ctx, "h").w("</dd>");
    }
    body_3.__dustBody = !0;
    function body_4(chk, ctx) {
        return chk.w("<dt>").h("i18n", ctx, {}, {
            type: "labels",
            name: "reminder"
        }, "h").w("</dt><dd>").p("reminder_description", ctx, ctx, {}).w("</dd>");
    }
    body_4.__dustBody = !0;
    function body_5(chk, ctx) {
        return chk.w('<div class="actions"><span class="right"><a href="javascript:void(0)" data-event-id="').f(ctx.get([ "id" ], false), ctx, "h").w('" class="modify">').h("i18n", ctx, {}, {
            type: "labels",
            name: "modify"
        }, "h").w('</a></span><span class="left"><a href="javascript:void(0)" data-event-id="').f(ctx.get([ "id" ], false), ctx, "h").w('" class="remove">').h("i18n", ctx, {}, {
            type: "labels",
            name: "delete"
        }, "h").w("</a></span></div>");
    }
    body_5.__dustBody = !0;
    return body_0;
})(dust);

(function(dust) {
    dust.register("event_edit_dialog", body_0);
    function body_0(chk, ctx) {
        return chk.w('<div id="event_edit_dialog">').p("form_open", ctx, ctx, {
            applyclass: "form-horizontal",
            applyid: "event_edit_form"
        }).w('<ul class="nav nav-tabs" role="tablist"><li role="presentation" class="active"><a role="tab" href="#tabs-general" data-toggle="tab"><i class="tab-icon fa fa-tag"></i>').h("i18n", ctx, {}, {
            type: "labels",
            name: "generaloptions"
        }, "h").w('</a></li><li role="presentation"><a role="tab" href="#tabs-recurrence" data-toggle="tab"><i class="tab-icon fa fa-repeat"></i>').h("i18n", ctx, {}, {
            type: "labels",
            name: "repeatoptions"
        }, "h").w('</a></li><li role="presentation"><a role="tab" href="#tabs-reminders" data-toggle="tab"><i class="tab-icon fa fa-bell"></i>').h("i18n", ctx, {}, {
            type: "labels",
            name: "remindersoptions"
        }, "h").w('</a></li><li role="presentation"><a role="tab" href="#tabs-workgroup" data-toggle="tab"><i class="tab-icon fa fa-group"></i>').h("i18n", ctx, {}, {
            type: "labels",
            name: "workgroupoptions"
        }, "h").w('</a></li></ul><div class="tab-content"><div role="tabpanel" class="tab-pane active" id="tabs-general">').p("event_basic_form_part", ctx, ctx, {}).w('</div><div role="tabpanel" class="tab-pane" id="tabs-recurrence">').p("repeat_rule_form", ctx, ctx, {}).w('</div><div role="tabpanel" class="tab-pane" id="tabs-reminders">').p("reminders", ctx, ctx, {}).w('</div><div role="tabpanel" class="tab-pane" id="tabs-workgroup">').p("form_element_start", ctx, ctx, {
            for: "class",
            label: "privacy"
        }).w('<select name="class" type="text" class="form-control"><option value="PUBLIC"').h("eq", ctx, {
            block: body_1
        }, {
            key: body_2,
            value: "PUBLIC"
        }, "h").w(">").h("i18n", ctx, {}, {
            type: "labels",
            name: "public"
        }, "h").w('</option><option value="PRIVATE"').h("eq", ctx, {
            block: body_3
        }, {
            key: body_4,
            value: "PRIVATE"
        }, "h").w(">").h("i18n", ctx, {}, {
            type: "labels",
            name: "private"
        }, "h").w('</option><option value="CONFIDENTIAL"').h("eq", ctx, {
            block: body_5
        }, {
            key: body_6,
            value: "CONFIDENTIAL"
        }, "h").w(">").h("i18n", ctx, {}, {
            type: "labels",
            name: "confidential"
        }, "h").w("</option></select>").p("form_element_end", ctx, ctx, {}).p("form_element_start", ctx, ctx, {
            for: "transp",
            label: "transp"
        }).w('<select name="transp" type="text" class="form-control"><option value="OPAQUE"').h("eq", ctx, {
            block: body_7
        }, {
            key: body_8,
            value: "OPAQUE"
        }, "h").w(">").h("i18n", ctx, {}, {
            type: "labels",
            name: "opaque"
        }, "h").w('</option><option value="TRANSPARENT"').h("eq", ctx, {
            block: body_9
        }, {
            key: body_10,
            value: "TRANSPARENT"
        }, "h").w(">").h("i18n", ctx, {}, {
            type: "labels",
            name: "transparent"
        }, "h").w("</option></select>").p("form_element_end", ctx, ctx, {}).w("</div></div><!-- tab-content -->").p("form_close", ctx, ctx, {}).w("</div>");
    }
    body_0.__dustBody = !0;
    function body_1(chk, ctx) {
        return chk.w(' selected="selected"');
    }
    body_1.__dustBody = !0;
    function body_2(chk, ctx) {
        return chk.f(ctx.get([ "icalendar_class" ], false), ctx, "h");
    }
    body_2.__dustBody = !0;
    function body_3(chk, ctx) {
        return chk.w(' selected="selected"');
    }
    body_3.__dustBody = !0;
    function body_4(chk, ctx) {
        return chk.f(ctx.get([ "icalendar_class" ], false), ctx, "h");
    }
    body_4.__dustBody = !0;
    function body_5(chk, ctx) {
        return chk.w(' selected="selected"');
    }
    body_5.__dustBody = !0;
    function body_6(chk, ctx) {
        return chk.f(ctx.get([ "icalendar_class" ], false), ctx, "h");
    }
    body_6.__dustBody = !0;
    function body_7(chk, ctx) {
        return chk.w(' selected="selected"');
    }
    body_7.__dustBody = !0;
    function body_8(chk, ctx) {
        return chk.f(ctx.get([ "transp" ], false), ctx, "h");
    }
    body_8.__dustBody = !0;
    function body_9(chk, ctx) {
        return chk.w(' selected="selected"');
    }
    body_9.__dustBody = !0;
    function body_10(chk, ctx) {
        return chk.f(ctx.get([ "transp" ], false), ctx, "h");
    }
    body_10.__dustBody = !0;
    return body_0;
})(dust);

(function(dust) {
    dust.register("event_edit_recurrent_dialog", body_0);
    function body_0(chk, ctx) {
        return chk.w('<div id="event_edit_recurrent_dialog"><p>').h("i18n", ctx, {}, {
            type: "messages",
            name: "info_edit_recurrent_event"
        }, "h").w("</p>").x(ctx.get([ "has_exceptions" ], false), ctx, {
            block: body_1
        }, {}).w("</div>");
    }
    body_0.__dustBody = !0;
    function body_1(chk, ctx) {
        return chk.w("<p>").h("i18n", ctx, {}, {
            type: "messages",
            name: "info_base_event_with_exceptions_modification"
        }, "h").w("</p>");
    }
    body_1.__dustBody = !0;
    return body_0;
})(dust);

(function(dust) {
    dust.register("form_close", body_0);
    function body_0(chk, ctx) {
        return chk.w("</form>");
    }
    body_0.__dustBody = !0;
    return body_0;
})(dust);

(function(dust) {
    dust.register("form_element_end", body_0);
    function body_0(chk, ctx) {
        return chk.x(ctx.get([ "input_help" ], false), ctx, {
            block: body_1
        }, {}).w("</div></div>");
    }
    body_0.__dustBody = !0;
    function body_1(chk, ctx) {
        return chk.w('<p class="help-block">').f(ctx.get([ "input_help" ], false), ctx, "h").w("</p>");
    }
    body_1.__dustBody = !0;
    return body_0;
})(dust);

(function(dust) {
    dust.register("form_element_start", body_0);
    function body_0(chk, ctx) {
        return chk.w('<div class="form-group ').f(ctx.get([ "class" ], false), ctx, "h").w('"><label ').x(ctx.get([ "for" ], false), ctx, {
            block: body_1
        }, {}).w('class="col-sm-3 control-label">').h("i18n", ctx, {}, {
            type: "labels",
            name: ctx.get([ "label" ], false)
        }, "h").w('</label><div class="col-sm-9">');
    }
    body_0.__dustBody = !0;
    function body_1(chk, ctx) {
        return chk.w('for="').f(ctx.get([ "for" ], false), ctx, "h").w('"');
    }
    body_1.__dustBody = !0;
    return body_0;
})(dust);

(function(dust) {
    dust.register("form_open", body_0);
    function body_0(chk, ctx) {
        return chk.w('<form action="').f(ctx.getPath(false, [ "frm", "action" ]), ctx, "h").w('" method="').f(ctx.getPath(false, [ "frm", "method" ]), ctx, "h").w('"').x(ctx.get([ "applyclass" ], false), ctx, {
            block: body_1
        }, {}).x(ctx.get([ "applyid" ], false), ctx, {
            block: body_2
        }, {}).w(' accept-charset="utf-8"><input type="hidden" name="').f(ctx.get([ "csrf_token_name" ], false), ctx, "h").w('" value="').f(ctx.get([ "csrf_token_value" ], false), ctx, "h").w('">');
    }
    body_0.__dustBody = !0;
    function body_1(chk, ctx) {
        return chk.w('class="').f(ctx.get([ "applyclass" ], false), ctx, "h").w('"');
    }
    body_1.__dustBody = !0;
    function body_2(chk, ctx) {
        return chk.w(' id="').f(ctx.get([ "applyid" ], false), ctx, "h").w('"');
    }
    body_2.__dustBody = !0;
    return body_0;
})(dust);

(function(dust) {
    dust.register("reminder_description", body_0);
    function body_0(chk, ctx) {
        return chk.f(ctx.get([ "count" ], false), ctx, "h").w(" ").h("select", ctx, {
            block: body_1
        }, {
            key: body_7
        }, "h").w(" ").h("i18n", ctx, {}, {
            type: "labels",
            name: "before_start"
        }, "h");
    }
    body_0.__dustBody = !0;
    function body_1(chk, ctx) {
        return chk.h("eq", ctx, {
            block: body_2
        }, {
            value: "minutes"
        }, "h").h("eq", ctx, {
            block: body_3
        }, {
            value: "hours"
        }, "h").h("eq", ctx, {
            block: body_4
        }, {
            value: "days"
        }, "h").h("eq", ctx, {
            block: body_5
        }, {
            value: "weeks"
        }, "h").h("eq", ctx, {
            block: body_6
        }, {
            value: "months"
        }, "h");
    }
    body_1.__dustBody = !0;
    function body_2(chk, ctx) {
        return chk.h("i18n", ctx, {}, {
            type: "labels",
            name: "minutes"
        }, "h");
    }
    body_2.__dustBody = !0;
    function body_3(chk, ctx) {
        return chk.h("i18n", ctx, {}, {
            type: "labels",
            name: "hours"
        }, "h");
    }
    body_3.__dustBody = !0;
    function body_4(chk, ctx) {
        return chk.h("i18n", ctx, {}, {
            type: "labels",
            name: "days"
        }, "h");
    }
    body_4.__dustBody = !0;
    function body_5(chk, ctx) {
        return chk.h("i18n", ctx, {}, {
            type: "labels",
            name: "weeks"
        }, "h");
    }
    body_5.__dustBody = !0;
    function body_6(chk, ctx) {
        return chk.h("i18n", ctx, {}, {
            type: "labels",
            name: "months"
        }, "h");
    }
    body_6.__dustBody = !0;
    function body_7(chk, ctx) {
        return chk.f(ctx.get([ "unit" ], false), ctx, "h");
    }
    body_7.__dustBody = !0;
    return body_0;
})(dust);

(function(dust) {
    dust.register("reminder_row", body_0);
    function body_0(chk, ctx) {
        return chk.w('<div class="form-group row reminder"><div class="col-md-12"><div class="col-md-2"><input class="form-control" type="text" name="reminders[count][]" value="').x(ctx.get([ "count" ], false), ctx, {
            else: body_1,
            block: body_2
        }, {}).w('"/></div><div class="col-md-4"><select class="form-control" name="reminders[unit][]"><option value="minutes"').h("eq", ctx, {
            block: body_3
        }, {
            key: body_4,
            value: "minutes"
        }, "h").w(">").h("i18n", ctx, {}, {
            type: "labels",
            name: "minutes"
        }, "h").w('</option><option value="hours"').h("eq", ctx, {
            block: body_5
        }, {
            key: body_6,
            value: "hours"
        }, "h").w(">").h("i18n", ctx, {}, {
            type: "labels",
            name: "hours"
        }, "h").w('</option><option value="days"').h("eq", ctx, {
            block: body_7
        }, {
            key: body_8,
            value: "days"
        }, "h").w(">").h("i18n", ctx, {}, {
            type: "labels",
            name: "days"
        }, "h").w('</option><option value="weeks"').h("eq", ctx, {
            block: body_9
        }, {
            key: body_10,
            value: "weeks"
        }, "h").w(">").h("i18n", ctx, {}, {
            type: "labels",
            name: "weeks"
        }, "h").w('</option><option value="months"').h("eq", ctx, {
            block: body_11
        }, {
            key: body_12,
            value: "months"
        }, "h").w(">").h("i18n", ctx, {}, {
            type: "labels",
            name: "months"
        }, "h").w('</option></select></div><div class="col-md-4"><p class="form-control-static">').h("i18n", ctx, {}, {
            type: "labels",
            name: "before_start"
        }, "h").w('</p></div><div class="col-md-2"><p class="form-control-static"><a href="javascript:void(0)" class="remove"><i class="fa fa-remove fa-fw"></i></a></p></div></div></div>');
    }
    body_0.__dustBody = !0;
    function body_1(chk, ctx) {
        return chk.w("0");
    }
    body_1.__dustBody = !0;
    function body_2(chk, ctx) {
        return chk.f(ctx.get([ "count" ], false), ctx, "h");
    }
    body_2.__dustBody = !0;
    function body_3(chk, ctx) {
        return chk.w(' selected="selected"');
    }
    body_3.__dustBody = !0;
    function body_4(chk, ctx) {
        return chk.f(ctx.get([ "unit" ], false), ctx, "h");
    }
    body_4.__dustBody = !0;
    function body_5(chk, ctx) {
        return chk.w(' selected="selected"');
    }
    body_5.__dustBody = !0;
    function body_6(chk, ctx) {
        return chk.f(ctx.get([ "unit" ], false), ctx, "h");
    }
    body_6.__dustBody = !0;
    function body_7(chk, ctx) {
        return chk.w(' selected="selected"');
    }
    body_7.__dustBody = !0;
    function body_8(chk, ctx) {
        return chk.f(ctx.get([ "unit" ], false), ctx, "h");
    }
    body_8.__dustBody = !0;
    function body_9(chk, ctx) {
        return chk.w(' selected="selected"');
    }
    body_9.__dustBody = !0;
    function body_10(chk, ctx) {
        return chk.f(ctx.get([ "unit" ], false), ctx, "h");
    }
    body_10.__dustBody = !0;
    function body_11(chk, ctx) {
        return chk.w(' selected="selected"');
    }
    body_11.__dustBody = !0;
    function body_12(chk, ctx) {
        return chk.f(ctx.get([ "unit" ], false), ctx, "h");
    }
    body_12.__dustBody = !0;
    return body_0;
})(dust);

(function(dust) {
    dust.register("reminders", body_0);
    function body_0(chk, ctx) {
        return chk.w('<p class="text-center" id="no_reminders">').h("i18n", ctx, {}, {
            type: "messages",
            name: "info_noreminders"
        }, "h").w('</p><div class="text-center" id="reminders">').s(ctx.get([ "reminders" ], false), ctx, {
            block: body_1
        }, {}).w('</div><div class="text-right"><a href="javascript:void(0)" id="new_reminder"><i class="fa fa-plus"></i> ').h("i18n", ctx, {}, {
            type: "labels",
            name: "add_reminder"
        }, "h").w('</a></div><hr><p><small class="alert">').h("i18n", ctx, {}, {
            type: "messages",
            name: "info_reminders_agendav_support"
        }, "h").w("</small></p>");
    }
    body_0.__dustBody = !0;
    function body_1(chk, ctx) {
        return chk.p("reminder_row", ctx, ctx, {});
    }
    body_1.__dustBody = !0;
    return body_0;
})(dust);

(function(dust) {
    dust.register("repeat_rule_form", body_0);
    function body_0(chk, ctx) {
        return chk.w('<p id="repeat_warning_rrule_unreproducible" class="text-warning">').h("i18n", ctx, {}, {
            type: "messages",
            name: "info_rrule_not_reproducible"
        }, "h").w("</p>").x(ctx.get([ "fixed_repeat_rule" ], false), ctx, {
            block: body_1
        }, {}).w('<input type="hidden" name="fixed_repeat_rule" id="fixed_repeat_rule" value="').f(ctx.get([ "fixed_repeat_rule" ], false), ctx, "h").w('"><input type="hidden" name="rrule" id="rrule" value="').f(ctx.get([ "rrule" ], false), ctx, "h").w('"><input type="hidden" name="rrule_original" id="rrule_original" value="').f(ctx.get([ "rrule" ], false), ctx, "h").w('">').nx(ctx.get([ "fixed_repeat_rule" ], false), ctx, {
            block: body_2
        }, {});
    }
    body_0.__dustBody = !0;
    function body_1(chk, ctx) {
        return chk.w('<p id="repeat_warning_rrule_fixed" class="text-warning">').h("i18n", ctx, {}, {
            type: "messages",
            name: "info_rrule_protected"
        }, "h").w("</p>").p("form_element_start", ctx, ctx, {
            for: "",
            label: "repeat_explanation"
        }).w('<p class="form-control-static" id="fixed_repeat_rule_explanation"></p>').p("form_element_end", ctx, ctx, {});
    }
    body_1.__dustBody = !0;
    function body_2(chk, ctx) {
        return chk.p("form_element_start", ctx, ctx, {
            for: "frequency",
            label: "repeat"
        }).w('<select name="repeat_frequency" class="form-control" id="repeat_frequency"><option value="-1">').h("i18n", ctx, {}, {
            type: "labels",
            name: "repeatno"
        }, "h").w('</option><option value="').f(ctx.get([ "daily" ], false), ctx, "h").w('">').h("i18n", ctx, {}, {
            type: "labels",
            name: "repeatdaily"
        }, "h").w('</option><option value="').f(ctx.get([ "weekly" ], false), ctx, "h").w('">').h("i18n", ctx, {}, {
            type: "labels",
            name: "repeatweekly"
        }, "h").w('</option><option value="').f(ctx.get([ "monthly" ], false), ctx, "h").w('">').h("i18n", ctx, {}, {
            type: "labels",
            name: "repeatmonthly"
        }, "h").w('</option><option value="').f(ctx.get([ "yearly" ], false), ctx, "h").w('">').h("i18n", ctx, {}, {
            type: "labels",
            name: "repeatyearly"
        }, "h").w("</option></select>").p("form_element_end", ctx, ctx, {}).w('<div class="container_repeat_options">').p("form_element_start", ctx, ctx, {
            for: "interval",
            label: "every"
        }).w('<div class="col-md-3"><select name="repeat_interval" class="secondary form-control" id ="repeat_interval">').s(ctx.get([ "numbers1to31" ], false), ctx, {
            block: body_3
        }, {}).w("</select></div>").p("form_element_end", ctx, ctx, {}).p("form_element_start", ctx, ctx, {
            for: "byday",
            label: "repeat_by_day",
            class: "container_repeat_by_day"
        }).w('<label class="checkbox-inline"><input class="secondary" type="checkbox" name="repeat_by_day" value="sunday"> ').h("i18n", ctx, {}, {
            type: "labels",
            name: "sunday_short"
        }, "h").w('</label><label class="checkbox-inline"><input class="secondary" type="checkbox" name="repeat_by_day" value="monday"> ').h("i18n", ctx, {}, {
            type: "labels",
            name: "monday_short"
        }, "h").w('</label><label class="checkbox-inline"><input class="secondary" type="checkbox" name="repeat_by_day" value="tuesday"> ').h("i18n", ctx, {}, {
            type: "labels",
            name: "tuesday_short"
        }, "h").w('</label><label class="checkbox-inline"><input class="secondary" type="checkbox" name="repeat_by_day" value="wednesday"> ').h("i18n", ctx, {}, {
            type: "labels",
            name: "wednesday_short"
        }, "h").w('</label><label class="checkbox-inline"><input class="secondary" type="checkbox" name="repeat_by_day" value="thursday"> ').h("i18n", ctx, {}, {
            type: "labels",
            name: "thursday_short"
        }, "h").w('</label><label class="checkbox-inline"><input class="secondary" type="checkbox" name="repeat_by_day" value="friday"> ').h("i18n", ctx, {}, {
            type: "labels",
            name: "friday_short"
        }, "h").w('</label><label class="checkbox-inline"><input class="secondary" type="checkbox" name="repeat_by_day" value="saturday"> ').h("i18n", ctx, {}, {
            type: "labels",
            name: "saturday_short"
        }, "h").w("</label>").p("form_element_end", ctx, ctx, {}).p("form_element_start", ctx, ctx, {
            for: "repeat_by_month_day",
            label: "repeat_by_month_day",
            class: "container_repeat_by_month_day"
        }).w('<div class="col-md-3"><select name="repeat_by_month_day" class="secondary form-control" id="repeat_by_month_day"><option value="">-</option>').s(ctx.get([ "numbers1to31" ], false), ctx, {
            block: body_4
        }, {}).w("</select></div>").p("form_element_end", ctx, ctx, {}).p("form_element_start", ctx, ctx, {
            for: "",
            label: "ends",
            class: "container_repeat_ends"
        }).w('<div class="row"><div class="col-md-5"><select name="repeat_ends" class="form-control" id="repeat_ends"><option value="never">').h("i18n", ctx, {}, {
            type: "labels",
            name: "never"
        }, "h").w('</option><option value="after">').h("i18n", ctx, {}, {
            type: "labels",
            name: "after"
        }, "h").w('</option><option value="date">').h("i18n", ctx, {}, {
            type: "labels",
            name: "choose_date"
        }, "h").w('</option></select></div><div class="col-md-5 container_repeat_ends_options"><div class="container_repeat_count"><div class="col-md-6"><select name="repeat_count" class="secondary form-control" id="repeat_count">').s(ctx.get([ "numbers1to31" ], false), ctx, {
            block: body_5
        }, {}).w('</select></div><div class="col-md-6"><p class="form-control-static">').h("i18n", ctx, {}, {
            type: "labels",
            name: "occurrences"
        }, "h").w('</p></div></div><!-- container_recurence_count --><div class="generate-iso8601 container_repeat_until"><input type="hidden" class="generated" name="repeat_until_date" /><input type="text" name="repeat_until" class="date form-control" id="repeat_until" maxlength="10" size="15"/></div><!-- container_repeat_until --></div><!-- container_repeat_ends_options, inside container_repeat_ends --></div><!-- row, inside container_repeat_ends -->').p("form_element_end", ctx, ctx, {}).p("form_element_start", ctx, ctx, {
            for: "",
            label: "repeat_explanation"
        }).w('<p class="form-control-static" id="repeat_explanation"></p>').p("form_element_end", ctx, ctx, {}).w("</div>");
    }
    body_2.__dustBody = !0;
    function body_3(chk, ctx) {
        return chk.w('<option value="').f(ctx.getPath(true, []), ctx, "h").w('">').f(ctx.getPath(true, []), ctx, "h").w("</option>");
    }
    body_3.__dustBody = !0;
    function body_4(chk, ctx) {
        return chk.w('<option value="').f(ctx.getPath(true, []), ctx, "h").w('">').f(ctx.getPath(true, []), ctx, "h").w("</option>");
    }
    body_4.__dustBody = !0;
    function body_5(chk, ctx) {
        return chk.w('<option value="').f(ctx.getPath(true, []), ctx, "h").w('">').f(ctx.getPath(true, []), ctx, "h").w("</option>");
    }
    body_5.__dustBody = !0;
    return body_0;
})(dust);
